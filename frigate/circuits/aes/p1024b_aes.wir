#parties 2
#define Nr 10 
#define nExes 1024 /*NOTE: need update struct_t pinit128_t too */


typedef uint_t 8 uint8_t
typedef uint_t 16 uint16_t
typedef uint_t 16*(Nr+1) uintKE_t

typedef struct_t uinit128_t
{
    uint8_t a[16];
}


typedef struct_t pinit128_t
{
    uinit128_t a[nExes]; /*2: number repetition*/ 
}

#input 1 pinit128_t
#input 2 pinit128_t
#output 1 pinit128_t
#output 2 pinit128_t

function uint8_t sbox(uint8_t idx)
{
return idx; /*use Yale sbox here*/
}


function uinit128_t[11] KeyExpansion(uinit128_t key)
{
uinit128_t RoundKey[11];
uint8_t temp[4];

uint8_t Rcon[11]={141,1,2,4,8,16,32,64,128, 27,54 };


/* The first round key is the key itself.*/
	
for(uint8_t j=0; j < 16; j++)
	     { 
		   RoundKey[0].a[j]=key.a[j];
	    }


/*  All other round keys are found from the previous round keys. */
for(uint8_t i=1; i < 11; i++)
  {    
	/* 1st 4 bytes: divided by 4: 16 17 18 19 
	   for(uint8_t j=0; j < 4; j++)
	     { 
		   temp[j]=RoundKey[i-1][12+j];
	    }

	*/
	
	/*Function RotWord() 
        k = temp[0];
        temp[0] = temp[1];
        temp[1] = temp[2];
        temp[2] = temp[3];
        temp[3] = k;
	  */

	/* Function Subword() */
        temp[0] = sbox(RoundKey[i-1].a[13]);
        temp[1] = sbox(RoundKey[i-1].a[14]);
        temp[2] = sbox(RoundKey[i-1].a[15]);
        temp[3] = sbox(RoundKey[i-1].a[12]);

         temp[0] =  temp[0] ^ Rcon[i];

 	for(uint8_t j=0; j < 4; j++)
	     { 
		   RoundKey[i].a[j]=RoundKey[i-1].a[j]^temp[j];
	    }	

/* other bytes 20 ---31*/

 	for(uint8_t j=1; j < 4; j++)
	     { 
		RoundKey[i].a[4*j]=RoundKey[i-1].a[4*j]^RoundKey[i].a[4*(j-1)];
		RoundKey[i].a[4*j+1]=RoundKey[i-1].a[4*j+1]^RoundKey[i].a[4*(j-1)+1];
		RoundKey[i].a[4*j+2]=RoundKey[i-1].a[4*j+2]^RoundKey[i].a[4*(j-1)+2];
		RoundKey[i].a[4*j+3]=RoundKey[i-1].a[4*j+3]^RoundKey[i].a[4*(j-1)+3];
	}
 }

return RoundKey;
}



function uinit128_t SubBytes(uinit128_t buf)
{
    for(uint8_t i=0;i<16;i++)
   {
       buf.a[i] = sbox(buf.a[i]);
   }
   return buf;
} 


function uinit128_t ShiftRows(uinit128_t buf)
{
    
	uint8_t i;
	/*shift 2nd row*/
	i=buf.a[1];
	buf.a[1]=buf.a[5];
	buf.a[5]=buf.a[9];
	buf.a[9]=buf.a[13];
	buf.a[13]=i;

	/*shift 3rd row*/
	i=buf.a[2];
	buf.a[2]=buf.a[10];
	buf.a[10]=i;

	i=buf.a[6];
	buf.a[6]=buf.a[14];
	buf.a[14]=i;

	/*shift 4th row*/
	i=buf.a[3];
	buf.a[3]=buf.a[15];
	buf.a[15]=buf.a[11];
	buf.a[11]=buf.a[7];
	buf.a[7]=i;
return buf;
} 



function uinit128_t MixColumns(uinit128_t buf)
{
    for(uint8_t i=0; i < 4; i++) {
        uint8_t a;
        uint8_t b[4];
	uint8_t h;
        for(uint8_t c=0;c<4;c++) {
                b[c] = (buf.a[4*i+c] << 1);

		h=(buf.a[4*i+c]>>7);
		b[c]{0}=b[c]{0}^(h{0});
		b[c]{1}=b[c]{1}^(h{0});
		b[c]{3}=b[c]{3}^(h{0});
		b[c]{4}=b[c]{4}^(h{0});
			
        }
	a=buf.a[4*i] ^ buf.a[4*i+1] ^ buf.a[4*i+2] ^ buf.a[4*i+3];

        buf.a[4*i] = b[0] ^ b[1] ^ a ^ buf.a[4*i]; /* 2 * a0 + a3 + a2 + 3 * a1 */
        buf.a[4*i+1] = b[1] ^ b[2] ^ a ^ buf.a[4*i+1]; /* 2 * a1 + a0 + a3 + 3 * a2 */
        buf.a[4*i+2] = b[2] ^ b[3] ^ a ^ buf.a[4*i+2]; /* 2 * a2 + a1 + a0 + 3 * a3 */
        buf.a[4*i+3] = b[3]  ^ b[0] ^ a ^ buf.a[4*i+3]; /* 2 * a3 + a2 + a1 + 3 * a0 */
    }

return buf;
} 


function uinit128_t AddRoundKey(uinit128_t buf, uinit128_t key)
{

for(uint8_t i=0; i < 16; i++) {
buf.a[i]=buf.a[i]^key.a[i];
}
return buf;
} 

function uinit128_t getoutput(uinit128_t buf)
{

return buf;
} 

function uinit128_t Round(uinit128_t buff, uinit128_t keyEx)
{
	buff=SubBytes(buff);
	buff=ShiftRows(buff);
	buff=MixColumns(buff);
        buff=AddRoundKey(buff,keyEx);

return buff;
}

function uinit128_t AfterRound(uinit128_t buff, uinit128_t keyEx)
{
	buff=SubBytes(buff);
	buff=ShiftRows(buff); 
        buff=AddRoundKey(buff,keyEx);

return buff;
}

function void main()
{

	

	 for(uint16_t p=0;p<nExes;p++) /*parallel*/
		{
		
		uinit128_t buff;
		uinit128_t keyEx[11];
		keyEx=KeyExpansion(input2.a[p]);
		buff=AddRoundKey(input1.a[p],keyEx[0]);


		 for(uint8_t i=1;i<Nr;i++)
		{
			buff=SubBytes(buff);
			buff=ShiftRows(buff);
			buff=MixColumns(buff);
		        buff=AddRoundKey(buff,keyEx[i]);
		}		
		
	 
		buff=SubBytes(buff);
			buff=ShiftRows(buff);
	 
		   output1.a[p]=AddRoundKey(buff,keyEx[Nr]);
	}

}
