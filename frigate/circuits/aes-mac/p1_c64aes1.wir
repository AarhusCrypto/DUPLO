#define wiresize 128
#parties 2
#define Nr 10
#define Nb 4
#define Nk 4
#define nExes 1  /*NOTE: number executions*/
#define nAES 64  /*NOTE: number of 16 aes*/

#define sizeComp 1   /*NOTE: size of compenents */
#define nComp nAES/sizeComp  /*NOTE: number of components that split 16aes into component size sizeComp aes  */



typedef uint_t 8 uint8_t
typedef uint_t 16 uint16_t
typedef uint_t 16*(Nr+1) uintKE_t

typedef struct_t uinit128_t
{
    uint8_t a[16];
}

typedef struct_t cbcinit128_t
{
    uinit128_t c[nComp][sizeComp];
}


typedef struct_t pinit128_t
{
    uinit128_t a[nExes]; /*2: number repetition*/ 
}

typedef struct_t pcinit128_t
{
    cbcinit128_t a[nExes]; /*2: number repetition*/ 
}

#input 1 pcinit128_t
#input 2 pinit128_t
#output 1 pinit128_t
#output 2 pinit128_t

function uint8_t sbox(uint8_t idx)
{
	return idx; /*use Yale sbox here*/
}


function uinit128_t[11] KeyExpansion(uinit128_t key)
{
	uinit128_t RoundKey[11];
	uint8_t temp[4];

	uint8_t Rcon[11]={141,1,2,4,8,16,32,64,128, 27,54 };


/* The first round key is the key itself.*/
	
	for(uint8_t j=0; j < 16; j++)
	{ 
		RoundKey[0].a[j]=key.a[j];
	}


/*  All other round keys are found from the previous round keys. */
	for(uint8_t i=1; i < 11; i++)
	  {    
		/* 1st 4 bytes: divided by 4: 16 17 18 19 
		   for(uint8_t j=0; j < 4; j++)
			 { 
			   temp[j]=RoundKey[i-1][12+j];
			}

		*/
		
		/*Function RotWord() 
			k = temp[0];
			temp[0] = temp[1];
			temp[1] = temp[2];
			temp[2] = temp[3];
			temp[3] = k;
		  */

		/* Function Subword() */
			temp[0] = sbox(RoundKey[i-1].a[13]);
			temp[1] = sbox(RoundKey[i-1].a[14]);
			temp[2] = sbox(RoundKey[i-1].a[15]);
			temp[3] = sbox(RoundKey[i-1].a[12]);

			 temp[0] =  temp[0] ^ Rcon[i];

		for(uint8_t j=0; j < 4; j++)
			 { 
			   RoundKey[i].a[j]=RoundKey[i-1].a[j]^temp[j];
			}	

	/* other bytes 20 ---31*/

		for(uint8_t j=1; j < 4; j++)
			 { 
			RoundKey[i].a[4*j]=RoundKey[i-1].a[4*j]^RoundKey[i].a[4*(j-1)];
			RoundKey[i].a[4*j+1]=RoundKey[i-1].a[4*j+1]^RoundKey[i].a[4*(j-1)+1];
			RoundKey[i].a[4*j+2]=RoundKey[i-1].a[4*j+2]^RoundKey[i].a[4*(j-1)+2];
			RoundKey[i].a[4*j+3]=RoundKey[i-1].a[4*j+3]^RoundKey[i].a[4*(j-1)+3];
		}
	 }

	return RoundKey;
}



function uinit128_t SubBytes(uinit128_t buf)
{
    for(uint8_t i=0;i<16;i++)
   {
       buf.a[i] = sbox(buf.a[i]);
   }
   return buf;
} 


function uinit128_t ShiftRows(uinit128_t buf)
{
    
	uint8_t i;
	/*shift 2nd row*/
	i=buf.a[1];
	buf.a[1]=buf.a[5];
	buf.a[5]=buf.a[9];
	buf.a[9]=buf.a[13];
	buf.a[13]=i;

	/*shift 3rd row*/
	i=buf.a[2];
	buf.a[2]=buf.a[10];
	buf.a[10]=i;

	i=buf.a[6];
	buf.a[6]=buf.a[14];
	buf.a[14]=i;

	/*shift 4th row*/
	i=buf.a[3];
	buf.a[3]=buf.a[15];
	buf.a[15]=buf.a[11];
	buf.a[11]=buf.a[7];
	buf.a[7]=i;
	return buf;
} 



function uinit128_t MixColumns(uinit128_t buf)
{
    for(uint8_t i=0; i < 4; i++) {
        uint8_t a;
        uint8_t b[4];
		uint8_t h;
		
        for(uint8_t c=0;c<4;c++) {
            b[c] = (buf.a[4*i+c] << 1);
			h=(buf.a[4*i+c]>>7);
			b[c]{0}=b[c]{0}^(h{0});
			b[c]{1}=b[c]{1}^(h{0});
			b[c]{3}=b[c]{3}^(h{0});
			b[c]{4}=b[c]{4}^(h{0});			
        }
		a=buf.a[4*i] ^ buf.a[4*i+1] ^ buf.a[4*i+2] ^ buf.a[4*i+3];

        buf.a[4*i] = b[0] ^ b[1] ^ a ^ buf.a[4*i]; /* 2 * a0 + a3 + a2 + 3 * a1 */
        buf.a[4*i+1] = b[1] ^ b[2] ^ a ^ buf.a[4*i+1]; /* 2 * a1 + a0 + a3 + 3 * a2 */
        buf.a[4*i+2] = b[2] ^ b[3] ^ a ^ buf.a[4*i+2]; /* 2 * a2 + a1 + a0 + 3 * a3 */
        buf.a[4*i+3] = b[3]  ^ b[0] ^ a ^ buf.a[4*i+3]; /* 2 * a3 + a2 + a1 + 3 * a0 */
    }

	return buf;
} 


function uinit128_t AddRoundKey(uinit128_t buf, uinit128_t key)
{
	for(uint8_t i=0; i < 16; i++) {
	buf.a[i]=buf.a[i]^key.a[i];
	}
	return buf;
} 


function uinit128_t Round(uinit128_t buff, uinit128_t keyEx)
{
	buff=SubBytes(buff);
	buff=ShiftRows(buff);
	buff=MixColumns(buff);
    buff=AddRoundKey(buff,keyEx);

	return buff;
}

function uinit128_t AfterRound(uinit128_t buff, uinit128_t keyEx)
{
	buff=SubBytes(buff);
	buff=ShiftRows(buff); 
    buff=AddRoundKey(buff,keyEx);

return buff;
}

function uinit128_t Rounds(uinit128_t inp1, uinit128_t keyEx[11])
{
	uinit128_t buff;
	buff=AddRoundKey(inp1,keyEx[0]);
	
	for(uint8_t i=1;i<Nr;i++)
	{
		buff=SubBytes(buff);
		buff=ShiftRows(buff);
		buff=MixColumns(buff);
		buff=AddRoundKey(buff,keyEx[i]);
	}		
	 
	buff=SubBytes(buff);
	buff=ShiftRows(buff); 
	buff=AddRoundKey(buff,keyEx[Nr]);
	return buff;
}

function uinit128_t fAES(uinit128_t inp1, uinit128_t inp2, uinit128_t prevCipher)
{
	uinit128_t buff;
	uinit128_t keyEx[11];
	keyEx=KeyExpansion(inp2);
	
	buff=Rounds(inp1,keyEx);
	
	for(uint8_t i=0; i < 16; i++) {
		buff.a[i]=buff.a[i]^prevCipher.a[i];
	}	
	return buff;
}

function uinit128_t fAESd(uinit128_t inp1[sizeComp], uinit128_t inp2, uinit128_t prevCipher)
{
	
	for(uint8_t d=0;d<sizeComp;d++) /*NOTE: size of compenents */
		{			
				prevCipher=fAES(inp1[d],inp2, prevCipher);
		}	
	return prevCipher;
}

function uinit128_t getZero(uinit128_t inp1)
{
	uinit128_t buff;
	for(uint8_t i=0; i < 16; i++) {
		buff.a[i]=0;
	}	
	return buff;
}

function void main()
{	
		uinit128_t cipher[nExes][nComp]; /*NOTE: our Duplo only works when solder wires are not overwritten, so we use diffirent variables for each time components called*/
		cipher[0][0]=getZero(input2.a[0]);
		
		 for(uint16_t p1=0;p1<nExes;p1++) /*NOTE: number executions*/
		{			
			cipher[p1][1]=fAESd(input1.a[p1].c[0],input2.a[p1], cipher[0][0]);
			
			for(uint8_t r=1;r<nComp-1;r++) /*NOTE: number of components that split 16aes into component size sizeComp aes  */
			{			
				cipher[p1][r+1]=fAESd(input1.a[p1].c[r],input2.a[p1], cipher[p1][r]);
			}		
			output1.a[p1]=fAESd(input1.a[p1].c[nComp-1],input2.a[p1], cipher[p1][nComp-1]);
		}

}
