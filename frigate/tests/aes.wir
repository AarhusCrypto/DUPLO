#define wiresize 64
#define countersize 7 /* enough to count up to wiresize, unsigned*/
#define iterations wiresize/32##countersize

typedef uint_t 8 uint8_t

#input 1 uint8_t
#input 2 uint8_t
#output 1 uint8_t

#define Nk 4
#define Nr 10
#define Nb 4

#parties 2

typedef struct_t aes128_context
{
        uint8_t key[32]; 
        uint8_t enckey[16]; 
}



function void getSBoxValue(uint8_t b)
{
uint8_t a[256]={99,124,119,123,242,107,111,197,48,1,103,43,254,215,171,118,
	        202, 130, 201, 125, 250, 89, 71, 240, 173, 212, 162, 175, 156, 164, 114, 192,
                182,253,147,38,54,63,247,204, 52,165,229,241, 113, 216, 49, 21,
		4, 199, 35, 195, 24, 150, 5, 154, 7, 18, 128, 226, 235, 39, 178, 117,
		9, 131, 44, 26, 27, 110, 90, 160, 82, 59, 214, 179, 41, 227, 47, 132,
		83, 209, 0, 237, 32, 252, 177, 91, 106, 203, 190, 57, 74, 76, 88, 207,
		208, 239, 170, 251, 67, 77, 51, 133, 69, 249, 2, 127, 80, 60, 159, 168,
		81, 163, 64, 143, 146, 157, 56, 245, 188, 182, 218, 33, 16, 255, 243, 210,
		205, 12, 19, 236, 95, 151, 68, 23, 196, 167, 126, 61, 100, 93, 25, 115,
		96, 129, 79, 220, 34, 42, 144, 136, 70, 238, 184, 20, 22, 94, 11, 219,
		224, 50, 58, 10, 73, 6, 36, 92, 194, 211, 172, 98, 145, 149, 228, 121,
		231, 200, 55, 109, 141, 213, 78, 169, 108, 86, 244, 234, 101, 122, 174, 8,
		186, 120, 37, 46, 28, 166, 180, 198, 232, 221, 116, 31, 75, 189, 139, 138,
		112, 62, 181, 102, 72, 3, 246, 14, 97, 53, 87, 185, 134, 193, 29, 158,
		225, 248, 152, 17, 105, 217, 142, 148, 155, 30, 135, 233, 206, 85, 40, 223,
		140, 161, 137, 13, 191, 230, 66, 104, 65, 153, 45, 15, 176, 84, 187, 22};
  
  
}


function uint8_t[240] KeyExpansion(uint8_t Key[32])
{
       uint8_t getSBoxValue[256]={99,124,119,123,242,107,111,197,48,1,103,43,254,215,171,118,
	        202, 130, 201, 125, 250, 89, 71, 240, 173, 212, 162, 175, 156, 164, 114, 192,
                182,253,147,38,54,63,247,204, 52,165,229,241, 113, 216, 49, 21,
		4, 199, 35, 195, 24, 150, 5, 154, 7, 18, 128, 226, 235, 39, 178, 117,
		9, 131, 44, 26, 27, 110, 90, 160, 82, 59, 214, 179, 41, 227, 47, 132,
		83, 209, 0, 237, 32, 252, 177, 91, 106, 203, 190, 57, 74, 76, 88, 207,
		208, 239, 170, 251, 67, 77, 51, 133, 69, 249, 2, 127, 80, 60, 159, 168,
		81, 163, 64, 143, 146, 157, 56, 245, 188, 182, 218, 33, 16, 255, 243, 210,
		205, 12, 19, 236, 95, 151, 68, 23, 196, 167, 126, 61, 100, 93, 25, 115,
		96, 129, 79, 220, 34, 42, 144, 136, 70, 238, 184, 20, 22, 94, 11, 219,
		224, 50, 58, 10, 73, 6, 36, 92, 194, 211, 172, 98, 145, 149, 228, 121,
		231, 200, 55, 109, 141, 213, 78, 169, 108, 86, 244, 234, 101, 122, 174, 8,
		186, 120, 37, 46, 28, 166, 180, 198, 232, 221, 116, 31, 75, 189, 139, 138,
		112, 62, 181, 102, 72, 3, 246, 14, 97, 53, 87, 185, 134, 193, 29, 158,
		225, 248, 152, 17, 105, 217, 142, 148, 155, 30, 135, 233, 206, 85, 40, 223,
		140, 161, 137, 13, 191, 230, 66, 104, 65, 153, 45, 15, 176, 84, 187, 22};

	uint8_t RoundKey[240];
        uint8_t temp[4];
        uint8_t k;
	
	for(uint8_t i=0;i<Nk;i++) /*The first round key is the key itself*/
	{
		RoundKey[i*4]=Key[i*4];
		RoundKey[i*4+1]=Key[i*4+1];
		RoundKey[i*4+2]=Key[i*4+2];
		RoundKey[i*4+3]=Key[i*4+3];
	}

       for(uint8_t i=4; i < (Nb * (Nr+1)); i++)
	{
		for(uint8_t j=0;j<4;j++)
		{
		    temp[j]=RoundKey[(i-1) * 4 + j];
		}	
		if (i % Nk == 0)
		{
			/* This function rotates the 4 bytes in a word to the left once. [a0,a1,a2,a3] becomes [a1,a2,a3,a0] */

	                /*Function RotWord()*/
			k = temp[0];
			temp[0] = temp[1];
			temp[1] = temp[2];
			temp[2] = temp[3];
			temp[3] = k;

			/* SubWord() is a function that takes a four-byte input word and applies the S-box to each of the four bytes to produce an output word.*/
			/* Function Subword()*/
			temp[0]=getSBoxValue[k];
			
			

		}	
	}

return RoundKey;
}

function void main()
{
uint8_t c[256];
}
