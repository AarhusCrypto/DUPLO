#define wiresize 32
#define countersize 15 /* enough to count up to wiresize, unsigned*/
#define iterations wiresize/32##countersize

#parties 2

typedef uint_t wiresize value_int
typedef uint_t countersize counter_int
typedef uint_t 32 int32

#input 1 value_int
#output 1 counter_int
#input 2 value_int
#output 2 counter_int

function int32 popcount32(int32 y) {
int32 x = y - ((y >> 1) & 1431655765); /* 0x55555555 */
x = (x & 858993459) + ((x >> 2) & 858993459); /* 0x33333333 */
x = (x + (x >> 4)) & 252645135; /* 0x0f0f0f0f */
x = x + (x >> 8);
x = x + (x >> 16);
return x & 63;
}

function void main()
{
counter_int dist = 0;
value_int hamming = input1 ^ input2;

for(counter_int i=0; i<iterations; i++) /* wiresize / 32 */
{
dist = dist + popcount32( hamming{i*32:32} ){0:countersize};

}
output1 = dist;
output2 = dist;
}
