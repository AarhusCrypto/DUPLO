#define testsize 32
#define numtests 10500-41+186 +6+16*16+16*16*4+23*3+1024+256+256+128*10*2+818+256+512+2146+3840 + (256*13+2*15*16)*2+16+16+184*2+256*2-34   + 1984 + 2
#parties 2

typedef int_t 1 bool
typedef int_t 2 supershort
typedef int_t 4 short
typedef int_t 8 shortx2
typedef int_t 16 shortx3
typedef int_t testsize int
typedef int_t numtests resultint
typedef int_t 128 largeint

#input 1 int
#output 1 resultint
#input 2 teststruct2
#output 2 teststruct2

#include "includetest2.wir"


function bool MUB(bool b){return b;}

typedef struct_t returntype
{
    shortx2 a;
    shortx2 b;
    shortx2 c;
    shortx2 d;
}


function returntype permute(shortx2 a,shortx2 b,shortx2 c,shortx2 d, shortx2 permu)
{
    returntype tr;
    tr.a = a;
    tr.b = b;
    tr.c = c;
    tr.d = d;

    shortx2 temp;

    if(permu{0})
    {
        temp = tr.a;
        tr.a = tr.b;
        tr.b = temp;
    }
    if(permu{1})
    {
        temp = tr.a;
        tr.a = tr.c;
        tr.c = temp;
    }
    if(permu{2})
    {
        temp = tr.a;
        tr.a = tr.d;
        tr.d = temp;
    }
    if(permu{3})
    {
        temp = tr.b;
        tr.b = tr.c;
        tr.c = temp;
    }
    if(permu{4})
    {
        temp = tr.b;
        tr.b = tr.d;
        tr.d = temp;
    }
    if(permu{5})
    {
        temp = tr.c;
        tr.c = tr.d;
        tr.d = temp;
    }
    return tr;
}



function int makeUnknown(int param)
{
    return param;
}

function largeint makeUnknownLI(largeint param)
{
return param;
}

function short makeUnknown4(short param)
{
return param;
}

function shortx2 makeUnknownShortx2(shortx2 param)
{
    return param;
}

function bool makeBoolUnknown(bool b)
{
return b;
}

function void main()
{
    int val = 10;
    val = makeUnknown(val);

int test=0;

    /* == tests  first since we use the == operator to check each one later*/
    output1{test++} = val == 10;
    output1{test++} = val == val;
    output1{test++} = val == (val + (-1 +1) );
    output1{test++} = 10 == 10;
    output1{test++} = 10 == val;
    output1{test++} = 10 == (val + (-1 +1) );

    output1{test++} = 10 == val;
    output1{test++} = val == val;
    output1{test++} = (val + (-1 +1) ) == val;
    output1{test++} = 10 == val;
    output1{test++} = val == val;
    output1{test++} = (val + (-1 +1) ) == val;

    val = 9;
    val = makeUnknown(val);

    output1{test++} = (val == 10) == 0;
    output1{test++} = (val-1 == (val -1 +1 )) == 0;
    output1{test++} = (10 == 9) == 0;
    output1{test++} = (10 == val) == 0;
    output1{test++} = (10 == (val -1 +1 )) == 0;

    output1{test++} = (10 == val) == 0;
    output1{test++} = ((val -1 +1 ) == val-1) == 0;
    output1{test++} = (10 == val) == 0;
    output1{test++} = (val == val-1) == 0;
    output1{test++} = ((val -1 +1 ) == val-1) == 0;

    output1{test++} = 100 == 100;
    output1{test++} = (100 == 101292)==0;
    output1{test++} = 5157 == 5157;
    output1{test++} = (428434 == 498573)==0;
    output1{test++} = 1919 == 1919;
    output1{test++} = (12323 == 3412)==0;
    output1{test++} = 5718 == 5718;
    output1{test++} = (234234 == 345)==0;
    output1{test++} = 5719 == 5719;
    output1{test++} = (2356 == 123987)==0;
    output1{test++} = 8192 == 8192;
    output1{test++} = (1 == 2)==0;
    output1{test++} = 101 == 101;
    output1{test++} = (16 == 8)==0;

    output1{test++} = 100+1 == 100+1;
    output1{test++} = (100+1 == 101292+1)==0;
    output1{test++} = 5157+1 == 5157+1;
    output1{test++} = (428434+1 == 498573+1)==0;
    output1{test++} = 1919+1 == 1919+1;
    output1{test++} = (12323+1 == 3412+1)==0;
    output1{test++} = 5718+1 == 5718+1;
    output1{test++} = (234234+1 == 345+1)==0;
    output1{test++} = 5719+1 == 5719+1;
    output1{test++} = (2356+1 == 123987+1)==0;
    output1{test++} = 8192+1 == 8192+1;
    output1{test++} = (1+1 == 2+1)==0;
    output1{test++} = 101+1 == 101+1;
    output1{test++} = (16+1 == 8+1)==0;

;;

    /* fuzz == circuit */
    output1{test++} = 8711649 == 8711649;
    output1{test++} = (8711649 == 9474179)==0;
    output1{test++} = 6897758 == 6897758;
    output1{test++} = (6897758 == 2257548)==0;
    output1{test++} = 6466762 == 6466762;
    output1{test++} = (6466762 == 8082772)==0;
    output1{test++} = 3163151 == 3163151;
    output1{test++} = (3163151 == 8863992)==0;
    output1{test++} = 9245187 == 9245187;
    output1{test++} = (9245187 == 3470227)==0;
    output1{test++} = 4096895 == 4096895;
    output1{test++} = (4096895 == 7735372)==0;
    output1{test++} = 4933051 == 4933051;
    output1{test++} = (4933051 == 5695173)==0;
    output1{test++} = 2323104 == 2323104;
    output1{test++} = (2323104 == 8874219)==0;
    output1{test++} = 4724991 == 4724991;
    output1{test++} = (4724991 == 4978739)==0;
    output1{test++} = 6739508 == 6739508;
    output1{test++} = (6739508 == 6601343)==0;
    output1{test++} = 187469 == 187469;
    output1{test++} = (187469 == 8154618)==0;
    output1{test++} = 3012480 == 3012480;
    output1{test++} = (3012480 == 9904862)==0;
    output1{test++} = 2422742 == 2422742;
    output1{test++} = (2422742 == 6412864)==0;
    output1{test++} = 5527951 == 5527951;
    output1{test++} = (5527951 == 7591049)==0;
    output1{test++} = 3820117 == 3820117;
    output1{test++} = (3820117 == 5584641)==0;
    output1{test++} = 7242655 == 7242655;
    output1{test++} = (7242655 == 9567054)==0;
    output1{test++} = 2027271 == 2027271;
    output1{test++} = (2027271 == 4183175)==0;
    output1{test++} = 4294573 == 4294573;
    output1{test++} = (4294573 == 3330573)==0;
    output1{test++} = 6576198 == 6576198;
    output1{test++} = (6576198 == 2699000)==0;
    output1{test++} = 4693400 == 4693400;
    output1{test++} = (4693400 == 7706007)==0;
    output1{test++} = 2468294 == 2468294;
    output1{test++} = (2468294 == 3698569)==0;
    output1{test++} = 7561076 == 7561076;
    output1{test++} = (7561076 == 3620530)==0;
    output1{test++} = 5481578 == 5481578;
    output1{test++} = (5481578 == 8191697)==0;
    output1{test++} = 8236398 == 8236398;
    output1{test++} = (8236398 == 7129913)==0;
    output1{test++} = 7426372 == 7426372;
    output1{test++} = (7426372 == 8982584)==0;
    output1{test++} = 7290967 == 7290967;
    output1{test++} = (7290967 == 8839264)==0;
    output1{test++} = 75816 == 75816;
    output1{test++} = (75816 == 4788110)==0;
    output1{test++} = 9869007 == 9869007;
    output1{test++} = (9869007 == 227606)==0;
    output1{test++} = 6208619 == 6208619;
    output1{test++} = (6208619 == 1225656)==0;
    output1{test++} = 8394767 == 8394767;
    output1{test++} = (8394767 == 1096195)==0;
    output1{test++} = 3129789 == 3129789;
    output1{test++} = (3129789 == 3210244)==0;
    output1{test++} = 908114 == 908114;
    output1{test++} = (908114 == 8987953)==0;
    output1{test++} = 3007776 == 3007776;
    output1{test++} = (3007776 == 5693854)==0;
    output1{test++} = 2164705 == 2164705;
    output1{test++} = (2164705 == 79430)==0;
    output1{test++} = 3574532 == 3574532;
    output1{test++} = (3574532 == 6085788)==0;
    output1{test++} = 4030778 == 4030778;
    output1{test++} = (4030778 == 9937519)==0;
    output1{test++} = 1520385 == 1520385;
    output1{test++} = (1520385 == 7986740)==0;
    output1{test++} = 6510428 == 6510428;
    output1{test++} = (6510428 == 7903577)==0;
    output1{test++} = 824496 == 824496;
    output1{test++} = (824496 == 2552717)==0;
    output1{test++} = 3155122 == 3155122;
    output1{test++} = (3155122 == 7744217)==0;
    output1{test++} = 1581223 == 1581223;
    output1{test++} = (1581223 == 8157874)==0;
    output1{test++} = 4256281 == 4256281;
    output1{test++} = (4256281 == 9242028)==0;
    output1{test++} = 8149263 == 8149263;
    output1{test++} = (8149263 == 716963)==0;
    output1{test++} = 4121616 == 4121616;
    output1{test++} = (4121616 == 616024)==0;
    output1{test++} = 9190883 == 9190883;
    output1{test++} = (9190883 == 1379974)==0;
    output1{test++} = 57083 == 57083;
    output1{test++} = (57083 == 8741809)==0;
    output1{test++} = 2253382 == 2253382;
    output1{test++} = (2253382 == 2067323)==0;
    output1{test++} = 1456404 == 1456404;
    output1{test++} = (1456404 == 945399)==0;
    output1{test++} = 7770241 == 7770241;
    output1{test++} = (7770241 == 8287885)==0;
    output1{test++} = 8414447 == 8414447;
    output1{test++} = (8414447 == 2558877)==0;
    output1{test++} = 3986585 == 3986585;
    output1{test++} = (3986585 == 4960836)==0;
    output1{test++} = 3982247 == 3982247;
    output1{test++} = (3982247 == 2056357)==0;
    output1{test++} = 8531721 == 8531721;
    output1{test++} = (8531721 == 5165911)==0;
    output1{test++} = 7474858 == 7474858;
    output1{test++} = (7474858 == 4328870)==0;
    output1{test++} = 341153 == 341153;
    output1{test++} = (341153 == 9900286)==0;
    output1{test++} = 8998430 == 8998430;
    output1{test++} = (8998430 == 9930607)==0;
    output1{test++} = 5860603 == 5860603;
    output1{test++} = (5860603 == 7324390)==0;
    output1{test++} = 4686575 == 4686575;
    output1{test++} = (4686575 == 1661894)==0;
    output1{test++} = 9130005 == 9130005;
    output1{test++} = (9130005 == 7533374)==0;
    output1{test++} = 6738295 == 6738295;
    output1{test++} = (6738295 == 1965769)==0;
    output1{test++} = 9907984 == 9907984;
    output1{test++} = (9907984 == 3628142)==0;
    output1{test++} = 2716360 == 2716360;
    output1{test++} = (2716360 == 97910)==0;


val = 9;
val = makeUnknown(val);

output1{test++} = val+5 == val+1+1+1+1+1;
output1{test++} = 10 == val+1;
output1{test++} = 11 == val+(1+1);
output1{test++} = 18 == val+val;
output1{test++} = 10 == 1+val;
output1{test++} = 11 == (1+1)+val;

short k = 7+1;

output1{test++} = k == 8;
output1{test++} = k == -8#4;



output1{test++} = 6093780 == (859132+5234648);
output1{test++} = 11910752 == (7716889+4193863);
output1{test++} = 10444956 == (2799332+7645624);
output1{test++} = 10859578 == (2278870+8580708);
output1{test++} = 12795051 == (5044880+7750171);
output1{test++} = 4644546 == (698953+3945593);
output1{test++} = 7464618 == (5282849+2181769);
output1{test++} = 7345858 == (6455586+890272);
output1{test++} = 5009157 == (112605+4896552);
output1{test++} = 15807110 == (7509519+8297591);
output1{test++} = 13451038 == (7585934+5865104);
output1{test++} = 11189869 == (8518442+2671427);
output1{test++} = 15608372 == (5884921+9723451);
output1{test++} = 12877235 == (3615619+9261616);
output1{test++} = 6353810 == (4102010+2251800);
output1{test++} = 9024507 == (5967813+3056694);
output1{test++} = 9542007 == (4052025+5489982);
output1{test++} = 16495391 == (6704391+9791000);
output1{test++} = 9372104 == (8655243+716861);
output1{test++} = 11502136 == (8586417+2915719);
output1{test++} = 8019320 == (3577831+4441489);
output1{test++} = 9405036 == (9048841+356195);
output1{test++} = 15087410 == (6208642+8878768);
output1{test++} = 13836538 == (3840473+9996065);
output1{test++} = 11419340 == (3724938+7694402);
output1{test++} = 17845510 == (8074559+9770951);
output1{test++} = 11340653 == (4593276+6747377);
output1{test++} = 9408677 == (8884753+523924);
output1{test++} = 10088313 == (4601123+5487190);
output1{test++} = 4052648 == (883434+3169214);
output1{test++} = 17798080 == (8818222+8979858);
output1{test++} = 4302889 == (3337174+965715);
output1{test++} = 14712170 == (6144108+8568062);
output1{test++} = 7970647 == (1599254+6371393);
output1{test++} = 3659424 == (2530854+1128570);
output1{test++} = 10171393 == (9690512+480881);
output1{test++} = 9276027 == (7742617+1533410);
output1{test++} = 12740707 == (3259734+9480973);
output1{test++} = 14163757 == (8228110+5935647);
output1{test++} = 8882100 == (1941585+6940515);
output1{test++} = 15855089 == (8546584+7308505);
output1{test++} = 10703978 == (8689929+2014049);
output1{test++} = 14284724 == (5492842+8791882);
output1{test++} = 12798292 == (3328660+9469632);
output1{test++} = 8451328 == (2816978+5634350);
output1{test++} = 8424664 == (8038042+386622);
output1{test++} = 10972973 == (7427030+3545943);
output1{test++} = 10607875 == (6924288+3683587);
output1{test++} = 5413957 == (1289065+4124892);
output1{test++} = 11619422 == (2377913+9241509);
output1{test++} = 6444347 == (4150346+2294001);
output1{test++} = 12065132 == (6436389+5628743);
output1{test++} = 8290764 == (7556346+734418);
output1{test++} = 18084736 == (9062180+9022556);
output1{test++} = 18055986 == (9251544+8804442);
output1{test++} = 16318021 == (9021500+7296521);
output1{test++} = 4384266 == (3351002+1033264);
output1{test++} = 4138892 == (867555+3271337);
output1{test++} = 12119306 == (7381866+4737440);
output1{test++} = 16722387 == (8030057+8692330);
output1{test++} = 9850467 == (6176603+3673864);
output1{test++} = 3177242 == (1438996+1738246);
output1{test++} = 8310561 == (3646691+4663870);
output1{test++} = 16392898 == (8870596+7522302);
output1{test++} = 3818651 == (2132167+1686484);
output1{test++} = 3362607 == (3252442+110165);
output1{test++} = 7573989 == (3614145+3959844);
output1{test++} = 13146558 == (3873957+9272601);
output1{test++} = 12218286 == (6539051+5679235);
output1{test++} = 10797646 == (999993+9797653);
output1{test++} = 7555683 == (4441451+3114232);
output1{test++} = 11209076 == (8492587+2716489);
output1{test++} = 5277787 == (362765+4915022);
output1{test++} = 9709718 == (6123459+3586259);
output1{test++} = 9253703 == (8081916+1171787);
output1{test++} = 7901609 == (7115584+786025);
output1{test++} = 16106200 == (8649565+7456635);
output1{test++} = 5892165 == (2432066+3460099);
output1{test++} = 6210606 == (2068745+4141861);
output1{test++} = 4445038 == (952152+3492886);
output1{test++} = 7297412 == (5768741+1528671);
output1{test++} = 6135456 == (4086310+2049146);
output1{test++} = 9463325 == (3111135+6352190);
output1{test++} = 2694047 == (1257395+1436652);
output1{test++} = 6565355 == (4031046+2534309);
output1{test++} = 7649661 == (2404301+5245360);
output1{test++} = 8624132 == (8267846+356286);
output1{test++} = 9875688 == (2194841+7680847);
output1{test++} = 11500742 == (5645887+5854855);
output1{test++} = 7360057 == (2398779+4961278);
output1{test++} = 5388486 == (1248450+4140036);
output1{test++} = 10291261 == (7204510+3086751);
output1{test++} = 13931130 == (8649703+5281427);
output1{test++} = 9423808 == (1082464+8341344);
output1{test++} = 3551274 == (389710+3161564);
output1{test++} = 10407519 == (4563677+5843842);
output1{test++} = 14697110 == (8918320+5778790);
output1{test++} = 17389835 == (8426327+8963508);
output1{test++} = 6981480 == (1341089+5640391);
output1{test++} = 16547932 == (9169599+7378333);
output1{test++} = 11202648 == (8216420+2986228);
output1{test++} = 3790107 == (666658+3123449);
output1{test++} = 3660192 == (291818+3368374);
output1{test++} = 14324878 == (8273843+6051035);
output1{test++} = 13349415 == (7897449+5451966);
output1{test++} = 9737473 == (5348081+4389392);
output1{test++} = 8424037 == (3598102+4825935);
output1{test++} = 6586905 == (5593717+993188);
output1{test++} = 8258072 == (7581183+676889);
output1{test++} = 7469400 == (2928218+4541182);
output1{test++} = 11599148 == (3556102+8043046);
output1{test++} = 7709295 == (3887945+3821350);
output1{test++} = 4926954 == (3459837+1467117);
output1{test++} = 14197318 == (4356895+9840423);
output1{test++} = 3005279 == (1050331+1954948);
output1{test++} = 14603342 == (9537726+5065616);
output1{test++} = 7234700 == (1359129+5875571);
output1{test++} = 12076801 == (4900461+7176340);
output1{test++} = 13764048 == (6142508+7621540);
output1{test++} = 8271421 == (3820524+4450897);
output1{test++} = 7950357 == (6943263+1007094);
output1{test++} = 8597703 == (3114521+5483182);
output1{test++} = 7481404 == (4248012+3233392);
output1{test++} = 13471509 == (3586744+9884765);
output1{test++} = 16198984 == (6297526+9901458);
output1{test++} = 6887395 == (5112547+1774848);
output1{test++} = 13740238 == (7428998+6311240);
output1{test++} = 12354933 == (4928013+7426920);
output1{test++} = 7550745 == (6153249+1397496);
output1{test++} = 12596012 == (5224628+7371384);
output1{test++} = 9157532 == (5356770+3800762);
output1{test++} = 8977227 == (1442595+7534632);
output1{test++} = 4097312 == (247545+3849767);
output1{test++} = 11362566 == (7306465+4056101);
output1{test++} = 6624553 == (3139551+3485002);
output1{test++} = 13653200 == (9379770+4273430);
output1{test++} = 8349865 == (2521205+5828660);
output1{test++} = 11873121 == (2291943+9581178);
output1{test++} = 12412389 == (9912633+2499756);
output1{test++} = 7175433 == (4923100+2252333);
output1{test++} = 18883750 == (9083171+9800579);
output1{test++} = 3889975 == (2866350+1023625);
output1{test++} = 1103142 == (591138+512004);
output1{test++} = 9318857 == (1797536+7521321);
output1{test++} = 4392120 == (744494+3647626);
output1{test++} = 9662098 == (6941257+2720841);
output1{test++} = 9310647 == (8131722+1178925);
output1{test++} = 5055660 == (4801379+254281);
output1{test++} = 9757100 == (7983640+1773460);
output1{test++} = 4546435 == (125618+4420817);
output1{test++} = 8301766 == (3699288+4602478);
output1{test++} = 15112092 == (8698894+6413198);
output1{test++} = 12575483 == (4011519+8563964);
output1{test++} = 11582248 == (4557327+7024921);
output1{test++} = 14259445 == (5653168+8606277);
output1{test++} = 10236878 == (462165+9774713);
output1{test++} = 12298438 == (9450969+2847469);
output1{test++} = 5493297 == (424818+5068479);
output1{test++} = 8858957 == (3980461+4878496);
output1{test++} = 10562116 == (4686452+5875664);
output1{test++} = 4541154 == (80185+4460969);
output1{test++} = 10451794 == (8508434+1943360);
output1{test++} = 2321220 == (1999909+321311);
output1{test++} = 2260041 == (550129+1709912);
output1{test++} = 10415688 == (3318922+7096766);
output1{test++} = 6944462 == (2892948+4051514);
output1{test++} = 12402237 == (5954666+6447571);
output1{test++} = 7257467 == (4702303+2555164);
output1{test++} = 13011105 == (4793040+8218065);
output1{test++} = 10024438 == (5454534+4569904);
output1{test++} = 10681479 == (4821765+5859714);
output1{test++} = 14239419 == (8492567+5746852);
output1{test++} = 11173827 == (4997612+6176215);
output1{test++} = 5029157 == (4083296+945861);
output1{test++} = 11074011 == (2222715+8851296);
output1{test++} = 12351548 == (8538238+3813310);
output1{test++} = 15736493 == (9784534+5951959);
output1{test++} = 6447042 == (6401219+45823);
output1{test++} = 3537759 == (2601353+936406);
output1{test++} = 16852348 == (8486211+8366137);
output1{test++} = 16613515 == (8304738+8308777);
output1{test++} = 9358784 == (5792827+3565957);
output1{test++} = 8509351 == (2748905+5760446);
output1{test++} = 12261315 == (2852383+9408932);
output1{test++} = 15104567 == (7221886+7882681);
output1{test++} = 11416352 == (4234687+7181665);
output1{test++} = 6737969 == (2203917+4534052);
output1{test++} = 11108392 == (2350357+8758035);
output1{test++} = 13276979 == (5320431+7956548);
output1{test++} = 1325676 == (741805+583871);
output1{test++} = 3592166 == (2463456+1128710);
output1{test++} = 11292683 == (5788081+5504602);
output1{test++} = 11534385 == (9364249+2170136);
output1{test++} = 13642683 == (9460880+4181803);
output1{test++} = 10375839 == (2791562+7584277);
output1{test++} = 9688218 == (6643275+3044943);
output1{test++} = 8838286 == (1038390+7799896);
output1{test++} = 8949939 == (3249884+5700055);
output1{test++} = 10261148 == (293802+9967346);
output1{test++} = 10301390 == (8154819+2146571);
output1{test++} = 16388817 == (7268763+9120054);
output1{test++} = 9428096 == (8495022+933074);
output1{test++} = 10638988 == (1453723+9185265);
output1{test++} = 12769900 == (3793475+8976425);
output1{test++} = 14236719 == (9057528+5179191);
output1{test++} = 6589663 == (1039758+5549905);
output1{test++} = 12888201 == (5095345+7792856);
output1{test++} = 19795848 == (9878018+9917830);
output1{test++} = 17435016 == (9973782+7461234);
output1{test++} = 17431703 == (7908014+9523689);
output1{test++} = 11502875 == (8005499+3497376);
output1{test++} = 8525436 == (8391549+133887);
output1{test++} = 9860072 == (1887128+7972944);
output1{test++} = 7454587 == (6203049+1251538);
output1{test++} = 10624691 == (2881664+7743027);
output1{test++} = 10466803 == (9680958+785845);
output1{test++} = 17678985 == (9909564+7769421);
output1{test++} = 5063020 == (4710855+352165);
output1{test++} = 14918960 == (8243716+6675244);
output1{test++} = 4205154 == (907031+3298123);
output1{test++} = 7870286 == (1472921+6397365);
output1{test++} = 10605140 == (5593781+5011359);
output1{test++} = 15728731 == (9533890+6194841);
output1{test++} = 5354123 == (2832997+2521126);
output1{test++} = 5377480 == (4575841+801639);
output1{test++} = 6935722 == (217807+6717915);
output1{test++} = 15384684 == (9305136+6079548);
output1{test++} = 2567675 == (1005263+1562412);
output1{test++} = 13466035 == (4415518+9050517);
output1{test++} = 16944883 == (7066200+9878683);
output1{test++} = 11458181 == (7131072+4327109);
output1{test++} = 9217290 == (8603781+613509);
output1{test++} = 1478006 == (1396597+81409);
output1{test++} = 10437182 == (3631422+6805760);
output1{test++} = 2576308 == (223899+2352409);
output1{test++} = 10161760 == (9510147+651613);
output1{test++} = 2011178 == (1165032+846146);
output1{test++} = 13829796 == (8276696+5553100);
output1{test++} = 9509876 == (6724966+2784910);
output1{test++} = 14090988 == (6064845+8026143);
output1{test++} = 16865033 == (7147789+9717244);
output1{test++} = 11100880 == (6631977+4468903);
output1{test++} = 12441642 == (2492670+9948972);
output1{test++} = 11759854 == (6922675+4837179);
output1{test++} = 12961413 == (7666778+5294635);
output1{test++} = 13129459 == (5888284+7241175);
output1{test++} = 10335017 == (2220861+8114156);
output1{test++} = 11952108 == (3750924+8201184);
output1{test++} = 5663155 == (28379+5634776);
output1{test++} = 15549644 == (6601543+8948101);
output1{test++} = 13538737 == (5080885+8457852);
output1{test++} = 5129534 == (4060924+1068610);
output1{test++} = 7191000 == (4803831+2387169);
output1{test++} = 6545960 == (2599594+3946366);
output1{test++} = 8500586 == (1733489+6767097);
output1{test++} = 766980 == (335279+431701);
output1{test++} = 14916837 == (7061296+7855541);
output1{test++} = 9402463 == (5565551+3836912);
output1{test++} = 18690540 == (9809208+8881332);
output1{test++} = 10638892 == (8989597+1649295);
output1{test++} = 6004726 == (5533025+471701);
output1{test++} = 6261457 == (1716393+4545064);
output1{test++} = 11786424 == (2305099+9481325);
output1{test++} = 7230703 == (5769414+1461289);
output1{test++} = 11537748 == (3734656+7803092);
output1{test++} = 10821617 == (1714455+9107162);
output1{test++} = 13708862 == (7988004+5720858);
output1{test++} = 14391507 == (9415797+4975710);
output1{test++} = 1084146 == (1056731+27415);
output1{test++} = 9425847 == (5069663+4356184);
output1{test++} = 5860823 == (678327+5182496);
output1{test++} = 10408874 == (3783295+6625579);
output1{test++} = 11806578 == (9664476+2142102);
output1{test++} = 11733166 == (6584917+5148249);
output1{test++} = 8421195 == (2797235+5623960);
output1{test++} = 9714063 == (6009986+3704077);
output1{test++} = 13849503 == (4897735+8951768);
output1{test++} = 1908327 == (191027+1717300);
output1{test++} = 8256970 == (4850879+3406091);
output1{test++} = 1455853 == (1258408+197445);
output1{test++} = 7098354 == (6029176+1069178);
output1{test++} = 12626434 == (5923168+6703266);
output1{test++} = 14204661 == (7155519+7049142);
output1{test++} = 10921209 == (2217827+8703382);
output1{test++} = 5610257 == (4928680+681577);
output1{test++} = 7765802 == (1716524+6049278);
output1{test++} = 6401877 == (199310+6202567);
output1{test++} = 11626805 == (1824176+9802629);
output1{test++} = 5758409 == (4749863+1008546);
output1{test++} = 10318359 == (8862479+1455880);
output1{test++} = 8162527 == (264898+7897629);
output1{test++} = 11141102 == (9632854+1508248);
output1{test++} = 14730904 == (5899808+8831096);
output1{test++} = 14295948 == (8664431+5631517);
output1{test++} = 7864184 == (1157101+6707083);
output1{test++} = 6208573 == (5448230+760343);
output1{test++} = 12608679 == (6522969+6085710);
output1{test++} = 12137432 == (4401240+7736192);
output1{test++} = 10794732 == (3804503+6990229);
output1{test++} = 8387848 == (3139386+5248462);
output1{test++} = 9734091 == (1356402+8377689);
output1{test++} = 9585751 == (6627011+2958740);
output1{test++} = 2801399 == (1139655+1661744);
output1{test++} = 18775935 == (9949367+8826568);
output1{test++} = 5946114 == (1290275+4655839);
output1{test++} = 15978480 == (6202577+9775903);
output1{test++} = 12199743 == (2381369+9818374);
output1{test++} = 6893218 == (1546253+5346965);
output1{test++} = 1658873 == (1035264+623609);
output1{test++} = 7259800 == (263695+6996105);
output1{test++} = 14452822 == (7763367+6689455);
output1{test++} = 11143607 == (4978227+6165380);
output1{test++} = 10865674 == (9609142+1256532);
output1{test++} = 9617612 == (5927474+3690138);
output1{test++} = 8561084 == (5142723+3418361);
output1{test++} = 12458710 == (6172013+6286697);
output1{test++} = 12733880 == (6765901+5967979);
output1{test++} = 12561177 == (6164826+6396351);
output1{test++} = 7397081 == (4956728+2440353);
output1{test++} = 15936864 == (8397960+7538904);
output1{test++} = 6318772 == (4766181+1552591);
output1{test++} = 13771284 == (7413200+6358084);
output1{test++} = 9380996 == (7292269+2088727);
output1{test++} = 9101953 == (7171098+1930855);
output1{test++} = 14225370 == (6380539+7844831);
output1{test++} = 12606947 == (2960585+9646362);
output1{test++} = 9551360 == (2621635+6929725);
output1{test++} = 9536692 == (1606468+7930224);
output1{test++} = 2484914 == (224547+2260367);
output1{test++} = 14608949 == (8036386+6572563);
output1{test++} = 11593212 == (6796884+4796328);
output1{test++} = 8209469 == (6319729+1889740);
output1{test++} = 10454513 == (7367756+3086757);
output1{test++} = 9395140 == (2486051+6909089);
output1{test++} = 10016785 == (1766452+8250333);
output1{test++} = 14838702 == (7408918+7429784);
output1{test++} = 5474935 == (1088001+4386934);
output1{test++} = 8079321 == (928831+7150490);
output1{test++} = 11475143 == (9029682+2445461);
output1{test++} = 2502501 == (2047602+454899);
output1{test++} = 7334481 == (6489892+844589);
output1{test++} = 11052358 == (9906256+1146102);
output1{test++} = 13975950 == (4608917+9367033);
output1{test++} = 6745226 == (3567309+3177917);
output1{test++} = 1107127 == (430131+676996);
output1{test++} = 8981738 == (3159900+5821838);
output1{test++} = 5458757 == (828640+4630117);
output1{test++} = 13380756 == (6921274+6459482);
output1{test++} = 6931086 == (2768517+4162569);
output1{test++} = 9898931 == (484820+9414111);
output1{test++} = 6420025 == (3566992+2853033);
output1{test++} = 11953731 == (6599638+5354093);
output1{test++} = 7552613 == (2913675+4638938);
output1{test++} = 14560919 == (7164626+7396293);
output1{test++} = 7917084 == (5360474+2556610);
output1{test++} = 9114276 == (7107080+2007196);
output1{test++} = 16593785 == (9159697+7434088);
output1{test++} = 8115096 == (4903512+3211584);
output1{test++} = 8820245 == (5220976+3599269);
output1{test++} = 13967891 == (7860801+6107090);
output1{test++} = 8198835 == (7839228+359607);
output1{test++} = 13367238 == (6985749+6381489);
output1{test++} = 4901679 == (3141562+1760117);
output1{test++} = 7546418 == (2663227+4883191);
output1{test++} = 6677159 == (1483403+5193756);
output1{test++} = 11512765 == (9002144+2510621);
output1{test++} = 15096038 == (9096095+5999943);
output1{test++} = 9534710 == (7572412+1962298);
output1{test++} = 16978452 == (7593879+9384573);
output1{test++} = 6448293 == (5121725+1326568);
output1{test++} = 9391648 == (6863803+2527845);
output1{test++} = 10254873 == (1865298+8389575);
output1{test++} = 10432360 == (8703316+1729044);
output1{test++} = 15170608 == (6693013+8477595);
output1{test++} = 8739887 == (1286952+7452935);
output1{test++} = 4917670 == (2706325+2211345);
output1{test++} = 8035772 == (2609808+5425964);
output1{test++} = 4130206 == (454271+3675935);
output1{test++} = 14120785 == (6471863+7648922);
output1{test++} = 2487794 == (2418281+69513);
output1{test++} = 4859731 == (4281457+578274);
output1{test++} = 13757115 == (7785020+5972095);
output1{test++} = 12483890 == (9031221+3452669);
output1{test++} = 5954591 == (5679931+274660);
output1{test++} = 1520157 == (94265+1425892);
output1{test++} = 7905373 == (1822004+6083369);
output1{test++} = 5484904 == (1045033+4439871);
output1{test++} = 15560345 == (8886721+6673624);
output1{test++} = 8945464 == (6576515+2368949);
output1{test++} = 15332072 == (5795259+9536813);
output1{test++} = 14622836 == (9799570+4823266);
output1{test++} = 2630299 == (862653+1767646);
output1{test++} = 12345835 == (3637508+8708327);
output1{test++} = 8430412 == (1324752+7105660);
output1{test++} = 14661317 == (5221034+9440283);
output1{test++} = 10734377 == (7774392+2959985);
output1{test++} = 5426346 == (4268492+1157854);
output1{test++} = 6418435 == (1421274+4997161);
output1{test++} = 3771189 == (110759+3660430);
output1{test++} = 4825366 == (4822472+2894);
output1{test++} = 14165400 == (4898181+9267219);
output1{test++} = 11471126 == (3346795+8124331);
output1{test++} = 6206733 == (5162487+1044246);
output1{test++} = 1855230 == (1137612+717618);
output1{test++} = 12113023 == (5676976+6436047);
output1{test++} = 9520536 == (7650175+1870361);
output1{test++} = 13260027 == (6086401+7173626);
output1{test++} = 4415050 == (3177644+1237406);
output1{test++} = 4873175 == (730860+4142315);
output1{test++} = 10085671 == (4412859+5672812);
output1{test++} = 8730273 == (3486696+5243577);
output1{test++} = 10212401 == (1192859+9019542);
output1{test++} = 9831495 == (4933297+4898198);
output1{test++} = 13920240 == (8893872+5026368);
output1{test++} = 14696583 == (7212488+7484095);
output1{test++} = 8582836 == (4182103+4400733);
output1{test++} = 8598300 == (8049934+548366);
output1{test++} = 7791528 == (6319510+1472018);
output1{test++} = 7319206 == (4025209+3293997);
output1{test++} = 16708766 == (8159077+8549689);
output1{test++} = 12032213 == (4314480+7717733);
output1{test++} = 14978581 == (5861523+9117058);
output1{test++} = 4277981 == (1841993+2435988);
output1{test++} = 11777420 == (3004375+8773045);
output1{test++} = 8248986 == (6248925+2000061);
output1{test++} = 13393031 == (6430324+6962707);
output1{test++} = 7412221 == (4869956+2542265);
output1{test++} = 9837793 == (7537159+2300634);
output1{test++} = 11198782 == (4931634+6267148);
output1{test++} = 8657494 == (176368+8481126);
output1{test++} = 14028992 == (4353133+9675859);
output1{test++} = 3301455 == (308699+2992756);
output1{test++} = 8142659 == (564074+7578585);
output1{test++} = 11953388 == (3508586+8444802);
output1{test++} = 14830539 == (9085315+5745224);
output1{test++} = 9193684 == (161665+9032019);
output1{test++} = 12072916 == (8887896+3185020);
output1{test++} = 13711163 == (4189869+9521294);
output1{test++} = 8908210 == (6435647+2472563);
output1{test++} = 11000504 == (8265138+2735366);
output1{test++} = 13430602 == (7492201+5938401);
output1{test++} = 12784196 == (4528431+8255765);
output1{test++} = 11727090 == (2964626+8762464);
output1{test++} = 8504465 == (5230704+3273761);
output1{test++} = 8951593 == (8317156+634437);
output1{test++} = 15418256 == (5931472+9486784);
output1{test++} = 6919799 == (3579753+3340046);
output1{test++} = 5262529 == (3593929+1668600);
output1{test++} = 13531682 == (4491563+9040119);
output1{test++} = 11714361 == (2194458+9519903);
output1{test++} = 15680406 == (7468651+8211755);
output1{test++} = 5200372 == (3325459+1874913);
output1{test++} = 15145362 == (6363642+8781720);
output1{test++} = 8729696 == (3748480+4981216);
output1{test++} = 10920465 == (2981942+7938523);
output1{test++} = 13796390 == (7029040+6767350);
output1{test++} = 11185663 == (3654052+7531611);
output1{test++} = 10439094 == (1894689+8544405);
output1{test++} = 8850073 == (6204711+2645362);
output1{test++} = 7664153 == (3170889+4493264);
output1{test++} = 13912224 == (8862939+5049285);
output1{test++} = 14637814 == (6701699+7936115);
output1{test++} = 6480837 == (2847633+3633204);
output1{test++} = 4046817 == (227861+3818956);
output1{test++} = 11628116 == (5450087+6178029);
output1{test++} = 12923495 == (4402138+8521357);
output1{test++} = 12492701 == (7267330+5225371);
output1{test++} = 5313369 == (636176+4677193);
output1{test++} = 11407015 == (2879211+8527804);
output1{test++} = 7445340 == (1398720+6046620);
output1{test++} = 9589012 == (2785027+6803985);
output1{test++} = 3518126 == (3057606+460520);
output1{test++} = 11242706 == (8492708+2749998);
output1{test++} = 17151925 == (9438844+7713081);
output1{test++} = 13362823 == (5713878+7648945);
output1{test++} = 12203473 == (4886535+7316938);
output1{test++} = 8967610 == (91563+8876047);
output1{test++} = 14419934 == (7784893+6635041);
output1{test++} = 16235330 == (9273656+6961674);
output1{test++} = 4864135 == (1059890+3804245);
output1{test++} = 258287 == (131376+126911);
output1{test++} = 16445518 == (9767006+6678512);
output1{test++} = 7232249 == (319646+6912603);
output1{test++} = 6981595 == (3926764+3054831);
output1{test++} = 2369068 == (2082750+286318);
output1{test++} = 2865543 == (701217+2164326);
output1{test++} = 9724625 == (6996601+2728024);
output1{test++} = 13958055 == (7511143+6446912);
output1{test++} = 13552219 == (5047420+8504799);
output1{test++} = 6449691 == (2342774+4106917);
output1{test++} = 1412055 == (225780+1186275);
output1{test++} = 4847122 == (837150+4009972);
output1{test++} = 2719888 == (1781352+938536);
output1{test++} = 11325218 == (8503731+2821487);
output1{test++} = 15827333 == (8859826+6967507);
output1{test++} = 12178443 == (8327829+3850614);
output1{test++} = 14323595 == (5436187+8887408);
output1{test++} = 9759302 == (5168090+4591212);
output1{test++} = 8732738 == (3768210+4964528);
output1{test++} = 4218193 == (1324187+2894006);
output1{test++} = 7089337 == (7081353+7984);
output1{test++} = 12201402 == (9295448+2905954);
output1{test++} = 11157857 == (1680365+9477492);
output1{test++} = 6288492 == (5590408+698084);
output1{test++} = 9665074 == (6206016+3459058);
output1{test++} = 18988989 == (9856322+9132667);
output1{test++} = 4866719 == (1424596+3442123);
output1{test++} = 11570867 == (5570049+6000818);
output1{test++} = 5925562 == (1984933+3940629);
output1{test++} = 15024665 == (9807255+5217410);
output1{test++} = 10055079 == (1592276+8462803);
output1{test++} = 7668037 == (1807665+5860372);
output1{test++} = 7829698 == (7553596+276102);
output1{test++} = 5289000 == (4739843+549157);
output1{test++} = 1710351 == (1490995+219356);
output1{test++} = 14306707 == (8548880+5757827);
output1{test++} = 7411942 == (2387039+5024903);
output1{test++} = 5467595 == (1286039+4181556);
output1{test++} = 10451547 == (7573810+2877737);
output1{test++} = 13490642 == (6757277+6733365);
output1{test++} = 3705070 == (2087683+1617387);
output1{test++} = 8081396 == (7636884+444512);
output1{test++} = 15735415 == (8807370+6928045);
output1{test++} = 12860812 == (7986597+4874215);
output1{test++} = 11311951 == (5916408+5395543);
output1{test++} = 9007771 == (8651935+355836);
output1{test++} = 8711871 == (3075825+5636046);
output1{test++} = 12128398 == (2896891+9231507);
output1{test++} = 7127722 == (20775+7106947);
output1{test++} = 5794890 == (1487883+4307007);
output1{test++} = 9648633 == (4441428+5207205);
output1{test++} = 11775224 == (8004927+3770297);
output1{test++} = 9933642 == (9144403+789239);
output1{test++} = 6722068 == (3410324+3311744);
output1{test++} = 6966488 == (5772828+1193660);
output1{test++} = 10344116 == (7439770+2904346);
output1{test++} = 13393448 == (8440666+4952782);
output1{test++} = 15497112 == (8433056+7064056);
output1{test++} = 8196857 == (2515627+5681230);
output1{test++} = 16047861 == (8851838+7196023);
output1{test++} = 13469673 == (5056500+8413173);
output1{test++} = 15221249 == (5616638+9604611);
output1{test++} = 4718182 == (3929565+788617);
output1{test++} = 4095677 == (634855+3460822);
output1{test++} = 7753052 == (6956016+797036);
output1{test++} = 8947846 == (4250536+4697310);
output1{test++} = 11685400 == (8345034+3340366);
output1{test++} = 14736603 == (9402782+5333821);
output1{test++} = 12376702 == (5519483+6857219);
output1{test++} = 5102060 == (3827074+1274986);
output1{test++} = 6189040 == (5597312+591728);
output1{test++} = 11231718 == (4930546+6301172);
output1{test++} = 18412792 == (9404250+9008542);
output1{test++} = 8004737 == (4984986+3019751);
output1{test++} = 10825146 == (5623370+5201776);
output1{test++} = 18521158 == (9158527+9362631);
output1{test++} = 6958877 == (609964+6348913);
output1{test++} = 15023905 == (9624168+5399737);
output1{test++} = 10414132 == (8234349+2179783);
output1{test++} = 9831083 == (3074921+6756162);
output1{test++} = 9894384 == (7657771+2236613);
output1{test++} = 13996211 == (8846093+5150118);


output1{test++} = -974#testsize == (-143#testsize+ -831#testsize);
output1{test++} = -1085#testsize == (-850#testsize+ -235#testsize);
output1{test++} = -580#testsize == (-481#testsize+ -99#testsize);
output1{test++} = -1147#testsize == (-815#testsize+ -332#testsize);
output1{test++} = -1138#testsize == (-982#testsize+ -156#testsize);
output1{test++} = -696#testsize == (-612#testsize+ -84#testsize);
output1{test++} = -587#testsize == (-56#testsize+ -531#testsize);
output1{test++} = -391#testsize == (-82#testsize+ -309#testsize);
output1{test++} = -1355#testsize == (-945#testsize+ -410#testsize);
output1{test++} = -665#testsize == (-125#testsize+ -540#testsize);
output1{test++} = -289#testsize == (-175#testsize+ -114#testsize);
output1{test++} = -670#testsize == (-41#testsize+ -629#testsize);
output1{test++} = -733#testsize == (-18#testsize+ -715#testsize);
output1{test++} = -924#testsize == (-512#testsize+ -412#testsize);
output1{test++} = -1514#testsize == (-518#testsize+ -996#testsize);
output1{test++} = -1167#testsize == (-609#testsize+ -558#testsize);
output1{test++} = -1588#testsize == (-666#testsize+ -922#testsize);
output1{test++} = -915#testsize == (-13#testsize+ -902#testsize);
output1{test++} = -1184#testsize == (-683#testsize+ -501#testsize);
output1{test++} = -452#testsize == (-169#testsize+ -283#testsize);
output1{test++} = -499#testsize == (-301#testsize+ -198#testsize);
output1{test++} = -1313#testsize == (-803#testsize+ -510#testsize);
output1{test++} = -1285#testsize == (-736#testsize+ -549#testsize);
output1{test++} = -510#testsize == (-172#testsize+ -338#testsize);
output1{test++} = -1107#testsize == (-635#testsize+ -472#testsize);



output1{test++} = (val&1) == (val&1&1&1&1&1);
output1{test++} = 1 == (val&1);
output1{test++} = 1 == (val&(1&1));
output1{test++} = val == (val&val);
output1{test++} = 1 == (1&val);
output1{test++} = 1 == ((1&1)&val);



output1{test++} = 11 == (11&11);
output1{test++} = 2 == (2&10);
output1{test++} = 1 == (9&5);
output1{test++} = 8 == (9&10);
output1{test++} = 6 == (6&7);
output1{test++} = 8 == (14&9);
output1{test++} = 1 == (3&5);
output1{test++} = 10 == (10&14);
output1{test++} = 6 == (6&14);
output1{test++} = 0 == (2&0);
output1{test++} = 2 == (2&7);
output1{test++} = 4 == (6&13);
output1{test++} = 0 == (6&0);
output1{test++} = 1 == (1&3);
output1{test++} = 13 == (13&15);
output1{test++} = 12 == (14&13);
output1{test++} = 8 == (8&14);
output1{test++} = 1 == (9&7);
output1{test++} = 0 == (9&0);
output1{test++} = 0 == (3&0);
output1{test++} = 8 == (10&13);
output1{test++} = 10 == (10&10);
output1{test++} = 1 == (13&1);
output1{test++} = 4 == (7&12);
output1{test++} = 0 == (4&3);
output1{test++} = 0 == (2&5);
output1{test++} = 4 == (12&7);
output1{test++} = 1 == (3&5);
output1{test++} = 12 == (14&12);
output1{test++} = 0 == (2&13);
output1{test++} = 8 == (9&10);
output1{test++} = 6 == (6&7);
output1{test++} = 12 == (13&12);
output1{test++} = 2 == (6&10);
output1{test++} = 1 == (15&1);
output1{test++} = 2 == (6&2);
output1{test++} = 8 == (10&12);
output1{test++} = 8 == (13&8);
output1{test++} = 1 == (3&5);
output1{test++} = 13 == (13&15);
output1{test++} = 4 == (14&4);
output1{test++} = 1 == (3&9);
output1{test++} = 8 == (11&8);
output1{test++} = 8 == (10&12);
output1{test++} = 1 == (9&7);
output1{test++} = 0 == (3&12);
output1{test++} = 0 == (8&4);
output1{test++} = 0 == (10&0);
output1{test++} = 8 == (13&10);
output1{test++} = 9 == (11&9);
output1{test++} = 0 == (12&1);
output1{test++} = 3 == (15&3);
output1{test++} = 0 == (7&0);
output1{test++} = 12 == (14&13);
output1{test++} = 4 == (4&6);
output1{test++} = 2 == (2&2);
output1{test++} = 0 == (3&8);
output1{test++} = 0 == (3&8);
output1{test++} = 1 == (3&13);
output1{test++} = 0 == (0&15);
output1{test++} = 0 == (4&10);
output1{test++} = 0 == (0&4);
output1{test++} = 14 == (15&14);
output1{test++} = 13 == (13&15);
output1{test++} = 1 == (1&3);
output1{test++} = 0 == (4&10);
output1{test++} = 0 == (8&1);
output1{test++} = 0 == (0&15);
output1{test++} = 0 == (0&5);
output1{test++} = 0 == (2&8);
output1{test++} = 1 == (11&5);
output1{test++} = 11 == (15&11);
output1{test++} = 0 == (3&0);
output1{test++} = 3 == (15&3);
output1{test++} = 3 == (11&3);
output1{test++} = 9 == (11&9);
output1{test++} = 2 == (10&6);
output1{test++} = 0 == (0&13);
output1{test++} = 0 == (0&9);
output1{test++} = 10 == (10&10);
output1{test++} = 4 == (7&4);
output1{test++} = 0 == (10&4);
output1{test++} = 5 == (5&13);
output1{test++} = 9 == (9&13);
output1{test++} = 0 == (7&8);
output1{test++} = 4 == (13&4);
output1{test++} = 0 == (2&1);
output1{test++} = 0 == (4&10);
output1{test++} = 4 == (7&12);
output1{test++} = 10 == (14&11);
output1{test++} = 1 == (1&15);
output1{test++} = 3 == (7&3);
output1{test++} = 0 == (1&10);
output1{test++} = 1 == (5&11);
output1{test++} = 9 == (9&11);
output1{test++} = 0 == (0&1);
output1{test++} = 1 == (11&1);
output1{test++} = 0 == (0&7);
output1{test++} = 8 == (9&14);
output1{test++} = 14 == (14&14);




output1{test++} = (val|1) == (val|1|1|1|1|1);
output1{test++} = val == (val|1);
output1{test++} = val == (val|(1|1));
output1{test++} = val == (val|val);
output1{test++} = val == (1|val);
output1{test++} = (val|val) == ((1|1)|val);


output1{test++} = 3 == (0|3);
output1{test++} = 13 == (12|1);
output1{test++} = 15 == (13|14);
output1{test++} = 7 == (3|7);
output1{test++} = 9 == (8|9);
output1{test++} = 13 == (9|12);
output1{test++} = 13 == (4|13);
output1{test++} = 11 == (11|1);
output1{test++} = 11 == (10|1);
output1{test++} = 11 == (8|11);
output1{test++} = 13 == (13|12);
output1{test++} = 9 == (9|0);
output1{test++} = 15 == (11|4);
output1{test++} = 15 == (15|5);
output1{test++} = 7 == (6|5);
output1{test++} = 13 == (8|13);
output1{test++} = 15 == (9|15);
output1{test++} = 1 == (0|1);
output1{test++} = 3 == (3|1);
output1{test++} = 15 == (15|15);
output1{test++} = 13 == (12|1);
output1{test++} = 6 == (2|4);
output1{test++} = 7 == (7|0);
output1{test++} = 15 == (13|6);
output1{test++} = 9 == (1|8);
output1{test++} = 7 == (6|5);
output1{test++} = 14 == (14|10);
output1{test++} = 15 == (1|14);
output1{test++} = 13 == (5|13);
output1{test++} = 10 == (10|10);
output1{test++} = 12 == (4|8);
output1{test++} = 12 == (4|8);
output1{test++} = 10 == (8|2);
output1{test++} = 11 == (11|3);
output1{test++} = 5 == (5|1);
output1{test++} = 15 == (4|15);
output1{test++} = 15 == (15|15);
output1{test++} = 6 == (6|4);
output1{test++} = 2 == (0|2);
output1{test++} = 15 == (14|7);
output1{test++} = 5 == (5|5);
output1{test++} = 15 == (2|13);
output1{test++} = 15 == (13|11);
output1{test++} = 9 == (9|9);
output1{test++} = 13 == (13|12);
output1{test++} = 7 == (3|7);
output1{test++} = 15 == (11|4);
output1{test++} = 10 == (2|8);
output1{test++} = 15 == (15|4);
output1{test++} = 8 == (0|8);
output1{test++} = 11 == (11|3);
output1{test++} = 13 == (1|12);
output1{test++} = 15 == (6|9);
output1{test++} = 15 == (9|7);
output1{test++} = 10 == (2|10);
output1{test++} = 13 == (12|13);
output1{test++} = 15 == (13|10);
output1{test++} = 12 == (8|12);
output1{test++} = 14 == (6|10);
output1{test++} = 10 == (8|10);
output1{test++} = 10 == (10|2);
output1{test++} = 14 == (6|10);
output1{test++} = 13 == (13|0);
output1{test++} = 14 == (2|14);
output1{test++} = 11 == (11|2);
output1{test++} = 6 == (6|4);
output1{test++} = 13 == (1|13);
output1{test++} = 15 == (9|7);
output1{test++} = 12 == (4|12);
output1{test++} = 13 == (13|5);
output1{test++} = 7 == (7|4);
output1{test++} = 7 == (0|7);
output1{test++} = 7 == (6|5);
output1{test++} = 13 == (12|5);
output1{test++} = 15 == (11|5);
output1{test++} = 12 == (12|0);
output1{test++} = 14 == (0|14);
output1{test++} = 15 == (12|11);
output1{test++} = 15 == (7|15);
output1{test++} = 15 == (9|15);
output1{test++} = 12 == (12|12);
output1{test++} = 11 == (11|11);
output1{test++} = 14 == (12|2);
output1{test++} = 15 == (15|10);
output1{test++} = 5 == (5|4);
output1{test++} = 7 == (7|3);
output1{test++} = 15 == (9|14);
output1{test++} = 13 == (13|8);
output1{test++} = 15 == (10|5);
output1{test++} = 11 == (3|11);
output1{test++} = 15 == (15|10);
output1{test++} = 15 == (15|3);
output1{test++} = 11 == (8|3);
output1{test++} = 15 == (7|13);
output1{test++} = 14 == (10|6);
output1{test++} = 15 == (13|15);
output1{test++} = 15 == (12|11);
output1{test++} = 2 == (2|0);
output1{test++} = 15 == (15|10);
output1{test++} = 15 == (13|3);

output1{test++} = (val^1) == (val^1^1^1^1^1);
output1{test++} = (val^1) == (val^1);
output1{test++} = (val^1^1) == (val^(1^1));
output1{test++} = (val^val) == (val^val);
output1{test++} = (val^1) == (1^val);
output1{test++} = (val) == ((1^1)^val);

output1{test++} = 7 == (1^6);
output1{test++} = 6 == (8^14);
output1{test++} = 0 == (5^5);
output1{test++} = 0 == (3^3);
output1{test++} = 9 == (7^14);
output1{test++} = 1 == (13^12);
output1{test++} = 7 == (8^15);
output1{test++} = 12 == (0^12);
output1{test++} = 8 == (10^2);
output1{test++} = 1 == (8^9);
output1{test++} = 8 == (7^15);
output1{test++} = 8 == (5^13);
output1{test++} = 7 == (0^7);
output1{test++} = 11 == (10^1);
output1{test++} = 11 == (12^7);
output1{test++} = 15 == (14^1);
output1{test++} = 12 == (10^6);
output1{test++} = 15 == (13^2);
output1{test++} = 1 == (9^8);
output1{test++} = 0 == (0^0);
output1{test++} = 4 == (15^11);
output1{test++} = 4 == (7^3);
output1{test++} = 4 == (4^0);
output1{test++} = 0 == (0^0);
output1{test++} = 5 == (12^9);
output1{test++} = 0 == (9^9);
output1{test++} = 4 == (4^0);
output1{test++} = 0 == (15^15);
output1{test++} = 5 == (15^10);
output1{test++} = 2 == (3^1);
output1{test++} = 9 == (6^15);
output1{test++} = 0 == (11^11);
output1{test++} = 4 == (7^3);
output1{test++} = 6 == (6^0);
output1{test++} = 1 == (3^2);
output1{test++} = 2 == (13^15);
output1{test++} = 4 == (10^14);
output1{test++} = 3 == (13^14);
output1{test++} = 9 == (7^14);
output1{test++} = 2 == (4^6);
output1{test++} = 5 == (1^4);
output1{test++} = 8 == (15^7);
output1{test++} = 3 == (15^12);
output1{test++} = 8 == (2^10);
output1{test++} = 13 == (14^3);
output1{test++} = 13 == (10^7);
output1{test++} = 5 == (4^1);
output1{test++} = 15 == (13^2);
output1{test++} = 10 == (3^9);
output1{test++} = 3 == (2^1);
output1{test++} = 6 == (10^12);
output1{test++} = 5 == (8^13);
output1{test++} = 0 == (9^9);
output1{test++} = 6 == (1^7);
output1{test++} = 7 == (2^5);
output1{test++} = 13 == (1^12);
output1{test++} = 15 == (15^0);
output1{test++} = 8 == (2^10);
output1{test++} = 10 == (13^7);
output1{test++} = 9 == (13^4);
output1{test++} = 13 == (6^11);
output1{test++} = 11 == (5^14);
output1{test++} = 7 == (7^0);
output1{test++} = 2 == (13^15);
output1{test++} = 8 == (2^10);
output1{test++} = 13 == (0^13);
output1{test++} = 4 == (13^9);
output1{test++} = 10 == (8^2);
output1{test++} = 9 == (8^1);
output1{test++} = 9 == (0^9);
output1{test++} = 9 == (0^9);
output1{test++} = 5 == (12^9);
output1{test++} = 5 == (13^8);
output1{test++} = 0 == (2^2);
output1{test++} = 3 == (11^8);
output1{test++} = 0 == (5^5);
output1{test++} = 8 == (4^12);
output1{test++} = 11 == (2^9);
output1{test++} = 8 == (0^8);
output1{test++} = 5 == (11^14);
output1{test++} = 5 == (10^15);
output1{test++} = 4 == (15^11);
output1{test++} = 10 == (15^5);
output1{test++} = 7 == (15^8);
output1{test++} = 8 == (8^0);
output1{test++} = 1 == (8^9);
output1{test++} = 14 == (6^8);
output1{test++} = 1 == (2^3);
output1{test++} = 14 == (7^9);
output1{test++} = 13 == (10^7);
output1{test++} = 10 == (4^14);
output1{test++} = 4 == (0^4);
output1{test++} = 5 == (7^2);
output1{test++} = 12 == (10^6);
output1{test++} = 0 == (15^15);
output1{test++} = 15 == (2^13);
output1{test++} = 12 == (7^11);
output1{test++} = 11 == (7^12);
output1{test++} = 4 == (14^10);
output1{test++} = 6 == (12^10);





/*val is 9*/
output1{test++} = val-5 == val-1-1-1-1-1;
output1{test++} = 8 == val-1;
output1{test++} = 9 == val-(1-1);
output1{test++} = 0 == val-val;
output1{test++} = -8#testsize == 1#testsize-val;
output1{test++} = -val == (1-1)-val;


output1{test++} = -347#testsize == (234#testsize-581#testsize);
output1{test++} = 674#testsize == (805#testsize-131#testsize);
output1{test++} = -140#testsize == (157#testsize-297#testsize);
output1{test++} = 139#testsize == (943#testsize-804#testsize);
output1{test++} = 774#testsize == (954#testsize-180#testsize);
output1{test++} = -222#testsize == (318#testsize-540#testsize);
output1{test++} = -75#testsize == (217#testsize-292#testsize);
output1{test++} = -61#testsize == (678#testsize-739#testsize);
output1{test++} = 522#testsize == (663#testsize-141#testsize);
output1{test++} = 504#testsize == (733#testsize-229#testsize);
output1{test++} = -697#testsize == (11#testsize-708#testsize);
output1{test++} = 37#testsize == (674#testsize-637#testsize);
output1{test++} = 128#testsize == (714#testsize-586#testsize);
output1{test++} = 14#testsize == (219#testsize-205#testsize);
output1{test++} = -467#testsize == (154#testsize-621#testsize);
output1{test++} = -361#testsize == (522#testsize-883#testsize);
output1{test++} = -44#testsize == (492#testsize-536#testsize);
output1{test++} = 437#testsize == (892#testsize-455#testsize);
output1{test++} = 448#testsize == (883#testsize-435#testsize);
output1{test++} = -131#testsize == (366#testsize-497#testsize);
output1{test++} = 103#testsize == (828#testsize-725#testsize);
output1{test++} = 421#testsize == (820#testsize-399#testsize);
output1{test++} = -316#testsize == (329#testsize-645#testsize);
output1{test++} = -285#testsize == (23#testsize-308#testsize);
output1{test++} = 645#testsize == (854#testsize-209#testsize);
output1{test++} = -147#testsize == (265#testsize-412#testsize);
output1{test++} = -735#testsize == (206#testsize-941#testsize);
output1{test++} = 668#testsize == (816#testsize-148#testsize);
output1{test++} = 173#testsize == (794#testsize-621#testsize);
output1{test++} = -370#testsize == (69#testsize-439#testsize);
output1{test++} = -270#testsize == (640#testsize-910#testsize);
output1{test++} = 78#testsize == (625#testsize-547#testsize);
output1{test++} = 71#testsize == (501#testsize-430#testsize);
output1{test++} = 176#testsize == (507#testsize-331#testsize);
output1{test++} = -901#testsize == (15#testsize-916#testsize);
output1{test++} = -285#testsize == (16#testsize-301#testsize);
output1{test++} = -457#testsize == (121#testsize-578#testsize);
output1{test++} = -83#testsize == (623#testsize-706#testsize);
output1{test++} = -220#testsize == (347#testsize-567#testsize);
output1{test++} = 274#testsize == (688#testsize-414#testsize);
output1{test++} = 108#testsize == (877#testsize-769#testsize);
output1{test++} = -61#testsize == (192#testsize-253#testsize);
output1{test++} = -119#testsize == (816#testsize-935#testsize);
output1{test++} = 45#testsize == (291#testsize-246#testsize);
output1{test++} = 324#testsize == (841#testsize-517#testsize);
output1{test++} = -197#testsize == (263#testsize-460#testsize);
output1{test++} = 770#testsize == (979#testsize-209#testsize);
output1{test++} = -550#testsize == (57#testsize-607#testsize);
output1{test++} = -170#testsize == (40#testsize-210#testsize);
output1{test++} = 765#testsize == (951#testsize-186#testsize);
output1{test++} = -37#testsize == (363#testsize-400#testsize);
output1{test++} = 284#testsize == (601#testsize-317#testsize);
output1{test++} = -473#testsize == (37#testsize-510#testsize);
output1{test++} = -150#testsize == (668#testsize-818#testsize);
output1{test++} = 7#testsize == (395#testsize-388#testsize);
output1{test++} = 712#testsize == (789#testsize-77#testsize);
output1{test++} = 455#testsize == (968#testsize-513#testsize);
output1{test++} = -342#testsize == (6#testsize-348#testsize);
output1{test++} = 46#testsize == (172#testsize-126#testsize);
output1{test++} = -366#testsize == (592#testsize-958#testsize);
output1{test++} = -262#testsize == (56#testsize-318#testsize);
output1{test++} = -187#testsize == (517#testsize-704#testsize);
output1{test++} = -148#testsize == (389#testsize-537#testsize);
output1{test++} = 510#testsize == (784#testsize-274#testsize);
output1{test++} = -671#testsize == (49#testsize-720#testsize);
output1{test++} = -28#testsize == (364#testsize-392#testsize);
output1{test++} = -253#testsize == (85#testsize-338#testsize);
output1{test++} = -591#testsize == (318#testsize-909#testsize);
output1{test++} = -568#testsize == (213#testsize-781#testsize);
output1{test++} = 309#testsize == (967#testsize-658#testsize);
output1{test++} = -181#testsize == (140#testsize-321#testsize);
output1{test++} = -666#testsize == (114#testsize-780#testsize);
output1{test++} = 118#testsize == (396#testsize-278#testsize);
output1{test++} = -877#testsize == (111#testsize-988#testsize);
output1{test++} = 266#testsize == (647#testsize-381#testsize);
output1{test++} = 353#testsize == (889#testsize-536#testsize);
output1{test++} = 402#testsize == (542#testsize-140#testsize);
output1{test++} = 780#testsize == (850#testsize-70#testsize);
output1{test++} = -168#testsize == (731#testsize-899#testsize);
output1{test++} = -463#testsize == (449#testsize-912#testsize);
output1{test++} = -184#testsize == (212#testsize-396#testsize);
output1{test++} = -198#testsize == (245#testsize-443#testsize);
output1{test++} = 71#testsize == (975#testsize-904#testsize);
output1{test++} = 200#testsize == (705#testsize-505#testsize);
output1{test++} = -104#testsize == (100#testsize-204#testsize);
output1{test++} = -171#testsize == (324#testsize-495#testsize);
output1{test++} = 258#testsize == (796#testsize-538#testsize);
output1{test++} = 394#testsize == (779#testsize-385#testsize);
output1{test++} = 89#testsize == (956#testsize-867#testsize);
output1{test++} = -43#testsize == (670#testsize-713#testsize);
output1{test++} = -36#testsize == (566#testsize-602#testsize);
output1{test++} = 453#testsize == (540#testsize-87#testsize);
output1{test++} = -232#testsize == (396#testsize-628#testsize);
output1{test++} = -471#testsize == (507#testsize-978#testsize);
output1{test++} = 349#testsize == (817#testsize-468#testsize);
output1{test++} = 387#testsize == (960#testsize-573#testsize);
output1{test++} = 27#testsize == (350#testsize-323#testsize);
output1{test++} = 26#testsize == (431#testsize-405#testsize);
output1{test++} = -398#testsize == (150#testsize-548#testsize);
output1{test++} = -550#testsize == (80#testsize-630#testsize);
output1{test++} = 218#testsize == (479#testsize-261#testsize);
output1{test++} = -14#testsize == (958#testsize-972#testsize);
output1{test++} = -357#testsize == (133#testsize-490#testsize);
output1{test++} = -242#testsize == (557#testsize-799#testsize);
output1{test++} = -567#testsize == (413#testsize-980#testsize);
output1{test++} = -417#testsize == (232#testsize-649#testsize);
output1{test++} = -116#testsize == (635#testsize-751#testsize);
output1{test++} = -53#testsize == (892#testsize-945#testsize);
output1{test++} = -89#testsize == (344#testsize-433#testsize);
output1{test++} = -326#testsize == (396#testsize-722#testsize);
output1{test++} = -338#testsize == (115#testsize-453#testsize);
output1{test++} = -68#testsize == (305#testsize-373#testsize);
output1{test++} = -5#testsize == (779#testsize-784#testsize);
output1{test++} = -284#testsize == (478#testsize-762#testsize);
output1{test++} = -437#testsize == (454#testsize-891#testsize);
output1{test++} = -416#testsize == (294#testsize-710#testsize);
output1{test++} = 419#testsize == (769#testsize-350#testsize);
output1{test++} = 116#testsize == (466#testsize-350#testsize);
output1{test++} = -465#testsize == (453#testsize-918#testsize);
output1{test++} = 241#testsize == (403#testsize-162#testsize);
output1{test++} = 116#testsize == (186#testsize-70#testsize);
output1{test++} = -645#testsize == (24#testsize-669#testsize);
output1{test++} = 498#testsize == (795#testsize-297#testsize);
output1{test++} = -76#testsize == (109#testsize-185#testsize);
output1{test++} = -26#testsize == (589#testsize-615#testsize);
output1{test++} = -735#testsize == (16#testsize-751#testsize);
output1{test++} = -136#testsize == (613#testsize-749#testsize);
output1{test++} = -275#testsize == (609#testsize-884#testsize);
output1{test++} = 6#testsize == (125#testsize-119#testsize);
output1{test++} = 542#testsize == (557#testsize-15#testsize);
output1{test++} = -270#testsize == (435#testsize-705#testsize);
output1{test++} = 9#testsize == (15#testsize-6#testsize);
output1{test++} = -788#testsize == (119#testsize-907#testsize);
output1{test++} = 627#testsize == (628#testsize-1#testsize);
output1{test++} = -420#testsize == (566#testsize-986#testsize);
output1{test++} = -245#testsize == (249#testsize-494#testsize);
output1{test++} = -92#testsize == (391#testsize-483#testsize);
output1{test++} = 152#testsize == (619#testsize-467#testsize);
output1{test++} = -369#testsize == (474#testsize-843#testsize);
output1{test++} = 48#testsize == (411#testsize-363#testsize);
output1{test++} = 534#testsize == (600#testsize-66#testsize);
output1{test++} = -171#testsize == (556#testsize-727#testsize);
output1{test++} = 468#testsize == (851#testsize-383#testsize);
output1{test++} = 20#testsize == (754#testsize-734#testsize);
output1{test++} = 111#testsize == (355#testsize-244#testsize);
output1{test++} = 378#testsize == (633#testsize-255#testsize);
output1{test++} = 400#testsize == (401#testsize-1#testsize);
output1{test++} = -684#testsize == (95#testsize-779#testsize);
output1{test++} = -10#testsize == (108#testsize-118#testsize);
output1{test++} = 551#testsize == (903#testsize-352#testsize);
output1{test++} = -301#testsize == (677#testsize-978#testsize);
output1{test++} = -228#testsize == (51#testsize-279#testsize);
output1{test++} = 368#testsize == (833#testsize-465#testsize);
output1{test++} = 750#testsize == (789#testsize-39#testsize);
output1{test++} = 369#testsize == (612#testsize-243#testsize);
output1{test++} = -185#testsize == (682#testsize-867#testsize);
output1{test++} = -139#testsize == (772#testsize-911#testsize);
output1{test++} = 309#testsize == (347#testsize-38#testsize);
output1{test++} = 443#testsize == (521#testsize-78#testsize);
output1{test++} = -125#testsize == (378#testsize-503#testsize);
output1{test++} = 458#testsize == (710#testsize-252#testsize);
output1{test++} = 383#testsize == (758#testsize-375#testsize);
output1{test++} = -228#testsize == (452#testsize-680#testsize);
output1{test++} = -61#testsize == (458#testsize-519#testsize);
output1{test++} = -465#testsize == (412#testsize-877#testsize);
output1{test++} = 337#testsize == (776#testsize-439#testsize);
output1{test++} = -27#testsize == (575#testsize-602#testsize);
output1{test++} = 12#testsize == (101#testsize-89#testsize);
output1{test++} = 32#testsize == (420#testsize-388#testsize);
output1{test++} = 141#testsize == (209#testsize-68#testsize);
output1{test++} = -87#testsize == (444#testsize-531#testsize);
output1{test++} = 249#testsize == (438#testsize-189#testsize);
output1{test++} = -795#testsize == (22#testsize-817#testsize);
output1{test++} = 540#testsize == (859#testsize-319#testsize);
output1{test++} = 51#testsize == (754#testsize-703#testsize);
output1{test++} = 65#testsize == (780#testsize-715#testsize);
output1{test++} = -142#testsize == (108#testsize-250#testsize);
output1{test++} = -508#testsize == (335#testsize-843#testsize);
output1{test++} = -451#testsize == (239#testsize-690#testsize);
output1{test++} = -291#testsize == (373#testsize-664#testsize);
output1{test++} = 640#testsize == (844#testsize-204#testsize);
output1{test++} = -233#testsize == (138#testsize-371#testsize);
output1{test++} = 625#testsize == (830#testsize-205#testsize);
output1{test++} = 748#testsize == (836#testsize-88#testsize);
output1{test++} = -452#testsize == (162#testsize-614#testsize);
output1{test++} = 789#testsize == (876#testsize-87#testsize);
output1{test++} = 584#testsize == (704#testsize-120#testsize);
output1{test++} = -129#testsize == (812#testsize-941#testsize);
output1{test++} = 267#testsize == (312#testsize-45#testsize);
output1{test++} = 191#testsize == (566#testsize-375#testsize);
output1{test++} = -418#testsize == (404#testsize-822#testsize);
output1{test++} = -586#testsize == (372#testsize-958#testsize);
output1{test++} = 95#testsize == (801#testsize-706#testsize);
output1{test++} = -253#testsize == (745#testsize-998#testsize);
output1{test++} = 69#testsize == (352#testsize-283#testsize);
output1{test++} = -294#testsize == (594#testsize-888#testsize);
output1{test++} = 330#testsize == (703#testsize-373#testsize);
output1{test++} = 643#testsize == (875#testsize-232#testsize);
output1{test++} = -105#testsize == (663#testsize-768#testsize);
output1{test++} = -390#testsize == (370#testsize-760#testsize);
output1{test++} = 20#testsize == (193#testsize-173#testsize);
output1{test++} = -441#testsize == (498#testsize-939#testsize);
output1{test++} = 764#testsize == (930#testsize-166#testsize);
output1{test++} = 232#testsize == (951#testsize-719#testsize);
output1{test++} = 596#testsize == (945#testsize-349#testsize);
output1{test++} = 375#testsize == (656#testsize-281#testsize);
output1{test++} = 651#testsize == (657#testsize-6#testsize);
output1{test++} = 90#testsize == (174#testsize-84#testsize);
output1{test++} = -770#testsize == (79#testsize-849#testsize);
output1{test++} = 91#testsize == (767#testsize-676#testsize);
output1{test++} = -469#testsize == (370#testsize-839#testsize);
output1{test++} = -286#testsize == (135#testsize-421#testsize);
output1{test++} = -69#testsize == (393#testsize-462#testsize);
output1{test++} = 363#testsize == (724#testsize-361#testsize);
output1{test++} = 246#testsize == (589#testsize-343#testsize);
output1{test++} = 143#testsize == (477#testsize-334#testsize);
output1{test++} = 488#testsize == (901#testsize-413#testsize);
output1{test++} = -198#testsize == (359#testsize-557#testsize);
output1{test++} = 192#testsize == (848#testsize-656#testsize);
output1{test++} = 300#testsize == (843#testsize-543#testsize);
output1{test++} = -620#testsize == (3#testsize-623#testsize);
output1{test++} = 132#testsize == (910#testsize-778#testsize);
output1{test++} = -102#testsize == (630#testsize-732#testsize);
output1{test++} = -523#testsize == (198#testsize-721#testsize);
output1{test++} = 203#testsize == (533#testsize-330#testsize);
output1{test++} = 772#testsize == (886#testsize-114#testsize);
output1{test++} = 871#testsize == (952#testsize-81#testsize);
output1{test++} = -162#testsize == (127#testsize-289#testsize);
output1{test++} = -19#testsize == (463#testsize-482#testsize);
output1{test++} = -614#testsize == (348#testsize-962#testsize);
output1{test++} = 560#testsize == (662#testsize-102#testsize);
output1{test++} = 748#testsize == (880#testsize-132#testsize);
output1{test++} = 657#testsize == (841#testsize-184#testsize);
output1{test++} = 582#testsize == (622#testsize-40#testsize);
output1{test++} = -63#testsize == (852#testsize-915#testsize);
output1{test++} = 539#testsize == (684#testsize-145#testsize);
output1{test++} = 300#testsize == (394#testsize-94#testsize);
output1{test++} = 159#testsize == (876#testsize-717#testsize);
output1{test++} = -485#testsize == (312#testsize-797#testsize);
output1{test++} = 351#testsize == (400#testsize-49#testsize);
output1{test++} = 395#testsize == (652#testsize-257#testsize);
output1{test++} = -914#testsize == (42#testsize-956#testsize);
output1{test++} = -208#testsize == (303#testsize-511#testsize);
output1{test++} = -556#testsize == (86#testsize-642#testsize);
output1{test++} = -304#testsize == (149#testsize-453#testsize);
output1{test++} = 101#testsize == (245#testsize-144#testsize);
output1{test++} = -492#testsize == (85#testsize-577#testsize);
output1{test++} = 352#testsize == (807#testsize-455#testsize);
output1{test++} = -467#testsize == (177#testsize-644#testsize);
output1{test++} = -390#testsize == (179#testsize-569#testsize);
output1{test++} = 385#testsize == (620#testsize-235#testsize);
output1{test++} = -163#testsize == (430#testsize-593#testsize);
output1{test++} = -861#testsize == (106#testsize-967#testsize);
output1{test++} = 255#testsize == (350#testsize-95#testsize);
output1{test++} = -665#testsize == (185#testsize-850#testsize);
output1{test++} = 184#testsize == (649#testsize-465#testsize);
output1{test++} = -832#testsize == (106#testsize-938#testsize);
output1{test++} = 498#testsize == (911#testsize-413#testsize);
output1{test++} = 161#testsize == (556#testsize-395#testsize);
output1{test++} = -561#testsize == (329#testsize-890#testsize);
output1{test++} = -559#testsize == (101#testsize-660#testsize);
output1{test++} = -99#testsize == (244#testsize-343#testsize);
output1{test++} = 675#testsize == (902#testsize-227#testsize);
output1{test++} = -101#testsize == (750#testsize-851#testsize);
output1{test++} = -34#testsize == (786#testsize-820#testsize);
output1{test++} = -232#testsize == (516#testsize-748#testsize);
output1{test++} = 662#testsize == (714#testsize-52#testsize);
output1{test++} = -350#testsize == (5#testsize-355#testsize);
output1{test++} = -45#testsize == (464#testsize-509#testsize);
output1{test++} = -61#testsize == (911#testsize-972#testsize);
output1{test++} = 44#testsize == (374#testsize-330#testsize);
output1{test++} = -23#testsize == (372#testsize-395#testsize);
output1{test++} = -15#testsize == (643#testsize-658#testsize);
output1{test++} = -306#testsize == (112#testsize-418#testsize);
output1{test++} = 424#testsize == (937#testsize-513#testsize);
output1{test++} = 507#testsize == (898#testsize-391#testsize);
output1{test++} = -220#testsize == (270#testsize-490#testsize);
output1{test++} = -166#testsize == (548#testsize-714#testsize);
output1{test++} = -397#testsize == (44#testsize-441#testsize);
output1{test++} = 325#testsize == (889#testsize-564#testsize);
output1{test++} = -797#testsize == (183#testsize-980#testsize);
output1{test++} = 407#testsize == (595#testsize-188#testsize);
output1{test++} = -399#testsize == (131#testsize-530#testsize);
output1{test++} = 179#testsize == (934#testsize-755#testsize);
output1{test++} = -852#testsize == (80#testsize-932#testsize);
output1{test++} = 381#testsize == (524#testsize-143#testsize);
output1{test++} = 315#testsize == (707#testsize-392#testsize);
output1{test++} = 217#testsize == (869#testsize-652#testsize);
output1{test++} = -122#testsize == (802#testsize-924#testsize);
output1{test++} = 356#testsize == (634#testsize-278#testsize);
output1{test++} = 212#testsize == (859#testsize-647#testsize);
output1{test++} = -653#testsize == (183#testsize-836#testsize);
output1{test++} = -258#testsize == (497#testsize-755#testsize);
output1{test++} = 261#testsize == (931#testsize-670#testsize);
output1{test++} = 29#testsize == (172#testsize-143#testsize);
output1{test++} = -706#testsize == (261#testsize-967#testsize);
output1{test++} = -60#testsize == (341#testsize-401#testsize);
output1{test++} = -1#testsize == (580#testsize-581#testsize);
output1{test++} = 99#testsize == (619#testsize-520#testsize);
output1{test++} = 758#testsize == (867#testsize-109#testsize);
output1{test++} = -212#testsize == (620#testsize-832#testsize);
output1{test++} = 28#testsize == (432#testsize-404#testsize);
output1{test++} = 469#testsize == (948#testsize-479#testsize);
output1{test++} = -152#testsize == (192#testsize-344#testsize);
output1{test++} = -209#testsize == (707#testsize-916#testsize);
output1{test++} = 578#testsize == (608#testsize-30#testsize);
output1{test++} = -121#testsize == (326#testsize-447#testsize);
output1{test++} = -546#testsize == (450#testsize-996#testsize);
output1{test++} = -559#testsize == (148#testsize-707#testsize);
output1{test++} = 820#testsize == (906#testsize-86#testsize);
output1{test++} = 379#testsize == (395#testsize-16#testsize);
output1{test++} = -282#testsize == (700#testsize-982#testsize);
output1{test++} = 393#testsize == (695#testsize-302#testsize);
output1{test++} = 273#testsize == (469#testsize-196#testsize);
output1{test++} = 282#testsize == (862#testsize-580#testsize);
output1{test++} = -659#testsize == (58#testsize-717#testsize);
output1{test++} = 317#testsize == (331#testsize-14#testsize);
output1{test++} = 72#testsize == (768#testsize-696#testsize);
output1{test++} = 120#testsize == (188#testsize-68#testsize);
output1{test++} = -299#testsize == (265#testsize-564#testsize);
output1{test++} = -221#testsize == (202#testsize-423#testsize);
output1{test++} = 363#testsize == (600#testsize-237#testsize);
output1{test++} = -344#testsize == (542#testsize-886#testsize);
output1{test++} = -644#testsize == (313#testsize-957#testsize);
output1{test++} = 563#testsize == (986#testsize-423#testsize);
output1{test++} = 569#testsize == (760#testsize-191#testsize);
output1{test++} = -615#testsize == (371#testsize-986#testsize);
output1{test++} = -330#testsize == (644#testsize-974#testsize);
output1{test++} = 210#testsize == (857#testsize-647#testsize);
output1{test++} = 172#testsize == (904#testsize-732#testsize);
output1{test++} = -200#testsize == (680#testsize-880#testsize);
output1{test++} = 486#testsize == (910#testsize-424#testsize);
output1{test++} = -266#testsize == (198#testsize-464#testsize);
output1{test++} = -791#testsize == (160#testsize-951#testsize);
output1{test++} = 646#testsize == (985#testsize-339#testsize);
output1{test++} = 362#testsize == (700#testsize-338#testsize);
output1{test++} = -3#testsize == (252#testsize-255#testsize);
output1{test++} = -133#testsize == (467#testsize-600#testsize);
output1{test++} = 822#testsize == (910#testsize-88#testsize);
output1{test++} = 5#testsize == (223#testsize-218#testsize);
output1{test++} = 142#testsize == (432#testsize-290#testsize);
output1{test++} = -573#testsize == (311#testsize-884#testsize);
output1{test++} = 578#testsize == (593#testsize-15#testsize);
output1{test++} = -20#testsize == (720#testsize-740#testsize);
output1{test++} = -184#testsize == (336#testsize-520#testsize);
output1{test++} = -10#testsize == (425#testsize-435#testsize);
output1{test++} = -324#testsize == (572#testsize-896#testsize);
output1{test++} = 851#testsize == (883#testsize-32#testsize);
output1{test++} = -658#testsize == (227#testsize-885#testsize);
output1{test++} = 711#testsize == (995#testsize-284#testsize);
output1{test++} = -73#testsize == (190#testsize-263#testsize);
output1{test++} = -210#testsize == (206#testsize-416#testsize);
output1{test++} = 162#testsize == (557#testsize-395#testsize);
output1{test++} = 382#testsize == (872#testsize-490#testsize);
output1{test++} = 203#testsize == (348#testsize-145#testsize);
output1{test++} = -39#testsize == (896#testsize-935#testsize);
output1{test++} = 209#testsize == (721#testsize-512#testsize);
output1{test++} = -558#testsize == (180#testsize-738#testsize);
output1{test++} = -707#testsize == (105#testsize-812#testsize);
output1{test++} = -246#testsize == (124#testsize-370#testsize);
output1{test++} = -223#testsize == (31#testsize-254#testsize);
output1{test++} = -404#testsize == (510#testsize-914#testsize);
output1{test++} = 694#testsize == (912#testsize-218#testsize);
output1{test++} = 371#testsize == (477#testsize-106#testsize);
output1{test++} = -376#testsize == (526#testsize-902#testsize);
output1{test++} = 835#testsize == (854#testsize-19#testsize);
output1{test++} = -616#testsize == (62#testsize-678#testsize);
output1{test++} = -214#testsize == (746#testsize-960#testsize);
output1{test++} = 468#testsize == (968#testsize-500#testsize);
output1{test++} = 353#testsize == (761#testsize-408#testsize);
output1{test++} = -273#testsize == (635#testsize-908#testsize);
output1{test++} = -206#testsize == (9#testsize-215#testsize);
output1{test++} = 540#testsize == (554#testsize-14#testsize);
output1{test++} = -42#testsize == (330#testsize-372#testsize);
output1{test++} = 194#testsize == (751#testsize-557#testsize);
output1{test++} = -561#testsize == (437#testsize-998#testsize);
output1{test++} = 310#testsize == (794#testsize-484#testsize);
output1{test++} = 34#testsize == (729#testsize-695#testsize);
output1{test++} = 535#testsize == (959#testsize-424#testsize);
output1{test++} = -298#testsize == (513#testsize-811#testsize);
output1{test++} = 488#testsize == (681#testsize-193#testsize);
output1{test++} = -684#testsize == (77#testsize-761#testsize);
output1{test++} = 828#testsize == (950#testsize-122#testsize);
output1{test++} = 140#testsize == (700#testsize-560#testsize);
output1{test++} = 153#testsize == (529#testsize-376#testsize);
output1{test++} = 78#testsize == (851#testsize-773#testsize);
output1{test++} = 255#testsize == (318#testsize-63#testsize);
output1{test++} = 340#testsize == (820#testsize-480#testsize);
output1{test++} = 767#testsize == (830#testsize-63#testsize);
output1{test++} = -345#testsize == (222#testsize-567#testsize);
output1{test++} = -78#testsize == (103#testsize-181#testsize);
output1{test++} = 123#testsize == (349#testsize-226#testsize);
output1{test++} = -24#testsize == (582#testsize-606#testsize);
output1{test++} = 288#testsize == (998#testsize-710#testsize);
output1{test++} = -43#testsize == (876#testsize-919#testsize);
output1{test++} = 173#testsize == (602#testsize-429#testsize);
output1{test++} = -38#testsize == (307#testsize-345#testsize);
output1{test++} = 90#testsize == (204#testsize-114#testsize);
output1{test++} = -173#testsize == (195#testsize-368#testsize);
output1{test++} = 70#testsize == (256#testsize-186#testsize);
output1{test++} = 683#testsize == (909#testsize-226#testsize);
output1{test++} = -437#testsize == (89#testsize-526#testsize);
output1{test++} = 599#testsize == (939#testsize-340#testsize);
output1{test++} = -710#testsize == (183#testsize-893#testsize);
output1{test++} = -14#testsize == (633#testsize-647#testsize);
output1{test++} = -42#testsize == (708#testsize-750#testsize);
output1{test++} = -293#testsize == (381#testsize-674#testsize);
output1{test++} = 558#testsize == (762#testsize-204#testsize);
output1{test++} = -66#testsize == (207#testsize-273#testsize);
output1{test++} = 264#testsize == (314#testsize-50#testsize);
output1{test++} = -79#testsize == (684#testsize-763#testsize);
output1{test++} = 302#testsize == (747#testsize-445#testsize);
output1{test++} = 59#testsize == (573#testsize-514#testsize);
output1{test++} = 325#testsize == (958#testsize-633#testsize);
output1{test++} = -61#testsize == (191#testsize-252#testsize);
output1{test++} = 134#testsize == (914#testsize-780#testsize);
output1{test++} = -167#testsize == (567#testsize-734#testsize);
output1{test++} = 290#testsize == (352#testsize-62#testsize);
output1{test++} = 621#testsize == (820#testsize-199#testsize);
output1{test++} = -13#testsize == (421#testsize-434#testsize);
output1{test++} = 438#testsize == (952#testsize-514#testsize);
output1{test++} = 681#testsize == (847#testsize-166#testsize);
output1{test++} = 414#testsize == (940#testsize-526#testsize);
output1{test++} = -480#testsize == (30#testsize-510#testsize);
output1{test++} = -736#testsize == (88#testsize-824#testsize);
output1{test++} = -279#testsize == (321#testsize-600#testsize);
output1{test++} = 404#testsize == (692#testsize-288#testsize);
output1{test++} = 114#testsize == (250#testsize-136#testsize);
output1{test++} = -132#testsize == (565#testsize-697#testsize);
output1{test++} = -28#testsize == (47#testsize-75#testsize);
output1{test++} = 542#testsize == (791#testsize-249#testsize);
output1{test++} = 30#testsize == (278#testsize-248#testsize);
output1{test++} = -269#testsize == (203#testsize-472#testsize);
output1{test++} = -446#testsize == (236#testsize-682#testsize);
output1{test++} = 288#testsize == (998#testsize-710#testsize);
output1{test++} = -97#testsize == (890#testsize-987#testsize);
output1{test++} = -78#testsize == (591#testsize-669#testsize);
output1{test++} = 681#testsize == (804#testsize-123#testsize);
output1{test++} = 436#testsize == (754#testsize-318#testsize);
output1{test++} = -31#testsize == (767#testsize-798#testsize);
output1{test++} = -26#testsize == (141#testsize-167#testsize);
output1{test++} = -76#testsize == (735#testsize-811#testsize);
output1{test++} = 316#testsize == (326#testsize-10#testsize);
output1{test++} = -38#testsize == (442#testsize-480#testsize);
output1{test++} = 55#testsize == (623#testsize-568#testsize);
output1{test++} = -182#testsize == (213#testsize-395#testsize);
output1{test++} = 171#testsize == (399#testsize-228#testsize);
output1{test++} = -763#testsize == (145#testsize-908#testsize);
output1{test++} = 105#testsize == (942#testsize-837#testsize);
output1{test++} = 58#testsize == (432#testsize-374#testsize);
output1{test++} = 178#testsize == (717#testsize-539#testsize);
output1{test++} = 102#testsize == (762#testsize-660#testsize);
output1{test++} = -307#testsize == (576#testsize-883#testsize);
output1{test++} = -129#testsize == (495#testsize-624#testsize);
output1{test++} = -468#testsize == (329#testsize-797#testsize);
output1{test++} = -878#testsize == (16#testsize-894#testsize);
output1{test++} = -113#testsize == (482#testsize-595#testsize);
output1{test++} = -537#testsize == (7#testsize-544#testsize);
output1{test++} = -45#testsize == (151#testsize-196#testsize);
output1{test++} = -860#testsize == (23#testsize-883#testsize);
output1{test++} = -257#testsize == (149#testsize-406#testsize);
output1{test++} = -436#testsize == (34#testsize-470#testsize);
output1{test++} = -390#testsize == (459#testsize-849#testsize);
output1{test++} = 283#testsize == (285#testsize-2#testsize);
output1{test++} = 540#testsize == (612#testsize-72#testsize);
output1{test++} = -75#testsize == (386#testsize-461#testsize);
output1{test++} = -438#testsize == (5#testsize-443#testsize);
output1{test++} = 256#testsize == (489#testsize-233#testsize);
output1{test++} = -143#testsize == (57#testsize-200#testsize);
output1{test++} = 402#testsize == (723#testsize-321#testsize);
output1{test++} = -106#testsize == (879#testsize-985#testsize);
output1{test++} = -86#testsize == (870#testsize-956#testsize);
output1{test++} = -370#testsize == (564#testsize-934#testsize);
output1{test++} = 36#testsize == (662#testsize-626#testsize);
output1{test++} = 664#testsize == (819#testsize-155#testsize);
output1{test++} = 259#testsize == (766#testsize-507#testsize);
output1{test++} = 10#testsize == (822#testsize-812#testsize);
output1{test++} = -45#testsize == (690#testsize-735#testsize);
output1{test++} = -485#testsize == (399#testsize-884#testsize);
output1{test++} = -64#testsize == (640#testsize-704#testsize);
output1{test++} = -6#testsize == (239#testsize-245#testsize);
output1{test++} = -481#testsize == (347#testsize-828#testsize);
output1{test++} = 248#testsize == (930#testsize-682#testsize);
output1{test++} = -418#testsize == (252#testsize-670#testsize);
output1{test++} = -43#testsize == (694#testsize-737#testsize);
output1{test++} = 401#testsize == (661#testsize-260#testsize);
output1{test++} = 602#testsize == (670#testsize-68#testsize);
output1{test++} = 264#testsize == (811#testsize-547#testsize);
output1{test++} = -87#testsize == (71#testsize-158#testsize);
output1{test++} = 282#testsize == (648#testsize-366#testsize);
output1{test++} = -29#testsize == (614#testsize-643#testsize);
output1{test++} = 451#testsize == (633#testsize-182#testsize);
output1{test++} = 563#testsize == (851#testsize-288#testsize);
output1{test++} = -472#testsize == (427#testsize-899#testsize);
output1{test++} = -458#testsize == (207#testsize-665#testsize);
output1{test++} = 68#testsize == (685#testsize-617#testsize);
output1{test++} = -132#testsize == (109#testsize-241#testsize);
output1{test++} = 132#testsize == (306#testsize-174#testsize);
output1{test++} = 356#testsize == (768#testsize-412#testsize);
output1{test++} = 230#testsize == (565#testsize-335#testsize);



output1{test++} = -203#testsize == (-624#testsize- -421#testsize);
output1{test++} = -332#testsize == (-383#testsize- -51#testsize);
output1{test++} = 29#testsize == (-23#testsize- -52#testsize);
output1{test++} = 21#testsize == (-145#testsize- -166#testsize);
output1{test++} = 546#testsize == (-25#testsize- -571#testsize);
output1{test++} = -612#testsize == (-991#testsize- -379#testsize);
output1{test++} = -627#testsize == (-654#testsize- -27#testsize);
output1{test++} = 320#testsize == (-594#testsize- -914#testsize);
output1{test++} = -139#testsize == (-687#testsize- -548#testsize);
output1{test++} = 642#testsize == (-261#testsize- -903#testsize);
output1{test++} = 4#testsize == (-947#testsize- -951#testsize);
output1{test++} = -387#testsize == (-510#testsize- -123#testsize);
output1{test++} = -672#testsize == (-919#testsize- -247#testsize);
output1{test++} = 3#testsize == (-134#testsize- -137#testsize);
output1{test++} = -401#testsize == (-894#testsize- -493#testsize);
output1{test++} = -73#testsize == (-471#testsize- -398#testsize);
output1{test++} = -557#testsize == (-768#testsize- -211#testsize);
output1{test++} = 88#testsize == (-329#testsize- -417#testsize);
output1{test++} = -226#testsize == (-570#testsize- -344#testsize);
output1{test++} = -61#testsize == (-800#testsize- -739#testsize);
output1{test++} = -392#testsize == (-642#testsize- -250#testsize);
output1{test++} = 138#testsize == (-254#testsize- -392#testsize);
output1{test++} = -98#testsize == (-380#testsize- -282#testsize);
output1{test++} = -278#testsize == (-473#testsize- -195#testsize);
output1{test++} = 907#testsize == (-14#testsize- -921#testsize);







/* multiplication tests */


/*val is 9*/
output1{test++} = val*6 == val*2*3;
output1{test++} = 9 == val*1;
output1{test++} = 9 == val*(1*1);
output1{test++} = 81 == val*val;
output1{test++} = 9#testsize == 1#testsize*val;
output1{test++} = val == (1*1)*val;

output1{test++} = 143#testsize == (-13#testsize* -11#testsize);
output1{test++} = 210#testsize == (-15#testsize* -14#testsize);
output1{test++} = 9#testsize == (-1#testsize* -9#testsize);
output1{test++} = 6#testsize == (-6#testsize* -1#testsize);
output1{test++} = 26#testsize == (-2#testsize* -13#testsize);
output1{test++} = 88#testsize == (-8#testsize* -11#testsize);
output1{test++} = 27#testsize == (-3#testsize* -9#testsize);
output1{test++} = 32#testsize == (-4#testsize* -8#testsize);
output1{test++} = 32#testsize == (-8#testsize* -4#testsize);
output1{test++} = 90#testsize == (-15#testsize* -6#testsize);
output1{test++} = 4#testsize == (-4#testsize* -1#testsize);
output1{test++} = 30#testsize == (-6#testsize* -5#testsize);
output1{test++} = 42#testsize == (-7#testsize* -6#testsize);
output1{test++} = 90#testsize == (-9#testsize* -10#testsize);
output1{test++} = 15#testsize == (-1#testsize* -15#testsize);
output1{test++} = 0#testsize == (-0#testsize* -15#testsize);
output1{test++} = 0#testsize == (-6#testsize* -0#testsize);
output1{test++} = 0#testsize == (-0#testsize* -9#testsize);
output1{test++} = 16#testsize == (-4#testsize* -4#testsize);
output1{test++} = 16#testsize == (-8#testsize* -2#testsize);
output1{test++} = 81#testsize == (-9#testsize* -9#testsize);
output1{test++} = 12#testsize == (-3#testsize* -4#testsize);
output1{test++} = 110#testsize == (-10#testsize* -11#testsize);
output1{test++} = 120#testsize == (-12#testsize* -10#testsize);
output1{test++} = 88#testsize == (-8#testsize* -11#testsize);

output1{test++} = 0#testsize == (1#testsize* 0#testsize);
output1{test++} = 0#testsize == (11#testsize* 0#testsize);
output1{test++} = 70#testsize == (5#testsize* 14#testsize);
output1{test++} = 48#testsize == (6#testsize* 8#testsize);
output1{test++} = 12#testsize == (4#testsize* 3#testsize);
output1{test++} = 168#testsize == (12#testsize* 14#testsize);
output1{test++} = 33#testsize == (11#testsize* 3#testsize);
output1{test++} = 12#testsize == (6#testsize* 2#testsize);
output1{test++} = 42#testsize == (7#testsize* 6#testsize);
output1{test++} = 44#testsize == (4#testsize* 11#testsize);
output1{test++} = 16#testsize == (4#testsize* 4#testsize);
output1{test++} = 0#testsize == (1#testsize* 0#testsize);
output1{test++} = 91#testsize == (13#testsize* 7#testsize);
output1{test++} = 56#testsize == (8#testsize* 7#testsize);
output1{test++} = 108#testsize == (9#testsize* 12#testsize);
output1{test++} = 75#testsize == (5#testsize* 15#testsize);
output1{test++} = 24#testsize == (12#testsize* 2#testsize);
output1{test++} = 77#testsize == (11#testsize* 7#testsize);
output1{test++} = 90#testsize == (15#testsize* 6#testsize);
output1{test++} = 42#testsize == (6#testsize* 7#testsize);
output1{test++} = 0#testsize == (0#testsize* 0#testsize);
output1{test++} = 24#testsize == (2#testsize* 12#testsize);
output1{test++} = 26#testsize == (13#testsize* 2#testsize);
output1{test++} = 0#testsize == (0#testsize* 12#testsize);
output1{test++} = 27#testsize == (9#testsize* 3#testsize);

output1{test++} = 93294#testsize == (657#testsize* 142#testsize);
output1{test++} = 564525#testsize == (579#testsize* 975#testsize);
output1{test++} = 319823#testsize == (427#testsize* 749#testsize);
output1{test++} = 282846#testsize == (799#testsize* 354#testsize);
output1{test++} = 225342#testsize == (234#testsize* 963#testsize);
output1{test++} = 49941#testsize == (537#testsize* 93#testsize);
output1{test++} = 412764#testsize == (636#testsize* 649#testsize);
output1{test++} = 156738#testsize == (906#testsize* 173#testsize);
output1{test++} = 170730#testsize == (813#testsize* 210#testsize);
output1{test++} = 179112#testsize == (204#testsize* 878#testsize);
output1{test++} = 42952#testsize == (364#testsize* 118#testsize);
output1{test++} = 93975#testsize == (105#testsize* 895#testsize);
output1{test++} = 50512#testsize == (77#testsize* 656#testsize);
output1{test++} = 232193#testsize == (689#testsize* 337#testsize);
output1{test++} = 484430#testsize == (502#testsize* 965#testsize);
output1{test++} = 605375#testsize == (835#testsize* 725#testsize);
output1{test++} = 157500#testsize == (625#testsize* 252#testsize);
output1{test++} = 8806#testsize == (119#testsize* 74#testsize);
output1{test++} = 355425#testsize == (525#testsize* 677#testsize);
output1{test++} = 131892#testsize == (758#testsize* 174#testsize);
output1{test++} = 395458#testsize == (601#testsize* 658#testsize);
output1{test++} = 138908#testsize == (847#testsize* 164#testsize);
output1{test++} = 26028#testsize == (54#testsize* 482#testsize);
output1{test++} = 684764#testsize == (887#testsize* 772#testsize);
output1{test++} = 263328#testsize == (312#testsize* 844#testsize);


output1{test++} = -197722#testsize == (-487#testsize* 406#testsize);
output1{test++} = -9744#testsize == (-28#testsize* 348#testsize);
output1{test++} = -40158#testsize == (-138#testsize* 291#testsize);
output1{test++} = 89486#testsize == (202#testsize* 443#testsize);
output1{test++} = 86726#testsize == (421#testsize* 206#testsize);
output1{test++} = 49200#testsize == (200#testsize* 246#testsize);
output1{test++} = 70942#testsize == (449#testsize* 158#testsize);
output1{test++} = -16779#testsize == (329#testsize* -51#testsize);
output1{test++} = 95081#testsize == (289#testsize* 329#testsize);
output1{test++} = -142742#testsize == (-298#testsize* 479#testsize);
output1{test++} = -183456#testsize == (-294#testsize* 624#testsize);
output1{test++} = 2506#testsize == (14#testsize* 179#testsize);
output1{test++} = 115872#testsize == (408#testsize* 284#testsize);
output1{test++} = 40320#testsize == (105#testsize* 384#testsize);
output1{test++} = 14454#testsize == (33#testsize* 438#testsize);
output1{test++} = 194832#testsize == (297#testsize* 656#testsize);
output1{test++} = -3420#testsize == (15#testsize* -228#testsize);
output1{test++} = -221414#testsize == (-298#testsize* 743#testsize);
output1{test++} = -43008#testsize == (-168#testsize* 256#testsize);
output1{test++} = 96229#testsize == (413#testsize* 233#testsize);
output1{test++} = 5320#testsize == (-140#testsize* -38#testsize);
output1{test++} = 15876#testsize == (196#testsize* 81#testsize);
output1{test++} = -80388#testsize == (-126#testsize* 638#testsize);
output1{test++} = -34580#testsize == (-76#testsize* 455#testsize);
output1{test++} = 5456#testsize == (62#testsize* 88#testsize);


output1{test++} = val/6 == val/2/3;
output1{test++} = 9 == val/1;
output1{test++} = 9 == val/(1/1);
output1{test++} = 1 == val/val;
output1{test++} = 0#testsize == 1#testsize/val;
output1{test++} = 0 == (1/1)/val;



output1{test++} = val%2%3 == val%2%3;
output1{test++} = 0 == val%1;
output1{test++} = 1 == val%(8%3);
output1{test++} = 0 == val%val;
output1{test++} = 1#testsize == 1#testsize%val;
output1{test++} = 0 == (1%1)%val;


output1{test++} = (8 << (1 + 0)) == 16;
output1{test++} = (val << (1 + 0)) == 18;
output1{test++} = ((val+1) << (1 + 0)) == 20;

output1{test++} = 1408 == (176<< 3);
output1{test++} = 874 == (874<< 0);
output1{test++} = 3860 == (965<< 2);
output1{test++} = 14592 == (456<< 5);
output1{test++} = 40320 == (630<< 6);
output1{test++} = 142848 == (558<< 8);
output1{test++} = 182 == (182<< 0);
output1{test++} = 71168 == (556<< 7);
output1{test++} = 450560 == (880<< 9);
output1{test++} = 86016 == (672<< 7);
output1{test++} = 666 == (666<< 0);
output1{test++} = 101760 == (795<< 7);
output1{test++} = 1648 == (412<< 2);
output1{test++} = 41728 == (163<< 8);
output1{test++} = 70016 == (547<< 7);
output1{test++} = 3476 == (869<< 2);
output1{test++} = 924 == (231<< 2);
output1{test++} = 30208 == (118<< 8);
output1{test++} = 163072 == (637<< 8);
output1{test++} = 102144 == (399<< 8);
output1{test++} = 672 == (42<< 4);
output1{test++} = 11104 == (347<< 5);
output1{test++} = 7488 == (117<< 6);
output1{test++} = 975 == (975<< 0);
output1{test++} = 876 == (438<< 1);
output1{test++} = 15440 == (965<< 4);
output1{test++} = 2436 == (609<< 2);
output1{test++} = 11968 == (748<< 4);
output1{test++} = 5776 == (722<< 3);
output1{test++} = 17344 == (271<< 6);
output1{test++} = 484 == (484<< 0);
output1{test++} = 159744 == (624<< 8);
output1{test++} = 26176 == (818<< 5);
output1{test++} = 94464 == (369<< 8);
output1{test++} = 0 == (0<< 0);
output1{test++} = 2424 == (303<< 3);
output1{test++} = 10864 == (679<< 4);
output1{test++} = 73216 == (572<< 7);
output1{test++} = 851 == (851<< 0);
output1{test++} = 13168 == (823<< 4);
output1{test++} = 4400 == (275<< 4);
output1{test++} = 126208 == (986<< 7);
output1{test++} = 925 == (925<< 0);
output1{test++} = 7552 == (472<< 4);
output1{test++} = 423424 == (827<< 9);
output1{test++} = 129 == (129<< 0);
output1{test++} = 35840 == (70<< 9);
output1{test++} = 21600 == (675<< 5);
output1{test++} = 1306 == (653<< 1);
output1{test++} = 136960 == (535<< 8);
output1{test++} = 1508 == (754<< 1);
output1{test++} = 2196 == (549<< 2);
output1{test++} = 770 == (385<< 1);
output1{test++} = 96 == (12<< 3);
output1{test++} = 20352 == (318<< 6);
output1{test++} = 7760 == (970<< 3);
output1{test++} = 848 == (106<< 3);
output1{test++} = 8832 == (276<< 5);
output1{test++} = 4424 == (553<< 3);
output1{test++} = 20864 == (652<< 5);
output1{test++} = 636 == (636<< 0);
output1{test++} = 333824 == (652<< 9);
output1{test++} = 1456 == (182<< 3);
output1{test++} = 30304 == (947<< 5);
output1{test++} = 16192 == (253<< 6);
output1{test++} = 14016 == (219<< 6);
output1{test++} = 8896 == (278<< 5);
output1{test++} = 387 == (387<< 0);
output1{test++} = 37184 == (581<< 6);
output1{test++} = 31488 == (984<< 5);
output1{test++} = 15872 == (248<< 6);
output1{test++} = 27744 == (867<< 5);
output1{test++} = 87808 == (343<< 8);
output1{test++} = 290304 == (567<< 9);
output1{test++} = 4120 == (515<< 3);
output1{test++} = 3400 == (850<< 2);
output1{test++} = 110592 == (864<< 7);
output1{test++} = 7152 == (894<< 3);
output1{test++} = 31232 == (976<< 5);
output1{test++} = 53376 == (834<< 6);
output1{test++} = 27904 == (109<< 8);
output1{test++} = 406016 == (793<< 9);
output1{test++} = 88576 == (346<< 8);
output1{test++} = 6392 == (799<< 3);
output1{test++} = 768 == (6<< 7);
output1{test++} = 16000 == (500<< 5);
output1{test++} = 5744 == (359<< 4);
output1{test++} = 24064 == (94<< 8);
output1{test++} = 12736 == (199<< 6);
output1{test++} = 568 == (71<< 3);
output1{test++} = 1016 == (254<< 2);
output1{test++} = 39936 == (624<< 6);
output1{test++} = 40128 == (627<< 6);
output1{test++} = 464 == (232<< 1);
output1{test++} = 14592 == (456<< 5);
output1{test++} = 40832 == (638<< 6);
output1{test++} = 281 == (281<< 0);
output1{test++} = 1020 == (255<< 2);
output1{test++} = 128 == (64<< 1);
output1{test++} = 48 == (12<< 2);


output1{test++} = (8 >> (1 + 0)) == 4;
output1{test++} = (val >> (1 + 0)) == 4;
output1{test++} = ((val+1) >> (1 + 0)) == 5;

output1{test++} = 92 == (47567>> 9);
output1{test++} = 3104 == (49673>> 4);
output1{test++} = 1135 == (36334>> 5);
output1{test++} = 14273 == (28546>> 1);
output1{test++} = 22084 == (44168>> 1);
output1{test++} = 712 == (45617>> 6);
output1{test++} = 768 == (6144>> 3);
output1{test++} = 139 == (17890>> 7);
output1{test++} = 118 == (7604>> 6);
output1{test++} = 4106 == (8212>> 1);
output1{test++} = 4603 == (9206>> 1);
output1{test++} = 133 == (17060>> 7);
output1{test++} = 1100 == (35212>> 5);
output1{test++} = 1970 == (7883>> 2);
output1{test++} = 185 == (5921>> 5);
output1{test++} = 63 == (32705>> 9);
output1{test++} = 4 == (1253>> 8);
output1{test++} = 326 == (41756>> 7);
output1{test++} = 19624 == (19624>> 0);
output1{test++} = 164 == (10505>> 6);
output1{test++} = 42030 == (42030>> 0);
output1{test++} = 181 == (23254>> 7);
output1{test++} = 19608 == (39216>> 1);
output1{test++} = 5658 == (22633>> 2);
output1{test++} = 33 == (2175>> 6);
output1{test++} = 539 == (8625>> 4);
output1{test++} = 5608 == (44869>> 3);
output1{test++} = 1887 == (30199>> 4);
output1{test++} = 1145 == (9162>> 3);
output1{test++} = 18856 == (37712>> 1);
output1{test++} = 1262 == (40400>> 5);
output1{test++} = 52 == (26898>> 9);
output1{test++} = 20325 == (40651>> 1);
output1{test++} = 5312 == (42496>> 3);
output1{test++} = 1303 == (41712>> 5);
output1{test++} = 26788 == (26788>> 0);
output1{test++} = 18692 == (37385>> 1);
output1{test++} = 49544 == (49544>> 0);
output1{test++} = 21449 == (42899>> 1);
output1{test++} = 858 == (6865>> 3);
output1{test++} = 11693 == (46772>> 2);
output1{test++} = 3209 == (3209>> 0);
output1{test++} = 72 == (36988>> 9);
output1{test++} = 7320 == (7320>> 0);
output1{test++} = 152 == (38919>> 8);
output1{test++} = 48285 == (48285>> 0);
output1{test++} = 340 == (10907>> 5);
output1{test++} = 162 == (41630>> 8);
output1{test++} = 306 == (9813>> 5);
output1{test++} = 28490 == (28490>> 0);
output1{test++} = 7306 == (29227>> 2);
output1{test++} = 5992 == (47943>> 3);
output1{test++} = 78 == (19997>> 8);
output1{test++} = 44734 == (44734>> 0);
output1{test++} = 1901 == (30428>> 4);
output1{test++} = 30639 == (30639>> 0);
output1{test++} = 35 == (18263>> 9);
output1{test++} = 2390 == (38241>> 4);
output1{test++} = 78 == (39983>> 9);
output1{test++} = 51 == (26538>> 9);
output1{test++} = 1440 == (46086>> 5);
output1{test++} = 418 == (13400>> 5);
output1{test++} = 1066 == (17064>> 4);
output1{test++} = 47 == (24362>> 9);
output1{test++} = 45765 == (45765>> 0);
output1{test++} = 152 == (39086>> 8);
output1{test++} = 548 == (35099>> 6);
output1{test++} = 372 == (11911>> 5);
output1{test++} = 30380 == (30380>> 0);
output1{test++} = 8186 == (32746>> 2);
output1{test++} = 27393 == (27393>> 0);
output1{test++} = 202 == (25877>> 7);
output1{test++} = 2570 == (41131>> 4);
output1{test++} = 19 == (2493>> 7);
output1{test++} = 51 == (26241>> 9);
output1{test++} = 149 == (9587>> 6);
output1{test++} = 1998 == (31979>> 4);
output1{test++} = 54 == (27907>> 9);
output1{test++} = 10354 == (41418>> 2);
output1{test++} = 3980 == (7960>> 1);
output1{test++} = 672 == (43026>> 6);
output1{test++} = 434 == (6959>> 4);
output1{test++} = 31125 == (31125>> 0);
output1{test++} = 210 == (3366>> 4);
output1{test++} = 902 == (14444>> 4);
output1{test++} = 1650 == (13201>> 3);
output1{test++} = 199 == (25557>> 7);
output1{test++} = 698 == (11177>> 4);
output1{test++} = 23 == (2980>> 7);
output1{test++} = 1785 == (28561>> 4);
output1{test++} = 32 == (16599>> 9);
output1{test++} = 284 == (36358>> 7);
output1{test++} = 2272 == (36363>> 4);
output1{test++} = 2052 == (32834>> 4);
output1{test++} = 17274 == (34548>> 1);
output1{test++} = 10350 == (10350>> 0);
output1{test++} = 740 == (47373>> 6);
output1{test++} = 585 == (9362>> 4);
output1{test++} = 327 == (20940>> 6);
output1{test++} = 3725 == (29802>> 3);



output1{test++} = (8 <<> (1 + 0)) == 16;
output1{test++} = (val <<> (1 + 0)) == 18;
output1{test++} = ((val+1) <<> (1 + 0)) == 20;


output1{test++} = 88518656#testsize == (43222#testsize<<> 11);
output1{test++} = 1719664642#testsize == (2458#testsize<<> 22);
output1{test++} = 41803776#testsize == (40824#testsize<<> 10);
output1{test++} = 18809856#testsize == (18369#testsize<<> 10);
output1{test++} = 9552#testsize == (4776#testsize<<> 1);
output1{test++} = 3817#testsize == (30536#testsize<<> 29);
output1{test++} = -1073739269#testsize == (20446#testsize<<> 29);
output1{test++} = 13352448#testsize == (26079#testsize<<> 9);
output1{test++} = 2029780993#testsize == (24127#testsize<<> 18);
output1{test++} = -1124073342#testsize == (33469#testsize<<> 24);
output1{test++} = -716439551#testsize == (30035#testsize<<> 18);
output1{test++} = -452984770#testsize == (16101#testsize<<> 24);
output1{test++} = 8378#testsize == (16756#testsize<<> 31);
output1{test++} = -1728053234#testsize == (14948#testsize<<> 22);
output1{test++} = 224320#testsize == (14020#testsize<<> 4);
output1{test++} = 124387328#testsize == (1898#testsize<<> 16);
output1{test++} = 2715328#testsize == (42427#testsize<<> 6);
output1{test++} = -2147464495#testsize == (38307#testsize<<> 31);
output1{test++} = 36088#testsize == (18044#testsize<<> 1);
output1{test++} = 688912#testsize == (43057#testsize<<> 4);
output1{test++} = -1073739372#testsize == (9811#testsize<<> 30);
output1{test++} = 261632#testsize == (4088#testsize<<> 6);
output1{test++} = 1584267264#testsize == (24174#testsize<<> 16);
output1{test++} = 1157627969#testsize == (16709#testsize<<> 24);
output1{test++} = 671089953#testsize == (42021#testsize<<> 27);
output1{test++} = 1047396352#testsize == (31964#testsize<<> 15);
output1{test++} = 22441984#testsize == (5479#testsize<<> 12);
output1{test++} = -1026555900#testsize == (19501#testsize<<> 20);
output1{test++} = 83012#testsize == (41506#testsize<<> 1);
output1{test++} = -260046790#testsize == (30177#testsize<<> 23);
output1{test++} = 477424#testsize == (29839#testsize<<> 4);
output1{test++} = 1523449856#testsize == (11623#testsize<<> 17);
output1{test++} = -1437073408#testsize == (43608#testsize<<> 16);
output1{test++} = -1702887347#testsize == (39733#testsize<<> 23);
output1{test++} = 676167680#testsize == (41270#testsize<<> 14);
output1{test++} = -2100297724#testsize == (18477#testsize<<> 20);
output1{test++} = -1342176995#testsize == (4571#testsize<<> 28);
output1{test++} = -1276116984#testsize == (35647#testsize<<> 20);
output1{test++} = 112758784#testsize == (27529#testsize<<> 12);
output1{test++} = 82388992#testsize == (40229#testsize<<> 11);
output1{test++} = 1435264#testsize == (11213#testsize<<> 7);
output1{test++} = 714063872#testsize == (43583#testsize<<> 14);
output1{test++} = 2373376#testsize == (37084#testsize<<> 6);
output1{test++} = -1811939027#testsize == (38602#testsize<<> 25);
output1{test++} = 536870994#testsize == (5256#testsize<<> 26);
output1{test++} = 2130706626#testsize == (49791#testsize<<> 24);
output1{test++} = 1643118593#testsize == (11326#testsize<<> 19);
output1{test++} = 318767175#testsize == (36390#testsize<<> 23);
output1{test++} = -973078525#testsize == (30912#testsize<<> 19);
output1{test++} = 877248#testsize == (27414#testsize<<> 5);
output1{test++} = -1026555902#testsize == (22618#testsize<<> 19);
output1{test++} = 497025031#testsize == (29146#testsize<<> 20);
output1{test++} = 86726#testsize == (43363#testsize<<> 1);
output1{test++} = 867360#testsize == (27105#testsize<<> 5);
output1{test++} = 1912602752#testsize == (32882#testsize<<> 24);
output1{test++} = 547487744#testsize == (4177#testsize<<> 17);
output1{test++} = 9300480#testsize == (36330#testsize<<> 8);
output1{test++} = 37144576#testsize == (18137#testsize<<> 11);
output1{test++} = -2147480556#testsize == (24740#testsize<<> 29);
output1{test++} = 193568#testsize == (12098#testsize<<> 4);
output1{test++} = 469762473#testsize == (27207#testsize<<> 26);
output1{test++} = 208000#testsize == (3250#testsize<<> 6);
output1{test++} = 625410048#testsize == (9543#testsize<<> 16);
output1{test++} = -2147465874#testsize == (35549#testsize<<> 31);
output1{test++} = -692584448#testsize == (6871#testsize<<> 19);
output1{test++} = 1238784#testsize == (4839#testsize<<> 8);
output1{test++} = 1739520#testsize == (27180#testsize<<> 6);
output1{test++} = 13410304#testsize == (3274#testsize<<> 12);
output1{test++} = 17546752#testsize == (34271#testsize<<> 9);
output1{test++} = -435159038#testsize == (11873#testsize<<> 20);
output1{test++} = 88632#testsize == (22158#testsize<<> 2);
output1{test++} = 224752#testsize == (14047#testsize<<> 4);
output1{test++} = 2556928#testsize == (2497#testsize<<> 10);
output1{test++} = 1586112#testsize == (24783#testsize<<> 6);
output1{test++} = 65150976#testsize == (31812#testsize<<> 11);
output1{test++} = 398736#testsize == (24921#testsize<<> 4);
output1{test++} = 21764096#testsize == (21254#testsize<<> 10);
output1{test++} = -882376699#testsize == (47469#testsize<<> 19);
output1{test++} = 1702887440#testsize == (33580#testsize<<> 21);
output1{test++} = 193392640#testsize == (47215#testsize<<> 12);
output1{test++} = 239599617#testsize == (17298#testsize<<> 18);
output1{test++} = -2122842109#testsize == (28719#testsize<<> 19);
output1{test++} = -2147468897#testsize == (29503#testsize<<> 31);
output1{test++} = -1853095934#testsize == (42083#testsize<<> 18);
output1{test++} = -602931200#testsize == (14084#testsize<<> 18);
output1{test++} = -1478230016#testsize == (42980#testsize<<> 16);
output1{test++} = 1461714953#testsize == (38258#testsize<<> 20);
output1{test++} = 47954#testsize == (47954#testsize<<> 0);
output1{test++} = 1161822247#testsize == (40213#testsize<<> 22);
output1{test++} = 69740544#testsize == (34053#testsize<<> 11);
output1{test++} = 319029248#testsize == (19472#testsize<<> 14);
output1{test++} = -1205862387#testsize == (28097#testsize<<> 21);
output1{test++} = -671088093#testsize == (35062#testsize<<> 26);
output1{test++} = 25520128#testsize == (49844#testsize<<> 9);
output1{test++} = 819712#testsize == (3202#testsize<<> 8);
output1{test++} = -1744830456#testsize == (17600#testsize<<> 21);
output1{test++} = 1482752#testsize == (724#testsize<<> 11);
output1{test++} = 1440#testsize == (2880#testsize<<> 31);
output1{test++} = -58720208#testsize == (25081#testsize<<> 23);
output1{test++} = 80363520#testsize == (39240#testsize<<> 11);


output1{test++} = (val+5 < (val+1+1+1+1+1))==0;
output1{test++} = (10 < val+1) == 0;
output1{test++} = (1 < val+(1+1)) == 1;
output1{test++} = (18 < val+val) == 0;
output1{test++} = (10 < 1+val) == 0;
output1{test++} = (11 < (1+1)+val) == 0;

output1{test++} = 0 == (23525#testsize < -24527#testsize);
output1{test++} = 0 == (20967#testsize < -9516#testsize);
output1{test++} = 0 == (19589#testsize < 10655#testsize);
output1{test++} = 0 == (22046#testsize < -19272#testsize);
output1{test++} = 0 == (11590#testsize < -2098#testsize);
output1{test++} = 0 == (23079#testsize < -20770#testsize);
output1{test++} = 0 == (19589#testsize < -3544#testsize);
output1{test++} = 0 == (-11551#testsize < -12019#testsize);
output1{test++} = 1 == (6617#testsize < 22637#testsize);
output1{test++} = 0 == (5998#testsize < -9848#testsize);
output1{test++} = 0 == (15571#testsize < -14433#testsize);
output1{test++} = 1 == (-14544#testsize < -12551#testsize);
output1{test++} = 0 == (7648#testsize < -14262#testsize);
output1{test++} = 0 == (20383#testsize < 15862#testsize);
output1{test++} = 1 == (1832#testsize < 11425#testsize);
output1{test++} = 0 == (11369#testsize < 2229#testsize);
output1{test++} = 0 == (12470#testsize < -9149#testsize);
output1{test++} = 1 == (407#testsize < 20028#testsize);
output1{test++} = 0 == (19652#testsize < 18157#testsize);
output1{test++} = 0 == (20375#testsize < 20001#testsize);
output1{test++} = 1 == (3123#testsize < 21401#testsize);
output1{test++} = 0 == (8267#testsize < -4224#testsize);
output1{test++} = 0 == (1396#testsize < -16076#testsize);
output1{test++} = 0 == (-11170#testsize < -20005#testsize);
output1{test++} = 1 == (-9082#testsize < -6932#testsize);
output1{test++} = 0 == (18974#testsize < 891#testsize);
output1{test++} = 1 == (14076#testsize < 20168#testsize);
output1{test++} = 0 == (-11333#testsize < -24043#testsize);
output1{test++} = 1 == (-16262#testsize < 16451#testsize);
output1{test++} = 1 == (-18598#testsize < 2568#testsize);
output1{test++} = 1 == (-4468#testsize < 5504#testsize);
output1{test++} = 1 == (-21226#testsize < -5389#testsize);
output1{test++} = 0 == (8323#testsize < -14751#testsize);
output1{test++} = 0 == (10692#testsize < -14365#testsize);
output1{test++} = 0 == (-2675#testsize < -14878#testsize);
output1{test++} = 1 == (-24303#testsize < 18250#testsize);
output1{test++} = 0 == (3728#testsize < -9808#testsize);
output1{test++} = 0 == (13322#testsize < -16485#testsize);
output1{test++} = 1 == (2131#testsize < 17736#testsize);
output1{test++} = 1 == (10647#testsize < 12402#testsize);
output1{test++} = 0 == (984#testsize < -24790#testsize);
output1{test++} = 0 == (-18746#testsize < -23679#testsize);
output1{test++} = 1 == (-1958#testsize < 1387#testsize);
output1{test++} = 1 == (6992#testsize < 7652#testsize);
output1{test++} = 0 == (-5649#testsize < -14534#testsize);
output1{test++} = 0 == (3801#testsize < -23626#testsize);
output1{test++} = 0 == (20042#testsize < -21686#testsize);
output1{test++} = 1 == (7657#testsize < 21181#testsize);
output1{test++} = 1 == (-4864#testsize < 17950#testsize);
output1{test++} = 1 == (-17198#testsize < 7328#testsize);
output1{test++} = 1 == (-23100#testsize < -7932#testsize);
output1{test++} = 1 == (-15154#testsize < -7287#testsize);
output1{test++} = 0 == (20769#testsize < -16696#testsize);
output1{test++} = 0 == (-4585#testsize < -21115#testsize);
output1{test++} = 1 == (-22844#testsize < -12807#testsize);
output1{test++} = 1 == (546#testsize < 3079#testsize);
output1{test++} = 1 == (12404#testsize < 22040#testsize);
output1{test++} = 0 == (23177#testsize < -19987#testsize);
output1{test++} = 1 == (-16321#testsize < -9636#testsize);
output1{test++} = 1 == (-10765#testsize < 5243#testsize);
output1{test++} = 0 == (-7118#testsize < -19741#testsize);
output1{test++} = 0 == (18690#testsize < -4636#testsize);
output1{test++} = 1 == (-11676#testsize < 14003#testsize);
output1{test++} = 1 == (-24408#testsize < -20697#testsize);
output1{test++} = 1 == (-12081#testsize < 6879#testsize);
output1{test++} = 1 == (-6377#testsize < -3307#testsize);
output1{test++} = 0 == (9277#testsize < -3675#testsize);
output1{test++} = 0 == (22452#testsize < 5216#testsize);
output1{test++} = 1 == (-24853#testsize < 20979#testsize);
output1{test++} = 0 == (-8857#testsize < -10113#testsize);
output1{test++} = 0 == (-2948#testsize < -18886#testsize);
output1{test++} = 0 == (6930#testsize < -11185#testsize);
output1{test++} = 1 == (-8355#testsize < 15611#testsize);
output1{test++} = 1 == (17851#testsize < 19300#testsize);
output1{test++} = 1 == (-7312#testsize < -882#testsize);
output1{test++} = 0 == (2840#testsize < -20851#testsize);
output1{test++} = 1 == (-10025#testsize < 3298#testsize);
output1{test++} = 0 == (7926#testsize < -5707#testsize);
output1{test++} = 0 == (-1345#testsize < -24017#testsize);
output1{test++} = 0 == (12438#testsize < -1643#testsize);
output1{test++} = 0 == (12199#testsize < 11558#testsize);
output1{test++} = 1 == (3477#testsize < 5878#testsize);
output1{test++} = 0 == (11675#testsize < -4982#testsize);
output1{test++} = 0 == (6838#testsize < 1861#testsize);
output1{test++} = 1 == (9105#testsize < 13192#testsize);
output1{test++} = 1 == (-15426#testsize < -6736#testsize);
output1{test++} = 1 == (6847#testsize < 9089#testsize);
output1{test++} = 0 == (20395#testsize < -2372#testsize);
output1{test++} = 0 == (17319#testsize < -13480#testsize);
output1{test++} = 1 == (-13230#testsize < -6967#testsize);
output1{test++} = 0 == (10865#testsize < -937#testsize);
output1{test++} = 1 == (-3212#testsize < 21981#testsize);
output1{test++} = 0 == (9923#testsize < 8444#testsize);
output1{test++} = 1 == (3420#testsize < 19005#testsize);
output1{test++} = 0 == (-13073#testsize < -14223#testsize);
output1{test++} = 1 == (-17305#testsize < 8171#testsize);
output1{test++} = 0 == (-71#testsize < -10983#testsize);
output1{test++} = 1 == (-8303#testsize < 5800#testsize);
output1{test++} = 0 == (4180#testsize < -9338#testsize);
output1{test++} = 1 == (-14696#testsize < -1302#testsize);


output1{test++} = (val+5 > (val+1+1+1+1+1))==0;
output1{test++} = (10 > val+1) == 0;
output1{test++} = (1 > val+(1+1)) == 0;
output1{test++} = (18 > val+val) == 0;
output1{test++} = (10 > 1+val) == 0;
output1{test++} = (11 > (1+1)+val) == 0;

output1{test++} = 0 == (8767#testsize > 19046#testsize);
output1{test++} = 1 == (23870#testsize > -22572#testsize);
output1{test++} = 0 == (4438#testsize > 5782#testsize);
output1{test++} = 0 == (-24797#testsize > -18640#testsize);
output1{test++} = 0 == (-20989#testsize > 4935#testsize);
output1{test++} = 1 == (19220#testsize > 564#testsize);
output1{test++} = 1 == (-8529#testsize > -14080#testsize);
output1{test++} = 0 == (2572#testsize > 8348#testsize);
output1{test++} = 0 == (-24399#testsize > -16805#testsize);
output1{test++} = 1 == (14526#testsize > -19024#testsize);
output1{test++} = 0 == (11180#testsize > 19360#testsize);
output1{test++} = 0 == (-1534#testsize > 2217#testsize);
output1{test++} = 0 == (-7483#testsize > 22528#testsize);
output1{test++} = 0 == (-16550#testsize > -6851#testsize);
output1{test++} = 0 == (9072#testsize > 13480#testsize);
output1{test++} = 1 == (23583#testsize > 197#testsize);
output1{test++} = 1 == (15446#testsize > -24571#testsize);
output1{test++} = 1 == (10605#testsize > -21920#testsize);
output1{test++} = 0 == (-16459#testsize > -7162#testsize);
output1{test++} = 1 == (-1544#testsize > -8239#testsize);
output1{test++} = 0 == (-22860#testsize > -15043#testsize);
output1{test++} = 1 == (7641#testsize > 3684#testsize);
output1{test++} = 1 == (21825#testsize > 1984#testsize);
output1{test++} = 0 == (-5767#testsize > 24094#testsize);
output1{test++} = 1 == (16682#testsize > 10684#testsize);
output1{test++} = 1 == (20312#testsize > 15793#testsize);
output1{test++} = 1 == (21652#testsize > -6647#testsize);
output1{test++} = 0 == (6506#testsize > 15566#testsize);
output1{test++} = 0 == (-16229#testsize > -2936#testsize);
output1{test++} = 0 == (-12688#testsize > 10405#testsize);
output1{test++} = 0 == (-12314#testsize > 12856#testsize);
output1{test++} = 1 == (22862#testsize > 3529#testsize);
output1{test++} = 0 == (7126#testsize > 9112#testsize);
output1{test++} = 1 == (-6738#testsize > -23825#testsize);
output1{test++} = 1 == (2939#testsize > -10216#testsize);
output1{test++} = 0 == (-10639#testsize > 21940#testsize);
output1{test++} = 1 == (-6797#testsize > -12840#testsize);
output1{test++} = 1 == (13309#testsize > 8766#testsize);
output1{test++} = 0 == (-15248#testsize > 14802#testsize);
output1{test++} = 0 == (-15081#testsize > -13925#testsize);
output1{test++} = 0 == (-15723#testsize > 17619#testsize);
output1{test++} = 0 == (13566#testsize > 24726#testsize);
output1{test++} = 1 == (20509#testsize > -24476#testsize);
output1{test++} = 0 == (-24078#testsize > 24#testsize);
output1{test++} = 1 == (10807#testsize > 9415#testsize);
output1{test++} = 1 == (-15777#testsize > -24646#testsize);
output1{test++} = 0 == (5890#testsize > 17117#testsize);
output1{test++} = 0 == (-18182#testsize > 20089#testsize);
output1{test++} = 0 == (6257#testsize > 21092#testsize);
output1{test++} = 1 == (18694#testsize > 7058#testsize);
output1{test++} = 1 == (-7589#testsize > -22530#testsize);
output1{test++} = 0 == (-14269#testsize > -10515#testsize);
output1{test++} = 0 == (-2013#testsize > 22653#testsize);
output1{test++} = 1 == (24149#testsize > -24985#testsize);
output1{test++} = 0 == (-18258#testsize > 23802#testsize);
output1{test++} = 1 == (21804#testsize > 17815#testsize);
output1{test++} = 1 == (24198#testsize > 22548#testsize);
output1{test++} = 1 == (12021#testsize > -16782#testsize);
output1{test++} = 1 == (5498#testsize > -3706#testsize);
output1{test++} = 1 == (6604#testsize > -1671#testsize);
output1{test++} = 1 == (-2513#testsize > -13663#testsize);
output1{test++} = 1 == (28#testsize > -24656#testsize);
output1{test++} = 1 == (12424#testsize > 5337#testsize);
output1{test++} = 0 == (-1531#testsize > 18874#testsize);
output1{test++} = 1 == (-9587#testsize > -15236#testsize);
output1{test++} = 1 == (-631#testsize > -8576#testsize);
output1{test++} = 1 == (9003#testsize > 8428#testsize);
output1{test++} = 0 == (-11197#testsize > 7184#testsize);
output1{test++} = 0 == (-19448#testsize > 22846#testsize);
output1{test++} = 0 == (-15452#testsize > -4206#testsize);
output1{test++} = 0 == (-2511#testsize > 2123#testsize);
output1{test++} = 0 == (-24900#testsize > 12294#testsize);
output1{test++} = 1 == (16818#testsize > 660#testsize);
output1{test++} = 1 == (15889#testsize > -19975#testsize);
output1{test++} = 1 == (14337#testsize > -2542#testsize);
output1{test++} = 0 == (4750#testsize > 12183#testsize);
output1{test++} = 1 == (19527#testsize > -1253#testsize);
output1{test++} = 0 == (-1237#testsize > 23482#testsize);
output1{test++} = 0 == (-17476#testsize > 14625#testsize);
output1{test++} = 0 == (-11435#testsize > 22896#testsize);
output1{test++} = 0 == (-5650#testsize > 740#testsize);
output1{test++} = 0 == (-6597#testsize > 17354#testsize);
output1{test++} = 0 == (-14915#testsize > -13768#testsize);
output1{test++} = 1 == (24692#testsize > 23793#testsize);
output1{test++} = 1 == (20199#testsize > -1279#testsize);
output1{test++} = 0 == (-12353#testsize > -12284#testsize);
output1{test++} = 0 == (-18245#testsize > 506#testsize);
output1{test++} = 1 == (11129#testsize > 2268#testsize);
output1{test++} = 0 == (4140#testsize > 16422#testsize);
output1{test++} = 1 == (11909#testsize > -3424#testsize);
output1{test++} = 1 == (23076#testsize > 12862#testsize);
output1{test++} = 0 == (-5589#testsize > -1756#testsize);
output1{test++} = 1 == (24706#testsize > -16168#testsize);
output1{test++} = 1 == (9296#testsize > 812#testsize);
output1{test++} = 0 == (9810#testsize > 11161#testsize);
output1{test++} = 0 == (-10787#testsize > 10639#testsize);
output1{test++} = 1 == (23959#testsize > -18863#testsize);
output1{test++} = 0 == (-22801#testsize > 18807#testsize);
output1{test++} = 0 == (3367#testsize > 14692#testsize);
output1{test++} = 1 == (20746#testsize > -4684#testsize);


output1{test++} = (val+5 >= (val+1+1+1+1+1))==1;
output1{test++} = (10 >= val+1) == 1;
output1{test++} = (1 >= val+(1+1)) == 0;
output1{test++} = (18 >= val+val) == 1;
output1{test++} = (10 >= 1+val) == 1;
output1{test++} = (11 >= (1+1)+val) == 1;

output1{test++} = 1 == (56#testsize >= -7659#testsize);
output1{test++} = 0 == (-195#testsize >= 24174#testsize);
output1{test++} = 0 == (-8214#testsize >= 24036#testsize);
output1{test++} = 1 == (11454#testsize >= 4980#testsize);
output1{test++} = 1 == (-2347#testsize >= -22849#testsize);
output1{test++} = 0 == (3997#testsize >= 18905#testsize);
output1{test++} = 1 == (21358#testsize >= -10673#testsize);
output1{test++} = 1 == (12661#testsize >= 12505#testsize);
output1{test++} = 1 == (20223#testsize >= 13482#testsize);
output1{test++} = 0 == (-180#testsize >= 5150#testsize);
output1{test++} = 1 == (2813#testsize >= -7550#testsize);
output1{test++} = 0 == (-18000#testsize >= -4586#testsize);
output1{test++} = 0 == (-10855#testsize >= 5639#testsize);
output1{test++} = 0 == (815#testsize >= 15827#testsize);
output1{test++} = 1 == (13859#testsize >= 7005#testsize);
output1{test++} = 0 == (-18477#testsize >= 5579#testsize);
output1{test++} = 0 == (-18186#testsize >= 20568#testsize);
output1{test++} = 1 == (11784#testsize >= -5968#testsize);
output1{test++} = 1 == (-6283#testsize >= -11900#testsize);
output1{test++} = 0 == (-3493#testsize >= 8698#testsize);
output1{test++} = 1 == (10992#testsize >= 7073#testsize);
output1{test++} = 1 == (19954#testsize >= -18784#testsize);
output1{test++} = 0 == (-21166#testsize >= -14981#testsize);
output1{test++} = 0 == (-9006#testsize >= -5258#testsize);
output1{test++} = 1 == (-8726#testsize >= -14265#testsize);
output1{test++} = 0 == (-22880#testsize >= -15264#testsize);
output1{test++} = 0 == (-8605#testsize >= 1738#testsize);
output1{test++} = 0 == (7464#testsize >= 19989#testsize);
output1{test++} = 0 == (15586#testsize >= 23380#testsize);
output1{test++} = 0 == (-5277#testsize >= -4001#testsize);
output1{test++} = 1 == (-16771#testsize >= -18487#testsize);
output1{test++} = 1 == (-7575#testsize >= -8082#testsize);
output1{test++} = 1 == (13027#testsize >= -19728#testsize);
output1{test++} = 1 == (14995#testsize >= -19828#testsize);
output1{test++} = 0 == (-10725#testsize >= 13285#testsize);
output1{test++} = 0 == (-16245#testsize >= 19819#testsize);
output1{test++} = 1 == (15260#testsize >= -9847#testsize);
output1{test++} = 0 == (-1774#testsize >= 2731#testsize);
output1{test++} = 1 == (21862#testsize >= -7655#testsize);
output1{test++} = 1 == (-10498#testsize >= -12552#testsize);
output1{test++} = 0 == (-21876#testsize >= -11508#testsize);
output1{test++} = 1 == (-9329#testsize >= -15296#testsize);
output1{test++} = 1 == (9631#testsize >= -12219#testsize);
output1{test++} = 0 == (-12196#testsize >= -6271#testsize);
output1{test++} = 1 == (5576#testsize >= -15447#testsize);
output1{test++} = 0 == (-8818#testsize >= 16929#testsize);
output1{test++} = 1 == (19217#testsize >= -23638#testsize);
output1{test++} = 1 == (15416#testsize >= -8249#testsize);
output1{test++} = 1 == (-20672#testsize >= -24254#testsize);
output1{test++} = 0 == (-23871#testsize >= -23177#testsize);
output1{test++} = 0 == (-14223#testsize >= 4780#testsize);
output1{test++} = 0 == (-5343#testsize >= 6444#testsize);
output1{test++} = 1 == (17151#testsize >= -4357#testsize);
output1{test++} = 1 == (18596#testsize >= 1421#testsize);
output1{test++} = 0 == (-21617#testsize >= -14706#testsize);
output1{test++} = 1 == (23469#testsize >= -17823#testsize);
output1{test++} = 1 == (10666#testsize >= -20021#testsize);
output1{test++} = 1 == (3818#testsize >= -5553#testsize);
output1{test++} = 1 == (2932#testsize >= -5864#testsize);
output1{test++} = 1 == (992#testsize >= -5809#testsize);
output1{test++} = 0 == (-20579#testsize >= 4074#testsize);
output1{test++} = 1 == (-8733#testsize >= -24628#testsize);
output1{test++} = 0 == (-9596#testsize >= -3084#testsize);
output1{test++} = 1 == (10404#testsize >= -17541#testsize);
output1{test++} = 0 == (-12077#testsize >= 16481#testsize);
output1{test++} = 1 == (3816#testsize >= -24524#testsize);
output1{test++} = 1 == (-7637#testsize >= -20372#testsize);
output1{test++} = 0 == (-23728#testsize >= -1825#testsize);
output1{test++} = 0 == (4429#testsize >= 11324#testsize);
output1{test++} = 0 == (9018#testsize >= 9339#testsize);
output1{test++} = 1 == (9553#testsize >= 5678#testsize);
output1{test++} = 1 == (3204#testsize >= -5817#testsize);
output1{test++} = 0 == (5895#testsize >= 20570#testsize);
output1{test++} = 1 == (-5864#testsize >= -12397#testsize);
output1{test++} = 1 == (23896#testsize >= -14568#testsize);
output1{test++} = 1 == (-19576#testsize >= -23231#testsize);
output1{test++} = 0 == (-472#testsize >= 17387#testsize);
output1{test++} = 1 == (4407#testsize >= -10987#testsize);
output1{test++} = 0 == (15978#testsize >= 20075#testsize);
output1{test++} = 0 == (-23870#testsize >= -4244#testsize);
output1{test++} = 1 == (13519#testsize >= -31#testsize);
output1{test++} = 1 == (-2503#testsize >= -12504#testsize);
output1{test++} = 1 == (15933#testsize >= -6949#testsize);
output1{test++} = 1 == (-13570#testsize >= -20887#testsize);
output1{test++} = 0 == (-24727#testsize >= -6609#testsize);
output1{test++} = 1 == (19161#testsize >= -21736#testsize);
output1{test++} = 1 == (-19648#testsize >= -19924#testsize);
output1{test++} = 0 == (2341#testsize >= 5613#testsize);
output1{test++} = 0 == (-21561#testsize >= -13332#testsize);
output1{test++} = 0 == (6779#testsize >= 15984#testsize);
output1{test++} = 1 == (829#testsize >= -22682#testsize);
output1{test++} = 1 == (-18407#testsize >= -18468#testsize);
output1{test++} = 0 == (-16214#testsize >= 8097#testsize);
output1{test++} = 0 == (-10434#testsize >= 14752#testsize);
output1{test++} = 0 == (-6201#testsize >= -5790#testsize);
output1{test++} = 0 == (-20508#testsize >= 16991#testsize);
output1{test++} = 1 == (17081#testsize >= -7866#testsize);
output1{test++} = 1 == (-1093#testsize >= -6105#testsize);
output1{test++} = 1 == (-7877#testsize >= -10757#testsize);
output1{test++} = 1 == (20126#testsize >= 10334#testsize);


output1{test++} = (val+5 <= (val+1+1+1+1+1))==1;
output1{test++} = (10 <= val+1) == 1;
output1{test++} = (1 <= val+(1+1)) == 1;
output1{test++} = (18 <= val+val) == 1;
output1{test++} = (10 <= 1+val) == 1;
output1{test++} = (11 <= (1+1)+val) == 1;

output1{test++} = 1 == (-5608#testsize <= 1511#testsize);
output1{test++} = 0 == (3008#testsize <= -11045#testsize);
output1{test++} = 1 == (13445#testsize <= 16809#testsize);
output1{test++} = 0 == (-9231#testsize <= -10702#testsize);
output1{test++} = 1 == (-8001#testsize <= 22903#testsize);
output1{test++} = 0 == (13018#testsize <= -23706#testsize);
output1{test++} = 0 == (22540#testsize <= -8#testsize);
output1{test++} = 0 == (-10713#testsize <= -12917#testsize);
output1{test++} = 1 == (-15384#testsize <= 17539#testsize);
output1{test++} = 1 == (-16987#testsize <= -10168#testsize);
output1{test++} = 0 == (24849#testsize <= 5744#testsize);
output1{test++} = 0 == (6505#testsize <= 26#testsize);
output1{test++} = 1 == (14866#testsize <= 21836#testsize);
output1{test++} = 0 == (-6304#testsize <= -21625#testsize);
output1{test++} = 0 == (-13398#testsize <= -23226#testsize);
output1{test++} = 1 == (-13115#testsize <= 5887#testsize);
output1{test++} = 0 == (13160#testsize <= -17994#testsize);
output1{test++} = 0 == (-20840#testsize <= -21265#testsize);
output1{test++} = 1 == (-15674#testsize <= -4194#testsize);
output1{test++} = 0 == (8385#testsize <= -11216#testsize);
output1{test++} = 1 == (-14994#testsize <= 11800#testsize);
output1{test++} = 0 == (593#testsize <= -16692#testsize);
output1{test++} = 0 == (21725#testsize <= 15918#testsize);
output1{test++} = 0 == (12704#testsize <= -2464#testsize);
output1{test++} = 0 == (13059#testsize <= -3735#testsize);
output1{test++} = 0 == (14105#testsize <= -627#testsize);
output1{test++} = 0 == (2756#testsize <= -6719#testsize);
output1{test++} = 1 == (-4194#testsize <= 11241#testsize);
output1{test++} = 1 == (10879#testsize <= 23508#testsize);
output1{test++} = 0 == (-9223#testsize <= -11358#testsize);
output1{test++} = 1 == (-9752#testsize <= 15458#testsize);
output1{test++} = 1 == (-24527#testsize <= -16317#testsize);
output1{test++} = 0 == (-13453#testsize <= -24764#testsize);
output1{test++} = 1 == (1429#testsize <= 24479#testsize);
output1{test++} = 1 == (-10641#testsize <= 18444#testsize);
output1{test++} = 0 == (-4328#testsize <= -12710#testsize);
output1{test++} = 0 == (14605#testsize <= -17880#testsize);
output1{test++} = 1 == (12697#testsize <= 16150#testsize);
output1{test++} = 0 == (-6612#testsize <= -22511#testsize);
output1{test++} = 0 == (5645#testsize <= 779#testsize);
output1{test++} = 0 == (3507#testsize <= 1120#testsize);
output1{test++} = 1 == (715#testsize <= 10752#testsize);
output1{test++} = 1 == (-13494#testsize <= 16591#testsize);
output1{test++} = 0 == (2180#testsize <= -11450#testsize);
output1{test++} = 1 == (-4171#testsize <= 10829#testsize);
output1{test++} = 1 == (-9970#testsize <= 1157#testsize);
output1{test++} = 0 == (3117#testsize <= -21365#testsize);
output1{test++} = 1 == (-16005#testsize <= 24909#testsize);
output1{test++} = 1 == (-5235#testsize <= 17076#testsize);
output1{test++} = 0 == (12394#testsize <= -7058#testsize);
output1{test++} = 0 == (20054#testsize <= 12458#testsize);
output1{test++} = 0 == (5738#testsize <= -18461#testsize);
output1{test++} = 1 == (-13457#testsize <= -11589#testsize);
output1{test++} = 0 == (-19529#testsize <= -23111#testsize);
output1{test++} = 1 == (-15731#testsize <= -5197#testsize);
output1{test++} = 1 == (-22366#testsize <= -1986#testsize);
output1{test++} = 0 == (15787#testsize <= -20758#testsize);
output1{test++} = 0 == (19425#testsize <= 14805#testsize);
output1{test++} = 0 == (24678#testsize <= 9518#testsize);
output1{test++} = 0 == (7312#testsize <= -5819#testsize);
output1{test++} = 0 == (-3096#testsize <= -9333#testsize);
output1{test++} = 0 == (-11886#testsize <= -23631#testsize);
output1{test++} = 0 == (19439#testsize <= 13399#testsize);
output1{test++} = 1 == (-21880#testsize <= 24995#testsize);
output1{test++} = 0 == (12137#testsize <= -18486#testsize);
output1{test++} = 0 == (13517#testsize <= 7745#testsize);
output1{test++} = 1 == (1614#testsize <= 12539#testsize);
output1{test++} = 1 == (4635#testsize <= 14689#testsize);
output1{test++} = 1 == (11593#testsize <= 17526#testsize);
output1{test++} = 1 == (-20034#testsize <= 10665#testsize);
output1{test++} = 0 == (15700#testsize <= -12872#testsize);
output1{test++} = 1 == (7252#testsize <= 9135#testsize);
output1{test++} = 1 == (6896#testsize <= 21149#testsize);
output1{test++} = 0 == (-17235#testsize <= -24113#testsize);
output1{test++} = 1 == (-17874#testsize <= 16737#testsize);
output1{test++} = 1 == (-3084#testsize <= 16907#testsize);
output1{test++} = 1 == (-15763#testsize <= 15923#testsize);
output1{test++} = 1 == (-17254#testsize <= -13092#testsize);
output1{test++} = 1 == (-21664#testsize <= -15768#testsize);
output1{test++} = 1 == (-8501#testsize <= -4041#testsize);
output1{test++} = 1 == (-405#testsize <= 19931#testsize);
output1{test++} = 0 == (15071#testsize <= -10741#testsize);
output1{test++} = 0 == (23946#testsize <= 4802#testsize);
output1{test++} = 0 == (14256#testsize <= -2441#testsize);
output1{test++} = 0 == (12094#testsize <= 2748#testsize);
output1{test++} = 1 == (-24413#testsize <= -17864#testsize);
output1{test++} = 1 == (-24731#testsize <= 2166#testsize);
output1{test++} = 0 == (11541#testsize <= -12384#testsize);
output1{test++} = 0 == (2197#testsize <= -11235#testsize);
output1{test++} = 0 == (13091#testsize <= -19053#testsize);
output1{test++} = 0 == (6740#testsize <= -3315#testsize);
output1{test++} = 0 == (24726#testsize <= 7546#testsize);
output1{test++} = 0 == (-6153#testsize <= -8328#testsize);
output1{test++} = 1 == (-10279#testsize <= 11818#testsize);
output1{test++} = 1 == (-19163#testsize <= 18467#testsize);
output1{test++} = 1 == (17800#testsize <= 24319#testsize);
output1{test++} = 0 == (-19080#testsize <= -22198#testsize);
output1{test++} = 0 == (-1337#testsize <= -2623#testsize);
output1{test++} = 0 == (-15009#testsize <= -24476#testsize);
output1{test++} = 1 == (-8964#testsize <= -6135#testsize);


output1{test++} = (val+5 != (val+1+1+1+1+1))==0;
output1{test++} = (10 != val+1) == 0;
output1{test++} = (1 != val+(1+1)) == 1;
output1{test++} = (18 != val+val) == 0;
output1{test++} = (10 != 1+val) == 0;
output1{test++} = (11 != (1+1)+val) == 0;

output1{test++} = 1 == (7#testsize != 3#testsize);
output1{test++} = 1 == (8#testsize != 4#testsize);
output1{test++} = 1 == (4#testsize != 5#testsize);
output1{test++} = 1 == (8#testsize != 3#testsize);
output1{test++} = 1 == (7#testsize != 4#testsize);
output1{test++} = 1 == (9#testsize != 5#testsize);
output1{test++} = 1 == (9#testsize != 0#testsize);
output1{test++} = 1 == (1#testsize != 9#testsize);
output1{test++} = 1 == (3#testsize != 0#testsize);
output1{test++} = 1 == (0#testsize != 2#testsize);
output1{test++} = 1 == (2#testsize != 1#testsize);
output1{test++} = 1 == (7#testsize != 2#testsize);
output1{test++} = 1 == (6#testsize != 9#testsize);
output1{test++} = 1 == (0#testsize != 8#testsize);
output1{test++} = 1 == (9#testsize != 2#testsize);
output1{test++} = 1 == (9#testsize != 6#testsize);
output1{test++} = 1 == (4#testsize != 7#testsize);
output1{test++} = 1 == (0#testsize != 4#testsize);
output1{test++} = 1 == (2#testsize != 6#testsize);
output1{test++} = 1 == (5#testsize != 3#testsize);
output1{test++} = 1 == (1#testsize != 8#testsize);
output1{test++} = 1 == (9#testsize != 8#testsize);
output1{test++} = 1 == (4#testsize != 2#testsize);
output1{test++} = 1 == (2#testsize != 3#testsize);
output1{test++} = 1 == (7#testsize != 5#testsize);
output1{test++} = 0 == (6#testsize != 6#testsize);
output1{test++} = 1 == (6#testsize != 9#testsize);
output1{test++} = 1 == (0#testsize != 1#testsize);
output1{test++} = 0 == (7#testsize != 7#testsize);
output1{test++} = 1 == (9#testsize != 2#testsize);
output1{test++} = 1 == (6#testsize != 7#testsize);
output1{test++} = 0 == (2#testsize != 2#testsize);
output1{test++} = 1 == (6#testsize != 4#testsize);
output1{test++} = 1 == (4#testsize != 6#testsize);
output1{test++} = 1 == (0#testsize != 9#testsize);
output1{test++} = 1 == (6#testsize != 3#testsize);
output1{test++} = 1 == (4#testsize != 9#testsize);
output1{test++} = 1 == (6#testsize != 0#testsize);
output1{test++} = 1 == (5#testsize != 2#testsize);
output1{test++} = 1 == (1#testsize != 4#testsize);
output1{test++} = 1 == (0#testsize != 9#testsize);
output1{test++} = 1 == (9#testsize != 8#testsize);
output1{test++} = 1 == (7#testsize != 4#testsize);
output1{test++} = 1 == (1#testsize != 5#testsize);
output1{test++} = 0 == (3#testsize != 3#testsize);
output1{test++} = 1 == (6#testsize != 7#testsize);
output1{test++} = 1 == (8#testsize != 4#testsize);
output1{test++} = 1 == (1#testsize != 8#testsize);
output1{test++} = 1 == (3#testsize != 7#testsize);
output1{test++} = 1 == (7#testsize != 1#testsize);
output1{test++} = 1 == (1#testsize != 8#testsize);
output1{test++} = 1 == (0#testsize != 4#testsize);
output1{test++} = 1 == (9#testsize != 0#testsize);
output1{test++} = 1 == (7#testsize != 1#testsize);
output1{test++} = 1 == (9#testsize != 0#testsize);
output1{test++} = 1 == (2#testsize != 6#testsize);
output1{test++} = 1 == (3#testsize != 1#testsize);
output1{test++} = 1 == (2#testsize != 6#testsize);
output1{test++} = 1 == (7#testsize != 2#testsize);
output1{test++} = 1 == (8#testsize != 2#testsize);
output1{test++} = 1 == (1#testsize != 4#testsize);
output1{test++} = 1 == (2#testsize != 8#testsize);
output1{test++} = 1 == (8#testsize != 0#testsize);
output1{test++} = 0 == (4#testsize != 4#testsize);
output1{test++} = 1 == (0#testsize != 1#testsize);
output1{test++} = 1 == (1#testsize != 4#testsize);
output1{test++} = 1 == (7#testsize != 2#testsize);
output1{test++} = 1 == (9#testsize != 2#testsize);
output1{test++} = 0 == (3#testsize != 3#testsize);
output1{test++} = 1 == (9#testsize != 8#testsize);
output1{test++} = 1 == (8#testsize != 3#testsize);
output1{test++} = 1 == (4#testsize != 6#testsize);
output1{test++} = 1 == (4#testsize != 0#testsize);
output1{test++} = 1 == (3#testsize != 7#testsize);
output1{test++} = 1 == (3#testsize != 8#testsize);
output1{test++} = 1 == (9#testsize != 8#testsize);
output1{test++} = 1 == (1#testsize != 9#testsize);
output1{test++} = 1 == (7#testsize != 2#testsize);
output1{test++} = 1 == (4#testsize != 3#testsize);
output1{test++} = 1 == (4#testsize != 1#testsize);
output1{test++} = 1 == (6#testsize != 0#testsize);
output1{test++} = 1 == (5#testsize != 6#testsize);
output1{test++} = 1 == (8#testsize != 1#testsize);
output1{test++} = 1 == (9#testsize != 1#testsize);
output1{test++} = 1 == (4#testsize != 1#testsize);
output1{test++} = 1 == (1#testsize != 9#testsize);
output1{test++} = 1 == (0#testsize != 5#testsize);
output1{test++} = 1 == (5#testsize != 4#testsize);
output1{test++} = 1 == (4#testsize != 2#testsize);
output1{test++} = 0 == (1#testsize != 1#testsize);
output1{test++} = 1 == (3#testsize != 9#testsize);
output1{test++} = 0 == (5#testsize != 5#testsize);
output1{test++} = 1 == (2#testsize != 0#testsize);
output1{test++} = 1 == (2#testsize != 1#testsize);
output1{test++} = 1 == (5#testsize != 9#testsize);
output1{test++} = 1 == (3#testsize != 7#testsize);
output1{test++} = 1 == (9#testsize != 2#testsize);
output1{test++} = 1 == (9#testsize != 2#testsize);
output1{test++} = 1 == (6#testsize != 1#testsize);
output1{test++} = 1 == (3#testsize != 7#testsize);


output1{test++} = 1 == (val{0:32} == 9);
output1{test++} = 0 == (val{0:32} == 8);
output1{test++} = 0 == (val{0+5-5:10+22} == 8);
output1{test++} = 1 == (val{0+5-5:1} == 1);
output1{test++} = 0 == (val{0+5-5 + testsize - testsize:1 + testsize - testsize} == 0);

output1{test++} = 7 == ((221088#testsize){9:3});
output1{test++} = 7668 == ((490801#testsize){6:13});
output1{test++} = 917 == ((58748#testsize){6:13});
output1{test++} = 30 == ((43836#testsize){1:7});
output1{test++} = 5 == ((138410#testsize){1:3});
output1{test++} = 355 == ((182253#testsize){9:14});
output1{test++} = 493 == ((97114#testsize){6:9});
output1{test++} = 2 == ((111174#testsize){5:4});
output1{test++} = 2 == ((92909#testsize){8:2});
output1{test++} = 6265 == ((312269#testsize){3:13});
output1{test++} = 7145 == ((457335#testsize){6:14});
output1{test++} = 6 == ((131965#testsize){1:3});
output1{test++} = 1263 == ((323518#testsize){8:13});
output1{test++} = 29 == ((163755#testsize){5:5});
output1{test++} = 1 == ((311952#testsize){4:2});
output1{test++} = 7 == ((389206#testsize){12:3});
output1{test++} = 304 == ((77894#testsize){8:10});
output1{test++} = 32107 == ((390574#testsize){2:15});
output1{test++} = 13199 == ((249407#testsize){2:14});
output1{test++} = 14 == ((245302#testsize){14:13});
output1{test++} = 1 == ((297692#testsize){9:1});
output1{test++} = 14 == ((202555#testsize){7:5});
output1{test++} = 161 == ((328969#testsize){3:9});
output1{test++} = 200 == ((411259#testsize){11:11});
output1{test++} = 0 == ((98408#testsize){10:4});
output1{test++} = 1 == ((176275#testsize){1:1});
output1{test++} = 209 == ((472176#testsize){6:8});
output1{test++} = 1 == ((187905#testsize){9:1});
output1{test++} = 188 == ((155324#testsize){0:8});
output1{test++} = 1 == ((154047#testsize){14:3});
output1{test++} = 30 == ((489849#testsize){10:6});
output1{test++} = 248 == ((258216#testsize){9:8});
output1{test++} = 475 == ((29623#testsize){1:9});
output1{test++} = 61 == ((126928#testsize){11:6});
output1{test++} = 13 == ((220033#testsize){14:11});
output1{test++} = 9115 == ((25499#testsize){0:14});
output1{test++} = 22 == ((371329#testsize){14:14});
output1{test++} = 104 == ((214891#testsize){11:8});
output1{test++} = 52 == ((465769#testsize){1:7});
output1{test++} = 14 == ((233397#testsize){6:4});
output1{test++} = 46 == ((292294#testsize){5:7});
output1{test++} = 0 == ((359401#testsize){10:1});
output1{test++} = 113 == ((463587#testsize){12:14});
output1{test++} = 10820 == ((59972#testsize){0:14});
output1{test++} = 8 == ((373048#testsize){0:4});
output1{test++} = 6 == ((374948#testsize){10:3});
output1{test++} = 935 == ((479199#testsize){9:15});
output1{test++} = 0 == ((104664#testsize){14:1});
output1{test++} = 157 == ((118476#testsize){7:8});
output1{test++} = 1586 == ((406132#testsize){8:15});
output1{test++} = 1375 == ((211647#testsize){1:11});
output1{test++} = 3335 == ((472093#testsize){2:13});
output1{test++} = 381 == ((476663#testsize){2:12});
output1{test++} = 1953 == ((125026#testsize){6:12});
output1{test++} = 111 == ((82364#testsize){2:10});
output1{test++} = 4098 == ((131148#testsize){5:14});
output1{test++} = 4 == ((139502#testsize){11:6});
output1{test++} = 880 == ((93724#testsize){5:10});
output1{test++} = 0 == ((207738#testsize){10:1});
output1{test++} = 196 == ((279945#testsize){1:8});
output1{test++} = 1985 == ((243649#testsize){0:12});
output1{test++} = 15 == ((338191#testsize){0:7});
output1{test++} = 3 == ((384279#testsize){11:2});
output1{test++} = 1 == ((362414#testsize){2:1});
output1{test++} = 381 == ((231163#testsize){1:9});
output1{test++} = 5 == ((35162#testsize){4:4});
output1{test++} = 13 == ((113811#testsize){13:13});
output1{test++} = 54 == ((462254#testsize){6:10});
output1{test++} = 63 == ((329727#testsize){3:6});
output1{test++} = 1 == ((237477#testsize){9:1});
output1{test++} = 5 == ((450501#testsize){12:3});
output1{test++} = 4 == ((409756#testsize){5:9});
output1{test++} = 1578 == ((202921#testsize){2:14});
output1{test++} = 1061 == ((271738#testsize){8:12});
output1{test++} = 1 == ((94882#testsize){12:1});
output1{test++} = 1350 == ((289329#testsize){3:11});
output1{test++} = 30 == ((194183#testsize){11:5});
output1{test++} = 1 == ((57140#testsize){5:1});
output1{test++} = 0 == ((71795#testsize){9:1});
output1{test++} = 4 == ((75701#testsize){14:5});
output1{test++} = 9 == ((80604#testsize){13:5});
output1{test++} = 21 == ((86556#testsize){12:5});
output1{test++} = 7 == ((186842#testsize){6:4});
output1{test++} = 61 == ((73374#testsize){7:9});
output1{test++} = 5205 == ((333144#testsize){6:13});
output1{test++} = 604 == ((416987#testsize){8:10});
output1{test++} = 26 == ((160872#testsize){2:8});
output1{test++} = 477 == ((488732#testsize){10:10});
output1{test++} = 79 == ((326174#testsize){12:7});
output1{test++} = 491 == ((251601#testsize){9:15});
output1{test++} = 50 == ((416390#testsize){13:12});
output1{test++} = 511 == ((360446#testsize){6:10});
output1{test++} = 21 == ((68954#testsize){4:5});
output1{test++} = 1 == ((381867#testsize){9:2});
output1{test++} = 6 == ((29062#testsize){0:3});
output1{test++} = 50 == ((471637#testsize){8:8});
output1{test++} = 3717 == ((475878#testsize){7:14});
output1{test++} = 78 == ((321946#testsize){12:8});
output1{test++} = 224 == ((460782#testsize){11:8});
output1{test++} = 1 == ((117727#testsize){11:2});

output1{test++} = 95 == (189176#testsize{3:9});
output1{test++} = 0 == (136323#testsize{3:3});
output1{test++} = 446 == (407511#testsize{5:12});
output1{test++} = 23279 == (308702#testsize{1:15});
output1{test++} = 2 == (224831#testsize{8:2});
output1{test++} = 44 == (366990#testsize{13:11});
output1{test++} = 18 == (301886#testsize{14:9});
output1{test++} = 5 == (214386#testsize{8:4});
output1{test++} = 1 == (21373#testsize{0:2});
output1{test++} = 21 == (477845#testsize{7:6});
output1{test++} = 62 == (459003#testsize{2:14});
output1{test++} = 41 == (339521#testsize{13:13});
output1{test++} = 23606 == (112748#testsize{1:15});
output1{test++} = 62 == (413591#testsize{6:6});
output1{test++} = 857 == (158500#testsize{5:12});
output1{test++} = 17 == (233928#testsize{8:7});
output1{test++} = 348 == (461537#testsize{3:11});
output1{test++} = 307 == (345702#testsize{1:9});
output1{test++} = 0 == (31637#testsize{5:2});
output1{test++} = 90 == (288090#testsize{0:8});
output1{test++} = 113 == (465993#testsize{12:7});
output1{test++} = 139 == (427101#testsize{3:8});
output1{test++} = 0 == (496060#testsize{9:3});
output1{test++} = 484 == (56911#testsize{4:9});
output1{test++} = 13 == (107529#testsize{13:5});
output1{test++} = 14 == (499188#testsize{14:4});
output1{test++} = 409 == (419595#testsize{10:13});
output1{test++} = 988 == (204512#testsize{3:10});
output1{test++} = 2738 == (175259#testsize{6:13});
output1{test++} = 94 == (450140#testsize{8:7});
output1{test++} = 185 == (189635#testsize{10:11});
output1{test++} = 10 == (371543#testsize{10:4});
output1{test++} = 25 == (414986#testsize{14:7});
output1{test++} = 23 == (178734#testsize{1:5});
output1{test++} = 0 == (12610#testsize{9:1});
output1{test++} = 27 == (226220#testsize{13:15});
output1{test++} = 13944 == (224497#testsize{1:15});
output1{test++} = 29 == (456452#testsize{10:5});
output1{test++} = 200 == (204850#testsize{10:12});
output1{test++} = 4 == (416147#testsize{9:3});
output1{test++} = 4 == (298557#testsize{13:4});
output1{test++} = 52 == (429363#testsize{6:8});
output1{test++} = 7 == (212213#testsize{10:3});
output1{test++} = 0 == (330138#testsize{2:1});
output1{test++} = 34 == (415813#testsize{1:7});
output1{test++} = 0 == (161368#testsize{1:1});
output1{test++} = 591 == (75704#testsize{7:11});
output1{test++} = 33 == (275030#testsize{13:7});
output1{test++} = 5 == (293322#testsize{1:5});
output1{test++} = 6 == (383542#testsize{3:5});
output1{test++} = 45 == (92411#testsize{11:10});
output1{test++} = 4744 == (338054#testsize{4:14});
output1{test++} = 12 == (375576#testsize{1:7});
output1{test++} = 0 == (334857#testsize{5:2});
output1{test++} = 3 == (479939#testsize{6:2});
output1{test++} = 2 == (414743#testsize{13:3});
output1{test++} = 34 == (284352#testsize{13:10});
output1{test++} = 57 == (467357#testsize{13:6});
output1{test++} = 15002 == (240036#testsize{4:15});
output1{test++} = 4 == (271887#testsize{11:7});
output1{test++} = 153 == (98969#testsize{0:8});
output1{test++} = 627 == (75583#testsize{4:10});
output1{test++} = 92 == (377462#testsize{12:7});
output1{test++} = 93 == (23822#testsize{8:14});
output1{test++} = 3 == (257370#testsize{3:3});
output1{test++} = 33 == (104541#testsize{6:6});
output1{test++} = 1702 == (435739#testsize{8:14});
output1{test++} = 235 == (482007#testsize{11:12});
output1{test++} = 2 == (478333#testsize{9:2});
output1{test++} = 9 == (153458#testsize{14:8});
output1{test++} = 8403 == (205011#testsize{0:15});
output1{test++} = 3 == (55766#testsize{14:13});
output1{test++} = 1891 == (484186#testsize{8:15});
output1{test++} = 426 == (486048#testsize{6:9});
output1{test++} = 178 == (186725#testsize{1:8});
output1{test++} = 16 == (93890#testsize{2:5});
output1{test++} = 0 == (16550#testsize{9:1});
output1{test++} = 137 == (435081#testsize{0:8});
output1{test++} = 433 == (453713#testsize{6:9});
output1{test++} = 1 == (489961#testsize{7:1});
output1{test++} = 426 == (436976#testsize{10:14});
output1{test++} = 0 == (327808#testsize{10:5});
output1{test++} = 0 == (349790#testsize{11:1});
output1{test++} = 51 == (105300#testsize{11:7});
output1{test++} = 8 == (328223#testsize{13:4});
output1{test++} = 3848 == (61570#testsize{4:13});
output1{test++} = 180 == (184389#testsize{10:13});
output1{test++} = 52 == (442472#testsize{1:11});
output1{test++} = 4 == (446130#testsize{2:3});
output1{test++} = 1 == (54859#testsize{1:1});
output1{test++} = 11 == (35777#testsize{8:7});
output1{test++} = 4 == (450612#testsize{0:3});
output1{test++} = 220 == (451645#testsize{11:9});
output1{test++} = 5029 == (75594#testsize{1:15});
output1{test++} = 590 == (412829#testsize{1:10});
output1{test++} = 17 == (177361#testsize{0:6});
output1{test++} = 5804 == (177508#testsize{3:13});
output1{test++} = 87 == (44958#testsize{9:8});
output1{test++} = 0 == (332736#testsize{1:3});
output1{test++} = 0 == (285515#testsize{5:1});

{
shortx2 testarray[2];
testarray[0] = 0;
output1{test++} = 0 == testarray[0];
testarray[1] = 1;
output1{test++} = 1 == testarray[1];
}
{
shortx2 testarray[3];
testarray[0] = 0;
output1{test++} = 0 == testarray[0];
testarray[1] = 1;
output1{test++} = 1 == testarray[1];
testarray[2] = 2;
output1{test++} = 2 == testarray[2];
}
{
shortx2 testarray[4];
testarray[0] = 0;
output1{test++} = 0 == testarray[0];
testarray[1] = 1;
output1{test++} = 1 == testarray[1];
testarray[2] = 2;
output1{test++} = 2 == testarray[2];
testarray[3] = 3;
output1{test++} = 3 == testarray[3];
}
{
shortx2 testarray[5];
testarray[0] = 0;
output1{test++} = 0 == testarray[0];
testarray[1] = 1;
output1{test++} = 1 == testarray[1];
testarray[2] = 2;
output1{test++} = 2 == testarray[2];
testarray[3] = 3;
output1{test++} = 3 == testarray[3];
testarray[4] = 4;
output1{test++} = 4 == testarray[4];
}
{
shortx2 testarray[6];
testarray[0] = 0;
output1{test++} = 0 == testarray[0];
testarray[1] = 1;
output1{test++} = 1 == testarray[1];
testarray[2] = 2;
output1{test++} = 2 == testarray[2];
testarray[3] = 3;
output1{test++} = 3 == testarray[3];
testarray[4] = 4;
output1{test++} = 4 == testarray[4];
testarray[5] = 5;
output1{test++} = 5 == testarray[5];
}
{
shortx2 testarray[7];
testarray[0] = 0;
output1{test++} = 0 == testarray[0];
testarray[1] = 1;
output1{test++} = 1 == testarray[1];
testarray[2] = 2;
output1{test++} = 2 == testarray[2];
testarray[3] = 3;
output1{test++} = 3 == testarray[3];
testarray[4] = 4;
output1{test++} = 4 == testarray[4];
testarray[5] = 5;
output1{test++} = 5 == testarray[5];
testarray[6] = 6;
output1{test++} = 6 == testarray[6];
}
{
shortx2 testarray[8];
testarray[0] = 0;
output1{test++} = 0 == testarray[0];
testarray[1] = 1;
output1{test++} = 1 == testarray[1];
testarray[2] = 2;
output1{test++} = 2 == testarray[2];
testarray[3] = 3;
output1{test++} = 3 == testarray[3];
testarray[4] = 4;
output1{test++} = 4 == testarray[4];
testarray[5] = 5;
output1{test++} = 5 == testarray[5];
testarray[6] = 6;
output1{test++} = 6 == testarray[6];
testarray[7] = 7;
output1{test++} = 7 == testarray[7];
}
{
shortx2 testarray[9];
testarray[0] = 0;
output1{test++} = 0 == testarray[0];
testarray[1] = 1;
output1{test++} = 1 == testarray[1];
testarray[2] = 2;
output1{test++} = 2 == testarray[2];
testarray[3] = 3;
output1{test++} = 3 == testarray[3];
testarray[4] = 4;
output1{test++} = 4 == testarray[4];
testarray[5] = 5;
output1{test++} = 5 == testarray[5];
testarray[6] = 6;
output1{test++} = 6 == testarray[6];
testarray[7] = 7;
output1{test++} = 7 == testarray[7];
testarray[8] = 8;
output1{test++} = 8 == testarray[8];
}
{
shortx2 testarray[10];
testarray[0] = 0;
output1{test++} = 0 == testarray[0];
testarray[1] = 1;
output1{test++} = 1 == testarray[1];
testarray[2] = 2;
output1{test++} = 2 == testarray[2];
testarray[3] = 3;
output1{test++} = 3 == testarray[3];
testarray[4] = 4;
output1{test++} = 4 == testarray[4];
testarray[5] = 5;
output1{test++} = 5 == testarray[5];
testarray[6] = 6;
output1{test++} = 6 == testarray[6];
testarray[7] = 7;
output1{test++} = 7 == testarray[7];
testarray[8] = 8;
output1{test++} = 8 == testarray[8];
testarray[9] = 9;
output1{test++} = 9 == testarray[9];
}
{
shortx2 testarray[11];
testarray[0] = 0;
output1{test++} = 0 == testarray[0];
testarray[1] = 1;
output1{test++} = 1 == testarray[1];
testarray[2] = 2;
output1{test++} = 2 == testarray[2];
testarray[3] = 3;
output1{test++} = 3 == testarray[3];
testarray[4] = 4;
output1{test++} = 4 == testarray[4];
testarray[5] = 5;
output1{test++} = 5 == testarray[5];
testarray[6] = 6;
output1{test++} = 6 == testarray[6];
testarray[7] = 7;
output1{test++} = 7 == testarray[7];
testarray[8] = 8;
output1{test++} = 8 == testarray[8];
testarray[9] = 9;
output1{test++} = 9 == testarray[9];
testarray[10] = 10;
output1{test++} = 10 == testarray[10];
}
{
shortx2 testarray[12];
testarray[0] = 0;
output1{test++} = 0 == testarray[0];
testarray[1] = 1;
output1{test++} = 1 == testarray[1];
testarray[2] = 2;
output1{test++} = 2 == testarray[2];
testarray[3] = 3;
output1{test++} = 3 == testarray[3];
testarray[4] = 4;
output1{test++} = 4 == testarray[4];
testarray[5] = 5;
output1{test++} = 5 == testarray[5];
testarray[6] = 6;
output1{test++} = 6 == testarray[6];
testarray[7] = 7;
output1{test++} = 7 == testarray[7];
testarray[8] = 8;
output1{test++} = 8 == testarray[8];
testarray[9] = 9;
output1{test++} = 9 == testarray[9];
testarray[10] = 10;
output1{test++} = 10 == testarray[10];
testarray[11] = 11;
output1{test++} = 11 == testarray[11];
}
{
shortx2 testarray[13];
testarray[0] = 0;
output1{test++} = 0 == testarray[0];
testarray[1] = 1;
output1{test++} = 1 == testarray[1];
testarray[2] = 2;
output1{test++} = 2 == testarray[2];
testarray[3] = 3;
output1{test++} = 3 == testarray[3];
testarray[4] = 4;
output1{test++} = 4 == testarray[4];
testarray[5] = 5;
output1{test++} = 5 == testarray[5];
testarray[6] = 6;
output1{test++} = 6 == testarray[6];
testarray[7] = 7;
output1{test++} = 7 == testarray[7];
testarray[8] = 8;
output1{test++} = 8 == testarray[8];
testarray[9] = 9;
output1{test++} = 9 == testarray[9];
testarray[10] = 10;
output1{test++} = 10 == testarray[10];
testarray[11] = 11;
output1{test++} = 11 == testarray[11];
testarray[12] = 12;
output1{test++} = 12 == testarray[12];
}
{
shortx2 testarray[14];
testarray[0] = 0;
output1{test++} = 0 == testarray[0];
testarray[1] = 1;
output1{test++} = 1 == testarray[1];
testarray[2] = 2;
output1{test++} = 2 == testarray[2];
testarray[3] = 3;
output1{test++} = 3 == testarray[3];
testarray[4] = 4;
output1{test++} = 4 == testarray[4];
testarray[5] = 5;
output1{test++} = 5 == testarray[5];
testarray[6] = 6;
output1{test++} = 6 == testarray[6];
testarray[7] = 7;
output1{test++} = 7 == testarray[7];
testarray[8] = 8;
output1{test++} = 8 == testarray[8];
testarray[9] = 9;
output1{test++} = 9 == testarray[9];
testarray[10] = 10;
output1{test++} = 10 == testarray[10];
testarray[11] = 11;
output1{test++} = 11 == testarray[11];
testarray[12] = 12;
output1{test++} = 12 == testarray[12];
testarray[13] = 13;
output1{test++} = 13 == testarray[13];
}
{
shortx2 testarray[15];
testarray[0] = 0;
output1{test++} = 0 == testarray[0];
testarray[1] = 1;
output1{test++} = 1 == testarray[1];
testarray[2] = 2;
output1{test++} = 2 == testarray[2];
testarray[3] = 3;
output1{test++} = 3 == testarray[3];
testarray[4] = 4;
output1{test++} = 4 == testarray[4];
testarray[5] = 5;
output1{test++} = 5 == testarray[5];
testarray[6] = 6;
output1{test++} = 6 == testarray[6];
testarray[7] = 7;
output1{test++} = 7 == testarray[7];
testarray[8] = 8;
output1{test++} = 8 == testarray[8];
testarray[9] = 9;
output1{test++} = 9 == testarray[9];
testarray[10] = 10;
output1{test++} = 10 == testarray[10];
testarray[11] = 11;
output1{test++} = 11 == testarray[11];
testarray[12] = 12;
output1{test++} = 12 == testarray[12];
testarray[13] = 13;
output1{test++} = 13 == testarray[13];
testarray[14] = 14;
output1{test++} = 14 == testarray[14];
}
{
shortx2 testarray[16];
testarray[0] = 0;
output1{test++} = 0 == testarray[0];
testarray[1] = 1;
output1{test++} = 1 == testarray[1];
testarray[2] = 2;
output1{test++} = 2 == testarray[2];
testarray[3] = 3;
output1{test++} = 3 == testarray[3];
testarray[4] = 4;
output1{test++} = 4 == testarray[4];
testarray[5] = 5;
output1{test++} = 5 == testarray[5];
testarray[6] = 6;
output1{test++} = 6 == testarray[6];
testarray[7] = 7;
output1{test++} = 7 == testarray[7];
testarray[8] = 8;
output1{test++} = 8 == testarray[8];
testarray[9] = 9;
output1{test++} = 9 == testarray[9];
testarray[10] = 10;
output1{test++} = 10 == testarray[10];
testarray[11] = 11;
output1{test++} = 11 == testarray[11];
testarray[12] = 12;
output1{test++} = 12 == testarray[12];
testarray[13] = 13;
output1{test++} = 13 == testarray[13];
testarray[14] = 14;
output1{test++} = 14 == testarray[14];
testarray[15] = 15;
output1{test++} = 15 == testarray[15];
}
{
shortx2 testarray[17];
testarray[0] = 0;
output1{test++} = 0 == testarray[0];
testarray[1] = 1;
output1{test++} = 1 == testarray[1];
testarray[2] = 2;
output1{test++} = 2 == testarray[2];
testarray[3] = 3;
output1{test++} = 3 == testarray[3];
testarray[4] = 4;
output1{test++} = 4 == testarray[4];
testarray[5] = 5;
output1{test++} = 5 == testarray[5];
testarray[6] = 6;
output1{test++} = 6 == testarray[6];
testarray[7] = 7;
output1{test++} = 7 == testarray[7];
testarray[8] = 8;
output1{test++} = 8 == testarray[8];
testarray[9] = 9;
output1{test++} = 9 == testarray[9];
testarray[10] = 10;
output1{test++} = 10 == testarray[10];
testarray[11] = 11;
output1{test++} = 11 == testarray[11];
testarray[12] = 12;
output1{test++} = 12 == testarray[12];
testarray[13] = 13;
output1{test++} = 13 == testarray[13];
testarray[14] = 14;
output1{test++} = 14 == testarray[14];
testarray[15] = 15;
output1{test++} = 15 == testarray[15];
testarray[16] = 16;
output1{test++} = 16 == testarray[16];
}


{
shortx3 testarraydouble[2][2];
shortx3 testarray[2];
testarraydouble[0+10-10][0+0] = 0;
testarraydouble[0+10-10][1+0] = 0;
testarraydouble[1+10-10][0+0] = 0;
testarraydouble[1+10-10][1+0] = 1;
testarray[0+0] = 0;
testarray[1+0] = 0;
output1{test++} = testarray == testarraydouble[0+5-5];
output1{test++} = 0 == (testarray != testarraydouble[0+5-5]);
testarray[0] = 17791;
output1{test++} =  0 == (testarray == testarraydouble[0+5-5]);
output1{test++} =  1 == (testarray != testarraydouble[0+5-5]);
testarraydouble[0] = testarraydouble[0];
output1{test++} = testarraydouble[0][0] == 0;
output1{test++} = testarraydouble[0][1] == 0;
testarray[0+0] = 0;
testarray[1+0] = 1;
output1{test++} = testarray == testarraydouble[1+5-5];
output1{test++} = 0 == (testarray != testarraydouble[1+5-5]);
testarray[1] = 16148;
output1{test++} =  0 == (testarray == testarraydouble[1+5-5]);
output1{test++} =  1 == (testarray != testarraydouble[1+5-5]);
testarraydouble[0] = testarraydouble[1];
output1{test++} = testarraydouble[0][0] == 0;
output1{test++} = testarraydouble[0][1] == 1;
}
{
shortx3 testarraydouble[3][3];
shortx3 testarray[3];
testarraydouble[0+10-10][0+0] = 0;
testarraydouble[0+10-10][1+0] = 0;
testarraydouble[0+10-10][2+0] = 0;
testarraydouble[1+10-10][0+0] = 0;
testarraydouble[1+10-10][1+0] = 1;
testarraydouble[1+10-10][2+0] = 2;
testarraydouble[2+10-10][0+0] = 0;
testarraydouble[2+10-10][1+0] = 2;
testarraydouble[2+10-10][2+0] = 4;
testarray[0+0] = 0;
testarray[1+0] = 0;
testarray[2+0] = 0;
output1{test++} = testarray == testarraydouble[0+5-5];
output1{test++} = 0 == (testarray != testarraydouble[0+5-5]);
testarray[1] = 11004;
output1{test++} =  0 == (testarray == testarraydouble[0+5-5]);
output1{test++} =  1 == (testarray != testarraydouble[0+5-5]);
testarraydouble[0] = testarraydouble[0];
output1{test++} = testarraydouble[0][0] == 0;
output1{test++} = testarraydouble[0][1] == 0;
output1{test++} = testarraydouble[0][2] == 0;
testarray[0+0] = 0;
testarray[1+0] = 1;
testarray[2+0] = 2;
output1{test++} = testarray == testarraydouble[1+5-5];
output1{test++} = 0 == (testarray != testarraydouble[1+5-5]);
testarray[1] = 13554;
output1{test++} =  0 == (testarray == testarraydouble[1+5-5]);
output1{test++} =  1 == (testarray != testarraydouble[1+5-5]);
testarraydouble[0] = testarraydouble[1];
output1{test++} = testarraydouble[0][0] == 0;
output1{test++} = testarraydouble[0][1] == 1;
output1{test++} = testarraydouble[0][2] == 2;
testarray[0+0] = 0;
testarray[1+0] = 2;
testarray[2+0] = 4;
output1{test++} = testarray == testarraydouble[2+5-5];
output1{test++} = 0 == (testarray != testarraydouble[2+5-5]);
testarray[2] = 14696;
output1{test++} =  0 == (testarray == testarraydouble[2+5-5]);
output1{test++} =  1 == (testarray != testarraydouble[2+5-5]);
testarraydouble[0] = testarraydouble[2];
output1{test++} = testarraydouble[0][0] == 0;
output1{test++} = testarraydouble[0][1] == 2;
output1{test++} = testarraydouble[0][2] == 4;
}
{
shortx3 testarraydouble[4][4];
shortx3 testarray[4];
testarraydouble[0+10-10][0+0] = 0;
testarraydouble[0+10-10][1+0] = 0;
testarraydouble[0+10-10][2+0] = 0;
testarraydouble[0+10-10][3+0] = 0;
testarraydouble[1+10-10][0+0] = 0;
testarraydouble[1+10-10][1+0] = 1;
testarraydouble[1+10-10][2+0] = 2;
testarraydouble[1+10-10][3+0] = 3;
testarraydouble[2+10-10][0+0] = 0;
testarraydouble[2+10-10][1+0] = 2;
testarraydouble[2+10-10][2+0] = 4;
testarraydouble[2+10-10][3+0] = 6;
testarraydouble[3+10-10][0+0] = 0;
testarraydouble[3+10-10][1+0] = 3;
testarraydouble[3+10-10][2+0] = 6;
testarraydouble[3+10-10][3+0] = 9;
testarray[0+0] = 0;
testarray[1+0] = 0;
testarray[2+0] = 0;
testarray[3+0] = 0;
output1{test++} = testarray == testarraydouble[0+5-5];
output1{test++} = 0 == (testarray != testarraydouble[0+5-5]);
testarray[0] = 18747;
output1{test++} =  0 == (testarray == testarraydouble[0+5-5]);
output1{test++} =  1 == (testarray != testarraydouble[0+5-5]);
testarraydouble[0] = testarraydouble[0];
output1{test++} = testarraydouble[0][0] == 0;
output1{test++} = testarraydouble[0][1] == 0;
output1{test++} = testarraydouble[0][2] == 0;
output1{test++} = testarraydouble[0][3] == 0;
testarray[0+0] = 0;
testarray[1+0] = 1;
testarray[2+0] = 2;
testarray[3+0] = 3;
output1{test++} = testarray == testarraydouble[1+5-5];
output1{test++} = 0 == (testarray != testarraydouble[1+5-5]);
testarray[0] = 11362;
output1{test++} =  0 == (testarray == testarraydouble[1+5-5]);
output1{test++} =  1 == (testarray != testarraydouble[1+5-5]);
testarraydouble[0] = testarraydouble[1];
output1{test++} = testarraydouble[0][0] == 0;
output1{test++} = testarraydouble[0][1] == 1;
output1{test++} = testarraydouble[0][2] == 2;
output1{test++} = testarraydouble[0][3] == 3;
testarray[0+0] = 0;
testarray[1+0] = 2;
testarray[2+0] = 4;
testarray[3+0] = 6;
output1{test++} = testarray == testarraydouble[2+5-5];
output1{test++} = 0 == (testarray != testarraydouble[2+5-5]);
testarray[0] = 16351;
output1{test++} =  0 == (testarray == testarraydouble[2+5-5]);
output1{test++} =  1 == (testarray != testarraydouble[2+5-5]);
testarraydouble[0] = testarraydouble[2];
output1{test++} = testarraydouble[0][0] == 0;
output1{test++} = testarraydouble[0][1] == 2;
output1{test++} = testarraydouble[0][2] == 4;
output1{test++} = testarraydouble[0][3] == 6;
testarray[0+0] = 0;
testarray[1+0] = 3;
testarray[2+0] = 6;
testarray[3+0] = 9;
output1{test++} = testarray == testarraydouble[3+5-5];
output1{test++} = 0 == (testarray != testarraydouble[3+5-5]);
testarray[3] = 14278;
output1{test++} =  0 == (testarray == testarraydouble[3+5-5]);
output1{test++} =  1 == (testarray != testarraydouble[3+5-5]);
testarraydouble[0] = testarraydouble[3];
output1{test++} = testarraydouble[0][0] == 0;
output1{test++} = testarraydouble[0][1] == 3;
output1{test++} = testarraydouble[0][2] == 6;
output1{test++} = testarraydouble[0][3] == 9;
}
{
shortx3 testarraydouble[5][5];
shortx3 testarray[5];
testarraydouble[0+10-10][0+0] = 0;
testarraydouble[0+10-10][1+0] = 0;
testarraydouble[0+10-10][2+0] = 0;
testarraydouble[0+10-10][3+0] = 0;
testarraydouble[0+10-10][4+0] = 0;
testarraydouble[1+10-10][0+0] = 0;
testarraydouble[1+10-10][1+0] = 1;
testarraydouble[1+10-10][2+0] = 2;
testarraydouble[1+10-10][3+0] = 3;
testarraydouble[1+10-10][4+0] = 4;
testarraydouble[2+10-10][0+0] = 0;
testarraydouble[2+10-10][1+0] = 2;
testarraydouble[2+10-10][2+0] = 4;
testarraydouble[2+10-10][3+0] = 6;
testarraydouble[2+10-10][4+0] = 8;
testarraydouble[3+10-10][0+0] = 0;
testarraydouble[3+10-10][1+0] = 3;
testarraydouble[3+10-10][2+0] = 6;
testarraydouble[3+10-10][3+0] = 9;
testarraydouble[3+10-10][4+0] = 12;
testarraydouble[4+10-10][0+0] = 0;
testarraydouble[4+10-10][1+0] = 4;
testarraydouble[4+10-10][2+0] = 8;
testarraydouble[4+10-10][3+0] = 12;
testarraydouble[4+10-10][4+0] = 16;
testarray[0+0] = 0;
testarray[1+0] = 0;
testarray[2+0] = 0;
testarray[3+0] = 0;
testarray[4+0] = 0;
output1{test++} = testarray == testarraydouble[0+5-5];
output1{test++} = 0 == (testarray != testarraydouble[0+5-5]);
testarray[3] = 13906;
output1{test++} =  0 == (testarray == testarraydouble[0+5-5]);
output1{test++} =  1 == (testarray != testarraydouble[0+5-5]);
testarraydouble[0] = testarraydouble[0];
output1{test++} = testarraydouble[0][0] == 0;
output1{test++} = testarraydouble[0][1] == 0;
output1{test++} = testarraydouble[0][2] == 0;
output1{test++} = testarraydouble[0][3] == 0;
output1{test++} = testarraydouble[0][4] == 0;
testarray[0+0] = 0;
testarray[1+0] = 1;
testarray[2+0] = 2;
testarray[3+0] = 3;
testarray[4+0] = 4;
output1{test++} = testarray == testarraydouble[1+5-5];
output1{test++} = 0 == (testarray != testarraydouble[1+5-5]);
testarray[1] = 10352;
output1{test++} =  0 == (testarray == testarraydouble[1+5-5]);
output1{test++} =  1 == (testarray != testarraydouble[1+5-5]);
testarraydouble[0] = testarraydouble[1];
output1{test++} = testarraydouble[0][0] == 0;
output1{test++} = testarraydouble[0][1] == 1;
output1{test++} = testarraydouble[0][2] == 2;
output1{test++} = testarraydouble[0][3] == 3;
output1{test++} = testarraydouble[0][4] == 4;
testarray[0+0] = 0;
testarray[1+0] = 2;
testarray[2+0] = 4;
testarray[3+0] = 6;
testarray[4+0] = 8;
output1{test++} = testarray == testarraydouble[2+5-5];
output1{test++} = 0 == (testarray != testarraydouble[2+5-5]);
testarray[2] = 16496;
output1{test++} =  0 == (testarray == testarraydouble[2+5-5]);
output1{test++} =  1 == (testarray != testarraydouble[2+5-5]);
testarraydouble[0] = testarraydouble[2];
output1{test++} = testarraydouble[0][0] == 0;
output1{test++} = testarraydouble[0][1] == 2;
output1{test++} = testarraydouble[0][2] == 4;
output1{test++} = testarraydouble[0][3] == 6;
output1{test++} = testarraydouble[0][4] == 8;
testarray[0+0] = 0;
testarray[1+0] = 3;
testarray[2+0] = 6;
testarray[3+0] = 9;
testarray[4+0] = 12;
output1{test++} = testarray == testarraydouble[3+5-5];
output1{test++} = 0 == (testarray != testarraydouble[3+5-5]);
testarray[2] = 10434;
output1{test++} =  0 == (testarray == testarraydouble[3+5-5]);
output1{test++} =  1 == (testarray != testarraydouble[3+5-5]);
testarraydouble[0] = testarraydouble[3];
output1{test++} = testarraydouble[0][0] == 0;
output1{test++} = testarraydouble[0][1] == 3;
output1{test++} = testarraydouble[0][2] == 6;
output1{test++} = testarraydouble[0][3] == 9;
output1{test++} = testarraydouble[0][4] == 12;
testarray[0+0] = 0;
testarray[1+0] = 4;
testarray[2+0] = 8;
testarray[3+0] = 12;
testarray[4+0] = 16;
output1{test++} = testarray == testarraydouble[4+5-5];
output1{test++} = 0 == (testarray != testarraydouble[4+5-5]);
testarray[2] = 11115;
output1{test++} =  0 == (testarray == testarraydouble[4+5-5]);
output1{test++} =  1 == (testarray != testarraydouble[4+5-5]);
testarraydouble[0] = testarraydouble[4];
output1{test++} = testarraydouble[0][0] == 0;
output1{test++} = testarraydouble[0][1] == 4;
output1{test++} = testarraydouble[0][2] == 8;
output1{test++} = testarraydouble[0][3] == 12;
output1{test++} = testarraydouble[0][4] == 16;
}
{
shortx3 testarraydouble[6][6];
shortx3 testarray[6];
testarraydouble[0+10-10][0+0] = 0;
testarraydouble[0+10-10][1+0] = 0;
testarraydouble[0+10-10][2+0] = 0;
testarraydouble[0+10-10][3+0] = 0;
testarraydouble[0+10-10][4+0] = 0;
testarraydouble[0+10-10][5+0] = 0;
testarraydouble[1+10-10][0+0] = 0;
testarraydouble[1+10-10][1+0] = 1;
testarraydouble[1+10-10][2+0] = 2;
testarraydouble[1+10-10][3+0] = 3;
testarraydouble[1+10-10][4+0] = 4;
testarraydouble[1+10-10][5+0] = 5;
testarraydouble[2+10-10][0+0] = 0;
testarraydouble[2+10-10][1+0] = 2;
testarraydouble[2+10-10][2+0] = 4;
testarraydouble[2+10-10][3+0] = 6;
testarraydouble[2+10-10][4+0] = 8;
testarraydouble[2+10-10][5+0] = 10;
testarraydouble[3+10-10][0+0] = 0;
testarraydouble[3+10-10][1+0] = 3;
testarraydouble[3+10-10][2+0] = 6;
testarraydouble[3+10-10][3+0] = 9;
testarraydouble[3+10-10][4+0] = 12;
testarraydouble[3+10-10][5+0] = 15;
testarraydouble[4+10-10][0+0] = 0;
testarraydouble[4+10-10][1+0] = 4;
testarraydouble[4+10-10][2+0] = 8;
testarraydouble[4+10-10][3+0] = 12;
testarraydouble[4+10-10][4+0] = 16;
testarraydouble[4+10-10][5+0] = 20;
testarraydouble[5+10-10][0+0] = 0;
testarraydouble[5+10-10][1+0] = 5;
testarraydouble[5+10-10][2+0] = 10;
testarraydouble[5+10-10][3+0] = 15;
testarraydouble[5+10-10][4+0] = 20;
testarraydouble[5+10-10][5+0] = 25;
testarray[0+0] = 0;
testarray[1+0] = 0;
testarray[2+0] = 0;
testarray[3+0] = 0;
testarray[4+0] = 0;
testarray[5+0] = 0;
output1{test++} = testarray == testarraydouble[0+5-5];
output1{test++} = 0 == (testarray != testarraydouble[0+5-5]);
testarray[3] = 11953;
output1{test++} =  0 == (testarray == testarraydouble[0+5-5]);
output1{test++} =  1 == (testarray != testarraydouble[0+5-5]);
testarraydouble[0] = testarraydouble[0];
output1{test++} = testarraydouble[0][0] == 0;
output1{test++} = testarraydouble[0][1] == 0;
output1{test++} = testarraydouble[0][2] == 0;
output1{test++} = testarraydouble[0][3] == 0;
output1{test++} = testarraydouble[0][4] == 0;
output1{test++} = testarraydouble[0][5] == 0;
testarray[0+0] = 0;
testarray[1+0] = 1;
testarray[2+0] = 2;
testarray[3+0] = 3;
testarray[4+0] = 4;
testarray[5+0] = 5;
output1{test++} = testarray == testarraydouble[1+5-5];
output1{test++} = 0 == (testarray != testarraydouble[1+5-5]);
testarray[1] = 19792;
output1{test++} =  0 == (testarray == testarraydouble[1+5-5]);
output1{test++} =  1 == (testarray != testarraydouble[1+5-5]);
testarraydouble[0] = testarraydouble[1];
output1{test++} = testarraydouble[0][0] == 0;
output1{test++} = testarraydouble[0][1] == 1;
output1{test++} = testarraydouble[0][2] == 2;
output1{test++} = testarraydouble[0][3] == 3;
output1{test++} = testarraydouble[0][4] == 4;
output1{test++} = testarraydouble[0][5] == 5;
testarray[0+0] = 0;
testarray[1+0] = 2;
testarray[2+0] = 4;
testarray[3+0] = 6;
testarray[4+0] = 8;
testarray[5+0] = 10;
output1{test++} = testarray == testarraydouble[2+5-5];
output1{test++} = 0 == (testarray != testarraydouble[2+5-5]);
testarray[5] = 11417;
output1{test++} =  0 == (testarray == testarraydouble[2+5-5]);
output1{test++} =  1 == (testarray != testarraydouble[2+5-5]);
testarraydouble[0] = testarraydouble[2];
output1{test++} = testarraydouble[0][0] == 0;
output1{test++} = testarraydouble[0][1] == 2;
output1{test++} = testarraydouble[0][2] == 4;
output1{test++} = testarraydouble[0][3] == 6;
output1{test++} = testarraydouble[0][4] == 8;
output1{test++} = testarraydouble[0][5] == 10;
testarray[0+0] = 0;
testarray[1+0] = 3;
testarray[2+0] = 6;
testarray[3+0] = 9;
testarray[4+0] = 12;
testarray[5+0] = 15;
output1{test++} = testarray == testarraydouble[3+5-5];
output1{test++} = 0 == (testarray != testarraydouble[3+5-5]);
testarray[4] = 10776;
output1{test++} =  0 == (testarray == testarraydouble[3+5-5]);
output1{test++} =  1 == (testarray != testarraydouble[3+5-5]);
testarraydouble[0] = testarraydouble[3];
output1{test++} = testarraydouble[0][0] == 0;
output1{test++} = testarraydouble[0][1] == 3;
output1{test++} = testarraydouble[0][2] == 6;
output1{test++} = testarraydouble[0][3] == 9;
output1{test++} = testarraydouble[0][4] == 12;
output1{test++} = testarraydouble[0][5] == 15;
testarray[0+0] = 0;
testarray[1+0] = 4;
testarray[2+0] = 8;
testarray[3+0] = 12;
testarray[4+0] = 16;
testarray[5+0] = 20;
output1{test++} = testarray == testarraydouble[4+5-5];
output1{test++} = 0 == (testarray != testarraydouble[4+5-5]);
testarray[0] = 15456;
output1{test++} =  0 == (testarray == testarraydouble[4+5-5]);
output1{test++} =  1 == (testarray != testarraydouble[4+5-5]);
testarraydouble[0] = testarraydouble[4];
output1{test++} = testarraydouble[0][0] == 0;
output1{test++} = testarraydouble[0][1] == 4;
output1{test++} = testarraydouble[0][2] == 8;
output1{test++} = testarraydouble[0][3] == 12;
output1{test++} = testarraydouble[0][4] == 16;
output1{test++} = testarraydouble[0][5] == 20;
testarray[0+0] = 0;
testarray[1+0] = 5;
testarray[2+0] = 10;
testarray[3+0] = 15;
testarray[4+0] = 20;
testarray[5+0] = 25;
output1{test++} = testarray == testarraydouble[5+5-5];
output1{test++} = 0 == (testarray != testarraydouble[5+5-5]);
testarray[5] = 10058;
output1{test++} =  0 == (testarray == testarraydouble[5+5-5]);
output1{test++} =  1 == (testarray != testarraydouble[5+5-5]);
testarraydouble[0] = testarraydouble[5];
output1{test++} = testarraydouble[0][0] == 0;
output1{test++} = testarraydouble[0][1] == 5;
output1{test++} = testarraydouble[0][2] == 10;
output1{test++} = testarraydouble[0][3] == 15;
output1{test++} = testarraydouble[0][4] == 20;
output1{test++} = testarraydouble[0][5] == 25;
}
{
shortx3 testarraydouble[7][7];
shortx3 testarray[7];
testarraydouble[0+10-10][0+0] = 0;
testarraydouble[0+10-10][1+0] = 0;
testarraydouble[0+10-10][2+0] = 0;
testarraydouble[0+10-10][3+0] = 0;
testarraydouble[0+10-10][4+0] = 0;
testarraydouble[0+10-10][5+0] = 0;
testarraydouble[0+10-10][6+0] = 0;
testarraydouble[1+10-10][0+0] = 0;
testarraydouble[1+10-10][1+0] = 1;
testarraydouble[1+10-10][2+0] = 2;
testarraydouble[1+10-10][3+0] = 3;
testarraydouble[1+10-10][4+0] = 4;
testarraydouble[1+10-10][5+0] = 5;
testarraydouble[1+10-10][6+0] = 6;
testarraydouble[2+10-10][0+0] = 0;
testarraydouble[2+10-10][1+0] = 2;
testarraydouble[2+10-10][2+0] = 4;
testarraydouble[2+10-10][3+0] = 6;
testarraydouble[2+10-10][4+0] = 8;
testarraydouble[2+10-10][5+0] = 10;
testarraydouble[2+10-10][6+0] = 12;
testarraydouble[3+10-10][0+0] = 0;
testarraydouble[3+10-10][1+0] = 3;
testarraydouble[3+10-10][2+0] = 6;
testarraydouble[3+10-10][3+0] = 9;
testarraydouble[3+10-10][4+0] = 12;
testarraydouble[3+10-10][5+0] = 15;
testarraydouble[3+10-10][6+0] = 18;
testarraydouble[4+10-10][0+0] = 0;
testarraydouble[4+10-10][1+0] = 4;
testarraydouble[4+10-10][2+0] = 8;
testarraydouble[4+10-10][3+0] = 12;
testarraydouble[4+10-10][4+0] = 16;
testarraydouble[4+10-10][5+0] = 20;
testarraydouble[4+10-10][6+0] = 24;
testarraydouble[5+10-10][0+0] = 0;
testarraydouble[5+10-10][1+0] = 5;
testarraydouble[5+10-10][2+0] = 10;
testarraydouble[5+10-10][3+0] = 15;
testarraydouble[5+10-10][4+0] = 20;
testarraydouble[5+10-10][5+0] = 25;
testarraydouble[5+10-10][6+0] = 30;
testarraydouble[6+10-10][0+0] = 0;
testarraydouble[6+10-10][1+0] = 6;
testarraydouble[6+10-10][2+0] = 12;
testarraydouble[6+10-10][3+0] = 18;
testarraydouble[6+10-10][4+0] = 24;
testarraydouble[6+10-10][5+0] = 30;
testarraydouble[6+10-10][6+0] = 36;
testarray[0+0] = 0;
testarray[1+0] = 0;
testarray[2+0] = 0;
testarray[3+0] = 0;
testarray[4+0] = 0;
testarray[5+0] = 0;
testarray[6+0] = 0;
output1{test++} = testarray == testarraydouble[0+5-5];
output1{test++} = 0 == (testarray != testarraydouble[0+5-5]);
testarray[0] = 14440;
output1{test++} =  0 == (testarray == testarraydouble[0+5-5]);
output1{test++} =  1 == (testarray != testarraydouble[0+5-5]);
testarraydouble[0] = testarraydouble[0];
output1{test++} = testarraydouble[0][0] == 0;
output1{test++} = testarraydouble[0][1] == 0;
output1{test++} = testarraydouble[0][2] == 0;
output1{test++} = testarraydouble[0][3] == 0;
output1{test++} = testarraydouble[0][4] == 0;
output1{test++} = testarraydouble[0][5] == 0;
output1{test++} = testarraydouble[0][6] == 0;
testarray[0+0] = 0;
testarray[1+0] = 1;
testarray[2+0] = 2;
testarray[3+0] = 3;
testarray[4+0] = 4;
testarray[5+0] = 5;
testarray[6+0] = 6;
output1{test++} = testarray == testarraydouble[1+5-5];
output1{test++} = 0 == (testarray != testarraydouble[1+5-5]);
testarray[0] = 16317;
output1{test++} =  0 == (testarray == testarraydouble[1+5-5]);
output1{test++} =  1 == (testarray != testarraydouble[1+5-5]);
testarraydouble[0] = testarraydouble[1];
output1{test++} = testarraydouble[0][0] == 0;
output1{test++} = testarraydouble[0][1] == 1;
output1{test++} = testarraydouble[0][2] == 2;
output1{test++} = testarraydouble[0][3] == 3;
output1{test++} = testarraydouble[0][4] == 4;
output1{test++} = testarraydouble[0][5] == 5;
output1{test++} = testarraydouble[0][6] == 6;
testarray[0+0] = 0;
testarray[1+0] = 2;
testarray[2+0] = 4;
testarray[3+0] = 6;
testarray[4+0] = 8;
testarray[5+0] = 10;
testarray[6+0] = 12;
output1{test++} = testarray == testarraydouble[2+5-5];
output1{test++} = 0 == (testarray != testarraydouble[2+5-5]);
testarray[1] = 11822;
output1{test++} =  0 == (testarray == testarraydouble[2+5-5]);
output1{test++} =  1 == (testarray != testarraydouble[2+5-5]);
testarraydouble[0] = testarraydouble[2];
output1{test++} = testarraydouble[0][0] == 0;
output1{test++} = testarraydouble[0][1] == 2;
output1{test++} = testarraydouble[0][2] == 4;
output1{test++} = testarraydouble[0][3] == 6;
output1{test++} = testarraydouble[0][4] == 8;
output1{test++} = testarraydouble[0][5] == 10;
output1{test++} = testarraydouble[0][6] == 12;
testarray[0+0] = 0;
testarray[1+0] = 3;
testarray[2+0] = 6;
testarray[3+0] = 9;
testarray[4+0] = 12;
testarray[5+0] = 15;
testarray[6+0] = 18;
output1{test++} = testarray == testarraydouble[3+5-5];
output1{test++} = 0 == (testarray != testarraydouble[3+5-5]);
testarray[0] = 12172;
output1{test++} =  0 == (testarray == testarraydouble[3+5-5]);
output1{test++} =  1 == (testarray != testarraydouble[3+5-5]);
testarraydouble[0] = testarraydouble[3];
output1{test++} = testarraydouble[0][0] == 0;
output1{test++} = testarraydouble[0][1] == 3;
output1{test++} = testarraydouble[0][2] == 6;
output1{test++} = testarraydouble[0][3] == 9;
output1{test++} = testarraydouble[0][4] == 12;
output1{test++} = testarraydouble[0][5] == 15;
output1{test++} = testarraydouble[0][6] == 18;
testarray[0+0] = 0;
testarray[1+0] = 4;
testarray[2+0] = 8;
testarray[3+0] = 12;
testarray[4+0] = 16;
testarray[5+0] = 20;
testarray[6+0] = 24;
output1{test++} = testarray == testarraydouble[4+5-5];
output1{test++} = 0 == (testarray != testarraydouble[4+5-5]);
testarray[6] = 14768;
output1{test++} =  0 == (testarray == testarraydouble[4+5-5]);
output1{test++} =  1 == (testarray != testarraydouble[4+5-5]);
testarraydouble[0] = testarraydouble[4];
output1{test++} = testarraydouble[0][0] == 0;
output1{test++} = testarraydouble[0][1] == 4;
output1{test++} = testarraydouble[0][2] == 8;
output1{test++} = testarraydouble[0][3] == 12;
output1{test++} = testarraydouble[0][4] == 16;
output1{test++} = testarraydouble[0][5] == 20;
output1{test++} = testarraydouble[0][6] == 24;
testarray[0+0] = 0;
testarray[1+0] = 5;
testarray[2+0] = 10;
testarray[3+0] = 15;
testarray[4+0] = 20;
testarray[5+0] = 25;
testarray[6+0] = 30;
output1{test++} = testarray == testarraydouble[5+5-5];
output1{test++} = 0 == (testarray != testarraydouble[5+5-5]);
testarray[4] = 16994;
output1{test++} =  0 == (testarray == testarraydouble[5+5-5]);
output1{test++} =  1 == (testarray != testarraydouble[5+5-5]);
testarraydouble[0] = testarraydouble[5];
output1{test++} = testarraydouble[0][0] == 0;
output1{test++} = testarraydouble[0][1] == 5;
output1{test++} = testarraydouble[0][2] == 10;
output1{test++} = testarraydouble[0][3] == 15;
output1{test++} = testarraydouble[0][4] == 20;
output1{test++} = testarraydouble[0][5] == 25;
output1{test++} = testarraydouble[0][6] == 30;
testarray[0+0] = 0;
testarray[1+0] = 6;
testarray[2+0] = 12;
testarray[3+0] = 18;
testarray[4+0] = 24;
testarray[5+0] = 30;
testarray[6+0] = 36;
output1{test++} = testarray == testarraydouble[6+5-5];
output1{test++} = 0 == (testarray != testarraydouble[6+5-5]);
testarray[1] = 18988;
output1{test++} =  0 == (testarray == testarraydouble[6+5-5]);
output1{test++} =  1 == (testarray != testarraydouble[6+5-5]);
testarraydouble[0] = testarraydouble[6];
output1{test++} = testarraydouble[0][0] == 0;
output1{test++} = testarraydouble[0][1] == 6;
output1{test++} = testarraydouble[0][2] == 12;
output1{test++} = testarraydouble[0][3] == 18;
output1{test++} = testarraydouble[0][4] == 24;
output1{test++} = testarraydouble[0][5] == 30;
output1{test++} = testarraydouble[0][6] == 36;
}
{
shortx3 testarraydouble[8][8];
shortx3 testarray[8];
testarraydouble[0+10-10][0+0] = 0;
testarraydouble[0+10-10][1+0] = 0;
testarraydouble[0+10-10][2+0] = 0;
testarraydouble[0+10-10][3+0] = 0;
testarraydouble[0+10-10][4+0] = 0;
testarraydouble[0+10-10][5+0] = 0;
testarraydouble[0+10-10][6+0] = 0;
testarraydouble[0+10-10][7+0] = 0;
testarraydouble[1+10-10][0+0] = 0;
testarraydouble[1+10-10][1+0] = 1;
testarraydouble[1+10-10][2+0] = 2;
testarraydouble[1+10-10][3+0] = 3;
testarraydouble[1+10-10][4+0] = 4;
testarraydouble[1+10-10][5+0] = 5;
testarraydouble[1+10-10][6+0] = 6;
testarraydouble[1+10-10][7+0] = 7;
testarraydouble[2+10-10][0+0] = 0;
testarraydouble[2+10-10][1+0] = 2;
testarraydouble[2+10-10][2+0] = 4;
testarraydouble[2+10-10][3+0] = 6;
testarraydouble[2+10-10][4+0] = 8;
testarraydouble[2+10-10][5+0] = 10;
testarraydouble[2+10-10][6+0] = 12;
testarraydouble[2+10-10][7+0] = 14;
testarraydouble[3+10-10][0+0] = 0;
testarraydouble[3+10-10][1+0] = 3;
testarraydouble[3+10-10][2+0] = 6;
testarraydouble[3+10-10][3+0] = 9;
testarraydouble[3+10-10][4+0] = 12;
testarraydouble[3+10-10][5+0] = 15;
testarraydouble[3+10-10][6+0] = 18;
testarraydouble[3+10-10][7+0] = 21;
testarraydouble[4+10-10][0+0] = 0;
testarraydouble[4+10-10][1+0] = 4;
testarraydouble[4+10-10][2+0] = 8;
testarraydouble[4+10-10][3+0] = 12;
testarraydouble[4+10-10][4+0] = 16;
testarraydouble[4+10-10][5+0] = 20;
testarraydouble[4+10-10][6+0] = 24;
testarraydouble[4+10-10][7+0] = 28;
testarraydouble[5+10-10][0+0] = 0;
testarraydouble[5+10-10][1+0] = 5;
testarraydouble[5+10-10][2+0] = 10;
testarraydouble[5+10-10][3+0] = 15;
testarraydouble[5+10-10][4+0] = 20;
testarraydouble[5+10-10][5+0] = 25;
testarraydouble[5+10-10][6+0] = 30;
testarraydouble[5+10-10][7+0] = 35;
testarraydouble[6+10-10][0+0] = 0;
testarraydouble[6+10-10][1+0] = 6;
testarraydouble[6+10-10][2+0] = 12;
testarraydouble[6+10-10][3+0] = 18;
testarraydouble[6+10-10][4+0] = 24;
testarraydouble[6+10-10][5+0] = 30;
testarraydouble[6+10-10][6+0] = 36;
testarraydouble[6+10-10][7+0] = 42;
testarraydouble[7+10-10][0+0] = 0;
testarraydouble[7+10-10][1+0] = 7;
testarraydouble[7+10-10][2+0] = 14;
testarraydouble[7+10-10][3+0] = 21;
testarraydouble[7+10-10][4+0] = 28;
testarraydouble[7+10-10][5+0] = 35;
testarraydouble[7+10-10][6+0] = 42;
testarraydouble[7+10-10][7+0] = 49;
testarray[0+0] = 0;
testarray[1+0] = 0;
testarray[2+0] = 0;
testarray[3+0] = 0;
testarray[4+0] = 0;
testarray[5+0] = 0;
testarray[6+0] = 0;
testarray[7+0] = 0;
output1{test++} = testarray == testarraydouble[0+5-5];
output1{test++} = 0 == (testarray != testarraydouble[0+5-5]);
testarray[4] = 16308;
output1{test++} =  0 == (testarray == testarraydouble[0+5-5]);
output1{test++} =  1 == (testarray != testarraydouble[0+5-5]);
testarraydouble[0] = testarraydouble[0];
output1{test++} = testarraydouble[0][0] == 0;
output1{test++} = testarraydouble[0][1] == 0;
output1{test++} = testarraydouble[0][2] == 0;
output1{test++} = testarraydouble[0][3] == 0;
output1{test++} = testarraydouble[0][4] == 0;
output1{test++} = testarraydouble[0][5] == 0;
output1{test++} = testarraydouble[0][6] == 0;
output1{test++} = testarraydouble[0][7] == 0;
testarray[0+0] = 0;
testarray[1+0] = 1;
testarray[2+0] = 2;
testarray[3+0] = 3;
testarray[4+0] = 4;
testarray[5+0] = 5;
testarray[6+0] = 6;
testarray[7+0] = 7;
output1{test++} = testarray == testarraydouble[1+5-5];
output1{test++} = 0 == (testarray != testarraydouble[1+5-5]);
testarray[6] = 17443;
output1{test++} =  0 == (testarray == testarraydouble[1+5-5]);
output1{test++} =  1 == (testarray != testarraydouble[1+5-5]);
testarraydouble[0] = testarraydouble[1];
output1{test++} = testarraydouble[0][0] == 0;
output1{test++} = testarraydouble[0][1] == 1;
output1{test++} = testarraydouble[0][2] == 2;
output1{test++} = testarraydouble[0][3] == 3;
output1{test++} = testarraydouble[0][4] == 4;
output1{test++} = testarraydouble[0][5] == 5;
output1{test++} = testarraydouble[0][6] == 6;
output1{test++} = testarraydouble[0][7] == 7;
testarray[0+0] = 0;
testarray[1+0] = 2;
testarray[2+0] = 4;
testarray[3+0] = 6;
testarray[4+0] = 8;
testarray[5+0] = 10;
testarray[6+0] = 12;
testarray[7+0] = 14;
output1{test++} = testarray == testarraydouble[2+5-5];
output1{test++} = 0 == (testarray != testarraydouble[2+5-5]);
testarray[0] = 13662;
output1{test++} =  0 == (testarray == testarraydouble[2+5-5]);
output1{test++} =  1 == (testarray != testarraydouble[2+5-5]);
testarraydouble[0] = testarraydouble[2];
output1{test++} = testarraydouble[0][0] == 0;
output1{test++} = testarraydouble[0][1] == 2;
output1{test++} = testarraydouble[0][2] == 4;
output1{test++} = testarraydouble[0][3] == 6;
output1{test++} = testarraydouble[0][4] == 8;
output1{test++} = testarraydouble[0][5] == 10;
output1{test++} = testarraydouble[0][6] == 12;
output1{test++} = testarraydouble[0][7] == 14;
testarray[0+0] = 0;
testarray[1+0] = 3;
testarray[2+0] = 6;
testarray[3+0] = 9;
testarray[4+0] = 12;
testarray[5+0] = 15;
testarray[6+0] = 18;
testarray[7+0] = 21;
output1{test++} = testarray == testarraydouble[3+5-5];
output1{test++} = 0 == (testarray != testarraydouble[3+5-5]);
testarray[6] = 15004;
output1{test++} =  0 == (testarray == testarraydouble[3+5-5]);
output1{test++} =  1 == (testarray != testarraydouble[3+5-5]);
testarraydouble[0] = testarraydouble[3];
output1{test++} = testarraydouble[0][0] == 0;
output1{test++} = testarraydouble[0][1] == 3;
output1{test++} = testarraydouble[0][2] == 6;
output1{test++} = testarraydouble[0][3] == 9;
output1{test++} = testarraydouble[0][4] == 12;
output1{test++} = testarraydouble[0][5] == 15;
output1{test++} = testarraydouble[0][6] == 18;
output1{test++} = testarraydouble[0][7] == 21;
testarray[0+0] = 0;
testarray[1+0] = 4;
testarray[2+0] = 8;
testarray[3+0] = 12;
testarray[4+0] = 16;
testarray[5+0] = 20;
testarray[6+0] = 24;
testarray[7+0] = 28;
output1{test++} = testarray == testarraydouble[4+5-5];
output1{test++} = 0 == (testarray != testarraydouble[4+5-5]);
testarray[3] = 12373;
output1{test++} =  0 == (testarray == testarraydouble[4+5-5]);
output1{test++} =  1 == (testarray != testarraydouble[4+5-5]);
testarraydouble[0] = testarraydouble[4];
output1{test++} = testarraydouble[0][0] == 0;
output1{test++} = testarraydouble[0][1] == 4;
output1{test++} = testarraydouble[0][2] == 8;
output1{test++} = testarraydouble[0][3] == 12;
output1{test++} = testarraydouble[0][4] == 16;
output1{test++} = testarraydouble[0][5] == 20;
output1{test++} = testarraydouble[0][6] == 24;
output1{test++} = testarraydouble[0][7] == 28;
testarray[0+0] = 0;
testarray[1+0] = 5;
testarray[2+0] = 10;
testarray[3+0] = 15;
testarray[4+0] = 20;
testarray[5+0] = 25;
testarray[6+0] = 30;
testarray[7+0] = 35;
output1{test++} = testarray == testarraydouble[5+5-5];
output1{test++} = 0 == (testarray != testarraydouble[5+5-5]);
testarray[4] = 13493;
output1{test++} =  0 == (testarray == testarraydouble[5+5-5]);
output1{test++} =  1 == (testarray != testarraydouble[5+5-5]);
testarraydouble[0] = testarraydouble[5];
output1{test++} = testarraydouble[0][0] == 0;
output1{test++} = testarraydouble[0][1] == 5;
output1{test++} = testarraydouble[0][2] == 10;
output1{test++} = testarraydouble[0][3] == 15;
output1{test++} = testarraydouble[0][4] == 20;
output1{test++} = testarraydouble[0][5] == 25;
output1{test++} = testarraydouble[0][6] == 30;
output1{test++} = testarraydouble[0][7] == 35;
testarray[0+0] = 0;
testarray[1+0] = 6;
testarray[2+0] = 12;
testarray[3+0] = 18;
testarray[4+0] = 24;
testarray[5+0] = 30;
testarray[6+0] = 36;
testarray[7+0] = 42;
output1{test++} = testarray == testarraydouble[6+5-5];
output1{test++} = 0 == (testarray != testarraydouble[6+5-5]);
testarray[5] = 17164;
output1{test++} =  0 == (testarray == testarraydouble[6+5-5]);
output1{test++} =  1 == (testarray != testarraydouble[6+5-5]);
testarraydouble[0] = testarraydouble[6];
output1{test++} = testarraydouble[0][0] == 0;
output1{test++} = testarraydouble[0][1] == 6;
output1{test++} = testarraydouble[0][2] == 12;
output1{test++} = testarraydouble[0][3] == 18;
output1{test++} = testarraydouble[0][4] == 24;
output1{test++} = testarraydouble[0][5] == 30;
output1{test++} = testarraydouble[0][6] == 36;
output1{test++} = testarraydouble[0][7] == 42;
testarray[0+0] = 0;
testarray[1+0] = 7;
testarray[2+0] = 14;
testarray[3+0] = 21;
testarray[4+0] = 28;
testarray[5+0] = 35;
testarray[6+0] = 42;
testarray[7+0] = 49;
output1{test++} = testarray == testarraydouble[7+5-5];
output1{test++} = 0 == (testarray != testarraydouble[7+5-5]);
testarray[1] = 16516;
output1{test++} =  0 == (testarray == testarraydouble[7+5-5]);
output1{test++} =  1 == (testarray != testarraydouble[7+5-5]);
testarraydouble[0] = testarraydouble[7];
output1{test++} = testarraydouble[0][0] == 0;
output1{test++} = testarraydouble[0][1] == 7;
output1{test++} = testarraydouble[0][2] == 14;
output1{test++} = testarraydouble[0][3] == 21;
output1{test++} = testarraydouble[0][4] == 28;
output1{test++} = testarraydouble[0][5] == 35;
output1{test++} = testarraydouble[0][6] == 42;
output1{test++} = testarraydouble[0][7] == 49;
}
{
shortx3 testarraydouble[9][9];
shortx3 testarray[9];
testarraydouble[0+10-10][0+0] = 0;
testarraydouble[0+10-10][1+0] = 0;
testarraydouble[0+10-10][2+0] = 0;
testarraydouble[0+10-10][3+0] = 0;
testarraydouble[0+10-10][4+0] = 0;
testarraydouble[0+10-10][5+0] = 0;
testarraydouble[0+10-10][6+0] = 0;
testarraydouble[0+10-10][7+0] = 0;
testarraydouble[0+10-10][8+0] = 0;
testarraydouble[1+10-10][0+0] = 0;
testarraydouble[1+10-10][1+0] = 1;
testarraydouble[1+10-10][2+0] = 2;
testarraydouble[1+10-10][3+0] = 3;
testarraydouble[1+10-10][4+0] = 4;
testarraydouble[1+10-10][5+0] = 5;
testarraydouble[1+10-10][6+0] = 6;
testarraydouble[1+10-10][7+0] = 7;
testarraydouble[1+10-10][8+0] = 8;
testarraydouble[2+10-10][0+0] = 0;
testarraydouble[2+10-10][1+0] = 2;
testarraydouble[2+10-10][2+0] = 4;
testarraydouble[2+10-10][3+0] = 6;
testarraydouble[2+10-10][4+0] = 8;
testarraydouble[2+10-10][5+0] = 10;
testarraydouble[2+10-10][6+0] = 12;
testarraydouble[2+10-10][7+0] = 14;
testarraydouble[2+10-10][8+0] = 16;
testarraydouble[3+10-10][0+0] = 0;
testarraydouble[3+10-10][1+0] = 3;
testarraydouble[3+10-10][2+0] = 6;
testarraydouble[3+10-10][3+0] = 9;
testarraydouble[3+10-10][4+0] = 12;
testarraydouble[3+10-10][5+0] = 15;
testarraydouble[3+10-10][6+0] = 18;
testarraydouble[3+10-10][7+0] = 21;
testarraydouble[3+10-10][8+0] = 24;
testarraydouble[4+10-10][0+0] = 0;
testarraydouble[4+10-10][1+0] = 4;
testarraydouble[4+10-10][2+0] = 8;
testarraydouble[4+10-10][3+0] = 12;
testarraydouble[4+10-10][4+0] = 16;
testarraydouble[4+10-10][5+0] = 20;
testarraydouble[4+10-10][6+0] = 24;
testarraydouble[4+10-10][7+0] = 28;
testarraydouble[4+10-10][8+0] = 32;
testarraydouble[5+10-10][0+0] = 0;
testarraydouble[5+10-10][1+0] = 5;
testarraydouble[5+10-10][2+0] = 10;
testarraydouble[5+10-10][3+0] = 15;
testarraydouble[5+10-10][4+0] = 20;
testarraydouble[5+10-10][5+0] = 25;
testarraydouble[5+10-10][6+0] = 30;
testarraydouble[5+10-10][7+0] = 35;
testarraydouble[5+10-10][8+0] = 40;
testarraydouble[6+10-10][0+0] = 0;
testarraydouble[6+10-10][1+0] = 6;
testarraydouble[6+10-10][2+0] = 12;
testarraydouble[6+10-10][3+0] = 18;
testarraydouble[6+10-10][4+0] = 24;
testarraydouble[6+10-10][5+0] = 30;
testarraydouble[6+10-10][6+0] = 36;
testarraydouble[6+10-10][7+0] = 42;
testarraydouble[6+10-10][8+0] = 48;
testarraydouble[7+10-10][0+0] = 0;
testarraydouble[7+10-10][1+0] = 7;
testarraydouble[7+10-10][2+0] = 14;
testarraydouble[7+10-10][3+0] = 21;
testarraydouble[7+10-10][4+0] = 28;
testarraydouble[7+10-10][5+0] = 35;
testarraydouble[7+10-10][6+0] = 42;
testarraydouble[7+10-10][7+0] = 49;
testarraydouble[7+10-10][8+0] = 56;
testarraydouble[8+10-10][0+0] = 0;
testarraydouble[8+10-10][1+0] = 8;
testarraydouble[8+10-10][2+0] = 16;
testarraydouble[8+10-10][3+0] = 24;
testarraydouble[8+10-10][4+0] = 32;
testarraydouble[8+10-10][5+0] = 40;
testarraydouble[8+10-10][6+0] = 48;
testarraydouble[8+10-10][7+0] = 56;
testarraydouble[8+10-10][8+0] = 64;
testarray[0+0] = 0;
testarray[1+0] = 0;
testarray[2+0] = 0;
testarray[3+0] = 0;
testarray[4+0] = 0;
testarray[5+0] = 0;
testarray[6+0] = 0;
testarray[7+0] = 0;
testarray[8+0] = 0;
output1{test++} = testarray == testarraydouble[0+5-5];
output1{test++} = 0 == (testarray != testarraydouble[0+5-5]);
testarray[7] = 12275;
output1{test++} =  0 == (testarray == testarraydouble[0+5-5]);
output1{test++} =  1 == (testarray != testarraydouble[0+5-5]);
testarraydouble[0] = testarraydouble[0];
output1{test++} = testarraydouble[0][0] == 0;
output1{test++} = testarraydouble[0][1] == 0;
output1{test++} = testarraydouble[0][2] == 0;
output1{test++} = testarraydouble[0][3] == 0;
output1{test++} = testarraydouble[0][4] == 0;
output1{test++} = testarraydouble[0][5] == 0;
output1{test++} = testarraydouble[0][6] == 0;
output1{test++} = testarraydouble[0][7] == 0;
output1{test++} = testarraydouble[0][8] == 0;
testarray[0+0] = 0;
testarray[1+0] = 1;
testarray[2+0] = 2;
testarray[3+0] = 3;
testarray[4+0] = 4;
testarray[5+0] = 5;
testarray[6+0] = 6;
testarray[7+0] = 7;
testarray[8+0] = 8;
output1{test++} = testarray == testarraydouble[1+5-5];
output1{test++} = 0 == (testarray != testarraydouble[1+5-5]);
testarray[4] = 13179;
output1{test++} =  0 == (testarray == testarraydouble[1+5-5]);
output1{test++} =  1 == (testarray != testarraydouble[1+5-5]);
testarraydouble[0] = testarraydouble[1];
output1{test++} = testarraydouble[0][0] == 0;
output1{test++} = testarraydouble[0][1] == 1;
output1{test++} = testarraydouble[0][2] == 2;
output1{test++} = testarraydouble[0][3] == 3;
output1{test++} = testarraydouble[0][4] == 4;
output1{test++} = testarraydouble[0][5] == 5;
output1{test++} = testarraydouble[0][6] == 6;
output1{test++} = testarraydouble[0][7] == 7;
output1{test++} = testarraydouble[0][8] == 8;
testarray[0+0] = 0;
testarray[1+0] = 2;
testarray[2+0] = 4;
testarray[3+0] = 6;
testarray[4+0] = 8;
testarray[5+0] = 10;
testarray[6+0] = 12;
testarray[7+0] = 14;
testarray[8+0] = 16;
output1{test++} = testarray == testarraydouble[2+5-5];
output1{test++} = 0 == (testarray != testarraydouble[2+5-5]);
testarray[5] = 17129;
output1{test++} =  0 == (testarray == testarraydouble[2+5-5]);
output1{test++} =  1 == (testarray != testarraydouble[2+5-5]);
testarraydouble[0] = testarraydouble[2];
output1{test++} = testarraydouble[0][0] == 0;
output1{test++} = testarraydouble[0][1] == 2;
output1{test++} = testarraydouble[0][2] == 4;
output1{test++} = testarraydouble[0][3] == 6;
output1{test++} = testarraydouble[0][4] == 8;
output1{test++} = testarraydouble[0][5] == 10;
output1{test++} = testarraydouble[0][6] == 12;
output1{test++} = testarraydouble[0][7] == 14;
output1{test++} = testarraydouble[0][8] == 16;
testarray[0+0] = 0;
testarray[1+0] = 3;
testarray[2+0] = 6;
testarray[3+0] = 9;
testarray[4+0] = 12;
testarray[5+0] = 15;
testarray[6+0] = 18;
testarray[7+0] = 21;
testarray[8+0] = 24;
output1{test++} = testarray == testarraydouble[3+5-5];
output1{test++} = 0 == (testarray != testarraydouble[3+5-5]);
testarray[8] = 17194;
output1{test++} =  0 == (testarray == testarraydouble[3+5-5]);
output1{test++} =  1 == (testarray != testarraydouble[3+5-5]);
testarraydouble[0] = testarraydouble[3];
output1{test++} = testarraydouble[0][0] == 0;
output1{test++} = testarraydouble[0][1] == 3;
output1{test++} = testarraydouble[0][2] == 6;
output1{test++} = testarraydouble[0][3] == 9;
output1{test++} = testarraydouble[0][4] == 12;
output1{test++} = testarraydouble[0][5] == 15;
output1{test++} = testarraydouble[0][6] == 18;
output1{test++} = testarraydouble[0][7] == 21;
output1{test++} = testarraydouble[0][8] == 24;
testarray[0+0] = 0;
testarray[1+0] = 4;
testarray[2+0] = 8;
testarray[3+0] = 12;
testarray[4+0] = 16;
testarray[5+0] = 20;
testarray[6+0] = 24;
testarray[7+0] = 28;
testarray[8+0] = 32;
output1{test++} = testarray == testarraydouble[4+5-5];
output1{test++} = 0 == (testarray != testarraydouble[4+5-5]);
testarray[2] = 14098;
output1{test++} =  0 == (testarray == testarraydouble[4+5-5]);
output1{test++} =  1 == (testarray != testarraydouble[4+5-5]);
testarraydouble[0] = testarraydouble[4];
output1{test++} = testarraydouble[0][0] == 0;
output1{test++} = testarraydouble[0][1] == 4;
output1{test++} = testarraydouble[0][2] == 8;
output1{test++} = testarraydouble[0][3] == 12;
output1{test++} = testarraydouble[0][4] == 16;
output1{test++} = testarraydouble[0][5] == 20;
output1{test++} = testarraydouble[0][6] == 24;
output1{test++} = testarraydouble[0][7] == 28;
output1{test++} = testarraydouble[0][8] == 32;
testarray[0+0] = 0;
testarray[1+0] = 5;
testarray[2+0] = 10;
testarray[3+0] = 15;
testarray[4+0] = 20;
testarray[5+0] = 25;
testarray[6+0] = 30;
testarray[7+0] = 35;
testarray[8+0] = 40;
output1{test++} = testarray == testarraydouble[5+5-5];
output1{test++} = 0 == (testarray != testarraydouble[5+5-5]);
testarray[7] = 19870;
output1{test++} =  0 == (testarray == testarraydouble[5+5-5]);
output1{test++} =  1 == (testarray != testarraydouble[5+5-5]);
testarraydouble[0] = testarraydouble[5];
output1{test++} = testarraydouble[0][0] == 0;
output1{test++} = testarraydouble[0][1] == 5;
output1{test++} = testarraydouble[0][2] == 10;
output1{test++} = testarraydouble[0][3] == 15;
output1{test++} = testarraydouble[0][4] == 20;
output1{test++} = testarraydouble[0][5] == 25;
output1{test++} = testarraydouble[0][6] == 30;
output1{test++} = testarraydouble[0][7] == 35;
output1{test++} = testarraydouble[0][8] == 40;
testarray[0+0] = 0;
testarray[1+0] = 6;
testarray[2+0] = 12;
testarray[3+0] = 18;
testarray[4+0] = 24;
testarray[5+0] = 30;
testarray[6+0] = 36;
testarray[7+0] = 42;
testarray[8+0] = 48;
output1{test++} = testarray == testarraydouble[6+5-5];
output1{test++} = 0 == (testarray != testarraydouble[6+5-5]);
testarray[0] = 14003;
output1{test++} =  0 == (testarray == testarraydouble[6+5-5]);
output1{test++} =  1 == (testarray != testarraydouble[6+5-5]);
testarraydouble[0] = testarraydouble[6];
output1{test++} = testarraydouble[0][0] == 0;
output1{test++} = testarraydouble[0][1] == 6;
output1{test++} = testarraydouble[0][2] == 12;
output1{test++} = testarraydouble[0][3] == 18;
output1{test++} = testarraydouble[0][4] == 24;
output1{test++} = testarraydouble[0][5] == 30;
output1{test++} = testarraydouble[0][6] == 36;
output1{test++} = testarraydouble[0][7] == 42;
output1{test++} = testarraydouble[0][8] == 48;
testarray[0+0] = 0;
testarray[1+0] = 7;
testarray[2+0] = 14;
testarray[3+0] = 21;
testarray[4+0] = 28;
testarray[5+0] = 35;
testarray[6+0] = 42;
testarray[7+0] = 49;
testarray[8+0] = 56;
output1{test++} = testarray == testarraydouble[7+5-5];
output1{test++} = 0 == (testarray != testarraydouble[7+5-5]);
testarray[0] = 10760;
output1{test++} =  0 == (testarray == testarraydouble[7+5-5]);
output1{test++} =  1 == (testarray != testarraydouble[7+5-5]);
testarraydouble[0] = testarraydouble[7];
output1{test++} = testarraydouble[0][0] == 0;
output1{test++} = testarraydouble[0][1] == 7;
output1{test++} = testarraydouble[0][2] == 14;
output1{test++} = testarraydouble[0][3] == 21;
output1{test++} = testarraydouble[0][4] == 28;
output1{test++} = testarraydouble[0][5] == 35;
output1{test++} = testarraydouble[0][6] == 42;
output1{test++} = testarraydouble[0][7] == 49;
output1{test++} = testarraydouble[0][8] == 56;
testarray[0+0] = 0;
testarray[1+0] = 8;
testarray[2+0] = 16;
testarray[3+0] = 24;
testarray[4+0] = 32;
testarray[5+0] = 40;
testarray[6+0] = 48;
testarray[7+0] = 56;
testarray[8+0] = 64;
output1{test++} = testarray == testarraydouble[8+5-5];
output1{test++} = 0 == (testarray != testarraydouble[8+5-5]);
testarray[0] = 17066;
output1{test++} =  0 == (testarray == testarraydouble[8+5-5]);
output1{test++} =  1 == (testarray != testarraydouble[8+5-5]);
testarraydouble[0] = testarraydouble[8];
output1{test++} = testarraydouble[0][0] == 0;
output1{test++} = testarraydouble[0][1] == 8;
output1{test++} = testarraydouble[0][2] == 16;
output1{test++} = testarraydouble[0][3] == 24;
output1{test++} = testarraydouble[0][4] == 32;
output1{test++} = testarraydouble[0][5] == 40;
output1{test++} = testarraydouble[0][6] == 48;
output1{test++} = testarraydouble[0][7] == 56;
output1{test++} = testarraydouble[0][8] == 64;
}


short testarray1[3][5] = {{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}};
short array1[5] = {0,0,0,5,0};
short testarray2[3][5] = {{0,0,0,0,0},array1,{0,0,0,0,0}};
short array2[5][2] = {{0,0},{0,0},{0,0},{4,3},{5,6}};
short array3[2] = {0,4};
short testarray3[3][5][2] = {array2,array2,{array3,{9,8},{0,0},{0,0},{0,0}}};

array3[0] = 9;
array3[1] = 0;
array2[3][0] = 0;
array2[3][1] = 0;

output1{test++} = testarray3[2][0][0] == 0;
output1{test++} = testarray3[2][0][1] == 4;
output1{test++} = testarray3[2][1][0] == 9;
output1{test++} = testarray3[2][1][1] == 8;

output1{test++} = testarray3[1][3][0] == 4;
output1{test++} = testarray3[1][3][1] == 3;
output1{test++} = testarray3[1][4][0] == 5;
output1{test++} = testarray3[1][4][1] == 6;






teststruct2 ts2;
teststruct2 ts2b;
teststruct1 ts1;

teststruct2 ts2empty;
teststruct1 ts1empty;

ts2.tvarx = ts1;
ts2.tvary[0][0] = ts1;
ts2.tvary[0][1] = ts1;
ts2.tvary[1][0] = ts1;
ts2.tvary[1][1] = ts1;
ts2.tvary[2][0] = ts1;
ts2.tvary[2][1] = ts1;
ts2.tvary[3][0] = ts1;
ts2.tvary[3][1] = ts1;
ts2.tvary[4][0] = ts1;
ts2.tvary[4][1] = ts1;


output1{test++} = 1 == (ts2.tvary[4][1] == ts2.tvary[4][0] & ts1 == ts2.tvary[4][0]);
output1{test++} = 0 == (ts2.tvary[4][1] != ts2.tvary[4][0] & ts1 == ts2.tvary[4][0]);

ts1.amember[0][1] = 5;

output1{test++} = 0 == (ts2.tvary[4][1] == ts2.tvary[4][0] & ts1 == ts2.tvary[4][0]);
output1{test++} = 1 == (ts2.tvary[4][1] == ts2.tvary[4][0] & ts1 != ts2.tvary[4][0]);

ts2b.tvary[0][0] = ts1;
output1{test++} = 0 == (ts2 == ts2b);
ts2b = ts2;
output1{test++} = 1 == (ts2 == ts2b);




ts2.tvarx.tt.varx = 5;

output1{test++} = ts2.tvarx.tt.varx  == 5;
output1{test++} = ts2.tvarx.tt.vary  == 0;
output1{test++} = ts2.tvarx.tt.varz  == 0;

output1{test++} = 0 == (ts2 == ts2b);
ts2b = ts2;
output1{test++} = 1 == (ts2 == ts2b);

ts2.tvarx.tt.varx = 8;

output1{test++} = ts2.tvarx.tt.varx  == 8;
output1{test++} = ts2.tvarx.tt.vary  == 0;
output1{test++} = ts2.tvarx.tt.varz  == 0;


ts2.tvarx.tt.varx = 11;
ts2.tvarx.tt.vary = 12;
ts2.tvarx.tt.varz = 13;

output1{test++} = ts2.tvarx.tt.varx  == 11;
output1{test++} = ts2.tvarx.tt.vary  == 12;
output1{test++} = ts2.tvarx.tt.varz  == 13;


ts2 = ts2empty;
ts2b = ts2empty;
ts1 = ts1empty;


ts2 = makeUnknownS(ts2);
ts2b = makeUnknownS(ts2b);
ts1 = makeUnknownS1(ts1);


ts2.tvarx = ts1;
ts2.tvary[0][0] = ts1;
ts2.tvary[0][1] = ts1;
ts2.tvary[1][0] = ts1;
ts2.tvary[1][1] = ts1;
ts2.tvary[2][0] = ts1;
ts2.tvary[2][1] = ts1;
ts2.tvary[3][0] = ts1;
ts2.tvary[3][1] = ts1;
ts2.tvary[4][0] = ts1;
ts2.tvary[4][1] = ts1;


output1{test++} = 1 == (ts2.tvary[4][1] == ts2.tvary[4][0] & ts1 == ts2.tvary[4][0]);
output1{test++} = 0 == (ts2.tvary[4][1] != ts2.tvary[4][0] & ts1 == ts2.tvary[4][0]);

ts1.amember[0][1] = makeUnknown4(5);

output1{test++} = 0 == (ts2.tvary[4][1] == ts2.tvary[4][0] & ts1 == ts2.tvary[4][0]);
output1{test++} = 1 == (ts2.tvary[4][1] == ts2.tvary[4][0] & ts1 != ts2.tvary[4][0]);

ts2b.tvary[0][0] = ts1;
output1{test++} = 0 == (ts2 == ts2b);
ts2b = ts2;
output1{test++} = 1 == (ts2 == ts2b);




ts2.tvarx.tt.varx = 5;

output1{test++} = ts2.tvarx.tt.varx  == makeUnknown4(5);
output1{test++} = ts2.tvarx.tt.vary  == makeUnknown4(0);
output1{test++} = ts2.tvarx.tt.varz  == makeUnknown4(0);

output1{test++} = 0 == (ts2 == ts2b);
ts2b = ts2;
output1{test++} = 1 == (ts2 == ts2b);

ts2.tvarx.tt.varx = makeUnknown4(8);

output1{test++} = ts2.tvarx.tt.varx  == makeUnknown4(8);
output1{test++} = ts2.tvarx.tt.vary  == 0;
output1{test++} = ts2.tvarx.tt.varz  == 0;


ts2.tvarx.tt.varx = makeUnknown4(11);
ts2.tvarx.tt.vary = 12;
ts2.tvarx.tt.varz = makeUnknown4(13);

output1{test++} = ts2.tvarx.tt.varx  == 11;
output1{test++} = ts2.tvarx.tt.vary  == 12;
output1{test++} = ts2.tvarx.tt.varz  == 13;


ts2 = ts2empty;
ts2b = ts2empty;
ts1 = ts1empty;


ts2 = makeUnknownS(ts2);
ts2b = makeUnknownS(ts2b);
ts1 = makeUnknownS1(ts1);


ts2.tvary[4][1] = ts1;
ts2.tvary[1][0] = ts1;
ts2.tvary[1][1] = ts1;
ts2.tvary[2][0] = ts1;
ts2.tvary[2][1] = ts1;
ts2.tvary[3][0] = ts1;
ts2.tvary[3][1] = ts1;
ts2.tvary[4][0] = ts1;
ts2.tvary[4][1] = ts1;
ts2.tvary[0][0].varx = 5;
ts2.tvary[0][0].vary = 6;
ts2.tvary[0][0].varz = 7;
ts2.tvary[4][0].varx = 10;
ts2.tvary[4][0].vary = 12;
ts2.tvary[4][0].varz = 13;


output1{test++} = 0 == (ts2.tvary[4][0] == ts1);
output1{test++} = ts2.tvary[0][0].varx == 5;
output1{test++} = ts2.tvary[0][0].vary == 6;
output1{test++} = ts2.tvary[0][0].varz == 7;
output1{test++} = ts2.tvary[4][0].varx == 10;
output1{test++} = ts2.tvary[4][0].vary == 12;
output1{test++} = ts2.tvary[4][0].varz == 13;


output1{test++} = ts2.tvary[4][1].varx == 0;
output1{test++} = ts2.tvary[4][1].vary == 0;
output1{test++} = ts2.tvary[4][1].varz == 0;
output1{test++} = ts2.tvary[3][1].varx == 0;
output1{test++} = ts2.tvary[3][1].vary == 0;
output1{test++} = ts2.tvary[3][1].varz == 0;
output1{test++} = ts2.tvary[2][1].varx == 0;
output1{test++} = ts2.tvary[2][1].vary == 0;
output1{test++} = ts2.tvary[2][1].varz == 0;
output1{test++} = ts2.tvary[1][1].varx == 0;
output1{test++} = ts2.tvary[1][1].vary == 0;
output1{test++} = ts2.tvary[1][1].varz == 0;
output1{test++} = ts2.tvary[0][1].varx == 0;
output1{test++} = ts2.tvary[0][1].vary == 0;
output1{test++} = ts2.tvary[0][1].varz == 0;

output1{test++} = ts2.tvary[3][0].varx == 0;
output1{test++} = ts2.tvary[3][0].vary == 0;
output1{test++} = ts2.tvary[3][0].varz == 0;
output1{test++} = ts2.tvary[2][0].varx == 0;
output1{test++} = ts2.tvary[2][0].vary == 0;
output1{test++} = ts2.tvary[2][0].varz == 0;
output1{test++} = ts2.tvary[1][0].varx == 0;
output1{test++} = ts2.tvary[1][0].vary == 0;
output1{test++} = ts2.tvary[1][0].varz == 0;

output1{test++} =  0 == (ts2.tvary[1][0].varz + ts2.tvary[1][0].vary + ts2.tvary[1][0].varx);
output1{test++} =  18#4 == (ts2.tvary[0][0].varz + ts2.tvary[0][0].vary + ts2.tvary[0][0].varx); /* this test overflows, hence the #4*/



int intarray[2];
teststruct2 strucutarray[2];

ts2 = ts2empty;
ts2b = ts2empty;
ts1 = ts1empty;


int q = fparameter1(ts2,0);
output1{test++} = q == 1;

intarray[0]=5;

output1{test++} = ts2.varx  == 0;
ts2 = fparameter2(ts2,intarray);
output1{test++} = ts2.varx  == 10;

output1{test++} = strucutarray[0].varx  == 0;
strucutarray = fparameter3(strucutarray, 0);
output1{test++} = strucutarray[0].varx  == 5;

output1{test++} = intarray[0]  == 5;
intarray = fparameter4(strucutarray,intarray);
output1{test++} = intarray[0]  == 11;


ts2 = ts2empty;
ts2b = ts2empty;
ts1 = ts1empty;

int intarray2[2];
teststruct2 strucutarray2[2];


output1{test++} = ts2.varx  == 0;
ts2 = fparameter5(0,ts2);
output1{test++} = ts2.varx  == 7;

int tttt  = fparameter6(5,strucutarray2);
output1{test++} = tttt == 12;

output1{test++} = intarray[0]  == 11;
intarray = fparameter7(intarray2,ts2);
output1{test++} = intarray[0]  == 7;

output1{test++} = strucutarray[0].varx  == 5;
strucutarray = fparameter8(intarray2,strucutarray2);
output1{test++} = strucutarray[0].varx  == 7;

emptyfunction();






int assigntest=0;


output1{test++} = (++assigntest = 1) == 1;
assigntest=0;
output1{test++} = (assigntest = 1) == 1;
output1{test++} = (++assigntest ) == 2;
output1{test++} = (assigntest++ ) == 2;
output1{test++} = (assigntest ) == 3;

output1{test++} = (assigntest=10) == 10;
output1{test++} = (assigntest ) == 10;
output1{test++} = (assigntest-- ) == 10;
output1{test++} = (--assigntest ) == 8;
output1{test++} = (--assigntest ) == 7;
output1{test++} = (assigntest-- ) == 7;
output1{test++} = (assigntest ) == 6;




val =0;

if(0){
if(0){
val=0;
}else{
val=1;
}}else{
if(0){
val=2;
}else{
val=4;
}}

output1{test++} = val == 4;

if(1){
if(0){
val=0;
}else{
val=1;
}}else{
if(0){
val=2;
}else{
val=4;
}}

output1{test++} = val == 1;

if(0){
if(1){
val=0;
}else{
val=1;
}}else{
if(0){
val=2;
}else{
val=4;
}}

output1{test++} = val == 4;

if(1){
if(1){
val=0;
}else{
val=1;
}}else{
if(0){
val=2;
}else{
val=4;
}}

output1{test++} = val == 0;

if(0){
if(0){
val=0;
}else{
val=1;
}}else{
if(1){
val=2;
}else{
val=4;
}}

output1{test++} = val == 2;

if(1){
if(0){
val=0;
}else{
val=1;
}}else{
if(1){
val=2;
}else{
val=4;
}}

output1{test++} = val == 1;

if(0){
if(1){
val=0;
}else{
val=1;
}}else{
if(1){
val=2;
}else{
val=4;
}}

output1{test++} = val == 2;

if(1){
if(1){
val=0;
}else{
val=1;
}}else{
if(1){
val=2;
}else{
val=4;
}}

output1{test++} = val == 0;


bool ONE = 1;
bool ZERO = 0;

ONE = makeBoolUnknown(ONE);
ZERO = makeBoolUnknown(ZERO);



if(ZERO){
if(ZERO){
val=0;
}else{
val=1;
}}else{
if(ZERO){
val=2;
}else{
val=4;
}}

output1{test++} = val == 4;

if(ONE){
if(ZERO){
val=0;
}else{
val=1;
}}else{
if(ZERO){
val=2;
}else{
val=4;
}}

output1{test++} = val == 1;

if(ZERO){
if(ONE){
val=0;
}else{
val=1;
}}else{
if(ZERO){
val=2;
}else{
val=4;
}}

output1{test++} = val == 4;

if(ONE){
if(ONE){
val=0;
}else{
val=1;
}}else{
if(ZERO){
val=2;
}else{
val=4;
}}

output1{test++} = val == 0;

if(ZERO){
if(ZERO){
val=0;
}else{
val=1;
}}else{
if(ONE){
val=2;
}else{
val=4;
}}

output1{test++} = val == 2;

if(ONE){
if(ZERO){
val=0;
}else{
val=1;
}}else{
if(ONE){
val=2;
}else{
val=4;
}}

output1{test++} = val == 1;

if(ZERO){
if(ONE){
val=0;
}else{
val=1;
}}else{
if(ONE){
val=2;
}else{
val=4;
}}

output1{test++} = val == 2;

if(ONE){
if(ONE){
val=0;
}else{
val=1;
}}else{
if(ONE){
val=2;
}else{
val=4;
}}

output1{test++} = val == 0;


val=0;

if(ONE)
{
    for(int i=0;i<10;i++)
    {
        val++;
    }
}
else
{
    for(int i=0;i<30;i++)
    {
        val++;
    }
}

output1{test++} = val == 10;


if(ZERO)
{
    for(int i=0;i<10;i++)
    {
        val++;
    }
}
else
{
    for(int i=0;i<30;i++)
    {
        val++;
    }
}

output1{test++} = val == 40;

if(ONE)
{
    if(ZERO)
    {
        for(int i=0;i<10;i++)
        {
        for(int j=0;j<10;j++)val++;
        }
    }
    else
    {
        for(int i=0;i<30;i++)
        {
        for(int j=0;j<9;j++)val++;
        }
    }
}

output1{test++} = val == 40+270;


val = 4;
val = makeUnknown(val);

int cow = 4;
cow = makeUnknown(cow);


if(ONE)
{
    if(ONE)
    {
        output1{test} = (val/val) == 1;
        output1{test+1} = val*val == 16;
        output1{test+2} = val+val == 8;
        output1{test+3} = (val-val+val-val)%8 == 0;
        output1{test+4} = val << 1 == 8;
        output1{test+5} = val >> 1 == 2;
        output1{test+6} = val <<> 1 == 8;
        output1{test+7} = (val != 4) == 0;
        output1{test+8} = (val == 4) == 1;
        output1{test+9} = (val < 5) == 1;
        output1{test+10} = (val > 5) == 0;
        output1{test+11} = (val >= 4) == 1;
        output1{test+12} = (val <= 4) == 1;
    }
    else
    {
        output1{test} = (val/cow) == 1;
        output1{test+1} = val*cow == 16;
        output1{test+2} = val+cow == 8;
        output1{test+3} = (val-val+val-val)%cow == 0;
        output1{test+4} = val << 1 == 8;
        output1{test+5} = val >> 1 == 2;
        output1{test+6} = val <<> 1 == 8;
        output1{test+7} = (val != cow) == 0;
        output1{test+8} = (val == cow) == 1;
        output1{test+9} = (val < cow+1) == 1;
        output1{test+10} = (val > cow+1) == 0;
        output1{test+11} = (val >= cow) == 1;
        output1{test+12} = (val <= cow) == 1;
    }
    output1{test} = (val/val) == 1;
    output1{test+1} = val*val == 16;
    output1{test+2} = val+val == 8;
    output1{test+3} = val-val+val-val == 0;
    output1{test+4} = val << 1 == 8;
    output1{test+5} = val >> 1 == 2;
    output1{test+6} = val <<> 1 == 8;
    output1{test+7} = (val != 4) == 0;
    output1{test+8} = (val == 4) == 1;
    output1{test+9} = (val < 5) == 1;
    output1{test+10} = (val > 5) == 0;
    output1{test+11} = (val >= 4) == 1;
    output1{test+12} = (val <= 4) == 1;
    output1{test+13} = val++ == cow;
    output1{test+14} = ++val == cow+2;
    output1{test+15} = val-- == cow+2;
    output1{test+16} = --val == cow;
}

test = test + 17;

int tempp=0;
val = 0;
int pval =0;

val = makeUnknown(val);
pval = makeUnknown(pval);


for(int i=0;i<10;i++)
{
    val++;
    +{
        pval++;
    }+
}

output1{test++} = val == pval;

for(int j=0;j<10;j++)
{
    for(int i=0;i<10;i++)
    +{
        val--;
val++;
++val;
--val;
val = val * val;
val = val / val;
val = val + val % val;

tempp{0} = val < val;
val = val + tempp;
tempp{0} = val > val;
val = val + tempp;
tempp{0} = val <= val;
val = val + tempp;
tempp{0} = val >= val;
val = val + tempp;
tempp{0} = val == val;
val = val + tempp;
tempp{0} = val != val;
val = val + tempp;

val = val << 1;
val = val >> 2;
val = val <<> 1;
val = ~val;

        +{
        pval--;
pval++;
++pval;
--pval;
pval = pval * pval;
pval = pval / pval;
pval = pval + pval % pval;

tempp{0} = pval < pval;
val = val + tempp;
tempp{0} = pval > pval;
pval = pval + tempp;
tempp{0} = pval <= pval;
pval = pval + tempp;
tempp{0} = pval >= pval;
pval = pval + tempp;
tempp{0} = pval == pval;
pval = pval + tempp;
tempp{0} = pval != pval;
pval = pval + tempp;

pval = pval << 1;
pval = pval >> 2;
pval = pval <<> 1;
pval = ~pval;

        }+
    }+
}

output1{test++} = val == pval;

/* with the shift and rotates this would break if no makeunknown re:limits of procedures */
val = makeUnknown(val);
pval = makeUnknown(pval);


/* these test cases look at what happens when variables are declared in the middle of loops with procedures */

for(int j=0;j<10;j++)
{
    int xyy;



    for(int i=0;i<10;i++)
    +{
        val++;

        int yxx;
        +{
            pval++;
        }+
    }+

val = val + 1 + val;
pval = pval + 1+ pval;

    for(int i=0;i<10;i++)
    +{
        val--;

        int yxx;
        +{
            pval--;
        }+
    }+
}

output1{test++} = val == pval;


for(int j=0;j<10;j++)
{
    int xyy;

    for(int i=0;i<10;i++)
    +{
        val++;

        int yxx;
        +{
            pval++;
        }+
    }+

    int xyy2;

    for(int i=0;i<10;i++)
    +{
        val++;

        int yxx;
        +{
            pval++;
        }+

        val++;

        int yxsx;
        +{
        pval++;
        }+

    }+
}

output1{test++} = val == pval;



/* nested procedures */

for(int j=0;j<10;j++)
+{
int xyy;

for(int i=0;i<10;i++)
+{
val++;

int yxx;
+{
pval++;
}+
}+

int xyy2;

for(int i=0;i<10;i++)
+{
val++;
int yx3sx;
int yxx;
+{
pval++;
}+

val++;
int yxs56x;
int yxsx;
+{
pval++;
}+
int yxsx2;
int yxsx3;

}+
}+

output1{test++} = val == pval;





short tt1,tt2;

tt1 = makeUnknown4(4#4);
tt2 = ~makeUnknown4(11#4);


output1{test++} = 4#4 == ~(11#4+10#4-10#4);
output1{test++} = 4#4 == ~11#4;
output1{test++} = makeUnknown4(4#4) == ~makeUnknown4(11#4);
output1{test++} = tt1 == tt2;




output1{test++} = 255#8 == (~0#8);
output1{test++} = 254#8 == (~1#8);
output1{test++} = 253#8 == (~2#8);
output1{test++} = 252#8 == (~3#8);
output1{test++} = 251#8 == (~4#8);
output1{test++} = 250#8 == (~5#8);
output1{test++} = 249#8 == (~6#8);
output1{test++} = 248#8 == (~7#8);
output1{test++} = 247#8 == (~8#8);
output1{test++} = 246#8 == (~9#8);
output1{test++} = 245#8 == (~10#8);
output1{test++} = 244#8 == (~11#8);
output1{test++} = 243#8 == (~12#8);
output1{test++} = 242#8 == (~13#8);
output1{test++} = 241#8 == (~14#8);
output1{test++} = 240#8 == (~15#8);
output1{test++} = 239#8 == (~16#8);
output1{test++} = 238#8 == (~17#8);
output1{test++} = 237#8 == (~18#8);
output1{test++} = 236#8 == (~19#8);
output1{test++} = 235#8 == (~20#8);
output1{test++} = 234#8 == (~21#8);
output1{test++} = 233#8 == (~22#8);
output1{test++} = 232#8 == (~23#8);
output1{test++} = 231#8 == (~24#8);
output1{test++} = 230#8 == (~25#8);
output1{test++} = 229#8 == (~26#8);
output1{test++} = 228#8 == (~27#8);
output1{test++} = 227#8 == (~28#8);
output1{test++} = 226#8 == (~29#8);
output1{test++} = 225#8 == (~30#8);
output1{test++} = 224#8 == (~31#8);
output1{test++} = 223#8 == (~32#8);
output1{test++} = 222#8 == (~33#8);
output1{test++} = 221#8 == (~34#8);
output1{test++} = 220#8 == (~35#8);
output1{test++} = 219#8 == (~36#8);
output1{test++} = 218#8 == (~37#8);
output1{test++} = 217#8 == (~38#8);
output1{test++} = 216#8 == (~39#8);
output1{test++} = 215#8 == (~40#8);
output1{test++} = 214#8 == (~41#8);
output1{test++} = 213#8 == (~42#8);
output1{test++} = 212#8 == (~43#8);
output1{test++} = 211#8 == (~44#8);
output1{test++} = 210#8 == (~45#8);
output1{test++} = 209#8 == (~46#8);
output1{test++} = 208#8 == (~47#8);
output1{test++} = 207#8 == (~48#8);
output1{test++} = 206#8 == (~49#8);
output1{test++} = 205#8 == (~50#8);
output1{test++} = 204#8 == (~51#8);
output1{test++} = 203#8 == (~52#8);
output1{test++} = 202#8 == (~53#8);
output1{test++} = 201#8 == (~54#8);
output1{test++} = 200#8 == (~55#8);
output1{test++} = 199#8 == (~56#8);
output1{test++} = 198#8 == (~57#8);
output1{test++} = 197#8 == (~58#8);
output1{test++} = 196#8 == (~59#8);
output1{test++} = 195#8 == (~60#8);
output1{test++} = 194#8 == (~61#8);
output1{test++} = 193#8 == (~62#8);
output1{test++} = 192#8 == (~63#8);
output1{test++} = 191#8 == (~64#8);
output1{test++} = 190#8 == (~65#8);
output1{test++} = 189#8 == (~66#8);
output1{test++} = 188#8 == (~67#8);
output1{test++} = 187#8 == (~68#8);
output1{test++} = 186#8 == (~69#8);
output1{test++} = 185#8 == (~70#8);
output1{test++} = 184#8 == (~71#8);
output1{test++} = 183#8 == (~72#8);
output1{test++} = 182#8 == (~73#8);
output1{test++} = 181#8 == (~74#8);
output1{test++} = 180#8 == (~75#8);
output1{test++} = 179#8 == (~76#8);
output1{test++} = 178#8 == (~77#8);
output1{test++} = 177#8 == (~78#8);
output1{test++} = 176#8 == (~79#8);
output1{test++} = 175#8 == (~80#8);
output1{test++} = 174#8 == (~81#8);
output1{test++} = 173#8 == (~82#8);
output1{test++} = 172#8 == (~83#8);
output1{test++} = 171#8 == (~84#8);
output1{test++} = 170#8 == (~85#8);
output1{test++} = 169#8 == (~86#8);
output1{test++} = 168#8 == (~87#8);
output1{test++} = 167#8 == (~88#8);
output1{test++} = 166#8 == (~89#8);
output1{test++} = 165#8 == (~90#8);
output1{test++} = 164#8 == (~91#8);
output1{test++} = 163#8 == (~92#8);
output1{test++} = 162#8 == (~93#8);
output1{test++} = 161#8 == (~94#8);
output1{test++} = 160#8 == (~95#8);
output1{test++} = 159#8 == (~96#8);
output1{test++} = 158#8 == (~97#8);
output1{test++} = 157#8 == (~98#8);
output1{test++} = 156#8 == (~99#8);
output1{test++} = 155#8 == (~100#8);
output1{test++} = 154#8 == (~101#8);
output1{test++} = 153#8 == (~102#8);
output1{test++} = 152#8 == (~103#8);
output1{test++} = 151#8 == (~104#8);
output1{test++} = 150#8 == (~105#8);
output1{test++} = 149#8 == (~106#8);
output1{test++} = 148#8 == (~107#8);
output1{test++} = 147#8 == (~108#8);
output1{test++} = 146#8 == (~109#8);
output1{test++} = 145#8 == (~110#8);
output1{test++} = 144#8 == (~111#8);
output1{test++} = 143#8 == (~112#8);
output1{test++} = 142#8 == (~113#8);
output1{test++} = 141#8 == (~114#8);
output1{test++} = 140#8 == (~115#8);
output1{test++} = 139#8 == (~116#8);
output1{test++} = 138#8 == (~117#8);
output1{test++} = 137#8 == (~118#8);
output1{test++} = 136#8 == (~119#8);
output1{test++} = 135#8 == (~120#8);
output1{test++} = 134#8 == (~121#8);
output1{test++} = 133#8 == (~122#8);
output1{test++} = 132#8 == (~123#8);
output1{test++} = 131#8 == (~124#8);
output1{test++} = 130#8 == (~125#8);
output1{test++} = 129#8 == (~126#8);
output1{test++} = 128#8 == (~127#8);
output1{test++} = 127#8 == (~128#8);
output1{test++} = 126#8 == (~129#8);
output1{test++} = 125#8 == (~130#8);
output1{test++} = 124#8 == (~131#8);
output1{test++} = 123#8 == (~132#8);
output1{test++} = 122#8 == (~133#8);
output1{test++} = 121#8 == (~134#8);
output1{test++} = 120#8 == (~135#8);
output1{test++} = 119#8 == (~136#8);
output1{test++} = 118#8 == (~137#8);
output1{test++} = 117#8 == (~138#8);
output1{test++} = 116#8 == (~139#8);
output1{test++} = 115#8 == (~140#8);
output1{test++} = 114#8 == (~141#8);
output1{test++} = 113#8 == (~142#8);
output1{test++} = 112#8 == (~143#8);
output1{test++} = 111#8 == (~144#8);
output1{test++} = 110#8 == (~145#8);
output1{test++} = 109#8 == (~146#8);
output1{test++} = 108#8 == (~147#8);
output1{test++} = 107#8 == (~148#8);
output1{test++} = 106#8 == (~149#8);
output1{test++} = 105#8 == (~150#8);
output1{test++} = 104#8 == (~151#8);
output1{test++} = 103#8 == (~152#8);
output1{test++} = 102#8 == (~153#8);
output1{test++} = 101#8 == (~154#8);
output1{test++} = 100#8 == (~155#8);
output1{test++} = 99#8 == (~156#8);
output1{test++} = 98#8 == (~157#8);
output1{test++} = 97#8 == (~158#8);
output1{test++} = 96#8 == (~159#8);
output1{test++} = 95#8 == (~160#8);
output1{test++} = 94#8 == (~161#8);
output1{test++} = 93#8 == (~162#8);
output1{test++} = 92#8 == (~163#8);
output1{test++} = 91#8 == (~164#8);
output1{test++} = 90#8 == (~165#8);
output1{test++} = 89#8 == (~166#8);
output1{test++} = 88#8 == (~167#8);
output1{test++} = 87#8 == (~168#8);
output1{test++} = 86#8 == (~169#8);
output1{test++} = 85#8 == (~170#8);
output1{test++} = 84#8 == (~171#8);
output1{test++} = 83#8 == (~172#8);
output1{test++} = 82#8 == (~173#8);
output1{test++} = 81#8 == (~174#8);
output1{test++} = 80#8 == (~175#8);
output1{test++} = 79#8 == (~176#8);
output1{test++} = 78#8 == (~177#8);
output1{test++} = 77#8 == (~178#8);
output1{test++} = 76#8 == (~179#8);
output1{test++} = 75#8 == (~180#8);
output1{test++} = 74#8 == (~181#8);
output1{test++} = 73#8 == (~182#8);
output1{test++} = 72#8 == (~183#8);
output1{test++} = 71#8 == (~184#8);
output1{test++} = 70#8 == (~185#8);
output1{test++} = 69#8 == (~186#8);
output1{test++} = 68#8 == (~187#8);
output1{test++} = 67#8 == (~188#8);
output1{test++} = 66#8 == (~189#8);
output1{test++} = 65#8 == (~190#8);
output1{test++} = 64#8 == (~191#8);
output1{test++} = 63#8 == (~192#8);
output1{test++} = 62#8 == (~193#8);
output1{test++} = 61#8 == (~194#8);
output1{test++} = 60#8 == (~195#8);
output1{test++} = 59#8 == (~196#8);
output1{test++} = 58#8 == (~197#8);
output1{test++} = 57#8 == (~198#8);
output1{test++} = 56#8 == (~199#8);
output1{test++} = 55#8 == (~200#8);
output1{test++} = 54#8 == (~201#8);
output1{test++} = 53#8 == (~202#8);
output1{test++} = 52#8 == (~203#8);
output1{test++} = 51#8 == (~204#8);
output1{test++} = 50#8 == (~205#8);
output1{test++} = 49#8 == (~206#8);
output1{test++} = 48#8 == (~207#8);
output1{test++} = 47#8 == (~208#8);
output1{test++} = 46#8 == (~209#8);
output1{test++} = 45#8 == (~210#8);
output1{test++} = 44#8 == (~211#8);
output1{test++} = 43#8 == (~212#8);
output1{test++} = 42#8 == (~213#8);
output1{test++} = 41#8 == (~214#8);
output1{test++} = 40#8 == (~215#8);
output1{test++} = 39#8 == (~216#8);
output1{test++} = 38#8 == (~217#8);
output1{test++} = 37#8 == (~218#8);
output1{test++} = 36#8 == (~219#8);
output1{test++} = 35#8 == (~220#8);
output1{test++} = 34#8 == (~221#8);
output1{test++} = 33#8 == (~222#8);
output1{test++} = 32#8 == (~223#8);
output1{test++} = 31#8 == (~224#8);
output1{test++} = 30#8 == (~225#8);
output1{test++} = 29#8 == (~226#8);
output1{test++} = 28#8 == (~227#8);
output1{test++} = 27#8 == (~228#8);
output1{test++} = 26#8 == (~229#8);
output1{test++} = 25#8 == (~230#8);
output1{test++} = 24#8 == (~231#8);
output1{test++} = 23#8 == (~232#8);
output1{test++} = 22#8 == (~233#8);
output1{test++} = 21#8 == (~234#8);
output1{test++} = 20#8 == (~235#8);
output1{test++} = 19#8 == (~236#8);
output1{test++} = 18#8 == (~237#8);
output1{test++} = 17#8 == (~238#8);
output1{test++} = 16#8 == (~239#8);
output1{test++} = 15#8 == (~240#8);
output1{test++} = 14#8 == (~241#8);
output1{test++} = 13#8 == (~242#8);
output1{test++} = 12#8 == (~243#8);
output1{test++} = 11#8 == (~244#8);
output1{test++} = 10#8 == (~245#8);
output1{test++} = 9#8 == (~246#8);
output1{test++} = 8#8 == (~247#8);
output1{test++} = 7#8 == (~248#8);
output1{test++} = 6#8 == (~249#8);
output1{test++} = 5#8 == (~250#8);
output1{test++} = 4#8 == (~251#8);
output1{test++} = 3#8 == (~252#8);
output1{test++} = 2#8 == (~253#8);
output1{test++} = 1#8 == (~254#8);
output1{test++} = 0#8 == (~255#8);




short tempshortaaa[5][5][5];

tempshortaaa[4][3] = testreturn(tempshortaaa);




output1{test++} = 0 == 1#1 + 1#1;
output1{test++} = 0 == 1#1 - 1#1;

output1{test++} = 1 ==  0#1 < 1#1;
output1{test++} = 0 == 0#1 < 0#1;
output1{test++} = 0 == 1#1 < 1#1;
output1{test++} = 0 == 1#1 < 0#1;


output1{test++} = 0 == 1#1 > 1#1;
output1{test++} = 0 == 0#1 > 1#1;
output1{test++} = 1#1 > 0#1;
output1{test++} = 0 == 0#1 > 0#1;

output1{test++} = 1#1 <= 1#1;
output1{test++} = 0#1 <= 1#1;
output1{test++} = 0 == 1#1 <= 0#1;
output1{test++} = 0#1 <= 0#1;

output1{test++} = 1#1 >= 1#1;
output1{test++} = 0 == 0#1 >= 1#1;
output1{test++} = 1#1 >= 0#1;
output1{test++} = 0#1 >= 0#1;

output1{test++} = 1#1 == 1#1;
output1{test++} = 0 == (1#1 != 1#1);

output1{test++} = 1#1 * 1#1;
output1{test++} = 1#1 / 1#1;

output1{test++} = 0 == 1#1 % 1#1;
output1{test++} = 0 == 0#1 % 1#1;

/*behavior mod 0 is undefined i.e. divide by 0 or remainder by 0*/
/*output1{test++} = 0 == 1#1 % 0#1;*/
/*output1{test++} = 0 == 0#1 % 0#1;*/


output1{test++} = 5#4 + 8#4 == -3#4;
output1{test++} = 5#4 + 8#4 != -2#4;
output1{test++} = 5#4 + 8#4 != -4#4;
output1{test++} = -2#4 + -2#4 == -4#4;

output1{test++} = 3#4 * 3#4 == 9#4;
output1{test++} = 3#4 * 4#4 == -4#4;
output1{test++} = 3#4 * -2#4 == -6#4;
output1{test++} = 3#4 * -3#4 == -9#4;
output1{test++} = -3#4 * -3#4 == 9#4;





output1{test++} = -2#8*64#8 == -128#8;
output1{test++} = -4#8*32#8 == -128#8;
output1{test++} = -8#8*16#8 == -128#8;

/*believe it or not... */
output1{test++} = -2#8*64#8 == 128#8;
output1{test++} = -4#8*32#8 == 128#8;
output1{test++} = -8#8*16#8 == 128#8;


output1{test++} = 64#8*-2#8 == -128#8;
output1{test++} = 32#8*-4#8 == -128#8;
output1{test++} = 16#8*-8#8 == -128#8;


/*believe it or not... */
output1{test++} = 64#8*-2#8 == 128#8;
output1{test++} = 32#8*-4#8 == 128#8;
output1{test++} = 16#8*-8#8 == 128#8;

output1{test++} = -64#8*2#8 == -128#8;
output1{test++} = -32#8*4#8 == -128#8;
output1{test++} = -16#8*8#8 == -128#8;

/*believe it or not... */
output1{test++} = -64#8*2#8 == 128#8;
output1{test++} = -32#8*4#8 == 128#8;
output1{test++} = -16#8*8#8 == 128#8;

output1{test++} = 0#4 == (0#4 *0#4);
output1{test++} = 0#4 == (-0#4 *0#4);
output1{test++} = 0#4 == (0#4 * -0#4);
output1{test++} = 0#4 == (-0#4 * -0#4);
output1{test++} = 0#4 == (0#4 *1#4);
output1{test++} = 0#4 == (-0#4 *1#4);
output1{test++} = 0#4 == (0#4 * -1#4);
output1{test++} = 0#4 == (-0#4 * -1#4);
output1{test++} = 0#4 == (0#4 *2#4);
output1{test++} = 0#4 == (-0#4 *2#4);
output1{test++} = 0#4 == (0#4 * -2#4);
output1{test++} = 0#4 == (-0#4 * -2#4);
output1{test++} = 0#4 == (0#4 *3#4);
output1{test++} = 0#4 == (-0#4 *3#4);
output1{test++} = 0#4 == (0#4 * -3#4);
output1{test++} = 0#4 == (-0#4 * -3#4);
output1{test++} = 0#4 == (0#4 *4#4);
output1{test++} = 0#4 == (-0#4 *4#4);
output1{test++} = 0#4 == (0#4 * -4#4);
output1{test++} = 0#4 == (-0#4 * -4#4);
output1{test++} = 0#4 == (0#4 *5#4);
output1{test++} = 0#4 == (-0#4 *5#4);
output1{test++} = 0#4 == (0#4 * -5#4);
output1{test++} = 0#4 == (-0#4 * -5#4);
output1{test++} = 0#4 == (0#4 *6#4);
output1{test++} = 0#4 == (-0#4 *6#4);
output1{test++} = 0#4 == (0#4 * -6#4);
output1{test++} = 0#4 == (-0#4 * -6#4);
output1{test++} = 0#4 == (0#4 *7#4);
output1{test++} = 0#4 == (-0#4 *7#4);
output1{test++} = 0#4 == (0#4 * -7#4);
output1{test++} = 0#4 == (-0#4 * -7#4);
output1{test++} = 0#4 == (0#4 *8#4);
output1{test++} = 0#4 == (-0#4 *8#4);
output1{test++} = 0#4 == (0#4 * -8#4);
output1{test++} = 0#4 == (-0#4 * -8#4);
output1{test++} = 0#4 == (0#4 *9#4);
output1{test++} = 0#4 == (-0#4 *9#4);
output1{test++} = 0#4 == (0#4 * -9#4);
output1{test++} = 0#4 == (-0#4 * -9#4);
output1{test++} = 0#4 == (0#4 *10#4);
output1{test++} = 0#4 == (-0#4 *10#4);
output1{test++} = 0#4 == (0#4 * -10#4);
output1{test++} = 0#4 == (-0#4 * -10#4);
output1{test++} = 0#4 == (0#4 *11#4);
output1{test++} = 0#4 == (-0#4 *11#4);
output1{test++} = 0#4 == (0#4 * -11#4);
output1{test++} = 0#4 == (-0#4 * -11#4);
output1{test++} = 0#4 == (0#4 *12#4);
output1{test++} = 0#4 == (-0#4 *12#4);
output1{test++} = 0#4 == (0#4 * -12#4);
output1{test++} = 0#4 == (-0#4 * -12#4);
output1{test++} = 0#4 == (0#4 *13#4);
output1{test++} = 0#4 == (-0#4 *13#4);
output1{test++} = 0#4 == (0#4 * -13#4);
output1{test++} = 0#4 == (-0#4 * -13#4);
output1{test++} = 0#4 == (0#4 *14#4);
output1{test++} = 0#4 == (-0#4 *14#4);
output1{test++} = 0#4 == (0#4 * -14#4);
output1{test++} = 0#4 == (-0#4 * -14#4);
output1{test++} = 0#4 == (0#4 *15#4);
output1{test++} = 0#4 == (-0#4 *15#4);
output1{test++} = 0#4 == (0#4 * -15#4);
output1{test++} = 0#4 == (-0#4 * -15#4);
output1{test++} = 0#4 == (1#4 *0#4);
output1{test++} = 0#4 == (-1#4 *0#4);
output1{test++} = 0#4 == (1#4 * -0#4);
output1{test++} = 0#4 == (-1#4 * -0#4);
output1{test++} = 1#4 == (1#4 *1#4);
output1{test++} = -1#4 == (-1#4 *1#4);
output1{test++} = -1#4 == (1#4 * -1#4);
output1{test++} = 1#4 == (-1#4 * -1#4);
output1{test++} = 2#4 == (1#4 *2#4);
output1{test++} = -2#4 == (-1#4 *2#4);
output1{test++} = -2#4 == (1#4 * -2#4);
output1{test++} = 2#4 == (-1#4 * -2#4);
output1{test++} = 3#4 == (1#4 *3#4);
output1{test++} = -3#4 == (-1#4 *3#4);
output1{test++} = -3#4 == (1#4 * -3#4);
output1{test++} = 3#4 == (-1#4 * -3#4);
output1{test++} = 4#4 == (1#4 *4#4);
output1{test++} = -4#4 == (-1#4 *4#4);
output1{test++} = -4#4 == (1#4 * -4#4);
output1{test++} = 4#4 == (-1#4 * -4#4);
output1{test++} = 5#4 == (1#4 *5#4);
output1{test++} = -5#4 == (-1#4 *5#4);
output1{test++} = -5#4 == (1#4 * -5#4);
output1{test++} = 5#4 == (-1#4 * -5#4);
output1{test++} = 6#4 == (1#4 *6#4);
output1{test++} = -6#4 == (-1#4 *6#4);
output1{test++} = -6#4 == (1#4 * -6#4);
output1{test++} = 6#4 == (-1#4 * -6#4);
output1{test++} = 7#4 == (1#4 *7#4);
output1{test++} = -7#4 == (-1#4 *7#4);
output1{test++} = -7#4 == (1#4 * -7#4);
output1{test++} = 7#4 == (-1#4 * -7#4);
output1{test++} = 8#4 == (1#4 *8#4);
output1{test++} = -8#4 == (-1#4 *8#4);
output1{test++} = -8#4 == (1#4 * -8#4);
output1{test++} = 8#4 == (-1#4 * -8#4);
output1{test++} = 9#4 == (1#4 *9#4);
output1{test++} = -9#4 == (-1#4 *9#4);
output1{test++} = -9#4 == (1#4 * -9#4);
output1{test++} = 9#4 == (-1#4 * -9#4);
output1{test++} = 10#4 == (1#4 *10#4);
output1{test++} = -10#4 == (-1#4 *10#4);
output1{test++} = -10#4 == (1#4 * -10#4);
output1{test++} = 10#4 == (-1#4 * -10#4);
output1{test++} = 11#4 == (1#4 *11#4);
output1{test++} = -11#4 == (-1#4 *11#4);
output1{test++} = -11#4 == (1#4 * -11#4);
output1{test++} = 11#4 == (-1#4 * -11#4);
output1{test++} = 12#4 == (1#4 *12#4);
output1{test++} = -12#4 == (-1#4 *12#4);
output1{test++} = -12#4 == (1#4 * -12#4);
output1{test++} = 12#4 == (-1#4 * -12#4);
output1{test++} = 13#4 == (1#4 *13#4);
output1{test++} = -13#4 == (-1#4 *13#4);
output1{test++} = -13#4 == (1#4 * -13#4);
output1{test++} = 13#4 == (-1#4 * -13#4);
output1{test++} = 14#4 == (1#4 *14#4);
output1{test++} = -14#4 == (-1#4 *14#4);
output1{test++} = -14#4 == (1#4 * -14#4);
output1{test++} = 14#4 == (-1#4 * -14#4);
output1{test++} = 15#4 == (1#4 *15#4);
output1{test++} = -15#4 == (-1#4 *15#4);
output1{test++} = -15#4 == (1#4 * -15#4);
output1{test++} = 15#4 == (-1#4 * -15#4);
output1{test++} = 0#4 == (2#4 *0#4);
output1{test++} = 0#4 == (-2#4 *0#4);
output1{test++} = 0#4 == (2#4 * -0#4);
output1{test++} = 0#4 == (-2#4 * -0#4);
output1{test++} = 2#4 == (2#4 *1#4);
output1{test++} = -2#4 == (-2#4 *1#4);
output1{test++} = -2#4 == (2#4 * -1#4);
output1{test++} = 2#4 == (-2#4 * -1#4);
output1{test++} = 4#4 == (2#4 *2#4);
output1{test++} = -4#4 == (-2#4 *2#4);
output1{test++} = -4#4 == (2#4 * -2#4);
output1{test++} = 4#4 == (-2#4 * -2#4);
output1{test++} = 6#4 == (2#4 *3#4);
output1{test++} = -6#4 == (-2#4 *3#4);
output1{test++} = -6#4 == (2#4 * -3#4);
output1{test++} = 6#4 == (-2#4 * -3#4);
output1{test++} = 8#4 == (2#4 *4#4);
output1{test++} = -8#4 == (-2#4 *4#4);
output1{test++} = -8#4 == (2#4 * -4#4);
output1{test++} = 8#4 == (-2#4 * -4#4);
output1{test++} = 10#4 == (2#4 *5#4);
output1{test++} = -10#4 == (-2#4 *5#4);
output1{test++} = -10#4 == (2#4 * -5#4);
output1{test++} = 10#4 == (-2#4 * -5#4);
output1{test++} = 12#4 == (2#4 *6#4);
output1{test++} = -12#4 == (-2#4 *6#4);
output1{test++} = -12#4 == (2#4 * -6#4);
output1{test++} = 12#4 == (-2#4 * -6#4);
output1{test++} = 14#4 == (2#4 *7#4);
output1{test++} = -14#4 == (-2#4 *7#4);
output1{test++} = -14#4 == (2#4 * -7#4);
output1{test++} = 14#4 == (-2#4 * -7#4);
output1{test++} = 16#4 == (2#4 *8#4);
output1{test++} = -16#4 == (-2#4 *8#4);
output1{test++} = -16#4 == (2#4 * -8#4);
output1{test++} = 16#4 == (-2#4 * -8#4);
output1{test++} = 18#4 == (2#4 *9#4);
output1{test++} = -18#4 == (-2#4 *9#4);
output1{test++} = -18#4 == (2#4 * -9#4);
output1{test++} = 18#4 == (-2#4 * -9#4);
output1{test++} = 20#4 == (2#4 *10#4);
output1{test++} = -20#4 == (-2#4 *10#4);
output1{test++} = -20#4 == (2#4 * -10#4);
output1{test++} = 20#4 == (-2#4 * -10#4);
output1{test++} = 22#4 == (2#4 *11#4);
output1{test++} = -22#4 == (-2#4 *11#4);
output1{test++} = -22#4 == (2#4 * -11#4);
output1{test++} = 22#4 == (-2#4 * -11#4);
output1{test++} = 24#4 == (2#4 *12#4);
output1{test++} = -24#4 == (-2#4 *12#4);
output1{test++} = -24#4 == (2#4 * -12#4);
output1{test++} = 24#4 == (-2#4 * -12#4);
output1{test++} = 26#4 == (2#4 *13#4);
output1{test++} = -26#4 == (-2#4 *13#4);
output1{test++} = -26#4 == (2#4 * -13#4);
output1{test++} = 26#4 == (-2#4 * -13#4);
output1{test++} = 28#4 == (2#4 *14#4);
output1{test++} = -28#4 == (-2#4 *14#4);
output1{test++} = -28#4 == (2#4 * -14#4);
output1{test++} = 28#4 == (-2#4 * -14#4);
output1{test++} = 30#4 == (2#4 *15#4);
output1{test++} = -30#4 == (-2#4 *15#4);
output1{test++} = -30#4 == (2#4 * -15#4);
output1{test++} = 30#4 == (-2#4 * -15#4);
output1{test++} = 0#4 == (3#4 *0#4);
output1{test++} = 0#4 == (-3#4 *0#4);
output1{test++} = 0#4 == (3#4 * -0#4);
output1{test++} = 0#4 == (-3#4 * -0#4);
output1{test++} = 3#4 == (3#4 *1#4);
output1{test++} = -3#4 == (-3#4 *1#4);
output1{test++} = -3#4 == (3#4 * -1#4);
output1{test++} = 3#4 == (-3#4 * -1#4);
output1{test++} = 6#4 == (3#4 *2#4);
output1{test++} = -6#4 == (-3#4 *2#4);
output1{test++} = -6#4 == (3#4 * -2#4);
output1{test++} = 6#4 == (-3#4 * -2#4);
output1{test++} = 9#4 == (3#4 *3#4);
output1{test++} = -9#4 == (-3#4 *3#4);
output1{test++} = -9#4 == (3#4 * -3#4);
output1{test++} = 9#4 == (-3#4 * -3#4);
output1{test++} = 12#4 == (3#4 *4#4);
output1{test++} = -12#4 == (-3#4 *4#4);
output1{test++} = -12#4 == (3#4 * -4#4);
output1{test++} = 12#4 == (-3#4 * -4#4);
output1{test++} = 15#4 == (3#4 *5#4);
output1{test++} = -15#4 == (-3#4 *5#4);
output1{test++} = -15#4 == (3#4 * -5#4);
output1{test++} = 15#4 == (-3#4 * -5#4);
output1{test++} = 18#4 == (3#4 *6#4);
output1{test++} = -18#4 == (-3#4 *6#4);
output1{test++} = -18#4 == (3#4 * -6#4);
output1{test++} = 18#4 == (-3#4 * -6#4);
output1{test++} = 21#4 == (3#4 *7#4);
output1{test++} = -21#4 == (-3#4 *7#4);
output1{test++} = -21#4 == (3#4 * -7#4);
output1{test++} = 21#4 == (-3#4 * -7#4);
output1{test++} = 24#4 == (3#4 *8#4);
output1{test++} = -24#4 == (-3#4 *8#4);
output1{test++} = -24#4 == (3#4 * -8#4);
output1{test++} = 24#4 == (-3#4 * -8#4);
output1{test++} = 27#4 == (3#4 *9#4);
output1{test++} = -27#4 == (-3#4 *9#4);
output1{test++} = -27#4 == (3#4 * -9#4);
output1{test++} = 27#4 == (-3#4 * -9#4);
output1{test++} = 30#4 == (3#4 *10#4);
output1{test++} = -30#4 == (-3#4 *10#4);
output1{test++} = -30#4 == (3#4 * -10#4);
output1{test++} = 30#4 == (-3#4 * -10#4);
output1{test++} = 33#4 == (3#4 *11#4);
output1{test++} = -33#4 == (-3#4 *11#4);
output1{test++} = -33#4 == (3#4 * -11#4);
output1{test++} = 33#4 == (-3#4 * -11#4);
output1{test++} = 36#4 == (3#4 *12#4);
output1{test++} = -36#4 == (-3#4 *12#4);
output1{test++} = -36#4 == (3#4 * -12#4);
output1{test++} = 36#4 == (-3#4 * -12#4);
output1{test++} = 39#4 == (3#4 *13#4);
output1{test++} = -39#4 == (-3#4 *13#4);
output1{test++} = -39#4 == (3#4 * -13#4);
output1{test++} = 39#4 == (-3#4 * -13#4);
output1{test++} = 42#4 == (3#4 *14#4);
output1{test++} = -42#4 == (-3#4 *14#4);
output1{test++} = -42#4 == (3#4 * -14#4);
output1{test++} = 42#4 == (-3#4 * -14#4);
output1{test++} = 45#4 == (3#4 *15#4);
output1{test++} = -45#4 == (-3#4 *15#4);
output1{test++} = -45#4 == (3#4 * -15#4);
output1{test++} = 45#4 == (-3#4 * -15#4);
output1{test++} = 0#4 == (4#4 *0#4);
output1{test++} = 0#4 == (-4#4 *0#4);
output1{test++} = 0#4 == (4#4 * -0#4);
output1{test++} = 0#4 == (-4#4 * -0#4);
output1{test++} = 4#4 == (4#4 *1#4);
output1{test++} = -4#4 == (-4#4 *1#4);
output1{test++} = -4#4 == (4#4 * -1#4);
output1{test++} = 4#4 == (-4#4 * -1#4);
output1{test++} = 8#4 == (4#4 *2#4);
output1{test++} = -8#4 == (-4#4 *2#4);
output1{test++} = -8#4 == (4#4 * -2#4);
output1{test++} = 8#4 == (-4#4 * -2#4);
output1{test++} = 12#4 == (4#4 *3#4);
output1{test++} = -12#4 == (-4#4 *3#4);
output1{test++} = -12#4 == (4#4 * -3#4);
output1{test++} = 12#4 == (-4#4 * -3#4);
output1{test++} = 16#4 == (4#4 *4#4);
output1{test++} = -16#4 == (-4#4 *4#4);
output1{test++} = -16#4 == (4#4 * -4#4);
output1{test++} = 16#4 == (-4#4 * -4#4);
output1{test++} = 20#4 == (4#4 *5#4);
output1{test++} = -20#4 == (-4#4 *5#4);
output1{test++} = -20#4 == (4#4 * -5#4);
output1{test++} = 20#4 == (-4#4 * -5#4);
output1{test++} = 24#4 == (4#4 *6#4);
output1{test++} = -24#4 == (-4#4 *6#4);
output1{test++} = -24#4 == (4#4 * -6#4);
output1{test++} = 24#4 == (-4#4 * -6#4);
output1{test++} = 28#4 == (4#4 *7#4);
output1{test++} = -28#4 == (-4#4 *7#4);
output1{test++} = -28#4 == (4#4 * -7#4);
output1{test++} = 28#4 == (-4#4 * -7#4);
output1{test++} = 32#4 == (4#4 *8#4);
output1{test++} = -32#4 == (-4#4 *8#4);
output1{test++} = -32#4 == (4#4 * -8#4);
output1{test++} = 32#4 == (-4#4 * -8#4);
output1{test++} = 36#4 == (4#4 *9#4);
output1{test++} = -36#4 == (-4#4 *9#4);
output1{test++} = -36#4 == (4#4 * -9#4);
output1{test++} = 36#4 == (-4#4 * -9#4);
output1{test++} = 40#4 == (4#4 *10#4);
output1{test++} = -40#4 == (-4#4 *10#4);
output1{test++} = -40#4 == (4#4 * -10#4);
output1{test++} = 40#4 == (-4#4 * -10#4);
output1{test++} = 44#4 == (4#4 *11#4);
output1{test++} = -44#4 == (-4#4 *11#4);
output1{test++} = -44#4 == (4#4 * -11#4);
output1{test++} = 44#4 == (-4#4 * -11#4);
output1{test++} = 48#4 == (4#4 *12#4);
output1{test++} = -48#4 == (-4#4 *12#4);
output1{test++} = -48#4 == (4#4 * -12#4);
output1{test++} = 48#4 == (-4#4 * -12#4);
output1{test++} = 52#4 == (4#4 *13#4);
output1{test++} = -52#4 == (-4#4 *13#4);
output1{test++} = -52#4 == (4#4 * -13#4);
output1{test++} = 52#4 == (-4#4 * -13#4);
output1{test++} = 56#4 == (4#4 *14#4);
output1{test++} = -56#4 == (-4#4 *14#4);
output1{test++} = -56#4 == (4#4 * -14#4);
output1{test++} = 56#4 == (-4#4 * -14#4);
output1{test++} = 60#4 == (4#4 *15#4);
output1{test++} = -60#4 == (-4#4 *15#4);
output1{test++} = -60#4 == (4#4 * -15#4);
output1{test++} = 60#4 == (-4#4 * -15#4);
output1{test++} = 0#4 == (5#4 *0#4);
output1{test++} = 0#4 == (-5#4 *0#4);
output1{test++} = 0#4 == (5#4 * -0#4);
output1{test++} = 0#4 == (-5#4 * -0#4);
output1{test++} = 5#4 == (5#4 *1#4);
output1{test++} = -5#4 == (-5#4 *1#4);
output1{test++} = -5#4 == (5#4 * -1#4);
output1{test++} = 5#4 == (-5#4 * -1#4);
output1{test++} = 10#4 == (5#4 *2#4);
output1{test++} = -10#4 == (-5#4 *2#4);
output1{test++} = -10#4 == (5#4 * -2#4);
output1{test++} = 10#4 == (-5#4 * -2#4);
output1{test++} = 15#4 == (5#4 *3#4);
output1{test++} = -15#4 == (-5#4 *3#4);
output1{test++} = -15#4 == (5#4 * -3#4);
output1{test++} = 15#4 == (-5#4 * -3#4);
output1{test++} = 20#4 == (5#4 *4#4);
output1{test++} = -20#4 == (-5#4 *4#4);
output1{test++} = -20#4 == (5#4 * -4#4);
output1{test++} = 20#4 == (-5#4 * -4#4);
output1{test++} = 25#4 == (5#4 *5#4);
output1{test++} = -25#4 == (-5#4 *5#4);
output1{test++} = -25#4 == (5#4 * -5#4);
output1{test++} = 25#4 == (-5#4 * -5#4);
output1{test++} = 30#4 == (5#4 *6#4);
output1{test++} = -30#4 == (-5#4 *6#4);
output1{test++} = -30#4 == (5#4 * -6#4);
output1{test++} = 30#4 == (-5#4 * -6#4);
output1{test++} = 35#4 == (5#4 *7#4);
output1{test++} = -35#4 == (-5#4 *7#4);
output1{test++} = -35#4 == (5#4 * -7#4);
output1{test++} = 35#4 == (-5#4 * -7#4);
output1{test++} = 40#4 == (5#4 *8#4);
output1{test++} = -40#4 == (-5#4 *8#4);
output1{test++} = -40#4 == (5#4 * -8#4);
output1{test++} = 40#4 == (-5#4 * -8#4);
output1{test++} = 45#4 == (5#4 *9#4);
output1{test++} = -45#4 == (-5#4 *9#4);
output1{test++} = -45#4 == (5#4 * -9#4);
output1{test++} = 45#4 == (-5#4 * -9#4);
output1{test++} = 50#4 == (5#4 *10#4);
output1{test++} = -50#4 == (-5#4 *10#4);
output1{test++} = -50#4 == (5#4 * -10#4);
output1{test++} = 50#4 == (-5#4 * -10#4);
output1{test++} = 55#4 == (5#4 *11#4);
output1{test++} = -55#4 == (-5#4 *11#4);
output1{test++} = -55#4 == (5#4 * -11#4);
output1{test++} = 55#4 == (-5#4 * -11#4);
output1{test++} = 60#4 == (5#4 *12#4);
output1{test++} = -60#4 == (-5#4 *12#4);
output1{test++} = -60#4 == (5#4 * -12#4);
output1{test++} = 60#4 == (-5#4 * -12#4);
output1{test++} = 65#4 == (5#4 *13#4);
output1{test++} = -65#4 == (-5#4 *13#4);
output1{test++} = -65#4 == (5#4 * -13#4);
output1{test++} = 65#4 == (-5#4 * -13#4);
output1{test++} = 70#4 == (5#4 *14#4);
output1{test++} = -70#4 == (-5#4 *14#4);
output1{test++} = -70#4 == (5#4 * -14#4);
output1{test++} = 70#4 == (-5#4 * -14#4);
output1{test++} = 75#4 == (5#4 *15#4);
output1{test++} = -75#4 == (-5#4 *15#4);
output1{test++} = -75#4 == (5#4 * -15#4);
output1{test++} = 75#4 == (-5#4 * -15#4);
output1{test++} = 0#4 == (6#4 *0#4);
output1{test++} = 0#4 == (-6#4 *0#4);
output1{test++} = 0#4 == (6#4 * -0#4);
output1{test++} = 0#4 == (-6#4 * -0#4);
output1{test++} = 6#4 == (6#4 *1#4);
output1{test++} = -6#4 == (-6#4 *1#4);
output1{test++} = -6#4 == (6#4 * -1#4);
output1{test++} = 6#4 == (-6#4 * -1#4);
output1{test++} = 12#4 == (6#4 *2#4);
output1{test++} = -12#4 == (-6#4 *2#4);
output1{test++} = -12#4 == (6#4 * -2#4);
output1{test++} = 12#4 == (-6#4 * -2#4);
output1{test++} = 18#4 == (6#4 *3#4);
output1{test++} = -18#4 == (-6#4 *3#4);
output1{test++} = -18#4 == (6#4 * -3#4);
output1{test++} = 18#4 == (-6#4 * -3#4);
output1{test++} = 24#4 == (6#4 *4#4);
output1{test++} = -24#4 == (-6#4 *4#4);
output1{test++} = -24#4 == (6#4 * -4#4);
output1{test++} = 24#4 == (-6#4 * -4#4);
output1{test++} = 30#4 == (6#4 *5#4);
output1{test++} = -30#4 == (-6#4 *5#4);
output1{test++} = -30#4 == (6#4 * -5#4);
output1{test++} = 30#4 == (-6#4 * -5#4);
output1{test++} = 36#4 == (6#4 *6#4);
output1{test++} = -36#4 == (-6#4 *6#4);
output1{test++} = -36#4 == (6#4 * -6#4);
output1{test++} = 36#4 == (-6#4 * -6#4);
output1{test++} = 42#4 == (6#4 *7#4);
output1{test++} = -42#4 == (-6#4 *7#4);
output1{test++} = -42#4 == (6#4 * -7#4);
output1{test++} = 42#4 == (-6#4 * -7#4);
output1{test++} = 48#4 == (6#4 *8#4);
output1{test++} = -48#4 == (-6#4 *8#4);
output1{test++} = -48#4 == (6#4 * -8#4);
output1{test++} = 48#4 == (-6#4 * -8#4);
output1{test++} = 54#4 == (6#4 *9#4);
output1{test++} = -54#4 == (-6#4 *9#4);
output1{test++} = -54#4 == (6#4 * -9#4);
output1{test++} = 54#4 == (-6#4 * -9#4);
output1{test++} = 60#4 == (6#4 *10#4);
output1{test++} = -60#4 == (-6#4 *10#4);
output1{test++} = -60#4 == (6#4 * -10#4);
output1{test++} = 60#4 == (-6#4 * -10#4);
output1{test++} = 66#4 == (6#4 *11#4);
output1{test++} = -66#4 == (-6#4 *11#4);
output1{test++} = -66#4 == (6#4 * -11#4);
output1{test++} = 66#4 == (-6#4 * -11#4);
output1{test++} = 72#4 == (6#4 *12#4);
output1{test++} = -72#4 == (-6#4 *12#4);
output1{test++} = -72#4 == (6#4 * -12#4);
output1{test++} = 72#4 == (-6#4 * -12#4);
output1{test++} = 78#4 == (6#4 *13#4);
output1{test++} = -78#4 == (-6#4 *13#4);
output1{test++} = -78#4 == (6#4 * -13#4);
output1{test++} = 78#4 == (-6#4 * -13#4);
output1{test++} = 84#4 == (6#4 *14#4);
output1{test++} = -84#4 == (-6#4 *14#4);
output1{test++} = -84#4 == (6#4 * -14#4);
output1{test++} = 84#4 == (-6#4 * -14#4);
output1{test++} = 90#4 == (6#4 *15#4);
output1{test++} = -90#4 == (-6#4 *15#4);
output1{test++} = -90#4 == (6#4 * -15#4);
output1{test++} = 90#4 == (-6#4 * -15#4);
output1{test++} = 0#4 == (7#4 *0#4);
output1{test++} = 0#4 == (-7#4 *0#4);
output1{test++} = 0#4 == (7#4 * -0#4);
output1{test++} = 0#4 == (-7#4 * -0#4);
output1{test++} = 7#4 == (7#4 *1#4);
output1{test++} = -7#4 == (-7#4 *1#4);
output1{test++} = -7#4 == (7#4 * -1#4);
output1{test++} = 7#4 == (-7#4 * -1#4);
output1{test++} = 14#4 == (7#4 *2#4);
output1{test++} = -14#4 == (-7#4 *2#4);
output1{test++} = -14#4 == (7#4 * -2#4);
output1{test++} = 14#4 == (-7#4 * -2#4);
output1{test++} = 21#4 == (7#4 *3#4);
output1{test++} = -21#4 == (-7#4 *3#4);
output1{test++} = -21#4 == (7#4 * -3#4);
output1{test++} = 21#4 == (-7#4 * -3#4);
output1{test++} = 28#4 == (7#4 *4#4);
output1{test++} = -28#4 == (-7#4 *4#4);
output1{test++} = -28#4 == (7#4 * -4#4);
output1{test++} = 28#4 == (-7#4 * -4#4);
output1{test++} = 35#4 == (7#4 *5#4);
output1{test++} = -35#4 == (-7#4 *5#4);
output1{test++} = -35#4 == (7#4 * -5#4);
output1{test++} = 35#4 == (-7#4 * -5#4);
output1{test++} = 42#4 == (7#4 *6#4);
output1{test++} = -42#4 == (-7#4 *6#4);
output1{test++} = -42#4 == (7#4 * -6#4);
output1{test++} = 42#4 == (-7#4 * -6#4);
output1{test++} = 49#4 == (7#4 *7#4);
output1{test++} = -49#4 == (-7#4 *7#4);
output1{test++} = -49#4 == (7#4 * -7#4);
output1{test++} = 49#4 == (-7#4 * -7#4);
output1{test++} = 56#4 == (7#4 *8#4);
output1{test++} = -56#4 == (-7#4 *8#4);
output1{test++} = -56#4 == (7#4 * -8#4);
output1{test++} = 56#4 == (-7#4 * -8#4);
output1{test++} = 63#4 == (7#4 *9#4);
output1{test++} = -63#4 == (-7#4 *9#4);
output1{test++} = -63#4 == (7#4 * -9#4);
output1{test++} = 63#4 == (-7#4 * -9#4);
output1{test++} = 70#4 == (7#4 *10#4);
output1{test++} = -70#4 == (-7#4 *10#4);
output1{test++} = -70#4 == (7#4 * -10#4);
output1{test++} = 70#4 == (-7#4 * -10#4);
output1{test++} = 77#4 == (7#4 *11#4);
output1{test++} = -77#4 == (-7#4 *11#4);
output1{test++} = -77#4 == (7#4 * -11#4);
output1{test++} = 77#4 == (-7#4 * -11#4);
output1{test++} = 84#4 == (7#4 *12#4);
output1{test++} = -84#4 == (-7#4 *12#4);
output1{test++} = -84#4 == (7#4 * -12#4);
output1{test++} = 84#4 == (-7#4 * -12#4);
output1{test++} = 91#4 == (7#4 *13#4);
output1{test++} = -91#4 == (-7#4 *13#4);
output1{test++} = -91#4 == (7#4 * -13#4);
output1{test++} = 91#4 == (-7#4 * -13#4);
output1{test++} = 98#4 == (7#4 *14#4);
output1{test++} = -98#4 == (-7#4 *14#4);
output1{test++} = -98#4 == (7#4 * -14#4);
output1{test++} = 98#4 == (-7#4 * -14#4);
output1{test++} = 105#4 == (7#4 *15#4);
output1{test++} = -105#4 == (-7#4 *15#4);
output1{test++} = -105#4 == (7#4 * -15#4);
output1{test++} = 105#4 == (-7#4 * -15#4);
output1{test++} = 0#4 == (8#4 *0#4);
output1{test++} = 0#4 == (-8#4 *0#4);
output1{test++} = 0#4 == (8#4 * -0#4);
output1{test++} = 0#4 == (-8#4 * -0#4);
output1{test++} = 8#4 == (8#4 *1#4);
output1{test++} = -8#4 == (-8#4 *1#4);
output1{test++} = -8#4 == (8#4 * -1#4);
output1{test++} = 8#4 == (-8#4 * -1#4);
output1{test++} = 16#4 == (8#4 *2#4);
output1{test++} = -16#4 == (-8#4 *2#4);
output1{test++} = -16#4 == (8#4 * -2#4);
output1{test++} = 16#4 == (-8#4 * -2#4);
output1{test++} = 24#4 == (8#4 *3#4);
output1{test++} = -24#4 == (-8#4 *3#4);
output1{test++} = -24#4 == (8#4 * -3#4);
output1{test++} = 24#4 == (-8#4 * -3#4);
output1{test++} = 32#4 == (8#4 *4#4);
output1{test++} = -32#4 == (-8#4 *4#4);
output1{test++} = -32#4 == (8#4 * -4#4);
output1{test++} = 32#4 == (-8#4 * -4#4);
output1{test++} = 40#4 == (8#4 *5#4);
output1{test++} = -40#4 == (-8#4 *5#4);
output1{test++} = -40#4 == (8#4 * -5#4);
output1{test++} = 40#4 == (-8#4 * -5#4);
output1{test++} = 48#4 == (8#4 *6#4);
output1{test++} = -48#4 == (-8#4 *6#4);
output1{test++} = -48#4 == (8#4 * -6#4);
output1{test++} = 48#4 == (-8#4 * -6#4);
output1{test++} = 56#4 == (8#4 *7#4);
output1{test++} = -56#4 == (-8#4 *7#4);
output1{test++} = -56#4 == (8#4 * -7#4);
output1{test++} = 56#4 == (-8#4 * -7#4);
output1{test++} = 64#4 == (8#4 *8#4);
output1{test++} = -64#4 == (-8#4 *8#4);
output1{test++} = -64#4 == (8#4 * -8#4);
output1{test++} = 64#4 == (-8#4 * -8#4);
output1{test++} = 72#4 == (8#4 *9#4);
output1{test++} = -72#4 == (-8#4 *9#4);
output1{test++} = -72#4 == (8#4 * -9#4);
output1{test++} = 72#4 == (-8#4 * -9#4);
output1{test++} = 80#4 == (8#4 *10#4);
output1{test++} = -80#4 == (-8#4 *10#4);
output1{test++} = -80#4 == (8#4 * -10#4);
output1{test++} = 80#4 == (-8#4 * -10#4);
output1{test++} = 88#4 == (8#4 *11#4);
output1{test++} = -88#4 == (-8#4 *11#4);
output1{test++} = -88#4 == (8#4 * -11#4);
output1{test++} = 88#4 == (-8#4 * -11#4);
output1{test++} = 96#4 == (8#4 *12#4);
output1{test++} = -96#4 == (-8#4 *12#4);
output1{test++} = -96#4 == (8#4 * -12#4);
output1{test++} = 96#4 == (-8#4 * -12#4);
output1{test++} = 104#4 == (8#4 *13#4);
output1{test++} = -104#4 == (-8#4 *13#4);
output1{test++} = -104#4 == (8#4 * -13#4);
output1{test++} = 104#4 == (-8#4 * -13#4);
output1{test++} = 112#4 == (8#4 *14#4);
output1{test++} = -112#4 == (-8#4 *14#4);
output1{test++} = -112#4 == (8#4 * -14#4);
output1{test++} = 112#4 == (-8#4 * -14#4);
output1{test++} = 120#4 == (8#4 *15#4);
output1{test++} = -120#4 == (-8#4 *15#4);
output1{test++} = -120#4 == (8#4 * -15#4);
output1{test++} = 120#4 == (-8#4 * -15#4);
output1{test++} = 0#4 == (9#4 *0#4);
output1{test++} = 0#4 == (-9#4 *0#4);
output1{test++} = 0#4 == (9#4 * -0#4);
output1{test++} = 0#4 == (-9#4 * -0#4);
output1{test++} = 9#4 == (9#4 *1#4);
output1{test++} = -9#4 == (-9#4 *1#4);
output1{test++} = -9#4 == (9#4 * -1#4);
output1{test++} = 9#4 == (-9#4 * -1#4);
output1{test++} = 18#4 == (9#4 *2#4);
output1{test++} = -18#4 == (-9#4 *2#4);
output1{test++} = -18#4 == (9#4 * -2#4);
output1{test++} = 18#4 == (-9#4 * -2#4);
output1{test++} = 27#4 == (9#4 *3#4);
output1{test++} = -27#4 == (-9#4 *3#4);
output1{test++} = -27#4 == (9#4 * -3#4);
output1{test++} = 27#4 == (-9#4 * -3#4);
output1{test++} = 36#4 == (9#4 *4#4);
output1{test++} = -36#4 == (-9#4 *4#4);
output1{test++} = -36#4 == (9#4 * -4#4);
output1{test++} = 36#4 == (-9#4 * -4#4);
output1{test++} = 45#4 == (9#4 *5#4);
output1{test++} = -45#4 == (-9#4 *5#4);
output1{test++} = -45#4 == (9#4 * -5#4);
output1{test++} = 45#4 == (-9#4 * -5#4);
output1{test++} = 54#4 == (9#4 *6#4);
output1{test++} = -54#4 == (-9#4 *6#4);
output1{test++} = -54#4 == (9#4 * -6#4);
output1{test++} = 54#4 == (-9#4 * -6#4);
output1{test++} = 63#4 == (9#4 *7#4);
output1{test++} = -63#4 == (-9#4 *7#4);
output1{test++} = -63#4 == (9#4 * -7#4);
output1{test++} = 63#4 == (-9#4 * -7#4);
output1{test++} = 72#4 == (9#4 *8#4);
output1{test++} = -72#4 == (-9#4 *8#4);
output1{test++} = -72#4 == (9#4 * -8#4);
output1{test++} = 72#4 == (-9#4 * -8#4);
output1{test++} = 81#4 == (9#4 *9#4);
output1{test++} = -81#4 == (-9#4 *9#4);
output1{test++} = -81#4 == (9#4 * -9#4);
output1{test++} = 81#4 == (-9#4 * -9#4);
output1{test++} = 90#4 == (9#4 *10#4);
output1{test++} = -90#4 == (-9#4 *10#4);
output1{test++} = -90#4 == (9#4 * -10#4);
output1{test++} = 90#4 == (-9#4 * -10#4);
output1{test++} = 99#4 == (9#4 *11#4);
output1{test++} = -99#4 == (-9#4 *11#4);
output1{test++} = -99#4 == (9#4 * -11#4);
output1{test++} = 99#4 == (-9#4 * -11#4);
output1{test++} = 108#4 == (9#4 *12#4);
output1{test++} = -108#4 == (-9#4 *12#4);
output1{test++} = -108#4 == (9#4 * -12#4);
output1{test++} = 108#4 == (-9#4 * -12#4);
output1{test++} = 117#4 == (9#4 *13#4);
output1{test++} = -117#4 == (-9#4 *13#4);
output1{test++} = -117#4 == (9#4 * -13#4);
output1{test++} = 117#4 == (-9#4 * -13#4);
output1{test++} = 126#4 == (9#4 *14#4);
output1{test++} = -126#4 == (-9#4 *14#4);
output1{test++} = -126#4 == (9#4 * -14#4);
output1{test++} = 126#4 == (-9#4 * -14#4);
output1{test++} = 135#4 == (9#4 *15#4);
output1{test++} = -135#4 == (-9#4 *15#4);
output1{test++} = -135#4 == (9#4 * -15#4);
output1{test++} = 135#4 == (-9#4 * -15#4);
output1{test++} = 0#4 == (10#4 *0#4);
output1{test++} = 0#4 == (-10#4 *0#4);
output1{test++} = 0#4 == (10#4 * -0#4);
output1{test++} = 0#4 == (-10#4 * -0#4);
output1{test++} = 10#4 == (10#4 *1#4);
output1{test++} = -10#4 == (-10#4 *1#4);
output1{test++} = -10#4 == (10#4 * -1#4);
output1{test++} = 10#4 == (-10#4 * -1#4);
output1{test++} = 20#4 == (10#4 *2#4);
output1{test++} = -20#4 == (-10#4 *2#4);
output1{test++} = -20#4 == (10#4 * -2#4);
output1{test++} = 20#4 == (-10#4 * -2#4);
output1{test++} = 30#4 == (10#4 *3#4);
output1{test++} = -30#4 == (-10#4 *3#4);
output1{test++} = -30#4 == (10#4 * -3#4);
output1{test++} = 30#4 == (-10#4 * -3#4);
output1{test++} = 40#4 == (10#4 *4#4);
output1{test++} = -40#4 == (-10#4 *4#4);
output1{test++} = -40#4 == (10#4 * -4#4);
output1{test++} = 40#4 == (-10#4 * -4#4);
output1{test++} = 50#4 == (10#4 *5#4);
output1{test++} = -50#4 == (-10#4 *5#4);
output1{test++} = -50#4 == (10#4 * -5#4);
output1{test++} = 50#4 == (-10#4 * -5#4);
output1{test++} = 60#4 == (10#4 *6#4);
output1{test++} = -60#4 == (-10#4 *6#4);
output1{test++} = -60#4 == (10#4 * -6#4);
output1{test++} = 60#4 == (-10#4 * -6#4);
output1{test++} = 70#4 == (10#4 *7#4);
output1{test++} = -70#4 == (-10#4 *7#4);
output1{test++} = -70#4 == (10#4 * -7#4);
output1{test++} = 70#4 == (-10#4 * -7#4);
output1{test++} = 80#4 == (10#4 *8#4);
output1{test++} = -80#4 == (-10#4 *8#4);
output1{test++} = -80#4 == (10#4 * -8#4);
output1{test++} = 80#4 == (-10#4 * -8#4);
output1{test++} = 90#4 == (10#4 *9#4);
output1{test++} = -90#4 == (-10#4 *9#4);
output1{test++} = -90#4 == (10#4 * -9#4);
output1{test++} = 90#4 == (-10#4 * -9#4);
output1{test++} = 100#4 == (10#4 *10#4);
output1{test++} = -100#4 == (-10#4 *10#4);
output1{test++} = -100#4 == (10#4 * -10#4);
output1{test++} = 100#4 == (-10#4 * -10#4);
output1{test++} = 110#4 == (10#4 *11#4);
output1{test++} = -110#4 == (-10#4 *11#4);
output1{test++} = -110#4 == (10#4 * -11#4);
output1{test++} = 110#4 == (-10#4 * -11#4);
output1{test++} = 120#4 == (10#4 *12#4);
output1{test++} = -120#4 == (-10#4 *12#4);
output1{test++} = -120#4 == (10#4 * -12#4);
output1{test++} = 120#4 == (-10#4 * -12#4);
output1{test++} = 130#4 == (10#4 *13#4);
output1{test++} = -130#4 == (-10#4 *13#4);
output1{test++} = -130#4 == (10#4 * -13#4);
output1{test++} = 130#4 == (-10#4 * -13#4);
output1{test++} = 140#4 == (10#4 *14#4);
output1{test++} = -140#4 == (-10#4 *14#4);
output1{test++} = -140#4 == (10#4 * -14#4);
output1{test++} = 140#4 == (-10#4 * -14#4);
output1{test++} = 150#4 == (10#4 *15#4);
output1{test++} = -150#4 == (-10#4 *15#4);
output1{test++} = -150#4 == (10#4 * -15#4);
output1{test++} = 150#4 == (-10#4 * -15#4);
output1{test++} = 0#4 == (11#4 *0#4);
output1{test++} = 0#4 == (-11#4 *0#4);
output1{test++} = 0#4 == (11#4 * -0#4);
output1{test++} = 0#4 == (-11#4 * -0#4);
output1{test++} = 11#4 == (11#4 *1#4);
output1{test++} = -11#4 == (-11#4 *1#4);
output1{test++} = -11#4 == (11#4 * -1#4);
output1{test++} = 11#4 == (-11#4 * -1#4);
output1{test++} = 22#4 == (11#4 *2#4);
output1{test++} = -22#4 == (-11#4 *2#4);
output1{test++} = -22#4 == (11#4 * -2#4);
output1{test++} = 22#4 == (-11#4 * -2#4);
output1{test++} = 33#4 == (11#4 *3#4);
output1{test++} = -33#4 == (-11#4 *3#4);
output1{test++} = -33#4 == (11#4 * -3#4);
output1{test++} = 33#4 == (-11#4 * -3#4);
output1{test++} = 44#4 == (11#4 *4#4);
output1{test++} = -44#4 == (-11#4 *4#4);
output1{test++} = -44#4 == (11#4 * -4#4);
output1{test++} = 44#4 == (-11#4 * -4#4);
output1{test++} = 55#4 == (11#4 *5#4);
output1{test++} = -55#4 == (-11#4 *5#4);
output1{test++} = -55#4 == (11#4 * -5#4);
output1{test++} = 55#4 == (-11#4 * -5#4);
output1{test++} = 66#4 == (11#4 *6#4);
output1{test++} = -66#4 == (-11#4 *6#4);
output1{test++} = -66#4 == (11#4 * -6#4);
output1{test++} = 66#4 == (-11#4 * -6#4);
output1{test++} = 77#4 == (11#4 *7#4);
output1{test++} = -77#4 == (-11#4 *7#4);
output1{test++} = -77#4 == (11#4 * -7#4);
output1{test++} = 77#4 == (-11#4 * -7#4);
output1{test++} = 88#4 == (11#4 *8#4);
output1{test++} = -88#4 == (-11#4 *8#4);
output1{test++} = -88#4 == (11#4 * -8#4);
output1{test++} = 88#4 == (-11#4 * -8#4);
output1{test++} = 99#4 == (11#4 *9#4);
output1{test++} = -99#4 == (-11#4 *9#4);
output1{test++} = -99#4 == (11#4 * -9#4);
output1{test++} = 99#4 == (-11#4 * -9#4);
output1{test++} = 110#4 == (11#4 *10#4);
output1{test++} = -110#4 == (-11#4 *10#4);
output1{test++} = -110#4 == (11#4 * -10#4);
output1{test++} = 110#4 == (-11#4 * -10#4);
output1{test++} = 121#4 == (11#4 *11#4);
output1{test++} = -121#4 == (-11#4 *11#4);
output1{test++} = -121#4 == (11#4 * -11#4);
output1{test++} = 121#4 == (-11#4 * -11#4);
output1{test++} = 132#4 == (11#4 *12#4);
output1{test++} = -132#4 == (-11#4 *12#4);
output1{test++} = -132#4 == (11#4 * -12#4);
output1{test++} = 132#4 == (-11#4 * -12#4);
output1{test++} = 143#4 == (11#4 *13#4);
output1{test++} = -143#4 == (-11#4 *13#4);
output1{test++} = -143#4 == (11#4 * -13#4);
output1{test++} = 143#4 == (-11#4 * -13#4);
output1{test++} = 154#4 == (11#4 *14#4);
output1{test++} = -154#4 == (-11#4 *14#4);
output1{test++} = -154#4 == (11#4 * -14#4);
output1{test++} = 154#4 == (-11#4 * -14#4);
output1{test++} = 165#4 == (11#4 *15#4);
output1{test++} = -165#4 == (-11#4 *15#4);
output1{test++} = -165#4 == (11#4 * -15#4);
output1{test++} = 165#4 == (-11#4 * -15#4);
output1{test++} = 0#4 == (12#4 *0#4);
output1{test++} = 0#4 == (-12#4 *0#4);
output1{test++} = 0#4 == (12#4 * -0#4);
output1{test++} = 0#4 == (-12#4 * -0#4);
output1{test++} = 12#4 == (12#4 *1#4);
output1{test++} = -12#4 == (-12#4 *1#4);
output1{test++} = -12#4 == (12#4 * -1#4);
output1{test++} = 12#4 == (-12#4 * -1#4);
output1{test++} = 24#4 == (12#4 *2#4);
output1{test++} = -24#4 == (-12#4 *2#4);
output1{test++} = -24#4 == (12#4 * -2#4);
output1{test++} = 24#4 == (-12#4 * -2#4);
output1{test++} = 36#4 == (12#4 *3#4);
output1{test++} = -36#4 == (-12#4 *3#4);
output1{test++} = -36#4 == (12#4 * -3#4);
output1{test++} = 36#4 == (-12#4 * -3#4);
output1{test++} = 48#4 == (12#4 *4#4);
output1{test++} = -48#4 == (-12#4 *4#4);
output1{test++} = -48#4 == (12#4 * -4#4);
output1{test++} = 48#4 == (-12#4 * -4#4);
output1{test++} = 60#4 == (12#4 *5#4);
output1{test++} = -60#4 == (-12#4 *5#4);
output1{test++} = -60#4 == (12#4 * -5#4);
output1{test++} = 60#4 == (-12#4 * -5#4);
output1{test++} = 72#4 == (12#4 *6#4);
output1{test++} = -72#4 == (-12#4 *6#4);
output1{test++} = -72#4 == (12#4 * -6#4);
output1{test++} = 72#4 == (-12#4 * -6#4);
output1{test++} = 84#4 == (12#4 *7#4);
output1{test++} = -84#4 == (-12#4 *7#4);
output1{test++} = -84#4 == (12#4 * -7#4);
output1{test++} = 84#4 == (-12#4 * -7#4);
output1{test++} = 96#4 == (12#4 *8#4);
output1{test++} = -96#4 == (-12#4 *8#4);
output1{test++} = -96#4 == (12#4 * -8#4);
output1{test++} = 96#4 == (-12#4 * -8#4);
output1{test++} = 108#4 == (12#4 *9#4);
output1{test++} = -108#4 == (-12#4 *9#4);
output1{test++} = -108#4 == (12#4 * -9#4);
output1{test++} = 108#4 == (-12#4 * -9#4);
output1{test++} = 120#4 == (12#4 *10#4);
output1{test++} = -120#4 == (-12#4 *10#4);
output1{test++} = -120#4 == (12#4 * -10#4);
output1{test++} = 120#4 == (-12#4 * -10#4);
output1{test++} = 132#4 == (12#4 *11#4);
output1{test++} = -132#4 == (-12#4 *11#4);
output1{test++} = -132#4 == (12#4 * -11#4);
output1{test++} = 132#4 == (-12#4 * -11#4);
output1{test++} = 144#4 == (12#4 *12#4);
output1{test++} = -144#4 == (-12#4 *12#4);
output1{test++} = -144#4 == (12#4 * -12#4);
output1{test++} = 144#4 == (-12#4 * -12#4);
output1{test++} = 156#4 == (12#4 *13#4);
output1{test++} = -156#4 == (-12#4 *13#4);
output1{test++} = -156#4 == (12#4 * -13#4);
output1{test++} = 156#4 == (-12#4 * -13#4);
output1{test++} = 168#4 == (12#4 *14#4);
output1{test++} = -168#4 == (-12#4 *14#4);
output1{test++} = -168#4 == (12#4 * -14#4);
output1{test++} = 168#4 == (-12#4 * -14#4);
output1{test++} = 180#4 == (12#4 *15#4);
output1{test++} = -180#4 == (-12#4 *15#4);
output1{test++} = -180#4 == (12#4 * -15#4);
output1{test++} = 180#4 == (-12#4 * -15#4);
output1{test++} = 0#4 == (13#4 *0#4);
output1{test++} = 0#4 == (-13#4 *0#4);
output1{test++} = 0#4 == (13#4 * -0#4);
output1{test++} = 0#4 == (-13#4 * -0#4);
output1{test++} = 13#4 == (13#4 *1#4);
output1{test++} = -13#4 == (-13#4 *1#4);
output1{test++} = -13#4 == (13#4 * -1#4);
output1{test++} = 13#4 == (-13#4 * -1#4);
output1{test++} = 26#4 == (13#4 *2#4);
output1{test++} = -26#4 == (-13#4 *2#4);
output1{test++} = -26#4 == (13#4 * -2#4);
output1{test++} = 26#4 == (-13#4 * -2#4);
output1{test++} = 39#4 == (13#4 *3#4);
output1{test++} = -39#4 == (-13#4 *3#4);
output1{test++} = -39#4 == (13#4 * -3#4);
output1{test++} = 39#4 == (-13#4 * -3#4);
output1{test++} = 52#4 == (13#4 *4#4);
output1{test++} = -52#4 == (-13#4 *4#4);
output1{test++} = -52#4 == (13#4 * -4#4);
output1{test++} = 52#4 == (-13#4 * -4#4);
output1{test++} = 65#4 == (13#4 *5#4);
output1{test++} = -65#4 == (-13#4 *5#4);
output1{test++} = -65#4 == (13#4 * -5#4);
output1{test++} = 65#4 == (-13#4 * -5#4);
output1{test++} = 78#4 == (13#4 *6#4);
output1{test++} = -78#4 == (-13#4 *6#4);
output1{test++} = -78#4 == (13#4 * -6#4);
output1{test++} = 78#4 == (-13#4 * -6#4);
output1{test++} = 91#4 == (13#4 *7#4);
output1{test++} = -91#4 == (-13#4 *7#4);
output1{test++} = -91#4 == (13#4 * -7#4);
output1{test++} = 91#4 == (-13#4 * -7#4);
output1{test++} = 104#4 == (13#4 *8#4);
output1{test++} = -104#4 == (-13#4 *8#4);
output1{test++} = -104#4 == (13#4 * -8#4);
output1{test++} = 104#4 == (-13#4 * -8#4);
output1{test++} = 117#4 == (13#4 *9#4);
output1{test++} = -117#4 == (-13#4 *9#4);
output1{test++} = -117#4 == (13#4 * -9#4);
output1{test++} = 117#4 == (-13#4 * -9#4);
output1{test++} = 130#4 == (13#4 *10#4);
output1{test++} = -130#4 == (-13#4 *10#4);
output1{test++} = -130#4 == (13#4 * -10#4);
output1{test++} = 130#4 == (-13#4 * -10#4);
output1{test++} = 143#4 == (13#4 *11#4);
output1{test++} = -143#4 == (-13#4 *11#4);
output1{test++} = -143#4 == (13#4 * -11#4);
output1{test++} = 143#4 == (-13#4 * -11#4);
output1{test++} = 156#4 == (13#4 *12#4);
output1{test++} = -156#4 == (-13#4 *12#4);
output1{test++} = -156#4 == (13#4 * -12#4);
output1{test++} = 156#4 == (-13#4 * -12#4);
output1{test++} = 169#4 == (13#4 *13#4);
output1{test++} = -169#4 == (-13#4 *13#4);
output1{test++} = -169#4 == (13#4 * -13#4);
output1{test++} = 169#4 == (-13#4 * -13#4);
output1{test++} = 182#4 == (13#4 *14#4);
output1{test++} = -182#4 == (-13#4 *14#4);
output1{test++} = -182#4 == (13#4 * -14#4);
output1{test++} = 182#4 == (-13#4 * -14#4);
output1{test++} = 195#4 == (13#4 *15#4);
output1{test++} = -195#4 == (-13#4 *15#4);
output1{test++} = -195#4 == (13#4 * -15#4);
output1{test++} = 195#4 == (-13#4 * -15#4);
output1{test++} = 0#4 == (14#4 *0#4);
output1{test++} = 0#4 == (-14#4 *0#4);
output1{test++} = 0#4 == (14#4 * -0#4);
output1{test++} = 0#4 == (-14#4 * -0#4);
output1{test++} = 14#4 == (14#4 *1#4);
output1{test++} = -14#4 == (-14#4 *1#4);
output1{test++} = -14#4 == (14#4 * -1#4);
output1{test++} = 14#4 == (-14#4 * -1#4);
output1{test++} = 28#4 == (14#4 *2#4);
output1{test++} = -28#4 == (-14#4 *2#4);
output1{test++} = -28#4 == (14#4 * -2#4);
output1{test++} = 28#4 == (-14#4 * -2#4);
output1{test++} = 42#4 == (14#4 *3#4);
output1{test++} = -42#4 == (-14#4 *3#4);
output1{test++} = -42#4 == (14#4 * -3#4);
output1{test++} = 42#4 == (-14#4 * -3#4);
output1{test++} = 56#4 == (14#4 *4#4);
output1{test++} = -56#4 == (-14#4 *4#4);
output1{test++} = -56#4 == (14#4 * -4#4);
output1{test++} = 56#4 == (-14#4 * -4#4);
output1{test++} = 70#4 == (14#4 *5#4);
output1{test++} = -70#4 == (-14#4 *5#4);
output1{test++} = -70#4 == (14#4 * -5#4);
output1{test++} = 70#4 == (-14#4 * -5#4);
output1{test++} = 84#4 == (14#4 *6#4);
output1{test++} = -84#4 == (-14#4 *6#4);
output1{test++} = -84#4 == (14#4 * -6#4);
output1{test++} = 84#4 == (-14#4 * -6#4);
output1{test++} = 98#4 == (14#4 *7#4);
output1{test++} = -98#4 == (-14#4 *7#4);
output1{test++} = -98#4 == (14#4 * -7#4);
output1{test++} = 98#4 == (-14#4 * -7#4);
output1{test++} = 112#4 == (14#4 *8#4);
output1{test++} = -112#4 == (-14#4 *8#4);
output1{test++} = -112#4 == (14#4 * -8#4);
output1{test++} = 112#4 == (-14#4 * -8#4);
output1{test++} = 126#4 == (14#4 *9#4);
output1{test++} = -126#4 == (-14#4 *9#4);
output1{test++} = -126#4 == (14#4 * -9#4);
output1{test++} = 126#4 == (-14#4 * -9#4);
output1{test++} = 140#4 == (14#4 *10#4);
output1{test++} = -140#4 == (-14#4 *10#4);
output1{test++} = -140#4 == (14#4 * -10#4);
output1{test++} = 140#4 == (-14#4 * -10#4);
output1{test++} = 154#4 == (14#4 *11#4);
output1{test++} = -154#4 == (-14#4 *11#4);
output1{test++} = -154#4 == (14#4 * -11#4);
output1{test++} = 154#4 == (-14#4 * -11#4);
output1{test++} = 168#4 == (14#4 *12#4);
output1{test++} = -168#4 == (-14#4 *12#4);
output1{test++} = -168#4 == (14#4 * -12#4);
output1{test++} = 168#4 == (-14#4 * -12#4);
output1{test++} = 182#4 == (14#4 *13#4);
output1{test++} = -182#4 == (-14#4 *13#4);
output1{test++} = -182#4 == (14#4 * -13#4);
output1{test++} = 182#4 == (-14#4 * -13#4);
output1{test++} = 196#4 == (14#4 *14#4);
output1{test++} = -196#4 == (-14#4 *14#4);
output1{test++} = -196#4 == (14#4 * -14#4);
output1{test++} = 196#4 == (-14#4 * -14#4);
output1{test++} = 210#4 == (14#4 *15#4);
output1{test++} = -210#4 == (-14#4 *15#4);
output1{test++} = -210#4 == (14#4 * -15#4);
output1{test++} = 210#4 == (-14#4 * -15#4);
output1{test++} = 0#4 == (15#4 *0#4);
output1{test++} = 0#4 == (-15#4 *0#4);
output1{test++} = 0#4 == (15#4 * -0#4);
output1{test++} = 0#4 == (-15#4 * -0#4);
output1{test++} = 15#4 == (15#4 *1#4);
output1{test++} = -15#4 == (-15#4 *1#4);
output1{test++} = -15#4 == (15#4 * -1#4);
output1{test++} = 15#4 == (-15#4 * -1#4);
output1{test++} = 30#4 == (15#4 *2#4);
output1{test++} = -30#4 == (-15#4 *2#4);
output1{test++} = -30#4 == (15#4 * -2#4);
output1{test++} = 30#4 == (-15#4 * -2#4);
output1{test++} = 45#4 == (15#4 *3#4);
output1{test++} = -45#4 == (-15#4 *3#4);
output1{test++} = -45#4 == (15#4 * -3#4);
output1{test++} = 45#4 == (-15#4 * -3#4);
output1{test++} = 60#4 == (15#4 *4#4);
output1{test++} = -60#4 == (-15#4 *4#4);
output1{test++} = -60#4 == (15#4 * -4#4);
output1{test++} = 60#4 == (-15#4 * -4#4);
output1{test++} = 75#4 == (15#4 *5#4);
output1{test++} = -75#4 == (-15#4 *5#4);
output1{test++} = -75#4 == (15#4 * -5#4);
output1{test++} = 75#4 == (-15#4 * -5#4);
output1{test++} = 90#4 == (15#4 *6#4);
output1{test++} = -90#4 == (-15#4 *6#4);
output1{test++} = -90#4 == (15#4 * -6#4);
output1{test++} = 90#4 == (-15#4 * -6#4);
output1{test++} = 105#4 == (15#4 *7#4);
output1{test++} = -105#4 == (-15#4 *7#4);
output1{test++} = -105#4 == (15#4 * -7#4);
output1{test++} = 105#4 == (-15#4 * -7#4);
output1{test++} = 120#4 == (15#4 *8#4);
output1{test++} = -120#4 == (-15#4 *8#4);
output1{test++} = -120#4 == (15#4 * -8#4);
output1{test++} = 120#4 == (-15#4 * -8#4);
output1{test++} = 135#4 == (15#4 *9#4);
output1{test++} = -135#4 == (-15#4 *9#4);
output1{test++} = -135#4 == (15#4 * -9#4);
output1{test++} = 135#4 == (-15#4 * -9#4);
output1{test++} = 150#4 == (15#4 *10#4);
output1{test++} = -150#4 == (-15#4 *10#4);
output1{test++} = -150#4 == (15#4 * -10#4);
output1{test++} = 150#4 == (-15#4 * -10#4);
output1{test++} = 165#4 == (15#4 *11#4);
output1{test++} = -165#4 == (-15#4 *11#4);
output1{test++} = -165#4 == (15#4 * -11#4);
output1{test++} = 165#4 == (-15#4 * -11#4);
output1{test++} = 180#4 == (15#4 *12#4);
output1{test++} = -180#4 == (-15#4 *12#4);
output1{test++} = -180#4 == (15#4 * -12#4);
output1{test++} = 180#4 == (-15#4 * -12#4);
output1{test++} = 195#4 == (15#4 *13#4);
output1{test++} = -195#4 == (-15#4 *13#4);
output1{test++} = -195#4 == (15#4 * -13#4);
output1{test++} = 195#4 == (-15#4 * -13#4);
output1{test++} = 210#4 == (15#4 *14#4);
output1{test++} = -210#4 == (-15#4 *14#4);
output1{test++} = -210#4 == (15#4 * -14#4);
output1{test++} = 210#4 == (-15#4 * -14#4);
output1{test++} = 225#4 == (15#4 *15#4);
output1{test++} = -225#4 == (-15#4 *15#4);
output1{test++} = -225#4 == (15#4 * -15#4);
output1{test++} = 225#4 == (-15#4 * -15#4);


output1{test++} = 0#4 == (0#4 +0#4);
output1{test++} = 0#4 == (-0#4 +0#4);
output1{test++} = 0#4 == (0#4  + -0#4);
output1{test++} = 0#4 == (-0#4  + -0#4);
output1{test++} = 1#4 == (0#4 +1#4);
output1{test++} = 1#4 == (-0#4 +1#4);
output1{test++} = -1#4 == (0#4  + -1#4);
output1{test++} = -1#4 == (-0#4  + -1#4);
output1{test++} = 2#4 == (0#4 +2#4);
output1{test++} = 2#4 == (-0#4 +2#4);
output1{test++} = -2#4 == (0#4  + -2#4);
output1{test++} = -2#4 == (-0#4  + -2#4);
output1{test++} = 3#4 == (0#4 +3#4);
output1{test++} = 3#4 == (-0#4 +3#4);
output1{test++} = -3#4 == (0#4  + -3#4);
output1{test++} = -3#4 == (-0#4  + -3#4);
output1{test++} = 4#4 == (0#4 +4#4);
output1{test++} = 4#4 == (-0#4 +4#4);
output1{test++} = -4#4 == (0#4  + -4#4);
output1{test++} = -4#4 == (-0#4  + -4#4);
output1{test++} = 5#4 == (0#4 +5#4);
output1{test++} = 5#4 == (-0#4 +5#4);
output1{test++} = -5#4 == (0#4  + -5#4);
output1{test++} = -5#4 == (-0#4  + -5#4);
output1{test++} = 6#4 == (0#4 +6#4);
output1{test++} = 6#4 == (-0#4 +6#4);
output1{test++} = -6#4 == (0#4  + -6#4);
output1{test++} = -6#4 == (-0#4  + -6#4);
output1{test++} = 7#4 == (0#4 +7#4);
output1{test++} = 7#4 == (-0#4 +7#4);
output1{test++} = -7#4 == (0#4  + -7#4);
output1{test++} = -7#4 == (-0#4  + -7#4);
output1{test++} = 8#4 == (0#4 +8#4);
output1{test++} = 8#4 == (-0#4 +8#4);
output1{test++} = -8#4 == (0#4  + -8#4);
output1{test++} = -8#4 == (-0#4  + -8#4);
output1{test++} = 9#4 == (0#4 +9#4);
output1{test++} = 9#4 == (-0#4 +9#4);
output1{test++} = -9#4 == (0#4  + -9#4);
output1{test++} = -9#4 == (-0#4  + -9#4);
output1{test++} = 10#4 == (0#4 +10#4);
output1{test++} = 10#4 == (-0#4 +10#4);
output1{test++} = -10#4 == (0#4  + -10#4);
output1{test++} = -10#4 == (-0#4  + -10#4);
output1{test++} = 11#4 == (0#4 +11#4);
output1{test++} = 11#4 == (-0#4 +11#4);
output1{test++} = -11#4 == (0#4  + -11#4);
output1{test++} = -11#4 == (-0#4  + -11#4);
output1{test++} = 12#4 == (0#4 +12#4);
output1{test++} = 12#4 == (-0#4 +12#4);
output1{test++} = -12#4 == (0#4  + -12#4);
output1{test++} = -12#4 == (-0#4  + -12#4);
output1{test++} = 13#4 == (0#4 +13#4);
output1{test++} = 13#4 == (-0#4 +13#4);
output1{test++} = -13#4 == (0#4  + -13#4);
output1{test++} = -13#4 == (-0#4  + -13#4);
output1{test++} = 14#4 == (0#4 +14#4);
output1{test++} = 14#4 == (-0#4 +14#4);
output1{test++} = -14#4 == (0#4  + -14#4);
output1{test++} = -14#4 == (-0#4  + -14#4);
output1{test++} = 15#4 == (0#4 +15#4);
output1{test++} = 15#4 == (-0#4 +15#4);
output1{test++} = -15#4 == (0#4  + -15#4);
output1{test++} = -15#4 == (-0#4  + -15#4);
output1{test++} = 1#4 == (1#4 +0#4);
output1{test++} = -1#4 == (-1#4 +0#4);
output1{test++} = 1#4 == (1#4  + -0#4);
output1{test++} = -1#4 == (-1#4  + -0#4);
output1{test++} = 2#4 == (1#4 +1#4);
output1{test++} = 0#4 == (-1#4 +1#4);
output1{test++} = 0#4 == (1#4  + -1#4);
output1{test++} = -2#4 == (-1#4  + -1#4);
output1{test++} = 3#4 == (1#4 +2#4);
output1{test++} = 1#4 == (-1#4 +2#4);
output1{test++} = -1#4 == (1#4  + -2#4);
output1{test++} = -3#4 == (-1#4  + -2#4);
output1{test++} = 4#4 == (1#4 +3#4);
output1{test++} = 2#4 == (-1#4 +3#4);
output1{test++} = -2#4 == (1#4  + -3#4);
output1{test++} = -4#4 == (-1#4  + -3#4);
output1{test++} = 5#4 == (1#4 +4#4);
output1{test++} = 3#4 == (-1#4 +4#4);
output1{test++} = -3#4 == (1#4  + -4#4);
output1{test++} = -5#4 == (-1#4  + -4#4);
output1{test++} = 6#4 == (1#4 +5#4);
output1{test++} = 4#4 == (-1#4 +5#4);
output1{test++} = -4#4 == (1#4  + -5#4);
output1{test++} = -6#4 == (-1#4  + -5#4);
output1{test++} = 7#4 == (1#4 +6#4);
output1{test++} = 5#4 == (-1#4 +6#4);
output1{test++} = -5#4 == (1#4  + -6#4);
output1{test++} = -7#4 == (-1#4  + -6#4);
output1{test++} = 8#4 == (1#4 +7#4);
output1{test++} = 6#4 == (-1#4 +7#4);
output1{test++} = -6#4 == (1#4  + -7#4);
output1{test++} = -8#4 == (-1#4  + -7#4);
output1{test++} = 9#4 == (1#4 +8#4);
output1{test++} = 7#4 == (-1#4 +8#4);
output1{test++} = -7#4 == (1#4  + -8#4);
output1{test++} = -9#4 == (-1#4  + -8#4);
output1{test++} = 10#4 == (1#4 +9#4);
output1{test++} = 8#4 == (-1#4 +9#4);
output1{test++} = -8#4 == (1#4  + -9#4);
output1{test++} = -10#4 == (-1#4  + -9#4);
output1{test++} = 11#4 == (1#4 +10#4);
output1{test++} = 9#4 == (-1#4 +10#4);
output1{test++} = -9#4 == (1#4  + -10#4);
output1{test++} = -11#4 == (-1#4  + -10#4);
output1{test++} = 12#4 == (1#4 +11#4);
output1{test++} = 10#4 == (-1#4 +11#4);
output1{test++} = -10#4 == (1#4  + -11#4);
output1{test++} = -12#4 == (-1#4  + -11#4);
output1{test++} = 13#4 == (1#4 +12#4);
output1{test++} = 11#4 == (-1#4 +12#4);
output1{test++} = -11#4 == (1#4  + -12#4);
output1{test++} = -13#4 == (-1#4  + -12#4);
output1{test++} = 14#4 == (1#4 +13#4);
output1{test++} = 12#4 == (-1#4 +13#4);
output1{test++} = -12#4 == (1#4  + -13#4);
output1{test++} = -14#4 == (-1#4  + -13#4);
output1{test++} = 15#4 == (1#4 +14#4);
output1{test++} = 13#4 == (-1#4 +14#4);
output1{test++} = -13#4 == (1#4  + -14#4);
output1{test++} = -15#4 == (-1#4  + -14#4);
output1{test++} = 16#4 == (1#4 +15#4);
output1{test++} = 14#4 == (-1#4 +15#4);
output1{test++} = -14#4 == (1#4  + -15#4);
output1{test++} = -16#4 == (-1#4  + -15#4);
output1{test++} = 2#4 == (2#4 +0#4);
output1{test++} = -2#4 == (-2#4 +0#4);
output1{test++} = 2#4 == (2#4  + -0#4);
output1{test++} = -2#4 == (-2#4  + -0#4);
output1{test++} = 3#4 == (2#4 +1#4);
output1{test++} = -1#4 == (-2#4 +1#4);
output1{test++} = 1#4 == (2#4  + -1#4);
output1{test++} = -3#4 == (-2#4  + -1#4);
output1{test++} = 4#4 == (2#4 +2#4);
output1{test++} = 0#4 == (-2#4 +2#4);
output1{test++} = 0#4 == (2#4  + -2#4);
output1{test++} = -4#4 == (-2#4  + -2#4);
output1{test++} = 5#4 == (2#4 +3#4);
output1{test++} = 1#4 == (-2#4 +3#4);
output1{test++} = -1#4 == (2#4  + -3#4);
output1{test++} = -5#4 == (-2#4  + -3#4);
output1{test++} = 6#4 == (2#4 +4#4);
output1{test++} = 2#4 == (-2#4 +4#4);
output1{test++} = -2#4 == (2#4  + -4#4);
output1{test++} = -6#4 == (-2#4  + -4#4);
output1{test++} = 7#4 == (2#4 +5#4);
output1{test++} = 3#4 == (-2#4 +5#4);
output1{test++} = -3#4 == (2#4  + -5#4);
output1{test++} = -7#4 == (-2#4  + -5#4);
output1{test++} = 8#4 == (2#4 +6#4);
output1{test++} = 4#4 == (-2#4 +6#4);
output1{test++} = -4#4 == (2#4  + -6#4);
output1{test++} = -8#4 == (-2#4  + -6#4);
output1{test++} = 9#4 == (2#4 +7#4);
output1{test++} = 5#4 == (-2#4 +7#4);
output1{test++} = -5#4 == (2#4  + -7#4);
output1{test++} = -9#4 == (-2#4  + -7#4);
output1{test++} = 10#4 == (2#4 +8#4);
output1{test++} = 6#4 == (-2#4 +8#4);
output1{test++} = -6#4 == (2#4  + -8#4);
output1{test++} = -10#4 == (-2#4  + -8#4);
output1{test++} = 11#4 == (2#4 +9#4);
output1{test++} = 7#4 == (-2#4 +9#4);
output1{test++} = -7#4 == (2#4  + -9#4);
output1{test++} = -11#4 == (-2#4  + -9#4);
output1{test++} = 12#4 == (2#4 +10#4);
output1{test++} = 8#4 == (-2#4 +10#4);
output1{test++} = -8#4 == (2#4  + -10#4);
output1{test++} = -12#4 == (-2#4  + -10#4);
output1{test++} = 13#4 == (2#4 +11#4);
output1{test++} = 9#4 == (-2#4 +11#4);
output1{test++} = -9#4 == (2#4  + -11#4);
output1{test++} = -13#4 == (-2#4  + -11#4);
output1{test++} = 14#4 == (2#4 +12#4);
output1{test++} = 10#4 == (-2#4 +12#4);
output1{test++} = -10#4 == (2#4  + -12#4);
output1{test++} = -14#4 == (-2#4  + -12#4);
output1{test++} = 15#4 == (2#4 +13#4);
output1{test++} = 11#4 == (-2#4 +13#4);
output1{test++} = -11#4 == (2#4  + -13#4);
output1{test++} = -15#4 == (-2#4  + -13#4);
output1{test++} = 16#4 == (2#4 +14#4);
output1{test++} = 12#4 == (-2#4 +14#4);
output1{test++} = -12#4 == (2#4  + -14#4);
output1{test++} = -16#4 == (-2#4  + -14#4);
output1{test++} = 17#4 == (2#4 +15#4);
output1{test++} = 13#4 == (-2#4 +15#4);
output1{test++} = -13#4 == (2#4  + -15#4);
output1{test++} = -17#4 == (-2#4  + -15#4);
output1{test++} = 3#4 == (3#4 +0#4);
output1{test++} = -3#4 == (-3#4 +0#4);
output1{test++} = 3#4 == (3#4  + -0#4);
output1{test++} = -3#4 == (-3#4  + -0#4);
output1{test++} = 4#4 == (3#4 +1#4);
output1{test++} = -2#4 == (-3#4 +1#4);
output1{test++} = 2#4 == (3#4  + -1#4);
output1{test++} = -4#4 == (-3#4  + -1#4);
output1{test++} = 5#4 == (3#4 +2#4);
output1{test++} = -1#4 == (-3#4 +2#4);
output1{test++} = 1#4 == (3#4  + -2#4);
output1{test++} = -5#4 == (-3#4  + -2#4);
output1{test++} = 6#4 == (3#4 +3#4);
output1{test++} = 0#4 == (-3#4 +3#4);
output1{test++} = 0#4 == (3#4  + -3#4);
output1{test++} = -6#4 == (-3#4  + -3#4);
output1{test++} = 7#4 == (3#4 +4#4);
output1{test++} = 1#4 == (-3#4 +4#4);
output1{test++} = -1#4 == (3#4  + -4#4);
output1{test++} = -7#4 == (-3#4  + -4#4);
output1{test++} = 8#4 == (3#4 +5#4);
output1{test++} = 2#4 == (-3#4 +5#4);
output1{test++} = -2#4 == (3#4  + -5#4);
output1{test++} = -8#4 == (-3#4  + -5#4);
output1{test++} = 9#4 == (3#4 +6#4);
output1{test++} = 3#4 == (-3#4 +6#4);
output1{test++} = -3#4 == (3#4  + -6#4);
output1{test++} = -9#4 == (-3#4  + -6#4);
output1{test++} = 10#4 == (3#4 +7#4);
output1{test++} = 4#4 == (-3#4 +7#4);
output1{test++} = -4#4 == (3#4  + -7#4);
output1{test++} = -10#4 == (-3#4  + -7#4);
output1{test++} = 11#4 == (3#4 +8#4);
output1{test++} = 5#4 == (-3#4 +8#4);
output1{test++} = -5#4 == (3#4  + -8#4);
output1{test++} = -11#4 == (-3#4  + -8#4);
output1{test++} = 12#4 == (3#4 +9#4);
output1{test++} = 6#4 == (-3#4 +9#4);
output1{test++} = -6#4 == (3#4  + -9#4);
output1{test++} = -12#4 == (-3#4  + -9#4);
output1{test++} = 13#4 == (3#4 +10#4);
output1{test++} = 7#4 == (-3#4 +10#4);
output1{test++} = -7#4 == (3#4  + -10#4);
output1{test++} = -13#4 == (-3#4  + -10#4);
output1{test++} = 14#4 == (3#4 +11#4);
output1{test++} = 8#4 == (-3#4 +11#4);
output1{test++} = -8#4 == (3#4  + -11#4);
output1{test++} = -14#4 == (-3#4  + -11#4);
output1{test++} = 15#4 == (3#4 +12#4);
output1{test++} = 9#4 == (-3#4 +12#4);
output1{test++} = -9#4 == (3#4  + -12#4);
output1{test++} = -15#4 == (-3#4  + -12#4);
output1{test++} = 16#4 == (3#4 +13#4);
output1{test++} = 10#4 == (-3#4 +13#4);
output1{test++} = -10#4 == (3#4  + -13#4);
output1{test++} = -16#4 == (-3#4  + -13#4);
output1{test++} = 17#4 == (3#4 +14#4);
output1{test++} = 11#4 == (-3#4 +14#4);
output1{test++} = -11#4 == (3#4  + -14#4);
output1{test++} = -17#4 == (-3#4  + -14#4);
output1{test++} = 18#4 == (3#4 +15#4);
output1{test++} = 12#4 == (-3#4 +15#4);
output1{test++} = -12#4 == (3#4  + -15#4);
output1{test++} = -18#4 == (-3#4  + -15#4);
output1{test++} = 4#4 == (4#4 +0#4);
output1{test++} = -4#4 == (-4#4 +0#4);
output1{test++} = 4#4 == (4#4  + -0#4);
output1{test++} = -4#4 == (-4#4  + -0#4);
output1{test++} = 5#4 == (4#4 +1#4);
output1{test++} = -3#4 == (-4#4 +1#4);
output1{test++} = 3#4 == (4#4  + -1#4);
output1{test++} = -5#4 == (-4#4  + -1#4);
output1{test++} = 6#4 == (4#4 +2#4);
output1{test++} = -2#4 == (-4#4 +2#4);
output1{test++} = 2#4 == (4#4  + -2#4);
output1{test++} = -6#4 == (-4#4  + -2#4);
output1{test++} = 7#4 == (4#4 +3#4);
output1{test++} = -1#4 == (-4#4 +3#4);
output1{test++} = 1#4 == (4#4  + -3#4);
output1{test++} = -7#4 == (-4#4  + -3#4);
output1{test++} = 8#4 == (4#4 +4#4);
output1{test++} = 0#4 == (-4#4 +4#4);
output1{test++} = 0#4 == (4#4  + -4#4);
output1{test++} = -8#4 == (-4#4  + -4#4);
output1{test++} = 9#4 == (4#4 +5#4);
output1{test++} = 1#4 == (-4#4 +5#4);
output1{test++} = -1#4 == (4#4  + -5#4);
output1{test++} = -9#4 == (-4#4  + -5#4);
output1{test++} = 10#4 == (4#4 +6#4);
output1{test++} = 2#4 == (-4#4 +6#4);
output1{test++} = -2#4 == (4#4  + -6#4);
output1{test++} = -10#4 == (-4#4  + -6#4);
output1{test++} = 11#4 == (4#4 +7#4);
output1{test++} = 3#4 == (-4#4 +7#4);
output1{test++} = -3#4 == (4#4  + -7#4);
output1{test++} = -11#4 == (-4#4  + -7#4);
output1{test++} = 12#4 == (4#4 +8#4);
output1{test++} = 4#4 == (-4#4 +8#4);
output1{test++} = -4#4 == (4#4  + -8#4);
output1{test++} = -12#4 == (-4#4  + -8#4);
output1{test++} = 13#4 == (4#4 +9#4);
output1{test++} = 5#4 == (-4#4 +9#4);
output1{test++} = -5#4 == (4#4  + -9#4);
output1{test++} = -13#4 == (-4#4  + -9#4);
output1{test++} = 14#4 == (4#4 +10#4);
output1{test++} = 6#4 == (-4#4 +10#4);
output1{test++} = -6#4 == (4#4  + -10#4);
output1{test++} = -14#4 == (-4#4  + -10#4);
output1{test++} = 15#4 == (4#4 +11#4);
output1{test++} = 7#4 == (-4#4 +11#4);
output1{test++} = -7#4 == (4#4  + -11#4);
output1{test++} = -15#4 == (-4#4  + -11#4);
output1{test++} = 16#4 == (4#4 +12#4);
output1{test++} = 8#4 == (-4#4 +12#4);
output1{test++} = -8#4 == (4#4  + -12#4);
output1{test++} = -16#4 == (-4#4  + -12#4);
output1{test++} = 17#4 == (4#4 +13#4);
output1{test++} = 9#4 == (-4#4 +13#4);
output1{test++} = -9#4 == (4#4  + -13#4);
output1{test++} = -17#4 == (-4#4  + -13#4);
output1{test++} = 18#4 == (4#4 +14#4);
output1{test++} = 10#4 == (-4#4 +14#4);
output1{test++} = -10#4 == (4#4  + -14#4);
output1{test++} = -18#4 == (-4#4  + -14#4);
output1{test++} = 19#4 == (4#4 +15#4);
output1{test++} = 11#4 == (-4#4 +15#4);
output1{test++} = -11#4 == (4#4  + -15#4);
output1{test++} = -19#4 == (-4#4  + -15#4);
output1{test++} = 5#4 == (5#4 +0#4);
output1{test++} = -5#4 == (-5#4 +0#4);
output1{test++} = 5#4 == (5#4  + -0#4);
output1{test++} = -5#4 == (-5#4  + -0#4);
output1{test++} = 6#4 == (5#4 +1#4);
output1{test++} = -4#4 == (-5#4 +1#4);
output1{test++} = 4#4 == (5#4  + -1#4);
output1{test++} = -6#4 == (-5#4  + -1#4);
output1{test++} = 7#4 == (5#4 +2#4);
output1{test++} = -3#4 == (-5#4 +2#4);
output1{test++} = 3#4 == (5#4  + -2#4);
output1{test++} = -7#4 == (-5#4  + -2#4);
output1{test++} = 8#4 == (5#4 +3#4);
output1{test++} = -2#4 == (-5#4 +3#4);
output1{test++} = 2#4 == (5#4  + -3#4);
output1{test++} = -8#4 == (-5#4  + -3#4);
output1{test++} = 9#4 == (5#4 +4#4);
output1{test++} = -1#4 == (-5#4 +4#4);
output1{test++} = 1#4 == (5#4  + -4#4);
output1{test++} = -9#4 == (-5#4  + -4#4);
output1{test++} = 10#4 == (5#4 +5#4);
output1{test++} = 0#4 == (-5#4 +5#4);
output1{test++} = 0#4 == (5#4  + -5#4);
output1{test++} = -10#4 == (-5#4  + -5#4);
output1{test++} = 11#4 == (5#4 +6#4);
output1{test++} = 1#4 == (-5#4 +6#4);
output1{test++} = -1#4 == (5#4  + -6#4);
output1{test++} = -11#4 == (-5#4  + -6#4);
output1{test++} = 12#4 == (5#4 +7#4);
output1{test++} = 2#4 == (-5#4 +7#4);
output1{test++} = -2#4 == (5#4  + -7#4);
output1{test++} = -12#4 == (-5#4  + -7#4);
output1{test++} = 13#4 == (5#4 +8#4);
output1{test++} = 3#4 == (-5#4 +8#4);
output1{test++} = -3#4 == (5#4  + -8#4);
output1{test++} = -13#4 == (-5#4  + -8#4);
output1{test++} = 14#4 == (5#4 +9#4);
output1{test++} = 4#4 == (-5#4 +9#4);
output1{test++} = -4#4 == (5#4  + -9#4);
output1{test++} = -14#4 == (-5#4  + -9#4);
output1{test++} = 15#4 == (5#4 +10#4);
output1{test++} = 5#4 == (-5#4 +10#4);
output1{test++} = -5#4 == (5#4  + -10#4);
output1{test++} = -15#4 == (-5#4  + -10#4);
output1{test++} = 16#4 == (5#4 +11#4);
output1{test++} = 6#4 == (-5#4 +11#4);
output1{test++} = -6#4 == (5#4  + -11#4);
output1{test++} = -16#4 == (-5#4  + -11#4);
output1{test++} = 17#4 == (5#4 +12#4);
output1{test++} = 7#4 == (-5#4 +12#4);
output1{test++} = -7#4 == (5#4  + -12#4);
output1{test++} = -17#4 == (-5#4  + -12#4);
output1{test++} = 18#4 == (5#4 +13#4);
output1{test++} = 8#4 == (-5#4 +13#4);
output1{test++} = -8#4 == (5#4  + -13#4);
output1{test++} = -18#4 == (-5#4  + -13#4);
output1{test++} = 19#4 == (5#4 +14#4);
output1{test++} = 9#4 == (-5#4 +14#4);
output1{test++} = -9#4 == (5#4  + -14#4);
output1{test++} = -19#4 == (-5#4  + -14#4);
output1{test++} = 20#4 == (5#4 +15#4);
output1{test++} = 10#4 == (-5#4 +15#4);
output1{test++} = -10#4 == (5#4  + -15#4);
output1{test++} = -20#4 == (-5#4  + -15#4);
output1{test++} = 6#4 == (6#4 +0#4);
output1{test++} = -6#4 == (-6#4 +0#4);
output1{test++} = 6#4 == (6#4  + -0#4);
output1{test++} = -6#4 == (-6#4  + -0#4);
output1{test++} = 7#4 == (6#4 +1#4);
output1{test++} = -5#4 == (-6#4 +1#4);
output1{test++} = 5#4 == (6#4  + -1#4);
output1{test++} = -7#4 == (-6#4  + -1#4);
output1{test++} = 8#4 == (6#4 +2#4);
output1{test++} = -4#4 == (-6#4 +2#4);
output1{test++} = 4#4 == (6#4  + -2#4);
output1{test++} = -8#4 == (-6#4  + -2#4);
output1{test++} = 9#4 == (6#4 +3#4);
output1{test++} = -3#4 == (-6#4 +3#4);
output1{test++} = 3#4 == (6#4  + -3#4);
output1{test++} = -9#4 == (-6#4  + -3#4);
output1{test++} = 10#4 == (6#4 +4#4);
output1{test++} = -2#4 == (-6#4 +4#4);
output1{test++} = 2#4 == (6#4  + -4#4);
output1{test++} = -10#4 == (-6#4  + -4#4);
output1{test++} = 11#4 == (6#4 +5#4);
output1{test++} = -1#4 == (-6#4 +5#4);
output1{test++} = 1#4 == (6#4  + -5#4);
output1{test++} = -11#4 == (-6#4  + -5#4);
output1{test++} = 12#4 == (6#4 +6#4);
output1{test++} = 0#4 == (-6#4 +6#4);
output1{test++} = 0#4 == (6#4  + -6#4);
output1{test++} = -12#4 == (-6#4  + -6#4);
output1{test++} = 13#4 == (6#4 +7#4);
output1{test++} = 1#4 == (-6#4 +7#4);
output1{test++} = -1#4 == (6#4  + -7#4);
output1{test++} = -13#4 == (-6#4  + -7#4);
output1{test++} = 14#4 == (6#4 +8#4);
output1{test++} = 2#4 == (-6#4 +8#4);
output1{test++} = -2#4 == (6#4  + -8#4);
output1{test++} = -14#4 == (-6#4  + -8#4);
output1{test++} = 15#4 == (6#4 +9#4);
output1{test++} = 3#4 == (-6#4 +9#4);
output1{test++} = -3#4 == (6#4  + -9#4);
output1{test++} = -15#4 == (-6#4  + -9#4);
output1{test++} = 16#4 == (6#4 +10#4);
output1{test++} = 4#4 == (-6#4 +10#4);
output1{test++} = -4#4 == (6#4  + -10#4);
output1{test++} = -16#4 == (-6#4  + -10#4);
output1{test++} = 17#4 == (6#4 +11#4);
output1{test++} = 5#4 == (-6#4 +11#4);
output1{test++} = -5#4 == (6#4  + -11#4);
output1{test++} = -17#4 == (-6#4  + -11#4);
output1{test++} = 18#4 == (6#4 +12#4);
output1{test++} = 6#4 == (-6#4 +12#4);
output1{test++} = -6#4 == (6#4  + -12#4);
output1{test++} = -18#4 == (-6#4  + -12#4);
output1{test++} = 19#4 == (6#4 +13#4);
output1{test++} = 7#4 == (-6#4 +13#4);
output1{test++} = -7#4 == (6#4  + -13#4);
output1{test++} = -19#4 == (-6#4  + -13#4);
output1{test++} = 20#4 == (6#4 +14#4);
output1{test++} = 8#4 == (-6#4 +14#4);
output1{test++} = -8#4 == (6#4  + -14#4);
output1{test++} = -20#4 == (-6#4  + -14#4);
output1{test++} = 21#4 == (6#4 +15#4);
output1{test++} = 9#4 == (-6#4 +15#4);
output1{test++} = -9#4 == (6#4  + -15#4);
output1{test++} = -21#4 == (-6#4  + -15#4);
output1{test++} = 7#4 == (7#4 +0#4);
output1{test++} = -7#4 == (-7#4 +0#4);
output1{test++} = 7#4 == (7#4  + -0#4);
output1{test++} = -7#4 == (-7#4  + -0#4);
output1{test++} = 8#4 == (7#4 +1#4);
output1{test++} = -6#4 == (-7#4 +1#4);
output1{test++} = 6#4 == (7#4  + -1#4);
output1{test++} = -8#4 == (-7#4  + -1#4);
output1{test++} = 9#4 == (7#4 +2#4);
output1{test++} = -5#4 == (-7#4 +2#4);
output1{test++} = 5#4 == (7#4  + -2#4);
output1{test++} = -9#4 == (-7#4  + -2#4);
output1{test++} = 10#4 == (7#4 +3#4);
output1{test++} = -4#4 == (-7#4 +3#4);
output1{test++} = 4#4 == (7#4  + -3#4);
output1{test++} = -10#4 == (-7#4  + -3#4);
output1{test++} = 11#4 == (7#4 +4#4);
output1{test++} = -3#4 == (-7#4 +4#4);
output1{test++} = 3#4 == (7#4  + -4#4);
output1{test++} = -11#4 == (-7#4  + -4#4);
output1{test++} = 12#4 == (7#4 +5#4);
output1{test++} = -2#4 == (-7#4 +5#4);
output1{test++} = 2#4 == (7#4  + -5#4);
output1{test++} = -12#4 == (-7#4  + -5#4);
output1{test++} = 13#4 == (7#4 +6#4);
output1{test++} = -1#4 == (-7#4 +6#4);
output1{test++} = 1#4 == (7#4  + -6#4);
output1{test++} = -13#4 == (-7#4  + -6#4);
output1{test++} = 14#4 == (7#4 +7#4);
output1{test++} = 0#4 == (-7#4 +7#4);
output1{test++} = 0#4 == (7#4  + -7#4);
output1{test++} = -14#4 == (-7#4  + -7#4);
output1{test++} = 15#4 == (7#4 +8#4);
output1{test++} = 1#4 == (-7#4 +8#4);
output1{test++} = -1#4 == (7#4  + -8#4);
output1{test++} = -15#4 == (-7#4  + -8#4);
output1{test++} = 16#4 == (7#4 +9#4);
output1{test++} = 2#4 == (-7#4 +9#4);
output1{test++} = -2#4 == (7#4  + -9#4);
output1{test++} = -16#4 == (-7#4  + -9#4);
output1{test++} = 17#4 == (7#4 +10#4);
output1{test++} = 3#4 == (-7#4 +10#4);
output1{test++} = -3#4 == (7#4  + -10#4);
output1{test++} = -17#4 == (-7#4  + -10#4);
output1{test++} = 18#4 == (7#4 +11#4);
output1{test++} = 4#4 == (-7#4 +11#4);
output1{test++} = -4#4 == (7#4  + -11#4);
output1{test++} = -18#4 == (-7#4  + -11#4);
output1{test++} = 19#4 == (7#4 +12#4);
output1{test++} = 5#4 == (-7#4 +12#4);
output1{test++} = -5#4 == (7#4  + -12#4);
output1{test++} = -19#4 == (-7#4  + -12#4);
output1{test++} = 20#4 == (7#4 +13#4);
output1{test++} = 6#4 == (-7#4 +13#4);
output1{test++} = -6#4 == (7#4  + -13#4);
output1{test++} = -20#4 == (-7#4  + -13#4);
output1{test++} = 21#4 == (7#4 +14#4);
output1{test++} = 7#4 == (-7#4 +14#4);
output1{test++} = -7#4 == (7#4  + -14#4);
output1{test++} = -21#4 == (-7#4  + -14#4);
output1{test++} = 22#4 == (7#4 +15#4);
output1{test++} = 8#4 == (-7#4 +15#4);
output1{test++} = -8#4 == (7#4  + -15#4);
output1{test++} = -22#4 == (-7#4  + -15#4);
output1{test++} = 8#4 == (8#4 +0#4);
output1{test++} = -8#4 == (-8#4 +0#4);
output1{test++} = 8#4 == (8#4  + -0#4);
output1{test++} = -8#4 == (-8#4  + -0#4);
output1{test++} = 9#4 == (8#4 +1#4);
output1{test++} = -7#4 == (-8#4 +1#4);
output1{test++} = 7#4 == (8#4  + -1#4);
output1{test++} = -9#4 == (-8#4  + -1#4);
output1{test++} = 10#4 == (8#4 +2#4);
output1{test++} = -6#4 == (-8#4 +2#4);
output1{test++} = 6#4 == (8#4  + -2#4);
output1{test++} = -10#4 == (-8#4  + -2#4);
output1{test++} = 11#4 == (8#4 +3#4);
output1{test++} = -5#4 == (-8#4 +3#4);
output1{test++} = 5#4 == (8#4  + -3#4);
output1{test++} = -11#4 == (-8#4  + -3#4);
output1{test++} = 12#4 == (8#4 +4#4);
output1{test++} = -4#4 == (-8#4 +4#4);
output1{test++} = 4#4 == (8#4  + -4#4);
output1{test++} = -12#4 == (-8#4  + -4#4);
output1{test++} = 13#4 == (8#4 +5#4);
output1{test++} = -3#4 == (-8#4 +5#4);
output1{test++} = 3#4 == (8#4  + -5#4);
output1{test++} = -13#4 == (-8#4  + -5#4);
output1{test++} = 14#4 == (8#4 +6#4);
output1{test++} = -2#4 == (-8#4 +6#4);
output1{test++} = 2#4 == (8#4  + -6#4);
output1{test++} = -14#4 == (-8#4  + -6#4);
output1{test++} = 15#4 == (8#4 +7#4);
output1{test++} = -1#4 == (-8#4 +7#4);
output1{test++} = 1#4 == (8#4  + -7#4);
output1{test++} = -15#4 == (-8#4  + -7#4);
output1{test++} = 16#4 == (8#4 +8#4);
output1{test++} = 0#4 == (-8#4 +8#4);
output1{test++} = 0#4 == (8#4  + -8#4);
output1{test++} = -16#4 == (-8#4  + -8#4);
output1{test++} = 17#4 == (8#4 +9#4);
output1{test++} = 1#4 == (-8#4 +9#4);
output1{test++} = -1#4 == (8#4  + -9#4);
output1{test++} = -17#4 == (-8#4  + -9#4);
output1{test++} = 18#4 == (8#4 +10#4);
output1{test++} = 2#4 == (-8#4 +10#4);
output1{test++} = -2#4 == (8#4  + -10#4);
output1{test++} = -18#4 == (-8#4  + -10#4);
output1{test++} = 19#4 == (8#4 +11#4);
output1{test++} = 3#4 == (-8#4 +11#4);
output1{test++} = -3#4 == (8#4  + -11#4);
output1{test++} = -19#4 == (-8#4  + -11#4);
output1{test++} = 20#4 == (8#4 +12#4);
output1{test++} = 4#4 == (-8#4 +12#4);
output1{test++} = -4#4 == (8#4  + -12#4);
output1{test++} = -20#4 == (-8#4  + -12#4);
output1{test++} = 21#4 == (8#4 +13#4);
output1{test++} = 5#4 == (-8#4 +13#4);
output1{test++} = -5#4 == (8#4  + -13#4);
output1{test++} = -21#4 == (-8#4  + -13#4);
output1{test++} = 22#4 == (8#4 +14#4);
output1{test++} = 6#4 == (-8#4 +14#4);
output1{test++} = -6#4 == (8#4  + -14#4);
output1{test++} = -22#4 == (-8#4  + -14#4);
output1{test++} = 23#4 == (8#4 +15#4);
output1{test++} = 7#4 == (-8#4 +15#4);
output1{test++} = -7#4 == (8#4  + -15#4);
output1{test++} = -23#4 == (-8#4  + -15#4);
output1{test++} = 9#4 == (9#4 +0#4);
output1{test++} = -9#4 == (-9#4 +0#4);
output1{test++} = 9#4 == (9#4  + -0#4);
output1{test++} = -9#4 == (-9#4  + -0#4);
output1{test++} = 10#4 == (9#4 +1#4);
output1{test++} = -8#4 == (-9#4 +1#4);
output1{test++} = 8#4 == (9#4  + -1#4);
output1{test++} = -10#4 == (-9#4  + -1#4);
output1{test++} = 11#4 == (9#4 +2#4);
output1{test++} = -7#4 == (-9#4 +2#4);
output1{test++} = 7#4 == (9#4  + -2#4);
output1{test++} = -11#4 == (-9#4  + -2#4);
output1{test++} = 12#4 == (9#4 +3#4);
output1{test++} = -6#4 == (-9#4 +3#4);
output1{test++} = 6#4 == (9#4  + -3#4);
output1{test++} = -12#4 == (-9#4  + -3#4);
output1{test++} = 13#4 == (9#4 +4#4);
output1{test++} = -5#4 == (-9#4 +4#4);
output1{test++} = 5#4 == (9#4  + -4#4);
output1{test++} = -13#4 == (-9#4  + -4#4);
output1{test++} = 14#4 == (9#4 +5#4);
output1{test++} = -4#4 == (-9#4 +5#4);
output1{test++} = 4#4 == (9#4  + -5#4);
output1{test++} = -14#4 == (-9#4  + -5#4);
output1{test++} = 15#4 == (9#4 +6#4);
output1{test++} = -3#4 == (-9#4 +6#4);
output1{test++} = 3#4 == (9#4  + -6#4);
output1{test++} = -15#4 == (-9#4  + -6#4);
output1{test++} = 16#4 == (9#4 +7#4);
output1{test++} = -2#4 == (-9#4 +7#4);
output1{test++} = 2#4 == (9#4  + -7#4);
output1{test++} = -16#4 == (-9#4  + -7#4);
output1{test++} = 17#4 == (9#4 +8#4);
output1{test++} = -1#4 == (-9#4 +8#4);
output1{test++} = 1#4 == (9#4  + -8#4);
output1{test++} = -17#4 == (-9#4  + -8#4);
output1{test++} = 18#4 == (9#4 +9#4);
output1{test++} = 0#4 == (-9#4 +9#4);
output1{test++} = 0#4 == (9#4  + -9#4);
output1{test++} = -18#4 == (-9#4  + -9#4);
output1{test++} = 19#4 == (9#4 +10#4);
output1{test++} = 1#4 == (-9#4 +10#4);
output1{test++} = -1#4 == (9#4  + -10#4);
output1{test++} = -19#4 == (-9#4  + -10#4);
output1{test++} = 20#4 == (9#4 +11#4);
output1{test++} = 2#4 == (-9#4 +11#4);
output1{test++} = -2#4 == (9#4  + -11#4);
output1{test++} = -20#4 == (-9#4  + -11#4);
output1{test++} = 21#4 == (9#4 +12#4);
output1{test++} = 3#4 == (-9#4 +12#4);
output1{test++} = -3#4 == (9#4  + -12#4);
output1{test++} = -21#4 == (-9#4  + -12#4);
output1{test++} = 22#4 == (9#4 +13#4);
output1{test++} = 4#4 == (-9#4 +13#4);
output1{test++} = -4#4 == (9#4  + -13#4);
output1{test++} = -22#4 == (-9#4  + -13#4);
output1{test++} = 23#4 == (9#4 +14#4);
output1{test++} = 5#4 == (-9#4 +14#4);
output1{test++} = -5#4 == (9#4  + -14#4);
output1{test++} = -23#4 == (-9#4  + -14#4);
output1{test++} = 24#4 == (9#4 +15#4);
output1{test++} = 6#4 == (-9#4 +15#4);
output1{test++} = -6#4 == (9#4  + -15#4);
output1{test++} = -24#4 == (-9#4  + -15#4);
output1{test++} = 10#4 == (10#4 +0#4);
output1{test++} = -10#4 == (-10#4 +0#4);
output1{test++} = 10#4 == (10#4  + -0#4);
output1{test++} = -10#4 == (-10#4  + -0#4);
output1{test++} = 11#4 == (10#4 +1#4);
output1{test++} = -9#4 == (-10#4 +1#4);
output1{test++} = 9#4 == (10#4  + -1#4);
output1{test++} = -11#4 == (-10#4  + -1#4);
output1{test++} = 12#4 == (10#4 +2#4);
output1{test++} = -8#4 == (-10#4 +2#4);
output1{test++} = 8#4 == (10#4  + -2#4);
output1{test++} = -12#4 == (-10#4  + -2#4);
output1{test++} = 13#4 == (10#4 +3#4);
output1{test++} = -7#4 == (-10#4 +3#4);
output1{test++} = 7#4 == (10#4  + -3#4);
output1{test++} = -13#4 == (-10#4  + -3#4);
output1{test++} = 14#4 == (10#4 +4#4);
output1{test++} = -6#4 == (-10#4 +4#4);
output1{test++} = 6#4 == (10#4  + -4#4);
output1{test++} = -14#4 == (-10#4  + -4#4);
output1{test++} = 15#4 == (10#4 +5#4);
output1{test++} = -5#4 == (-10#4 +5#4);
output1{test++} = 5#4 == (10#4  + -5#4);
output1{test++} = -15#4 == (-10#4  + -5#4);
output1{test++} = 16#4 == (10#4 +6#4);
output1{test++} = -4#4 == (-10#4 +6#4);
output1{test++} = 4#4 == (10#4  + -6#4);
output1{test++} = -16#4 == (-10#4  + -6#4);
output1{test++} = 17#4 == (10#4 +7#4);
output1{test++} = -3#4 == (-10#4 +7#4);
output1{test++} = 3#4 == (10#4  + -7#4);
output1{test++} = -17#4 == (-10#4  + -7#4);
output1{test++} = 18#4 == (10#4 +8#4);
output1{test++} = -2#4 == (-10#4 +8#4);
output1{test++} = 2#4 == (10#4  + -8#4);
output1{test++} = -18#4 == (-10#4  + -8#4);
output1{test++} = 19#4 == (10#4 +9#4);
output1{test++} = -1#4 == (-10#4 +9#4);
output1{test++} = 1#4 == (10#4  + -9#4);
output1{test++} = -19#4 == (-10#4  + -9#4);
output1{test++} = 20#4 == (10#4 +10#4);
output1{test++} = 0#4 == (-10#4 +10#4);
output1{test++} = 0#4 == (10#4  + -10#4);
output1{test++} = -20#4 == (-10#4  + -10#4);
output1{test++} = 21#4 == (10#4 +11#4);
output1{test++} = 1#4 == (-10#4 +11#4);
output1{test++} = -1#4 == (10#4  + -11#4);
output1{test++} = -21#4 == (-10#4  + -11#4);
output1{test++} = 22#4 == (10#4 +12#4);
output1{test++} = 2#4 == (-10#4 +12#4);
output1{test++} = -2#4 == (10#4  + -12#4);
output1{test++} = -22#4 == (-10#4  + -12#4);
output1{test++} = 23#4 == (10#4 +13#4);
output1{test++} = 3#4 == (-10#4 +13#4);
output1{test++} = -3#4 == (10#4  + -13#4);
output1{test++} = -23#4 == (-10#4  + -13#4);
output1{test++} = 24#4 == (10#4 +14#4);
output1{test++} = 4#4 == (-10#4 +14#4);
output1{test++} = -4#4 == (10#4  + -14#4);
output1{test++} = -24#4 == (-10#4  + -14#4);
output1{test++} = 25#4 == (10#4 +15#4);
output1{test++} = 5#4 == (-10#4 +15#4);
output1{test++} = -5#4 == (10#4  + -15#4);
output1{test++} = -25#4 == (-10#4  + -15#4);
output1{test++} = 11#4 == (11#4 +0#4);
output1{test++} = -11#4 == (-11#4 +0#4);
output1{test++} = 11#4 == (11#4  + -0#4);
output1{test++} = -11#4 == (-11#4  + -0#4);
output1{test++} = 12#4 == (11#4 +1#4);
output1{test++} = -10#4 == (-11#4 +1#4);
output1{test++} = 10#4 == (11#4  + -1#4);
output1{test++} = -12#4 == (-11#4  + -1#4);
output1{test++} = 13#4 == (11#4 +2#4);
output1{test++} = -9#4 == (-11#4 +2#4);
output1{test++} = 9#4 == (11#4  + -2#4);
output1{test++} = -13#4 == (-11#4  + -2#4);
output1{test++} = 14#4 == (11#4 +3#4);
output1{test++} = -8#4 == (-11#4 +3#4);
output1{test++} = 8#4 == (11#4  + -3#4);
output1{test++} = -14#4 == (-11#4  + -3#4);
output1{test++} = 15#4 == (11#4 +4#4);
output1{test++} = -7#4 == (-11#4 +4#4);
output1{test++} = 7#4 == (11#4  + -4#4);
output1{test++} = -15#4 == (-11#4  + -4#4);
output1{test++} = 16#4 == (11#4 +5#4);
output1{test++} = -6#4 == (-11#4 +5#4);
output1{test++} = 6#4 == (11#4  + -5#4);
output1{test++} = -16#4 == (-11#4  + -5#4);
output1{test++} = 17#4 == (11#4 +6#4);
output1{test++} = -5#4 == (-11#4 +6#4);
output1{test++} = 5#4 == (11#4  + -6#4);
output1{test++} = -17#4 == (-11#4  + -6#4);
output1{test++} = 18#4 == (11#4 +7#4);
output1{test++} = -4#4 == (-11#4 +7#4);
output1{test++} = 4#4 == (11#4  + -7#4);
output1{test++} = -18#4 == (-11#4  + -7#4);
output1{test++} = 19#4 == (11#4 +8#4);
output1{test++} = -3#4 == (-11#4 +8#4);
output1{test++} = 3#4 == (11#4  + -8#4);
output1{test++} = -19#4 == (-11#4  + -8#4);
output1{test++} = 20#4 == (11#4 +9#4);
output1{test++} = -2#4 == (-11#4 +9#4);
output1{test++} = 2#4 == (11#4  + -9#4);
output1{test++} = -20#4 == (-11#4  + -9#4);
output1{test++} = 21#4 == (11#4 +10#4);
output1{test++} = -1#4 == (-11#4 +10#4);
output1{test++} = 1#4 == (11#4  + -10#4);
output1{test++} = -21#4 == (-11#4  + -10#4);
output1{test++} = 22#4 == (11#4 +11#4);
output1{test++} = 0#4 == (-11#4 +11#4);
output1{test++} = 0#4 == (11#4  + -11#4);
output1{test++} = -22#4 == (-11#4  + -11#4);
output1{test++} = 23#4 == (11#4 +12#4);
output1{test++} = 1#4 == (-11#4 +12#4);
output1{test++} = -1#4 == (11#4  + -12#4);
output1{test++} = -23#4 == (-11#4  + -12#4);
output1{test++} = 24#4 == (11#4 +13#4);
output1{test++} = 2#4 == (-11#4 +13#4);
output1{test++} = -2#4 == (11#4  + -13#4);
output1{test++} = -24#4 == (-11#4  + -13#4);
output1{test++} = 25#4 == (11#4 +14#4);
output1{test++} = 3#4 == (-11#4 +14#4);
output1{test++} = -3#4 == (11#4  + -14#4);
output1{test++} = -25#4 == (-11#4  + -14#4);
output1{test++} = 26#4 == (11#4 +15#4);
output1{test++} = 4#4 == (-11#4 +15#4);
output1{test++} = -4#4 == (11#4  + -15#4);
output1{test++} = -26#4 == (-11#4  + -15#4);
output1{test++} = 12#4 == (12#4 +0#4);
output1{test++} = -12#4 == (-12#4 +0#4);
output1{test++} = 12#4 == (12#4  + -0#4);
output1{test++} = -12#4 == (-12#4  + -0#4);
output1{test++} = 13#4 == (12#4 +1#4);
output1{test++} = -11#4 == (-12#4 +1#4);
output1{test++} = 11#4 == (12#4  + -1#4);
output1{test++} = -13#4 == (-12#4  + -1#4);
output1{test++} = 14#4 == (12#4 +2#4);
output1{test++} = -10#4 == (-12#4 +2#4);
output1{test++} = 10#4 == (12#4  + -2#4);
output1{test++} = -14#4 == (-12#4  + -2#4);
output1{test++} = 15#4 == (12#4 +3#4);
output1{test++} = -9#4 == (-12#4 +3#4);
output1{test++} = 9#4 == (12#4  + -3#4);
output1{test++} = -15#4 == (-12#4  + -3#4);
output1{test++} = 16#4 == (12#4 +4#4);
output1{test++} = -8#4 == (-12#4 +4#4);
output1{test++} = 8#4 == (12#4  + -4#4);
output1{test++} = -16#4 == (-12#4  + -4#4);
output1{test++} = 17#4 == (12#4 +5#4);
output1{test++} = -7#4 == (-12#4 +5#4);
output1{test++} = 7#4 == (12#4  + -5#4);
output1{test++} = -17#4 == (-12#4  + -5#4);
output1{test++} = 18#4 == (12#4 +6#4);
output1{test++} = -6#4 == (-12#4 +6#4);
output1{test++} = 6#4 == (12#4  + -6#4);
output1{test++} = -18#4 == (-12#4  + -6#4);
output1{test++} = 19#4 == (12#4 +7#4);
output1{test++} = -5#4 == (-12#4 +7#4);
output1{test++} = 5#4 == (12#4  + -7#4);
output1{test++} = -19#4 == (-12#4  + -7#4);
output1{test++} = 20#4 == (12#4 +8#4);
output1{test++} = -4#4 == (-12#4 +8#4);
output1{test++} = 4#4 == (12#4  + -8#4);
output1{test++} = -20#4 == (-12#4  + -8#4);
output1{test++} = 21#4 == (12#4 +9#4);
output1{test++} = -3#4 == (-12#4 +9#4);
output1{test++} = 3#4 == (12#4  + -9#4);
output1{test++} = -21#4 == (-12#4  + -9#4);
output1{test++} = 22#4 == (12#4 +10#4);
output1{test++} = -2#4 == (-12#4 +10#4);
output1{test++} = 2#4 == (12#4  + -10#4);
output1{test++} = -22#4 == (-12#4  + -10#4);
output1{test++} = 23#4 == (12#4 +11#4);
output1{test++} = -1#4 == (-12#4 +11#4);
output1{test++} = 1#4 == (12#4  + -11#4);
output1{test++} = -23#4 == (-12#4  + -11#4);
output1{test++} = 24#4 == (12#4 +12#4);
output1{test++} = 0#4 == (-12#4 +12#4);
output1{test++} = 0#4 == (12#4  + -12#4);
output1{test++} = -24#4 == (-12#4  + -12#4);
output1{test++} = 25#4 == (12#4 +13#4);
output1{test++} = 1#4 == (-12#4 +13#4);
output1{test++} = -1#4 == (12#4  + -13#4);
output1{test++} = -25#4 == (-12#4  + -13#4);
output1{test++} = 26#4 == (12#4 +14#4);
output1{test++} = 2#4 == (-12#4 +14#4);
output1{test++} = -2#4 == (12#4  + -14#4);
output1{test++} = -26#4 == (-12#4  + -14#4);
output1{test++} = 27#4 == (12#4 +15#4);
output1{test++} = 3#4 == (-12#4 +15#4);
output1{test++} = -3#4 == (12#4  + -15#4);
output1{test++} = -27#4 == (-12#4  + -15#4);
output1{test++} = 13#4 == (13#4 +0#4);
output1{test++} = -13#4 == (-13#4 +0#4);
output1{test++} = 13#4 == (13#4  + -0#4);
output1{test++} = -13#4 == (-13#4  + -0#4);
output1{test++} = 14#4 == (13#4 +1#4);
output1{test++} = -12#4 == (-13#4 +1#4);
output1{test++} = 12#4 == (13#4  + -1#4);
output1{test++} = -14#4 == (-13#4  + -1#4);
output1{test++} = 15#4 == (13#4 +2#4);
output1{test++} = -11#4 == (-13#4 +2#4);
output1{test++} = 11#4 == (13#4  + -2#4);
output1{test++} = -15#4 == (-13#4  + -2#4);
output1{test++} = 16#4 == (13#4 +3#4);
output1{test++} = -10#4 == (-13#4 +3#4);
output1{test++} = 10#4 == (13#4  + -3#4);
output1{test++} = -16#4 == (-13#4  + -3#4);
output1{test++} = 17#4 == (13#4 +4#4);
output1{test++} = -9#4 == (-13#4 +4#4);
output1{test++} = 9#4 == (13#4  + -4#4);
output1{test++} = -17#4 == (-13#4  + -4#4);
output1{test++} = 18#4 == (13#4 +5#4);
output1{test++} = -8#4 == (-13#4 +5#4);
output1{test++} = 8#4 == (13#4  + -5#4);
output1{test++} = -18#4 == (-13#4  + -5#4);
output1{test++} = 19#4 == (13#4 +6#4);
output1{test++} = -7#4 == (-13#4 +6#4);
output1{test++} = 7#4 == (13#4  + -6#4);
output1{test++} = -19#4 == (-13#4  + -6#4);
output1{test++} = 20#4 == (13#4 +7#4);
output1{test++} = -6#4 == (-13#4 +7#4);
output1{test++} = 6#4 == (13#4  + -7#4);
output1{test++} = -20#4 == (-13#4  + -7#4);
output1{test++} = 21#4 == (13#4 +8#4);
output1{test++} = -5#4 == (-13#4 +8#4);
output1{test++} = 5#4 == (13#4  + -8#4);
output1{test++} = -21#4 == (-13#4  + -8#4);
output1{test++} = 22#4 == (13#4 +9#4);
output1{test++} = -4#4 == (-13#4 +9#4);
output1{test++} = 4#4 == (13#4  + -9#4);
output1{test++} = -22#4 == (-13#4  + -9#4);
output1{test++} = 23#4 == (13#4 +10#4);
output1{test++} = -3#4 == (-13#4 +10#4);
output1{test++} = 3#4 == (13#4  + -10#4);
output1{test++} = -23#4 == (-13#4  + -10#4);
output1{test++} = 24#4 == (13#4 +11#4);
output1{test++} = -2#4 == (-13#4 +11#4);
output1{test++} = 2#4 == (13#4  + -11#4);
output1{test++} = -24#4 == (-13#4  + -11#4);
output1{test++} = 25#4 == (13#4 +12#4);
output1{test++} = -1#4 == (-13#4 +12#4);
output1{test++} = 1#4 == (13#4  + -12#4);
output1{test++} = -25#4 == (-13#4  + -12#4);
output1{test++} = 26#4 == (13#4 +13#4);
output1{test++} = 0#4 == (-13#4 +13#4);
output1{test++} = 0#4 == (13#4  + -13#4);
output1{test++} = -26#4 == (-13#4  + -13#4);
output1{test++} = 27#4 == (13#4 +14#4);
output1{test++} = 1#4 == (-13#4 +14#4);
output1{test++} = -1#4 == (13#4  + -14#4);
output1{test++} = -27#4 == (-13#4  + -14#4);
output1{test++} = 28#4 == (13#4 +15#4);
output1{test++} = 2#4 == (-13#4 +15#4);
output1{test++} = -2#4 == (13#4  + -15#4);
output1{test++} = -28#4 == (-13#4  + -15#4);
output1{test++} = 14#4 == (14#4 +0#4);
output1{test++} = -14#4 == (-14#4 +0#4);
output1{test++} = 14#4 == (14#4  + -0#4);
output1{test++} = -14#4 == (-14#4  + -0#4);
output1{test++} = 15#4 == (14#4 +1#4);
output1{test++} = -13#4 == (-14#4 +1#4);
output1{test++} = 13#4 == (14#4  + -1#4);
output1{test++} = -15#4 == (-14#4  + -1#4);
output1{test++} = 16#4 == (14#4 +2#4);
output1{test++} = -12#4 == (-14#4 +2#4);
output1{test++} = 12#4 == (14#4  + -2#4);
output1{test++} = -16#4 == (-14#4  + -2#4);
output1{test++} = 17#4 == (14#4 +3#4);
output1{test++} = -11#4 == (-14#4 +3#4);
output1{test++} = 11#4 == (14#4  + -3#4);
output1{test++} = -17#4 == (-14#4  + -3#4);
output1{test++} = 18#4 == (14#4 +4#4);
output1{test++} = -10#4 == (-14#4 +4#4);
output1{test++} = 10#4 == (14#4  + -4#4);
output1{test++} = -18#4 == (-14#4  + -4#4);
output1{test++} = 19#4 == (14#4 +5#4);
output1{test++} = -9#4 == (-14#4 +5#4);
output1{test++} = 9#4 == (14#4  + -5#4);
output1{test++} = -19#4 == (-14#4  + -5#4);
output1{test++} = 20#4 == (14#4 +6#4);
output1{test++} = -8#4 == (-14#4 +6#4);
output1{test++} = 8#4 == (14#4  + -6#4);
output1{test++} = -20#4 == (-14#4  + -6#4);
output1{test++} = 21#4 == (14#4 +7#4);
output1{test++} = -7#4 == (-14#4 +7#4);
output1{test++} = 7#4 == (14#4  + -7#4);
output1{test++} = -21#4 == (-14#4  + -7#4);
output1{test++} = 22#4 == (14#4 +8#4);
output1{test++} = -6#4 == (-14#4 +8#4);
output1{test++} = 6#4 == (14#4  + -8#4);
output1{test++} = -22#4 == (-14#4  + -8#4);
output1{test++} = 23#4 == (14#4 +9#4);
output1{test++} = -5#4 == (-14#4 +9#4);
output1{test++} = 5#4 == (14#4  + -9#4);
output1{test++} = -23#4 == (-14#4  + -9#4);
output1{test++} = 24#4 == (14#4 +10#4);
output1{test++} = -4#4 == (-14#4 +10#4);
output1{test++} = 4#4 == (14#4  + -10#4);
output1{test++} = -24#4 == (-14#4  + -10#4);
output1{test++} = 25#4 == (14#4 +11#4);
output1{test++} = -3#4 == (-14#4 +11#4);
output1{test++} = 3#4 == (14#4  + -11#4);
output1{test++} = -25#4 == (-14#4  + -11#4);
output1{test++} = 26#4 == (14#4 +12#4);
output1{test++} = -2#4 == (-14#4 +12#4);
output1{test++} = 2#4 == (14#4  + -12#4);
output1{test++} = -26#4 == (-14#4  + -12#4);
output1{test++} = 27#4 == (14#4 +13#4);
output1{test++} = -1#4 == (-14#4 +13#4);
output1{test++} = 1#4 == (14#4  + -13#4);
output1{test++} = -27#4 == (-14#4  + -13#4);
output1{test++} = 28#4 == (14#4 +14#4);
output1{test++} = 0#4 == (-14#4 +14#4);
output1{test++} = 0#4 == (14#4  + -14#4);
output1{test++} = -28#4 == (-14#4  + -14#4);
output1{test++} = 29#4 == (14#4 +15#4);
output1{test++} = 1#4 == (-14#4 +15#4);
output1{test++} = -1#4 == (14#4  + -15#4);
output1{test++} = -29#4 == (-14#4  + -15#4);
output1{test++} = 15#4 == (15#4 +0#4);
output1{test++} = -15#4 == (-15#4 +0#4);
output1{test++} = 15#4 == (15#4  + -0#4);
output1{test++} = -15#4 == (-15#4  + -0#4);
output1{test++} = 16#4 == (15#4 +1#4);
output1{test++} = -14#4 == (-15#4 +1#4);
output1{test++} = 14#4 == (15#4  + -1#4);
output1{test++} = -16#4 == (-15#4  + -1#4);
output1{test++} = 17#4 == (15#4 +2#4);
output1{test++} = -13#4 == (-15#4 +2#4);
output1{test++} = 13#4 == (15#4  + -2#4);
output1{test++} = -17#4 == (-15#4  + -2#4);
output1{test++} = 18#4 == (15#4 +3#4);
output1{test++} = -12#4 == (-15#4 +3#4);
output1{test++} = 12#4 == (15#4  + -3#4);
output1{test++} = -18#4 == (-15#4  + -3#4);
output1{test++} = 19#4 == (15#4 +4#4);
output1{test++} = -11#4 == (-15#4 +4#4);
output1{test++} = 11#4 == (15#4  + -4#4);
output1{test++} = -19#4 == (-15#4  + -4#4);
output1{test++} = 20#4 == (15#4 +5#4);
output1{test++} = -10#4 == (-15#4 +5#4);
output1{test++} = 10#4 == (15#4  + -5#4);
output1{test++} = -20#4 == (-15#4  + -5#4);
output1{test++} = 21#4 == (15#4 +6#4);
output1{test++} = -9#4 == (-15#4 +6#4);
output1{test++} = 9#4 == (15#4  + -6#4);
output1{test++} = -21#4 == (-15#4  + -6#4);
output1{test++} = 22#4 == (15#4 +7#4);
output1{test++} = -8#4 == (-15#4 +7#4);
output1{test++} = 8#4 == (15#4  + -7#4);
output1{test++} = -22#4 == (-15#4  + -7#4);
output1{test++} = 23#4 == (15#4 +8#4);
output1{test++} = -7#4 == (-15#4 +8#4);
output1{test++} = 7#4 == (15#4  + -8#4);
output1{test++} = -23#4 == (-15#4  + -8#4);
output1{test++} = 24#4 == (15#4 +9#4);
output1{test++} = -6#4 == (-15#4 +9#4);
output1{test++} = 6#4 == (15#4  + -9#4);
output1{test++} = -24#4 == (-15#4  + -9#4);
output1{test++} = 25#4 == (15#4 +10#4);
output1{test++} = -5#4 == (-15#4 +10#4);
output1{test++} = 5#4 == (15#4  + -10#4);
output1{test++} = -25#4 == (-15#4  + -10#4);
output1{test++} = 26#4 == (15#4 +11#4);
output1{test++} = -4#4 == (-15#4 +11#4);
output1{test++} = 4#4 == (15#4  + -11#4);
output1{test++} = -26#4 == (-15#4  + -11#4);
output1{test++} = 27#4 == (15#4 +12#4);
output1{test++} = -3#4 == (-15#4 +12#4);
output1{test++} = 3#4 == (15#4  + -12#4);
output1{test++} = -27#4 == (-15#4  + -12#4);
output1{test++} = 28#4 == (15#4 +13#4);
output1{test++} = -2#4 == (-15#4 +13#4);
output1{test++} = 2#4 == (15#4  + -13#4);
output1{test++} = -28#4 == (-15#4  + -13#4);
output1{test++} = 29#4 == (15#4 +14#4);
output1{test++} = -1#4 == (-15#4 +14#4);
output1{test++} = 1#4 == (15#4  + -14#4);
output1{test++} = -29#4 == (-15#4  + -14#4);
output1{test++} = 30#4 == (15#4 +15#4);
output1{test++} = 0#4 == (-15#4 +15#4);
output1{test++} = 0#4 == (15#4  + -15#4);
output1{test++} = -30#4 == (-15#4  + -15#4);


output1{test++} = 0#4 == (0#4 -0#4);
output1{test++} = 0#4 == (-0#4 -0#4);
output1{test++} = 0#4 == (0#4  - -0#4);
output1{test++} = 0#4 == (-0#4  - -0#4);
output1{test++} = -1#4 == (0#4 -1#4);
output1{test++} = -1#4 == (-0#4 -1#4);
output1{test++} = 1#4 == (0#4  - -1#4);
output1{test++} = 1#4 == (-0#4  - -1#4);
output1{test++} = -2#4 == (0#4 -2#4);
output1{test++} = -2#4 == (-0#4 -2#4);
output1{test++} = 2#4 == (0#4  - -2#4);
output1{test++} = 2#4 == (-0#4  - -2#4);
output1{test++} = -3#4 == (0#4 -3#4);
output1{test++} = -3#4 == (-0#4 -3#4);
output1{test++} = 3#4 == (0#4  - -3#4);
output1{test++} = 3#4 == (-0#4  - -3#4);
output1{test++} = -4#4 == (0#4 -4#4);
output1{test++} = -4#4 == (-0#4 -4#4);
output1{test++} = 4#4 == (0#4  - -4#4);
output1{test++} = 4#4 == (-0#4  - -4#4);
output1{test++} = -5#4 == (0#4 -5#4);
output1{test++} = -5#4 == (-0#4 -5#4);
output1{test++} = 5#4 == (0#4  - -5#4);
output1{test++} = 5#4 == (-0#4  - -5#4);
output1{test++} = -6#4 == (0#4 -6#4);
output1{test++} = -6#4 == (-0#4 -6#4);
output1{test++} = 6#4 == (0#4  - -6#4);
output1{test++} = 6#4 == (-0#4  - -6#4);
output1{test++} = -7#4 == (0#4 -7#4);
output1{test++} = -7#4 == (-0#4 -7#4);
output1{test++} = 7#4 == (0#4  - -7#4);
output1{test++} = 7#4 == (-0#4  - -7#4);
output1{test++} = -8#4 == (0#4 -8#4);
output1{test++} = -8#4 == (-0#4 -8#4);
output1{test++} = 8#4 == (0#4  - -8#4);
output1{test++} = 8#4 == (-0#4  - -8#4);
output1{test++} = -9#4 == (0#4 -9#4);
output1{test++} = -9#4 == (-0#4 -9#4);
output1{test++} = 9#4 == (0#4  - -9#4);
output1{test++} = 9#4 == (-0#4  - -9#4);
output1{test++} = -10#4 == (0#4 -10#4);
output1{test++} = -10#4 == (-0#4 -10#4);
output1{test++} = 10#4 == (0#4  - -10#4);
output1{test++} = 10#4 == (-0#4  - -10#4);
output1{test++} = -11#4 == (0#4 -11#4);
output1{test++} = -11#4 == (-0#4 -11#4);
output1{test++} = 11#4 == (0#4  - -11#4);
output1{test++} = 11#4 == (-0#4  - -11#4);
output1{test++} = -12#4 == (0#4 -12#4);
output1{test++} = -12#4 == (-0#4 -12#4);
output1{test++} = 12#4 == (0#4  - -12#4);
output1{test++} = 12#4 == (-0#4  - -12#4);
output1{test++} = -13#4 == (0#4 -13#4);
output1{test++} = -13#4 == (-0#4 -13#4);
output1{test++} = 13#4 == (0#4  - -13#4);
output1{test++} = 13#4 == (-0#4  - -13#4);
output1{test++} = -14#4 == (0#4 -14#4);
output1{test++} = -14#4 == (-0#4 -14#4);
output1{test++} = 14#4 == (0#4  - -14#4);
output1{test++} = 14#4 == (-0#4  - -14#4);
output1{test++} = -15#4 == (0#4 -15#4);
output1{test++} = -15#4 == (-0#4 -15#4);
output1{test++} = 15#4 == (0#4  - -15#4);
output1{test++} = 15#4 == (-0#4  - -15#4);
output1{test++} = 1#4 == (1#4 -0#4);
output1{test++} = -1#4 == (-1#4 -0#4);
output1{test++} = 1#4 == (1#4  - -0#4);
output1{test++} = -1#4 == (-1#4  - -0#4);
output1{test++} = 0#4 == (1#4 -1#4);
output1{test++} = -2#4 == (-1#4 -1#4);
output1{test++} = 2#4 == (1#4  - -1#4);
output1{test++} = 0#4 == (-1#4  - -1#4);
output1{test++} = -1#4 == (1#4 -2#4);
output1{test++} = -3#4 == (-1#4 -2#4);
output1{test++} = 3#4 == (1#4  - -2#4);
output1{test++} = 1#4 == (-1#4  - -2#4);
output1{test++} = -2#4 == (1#4 -3#4);
output1{test++} = -4#4 == (-1#4 -3#4);
output1{test++} = 4#4 == (1#4  - -3#4);
output1{test++} = 2#4 == (-1#4  - -3#4);
output1{test++} = -3#4 == (1#4 -4#4);
output1{test++} = -5#4 == (-1#4 -4#4);
output1{test++} = 5#4 == (1#4  - -4#4);
output1{test++} = 3#4 == (-1#4  - -4#4);
output1{test++} = -4#4 == (1#4 -5#4);
output1{test++} = -6#4 == (-1#4 -5#4);
output1{test++} = 6#4 == (1#4  - -5#4);
output1{test++} = 4#4 == (-1#4  - -5#4);
output1{test++} = -5#4 == (1#4 -6#4);
output1{test++} = -7#4 == (-1#4 -6#4);
output1{test++} = 7#4 == (1#4  - -6#4);
output1{test++} = 5#4 == (-1#4  - -6#4);
output1{test++} = -6#4 == (1#4 -7#4);
output1{test++} = -8#4 == (-1#4 -7#4);
output1{test++} = 8#4 == (1#4  - -7#4);
output1{test++} = 6#4 == (-1#4  - -7#4);
output1{test++} = -7#4 == (1#4 -8#4);
output1{test++} = -9#4 == (-1#4 -8#4);
output1{test++} = 9#4 == (1#4  - -8#4);
output1{test++} = 7#4 == (-1#4  - -8#4);
output1{test++} = -8#4 == (1#4 -9#4);
output1{test++} = -10#4 == (-1#4 -9#4);
output1{test++} = 10#4 == (1#4  - -9#4);
output1{test++} = 8#4 == (-1#4  - -9#4);
output1{test++} = -9#4 == (1#4 -10#4);
output1{test++} = -11#4 == (-1#4 -10#4);
output1{test++} = 11#4 == (1#4  - -10#4);
output1{test++} = 9#4 == (-1#4  - -10#4);
output1{test++} = -10#4 == (1#4 -11#4);
output1{test++} = -12#4 == (-1#4 -11#4);
output1{test++} = 12#4 == (1#4  - -11#4);
output1{test++} = 10#4 == (-1#4  - -11#4);
output1{test++} = -11#4 == (1#4 -12#4);
output1{test++} = -13#4 == (-1#4 -12#4);
output1{test++} = 13#4 == (1#4  - -12#4);
output1{test++} = 11#4 == (-1#4  - -12#4);
output1{test++} = -12#4 == (1#4 -13#4);
output1{test++} = -14#4 == (-1#4 -13#4);
output1{test++} = 14#4 == (1#4  - -13#4);
output1{test++} = 12#4 == (-1#4  - -13#4);
output1{test++} = -13#4 == (1#4 -14#4);
output1{test++} = -15#4 == (-1#4 -14#4);
output1{test++} = 15#4 == (1#4  - -14#4);
output1{test++} = 13#4 == (-1#4  - -14#4);
output1{test++} = -14#4 == (1#4 -15#4);
output1{test++} = -16#4 == (-1#4 -15#4);
output1{test++} = 16#4 == (1#4  - -15#4);
output1{test++} = 14#4 == (-1#4  - -15#4);
output1{test++} = 2#4 == (2#4 -0#4);
output1{test++} = -2#4 == (-2#4 -0#4);
output1{test++} = 2#4 == (2#4  - -0#4);
output1{test++} = -2#4 == (-2#4  - -0#4);
output1{test++} = 1#4 == (2#4 -1#4);
output1{test++} = -3#4 == (-2#4 -1#4);
output1{test++} = 3#4 == (2#4  - -1#4);
output1{test++} = -1#4 == (-2#4  - -1#4);
output1{test++} = 0#4 == (2#4 -2#4);
output1{test++} = -4#4 == (-2#4 -2#4);
output1{test++} = 4#4 == (2#4  - -2#4);
output1{test++} = 0#4 == (-2#4  - -2#4);
output1{test++} = -1#4 == (2#4 -3#4);
output1{test++} = -5#4 == (-2#4 -3#4);
output1{test++} = 5#4 == (2#4  - -3#4);
output1{test++} = 1#4 == (-2#4  - -3#4);
output1{test++} = -2#4 == (2#4 -4#4);
output1{test++} = -6#4 == (-2#4 -4#4);
output1{test++} = 6#4 == (2#4  - -4#4);
output1{test++} = 2#4 == (-2#4  - -4#4);
output1{test++} = -3#4 == (2#4 -5#4);
output1{test++} = -7#4 == (-2#4 -5#4);
output1{test++} = 7#4 == (2#4  - -5#4);
output1{test++} = 3#4 == (-2#4  - -5#4);
output1{test++} = -4#4 == (2#4 -6#4);
output1{test++} = -8#4 == (-2#4 -6#4);
output1{test++} = 8#4 == (2#4  - -6#4);
output1{test++} = 4#4 == (-2#4  - -6#4);
output1{test++} = -5#4 == (2#4 -7#4);
output1{test++} = -9#4 == (-2#4 -7#4);
output1{test++} = 9#4 == (2#4  - -7#4);
output1{test++} = 5#4 == (-2#4  - -7#4);
output1{test++} = -6#4 == (2#4 -8#4);
output1{test++} = -10#4 == (-2#4 -8#4);
output1{test++} = 10#4 == (2#4  - -8#4);
output1{test++} = 6#4 == (-2#4  - -8#4);
output1{test++} = -7#4 == (2#4 -9#4);
output1{test++} = -11#4 == (-2#4 -9#4);
output1{test++} = 11#4 == (2#4  - -9#4);
output1{test++} = 7#4 == (-2#4  - -9#4);
output1{test++} = -8#4 == (2#4 -10#4);
output1{test++} = -12#4 == (-2#4 -10#4);
output1{test++} = 12#4 == (2#4  - -10#4);
output1{test++} = 8#4 == (-2#4  - -10#4);
output1{test++} = -9#4 == (2#4 -11#4);
output1{test++} = -13#4 == (-2#4 -11#4);
output1{test++} = 13#4 == (2#4  - -11#4);
output1{test++} = 9#4 == (-2#4  - -11#4);
output1{test++} = -10#4 == (2#4 -12#4);
output1{test++} = -14#4 == (-2#4 -12#4);
output1{test++} = 14#4 == (2#4  - -12#4);
output1{test++} = 10#4 == (-2#4  - -12#4);
output1{test++} = -11#4 == (2#4 -13#4);
output1{test++} = -15#4 == (-2#4 -13#4);
output1{test++} = 15#4 == (2#4  - -13#4);
output1{test++} = 11#4 == (-2#4  - -13#4);
output1{test++} = -12#4 == (2#4 -14#4);
output1{test++} = -16#4 == (-2#4 -14#4);
output1{test++} = 16#4 == (2#4  - -14#4);
output1{test++} = 12#4 == (-2#4  - -14#4);
output1{test++} = -13#4 == (2#4 -15#4);
output1{test++} = -17#4 == (-2#4 -15#4);
output1{test++} = 17#4 == (2#4  - -15#4);
output1{test++} = 13#4 == (-2#4  - -15#4);
output1{test++} = 3#4 == (3#4 -0#4);
output1{test++} = -3#4 == (-3#4 -0#4);
output1{test++} = 3#4 == (3#4  - -0#4);
output1{test++} = -3#4 == (-3#4  - -0#4);
output1{test++} = 2#4 == (3#4 -1#4);
output1{test++} = -4#4 == (-3#4 -1#4);
output1{test++} = 4#4 == (3#4  - -1#4);
output1{test++} = -2#4 == (-3#4  - -1#4);
output1{test++} = 1#4 == (3#4 -2#4);
output1{test++} = -5#4 == (-3#4 -2#4);
output1{test++} = 5#4 == (3#4  - -2#4);
output1{test++} = -1#4 == (-3#4  - -2#4);
output1{test++} = 0#4 == (3#4 -3#4);
output1{test++} = -6#4 == (-3#4 -3#4);
output1{test++} = 6#4 == (3#4  - -3#4);
output1{test++} = 0#4 == (-3#4  - -3#4);
output1{test++} = -1#4 == (3#4 -4#4);
output1{test++} = -7#4 == (-3#4 -4#4);
output1{test++} = 7#4 == (3#4  - -4#4);
output1{test++} = 1#4 == (-3#4  - -4#4);
output1{test++} = -2#4 == (3#4 -5#4);
output1{test++} = -8#4 == (-3#4 -5#4);
output1{test++} = 8#4 == (3#4  - -5#4);
output1{test++} = 2#4 == (-3#4  - -5#4);
output1{test++} = -3#4 == (3#4 -6#4);
output1{test++} = -9#4 == (-3#4 -6#4);
output1{test++} = 9#4 == (3#4  - -6#4);
output1{test++} = 3#4 == (-3#4  - -6#4);
output1{test++} = -4#4 == (3#4 -7#4);
output1{test++} = -10#4 == (-3#4 -7#4);
output1{test++} = 10#4 == (3#4  - -7#4);
output1{test++} = 4#4 == (-3#4  - -7#4);
output1{test++} = -5#4 == (3#4 -8#4);
output1{test++} = -11#4 == (-3#4 -8#4);
output1{test++} = 11#4 == (3#4  - -8#4);
output1{test++} = 5#4 == (-3#4  - -8#4);
output1{test++} = -6#4 == (3#4 -9#4);
output1{test++} = -12#4 == (-3#4 -9#4);
output1{test++} = 12#4 == (3#4  - -9#4);
output1{test++} = 6#4 == (-3#4  - -9#4);
output1{test++} = -7#4 == (3#4 -10#4);
output1{test++} = -13#4 == (-3#4 -10#4);
output1{test++} = 13#4 == (3#4  - -10#4);
output1{test++} = 7#4 == (-3#4  - -10#4);
output1{test++} = -8#4 == (3#4 -11#4);
output1{test++} = -14#4 == (-3#4 -11#4);
output1{test++} = 14#4 == (3#4  - -11#4);
output1{test++} = 8#4 == (-3#4  - -11#4);
output1{test++} = -9#4 == (3#4 -12#4);
output1{test++} = -15#4 == (-3#4 -12#4);
output1{test++} = 15#4 == (3#4  - -12#4);
output1{test++} = 9#4 == (-3#4  - -12#4);
output1{test++} = -10#4 == (3#4 -13#4);
output1{test++} = -16#4 == (-3#4 -13#4);
output1{test++} = 16#4 == (3#4  - -13#4);
output1{test++} = 10#4 == (-3#4  - -13#4);
output1{test++} = -11#4 == (3#4 -14#4);
output1{test++} = -17#4 == (-3#4 -14#4);
output1{test++} = 17#4 == (3#4  - -14#4);
output1{test++} = 11#4 == (-3#4  - -14#4);
output1{test++} = -12#4 == (3#4 -15#4);
output1{test++} = -18#4 == (-3#4 -15#4);
output1{test++} = 18#4 == (3#4  - -15#4);
output1{test++} = 12#4 == (-3#4  - -15#4);
output1{test++} = 4#4 == (4#4 -0#4);
output1{test++} = -4#4 == (-4#4 -0#4);
output1{test++} = 4#4 == (4#4  - -0#4);
output1{test++} = -4#4 == (-4#4  - -0#4);
output1{test++} = 3#4 == (4#4 -1#4);
output1{test++} = -5#4 == (-4#4 -1#4);
output1{test++} = 5#4 == (4#4  - -1#4);
output1{test++} = -3#4 == (-4#4  - -1#4);
output1{test++} = 2#4 == (4#4 -2#4);
output1{test++} = -6#4 == (-4#4 -2#4);
output1{test++} = 6#4 == (4#4  - -2#4);
output1{test++} = -2#4 == (-4#4  - -2#4);
output1{test++} = 1#4 == (4#4 -3#4);
output1{test++} = -7#4 == (-4#4 -3#4);
output1{test++} = 7#4 == (4#4  - -3#4);
output1{test++} = -1#4 == (-4#4  - -3#4);
output1{test++} = 0#4 == (4#4 -4#4);
output1{test++} = -8#4 == (-4#4 -4#4);
output1{test++} = 8#4 == (4#4  - -4#4);
output1{test++} = 0#4 == (-4#4  - -4#4);
output1{test++} = -1#4 == (4#4 -5#4);
output1{test++} = -9#4 == (-4#4 -5#4);
output1{test++} = 9#4 == (4#4  - -5#4);
output1{test++} = 1#4 == (-4#4  - -5#4);
output1{test++} = -2#4 == (4#4 -6#4);
output1{test++} = -10#4 == (-4#4 -6#4);
output1{test++} = 10#4 == (4#4  - -6#4);
output1{test++} = 2#4 == (-4#4  - -6#4);
output1{test++} = -3#4 == (4#4 -7#4);
output1{test++} = -11#4 == (-4#4 -7#4);
output1{test++} = 11#4 == (4#4  - -7#4);
output1{test++} = 3#4 == (-4#4  - -7#4);
output1{test++} = -4#4 == (4#4 -8#4);
output1{test++} = -12#4 == (-4#4 -8#4);
output1{test++} = 12#4 == (4#4  - -8#4);
output1{test++} = 4#4 == (-4#4  - -8#4);
output1{test++} = -5#4 == (4#4 -9#4);
output1{test++} = -13#4 == (-4#4 -9#4);
output1{test++} = 13#4 == (4#4  - -9#4);
output1{test++} = 5#4 == (-4#4  - -9#4);
output1{test++} = -6#4 == (4#4 -10#4);
output1{test++} = -14#4 == (-4#4 -10#4);
output1{test++} = 14#4 == (4#4  - -10#4);
output1{test++} = 6#4 == (-4#4  - -10#4);
output1{test++} = -7#4 == (4#4 -11#4);
output1{test++} = -15#4 == (-4#4 -11#4);
output1{test++} = 15#4 == (4#4  - -11#4);
output1{test++} = 7#4 == (-4#4  - -11#4);
output1{test++} = -8#4 == (4#4 -12#4);
output1{test++} = -16#4 == (-4#4 -12#4);
output1{test++} = 16#4 == (4#4  - -12#4);
output1{test++} = 8#4 == (-4#4  - -12#4);
output1{test++} = -9#4 == (4#4 -13#4);
output1{test++} = -17#4 == (-4#4 -13#4);
output1{test++} = 17#4 == (4#4  - -13#4);
output1{test++} = 9#4 == (-4#4  - -13#4);
output1{test++} = -10#4 == (4#4 -14#4);
output1{test++} = -18#4 == (-4#4 -14#4);
output1{test++} = 18#4 == (4#4  - -14#4);
output1{test++} = 10#4 == (-4#4  - -14#4);
output1{test++} = -11#4 == (4#4 -15#4);
output1{test++} = -19#4 == (-4#4 -15#4);
output1{test++} = 19#4 == (4#4  - -15#4);
output1{test++} = 11#4 == (-4#4  - -15#4);
output1{test++} = 5#4 == (5#4 -0#4);
output1{test++} = -5#4 == (-5#4 -0#4);
output1{test++} = 5#4 == (5#4  - -0#4);
output1{test++} = -5#4 == (-5#4  - -0#4);
output1{test++} = 4#4 == (5#4 -1#4);
output1{test++} = -6#4 == (-5#4 -1#4);
output1{test++} = 6#4 == (5#4  - -1#4);
output1{test++} = -4#4 == (-5#4  - -1#4);
output1{test++} = 3#4 == (5#4 -2#4);
output1{test++} = -7#4 == (-5#4 -2#4);
output1{test++} = 7#4 == (5#4  - -2#4);
output1{test++} = -3#4 == (-5#4  - -2#4);
output1{test++} = 2#4 == (5#4 -3#4);
output1{test++} = -8#4 == (-5#4 -3#4);
output1{test++} = 8#4 == (5#4  - -3#4);
output1{test++} = -2#4 == (-5#4  - -3#4);
output1{test++} = 1#4 == (5#4 -4#4);
output1{test++} = -9#4 == (-5#4 -4#4);
output1{test++} = 9#4 == (5#4  - -4#4);
output1{test++} = -1#4 == (-5#4  - -4#4);
output1{test++} = 0#4 == (5#4 -5#4);
output1{test++} = -10#4 == (-5#4 -5#4);
output1{test++} = 10#4 == (5#4  - -5#4);
output1{test++} = 0#4 == (-5#4  - -5#4);
output1{test++} = -1#4 == (5#4 -6#4);
output1{test++} = -11#4 == (-5#4 -6#4);
output1{test++} = 11#4 == (5#4  - -6#4);
output1{test++} = 1#4 == (-5#4  - -6#4);
output1{test++} = -2#4 == (5#4 -7#4);
output1{test++} = -12#4 == (-5#4 -7#4);
output1{test++} = 12#4 == (5#4  - -7#4);
output1{test++} = 2#4 == (-5#4  - -7#4);
output1{test++} = -3#4 == (5#4 -8#4);
output1{test++} = -13#4 == (-5#4 -8#4);
output1{test++} = 13#4 == (5#4  - -8#4);
output1{test++} = 3#4 == (-5#4  - -8#4);
output1{test++} = -4#4 == (5#4 -9#4);
output1{test++} = -14#4 == (-5#4 -9#4);
output1{test++} = 14#4 == (5#4  - -9#4);
output1{test++} = 4#4 == (-5#4  - -9#4);
output1{test++} = -5#4 == (5#4 -10#4);
output1{test++} = -15#4 == (-5#4 -10#4);
output1{test++} = 15#4 == (5#4  - -10#4);
output1{test++} = 5#4 == (-5#4  - -10#4);
output1{test++} = -6#4 == (5#4 -11#4);
output1{test++} = -16#4 == (-5#4 -11#4);
output1{test++} = 16#4 == (5#4  - -11#4);
output1{test++} = 6#4 == (-5#4  - -11#4);
output1{test++} = -7#4 == (5#4 -12#4);
output1{test++} = -17#4 == (-5#4 -12#4);
output1{test++} = 17#4 == (5#4  - -12#4);
output1{test++} = 7#4 == (-5#4  - -12#4);
output1{test++} = -8#4 == (5#4 -13#4);
output1{test++} = -18#4 == (-5#4 -13#4);
output1{test++} = 18#4 == (5#4  - -13#4);
output1{test++} = 8#4 == (-5#4  - -13#4);
output1{test++} = -9#4 == (5#4 -14#4);
output1{test++} = -19#4 == (-5#4 -14#4);
output1{test++} = 19#4 == (5#4  - -14#4);
output1{test++} = 9#4 == (-5#4  - -14#4);
output1{test++} = -10#4 == (5#4 -15#4);
output1{test++} = -20#4 == (-5#4 -15#4);
output1{test++} = 20#4 == (5#4  - -15#4);
output1{test++} = 10#4 == (-5#4  - -15#4);
output1{test++} = 6#4 == (6#4 -0#4);
output1{test++} = -6#4 == (-6#4 -0#4);
output1{test++} = 6#4 == (6#4  - -0#4);
output1{test++} = -6#4 == (-6#4  - -0#4);
output1{test++} = 5#4 == (6#4 -1#4);
output1{test++} = -7#4 == (-6#4 -1#4);
output1{test++} = 7#4 == (6#4  - -1#4);
output1{test++} = -5#4 == (-6#4  - -1#4);
output1{test++} = 4#4 == (6#4 -2#4);
output1{test++} = -8#4 == (-6#4 -2#4);
output1{test++} = 8#4 == (6#4  - -2#4);
output1{test++} = -4#4 == (-6#4  - -2#4);
output1{test++} = 3#4 == (6#4 -3#4);
output1{test++} = -9#4 == (-6#4 -3#4);
output1{test++} = 9#4 == (6#4  - -3#4);
output1{test++} = -3#4 == (-6#4  - -3#4);
output1{test++} = 2#4 == (6#4 -4#4);
output1{test++} = -10#4 == (-6#4 -4#4);
output1{test++} = 10#4 == (6#4  - -4#4);
output1{test++} = -2#4 == (-6#4  - -4#4);
output1{test++} = 1#4 == (6#4 -5#4);
output1{test++} = -11#4 == (-6#4 -5#4);
output1{test++} = 11#4 == (6#4  - -5#4);
output1{test++} = -1#4 == (-6#4  - -5#4);
output1{test++} = 0#4 == (6#4 -6#4);
output1{test++} = -12#4 == (-6#4 -6#4);
output1{test++} = 12#4 == (6#4  - -6#4);
output1{test++} = 0#4 == (-6#4  - -6#4);
output1{test++} = -1#4 == (6#4 -7#4);
output1{test++} = -13#4 == (-6#4 -7#4);
output1{test++} = 13#4 == (6#4  - -7#4);
output1{test++} = 1#4 == (-6#4  - -7#4);
output1{test++} = -2#4 == (6#4 -8#4);
output1{test++} = -14#4 == (-6#4 -8#4);
output1{test++} = 14#4 == (6#4  - -8#4);
output1{test++} = 2#4 == (-6#4  - -8#4);
output1{test++} = -3#4 == (6#4 -9#4);
output1{test++} = -15#4 == (-6#4 -9#4);
output1{test++} = 15#4 == (6#4  - -9#4);
output1{test++} = 3#4 == (-6#4  - -9#4);
output1{test++} = -4#4 == (6#4 -10#4);
output1{test++} = -16#4 == (-6#4 -10#4);
output1{test++} = 16#4 == (6#4  - -10#4);
output1{test++} = 4#4 == (-6#4  - -10#4);
output1{test++} = -5#4 == (6#4 -11#4);
output1{test++} = -17#4 == (-6#4 -11#4);
output1{test++} = 17#4 == (6#4  - -11#4);
output1{test++} = 5#4 == (-6#4  - -11#4);
output1{test++} = -6#4 == (6#4 -12#4);
output1{test++} = -18#4 == (-6#4 -12#4);
output1{test++} = 18#4 == (6#4  - -12#4);
output1{test++} = 6#4 == (-6#4  - -12#4);
output1{test++} = -7#4 == (6#4 -13#4);
output1{test++} = -19#4 == (-6#4 -13#4);
output1{test++} = 19#4 == (6#4  - -13#4);
output1{test++} = 7#4 == (-6#4  - -13#4);
output1{test++} = -8#4 == (6#4 -14#4);
output1{test++} = -20#4 == (-6#4 -14#4);
output1{test++} = 20#4 == (6#4  - -14#4);
output1{test++} = 8#4 == (-6#4  - -14#4);
output1{test++} = -9#4 == (6#4 -15#4);
output1{test++} = -21#4 == (-6#4 -15#4);
output1{test++} = 21#4 == (6#4  - -15#4);
output1{test++} = 9#4 == (-6#4  - -15#4);
output1{test++} = 7#4 == (7#4 -0#4);
output1{test++} = -7#4 == (-7#4 -0#4);
output1{test++} = 7#4 == (7#4  - -0#4);
output1{test++} = -7#4 == (-7#4  - -0#4);
output1{test++} = 6#4 == (7#4 -1#4);
output1{test++} = -8#4 == (-7#4 -1#4);
output1{test++} = 8#4 == (7#4  - -1#4);
output1{test++} = -6#4 == (-7#4  - -1#4);
output1{test++} = 5#4 == (7#4 -2#4);
output1{test++} = -9#4 == (-7#4 -2#4);
output1{test++} = 9#4 == (7#4  - -2#4);
output1{test++} = -5#4 == (-7#4  - -2#4);
output1{test++} = 4#4 == (7#4 -3#4);
output1{test++} = -10#4 == (-7#4 -3#4);
output1{test++} = 10#4 == (7#4  - -3#4);
output1{test++} = -4#4 == (-7#4  - -3#4);
output1{test++} = 3#4 == (7#4 -4#4);
output1{test++} = -11#4 == (-7#4 -4#4);
output1{test++} = 11#4 == (7#4  - -4#4);
output1{test++} = -3#4 == (-7#4  - -4#4);
output1{test++} = 2#4 == (7#4 -5#4);
output1{test++} = -12#4 == (-7#4 -5#4);
output1{test++} = 12#4 == (7#4  - -5#4);
output1{test++} = -2#4 == (-7#4  - -5#4);
output1{test++} = 1#4 == (7#4 -6#4);
output1{test++} = -13#4 == (-7#4 -6#4);
output1{test++} = 13#4 == (7#4  - -6#4);
output1{test++} = -1#4 == (-7#4  - -6#4);
output1{test++} = 0#4 == (7#4 -7#4);
output1{test++} = -14#4 == (-7#4 -7#4);
output1{test++} = 14#4 == (7#4  - -7#4);
output1{test++} = 0#4 == (-7#4  - -7#4);
output1{test++} = -1#4 == (7#4 -8#4);
output1{test++} = -15#4 == (-7#4 -8#4);
output1{test++} = 15#4 == (7#4  - -8#4);
output1{test++} = 1#4 == (-7#4  - -8#4);
output1{test++} = -2#4 == (7#4 -9#4);
output1{test++} = -16#4 == (-7#4 -9#4);
output1{test++} = 16#4 == (7#4  - -9#4);
output1{test++} = 2#4 == (-7#4  - -9#4);
output1{test++} = -3#4 == (7#4 -10#4);
output1{test++} = -17#4 == (-7#4 -10#4);
output1{test++} = 17#4 == (7#4  - -10#4);
output1{test++} = 3#4 == (-7#4  - -10#4);
output1{test++} = -4#4 == (7#4 -11#4);
output1{test++} = -18#4 == (-7#4 -11#4);
output1{test++} = 18#4 == (7#4  - -11#4);
output1{test++} = 4#4 == (-7#4  - -11#4);
output1{test++} = -5#4 == (7#4 -12#4);
output1{test++} = -19#4 == (-7#4 -12#4);
output1{test++} = 19#4 == (7#4  - -12#4);
output1{test++} = 5#4 == (-7#4  - -12#4);
output1{test++} = -6#4 == (7#4 -13#4);
output1{test++} = -20#4 == (-7#4 -13#4);
output1{test++} = 20#4 == (7#4  - -13#4);
output1{test++} = 6#4 == (-7#4  - -13#4);
output1{test++} = -7#4 == (7#4 -14#4);
output1{test++} = -21#4 == (-7#4 -14#4);
output1{test++} = 21#4 == (7#4  - -14#4);
output1{test++} = 7#4 == (-7#4  - -14#4);
output1{test++} = -8#4 == (7#4 -15#4);
output1{test++} = -22#4 == (-7#4 -15#4);
output1{test++} = 22#4 == (7#4  - -15#4);
output1{test++} = 8#4 == (-7#4  - -15#4);
output1{test++} = 8#4 == (8#4 -0#4);
output1{test++} = -8#4 == (-8#4 -0#4);
output1{test++} = 8#4 == (8#4  - -0#4);
output1{test++} = -8#4 == (-8#4  - -0#4);
output1{test++} = 7#4 == (8#4 -1#4);
output1{test++} = -9#4 == (-8#4 -1#4);
output1{test++} = 9#4 == (8#4  - -1#4);
output1{test++} = -7#4 == (-8#4  - -1#4);
output1{test++} = 6#4 == (8#4 -2#4);
output1{test++} = -10#4 == (-8#4 -2#4);
output1{test++} = 10#4 == (8#4  - -2#4);
output1{test++} = -6#4 == (-8#4  - -2#4);
output1{test++} = 5#4 == (8#4 -3#4);
output1{test++} = -11#4 == (-8#4 -3#4);
output1{test++} = 11#4 == (8#4  - -3#4);
output1{test++} = -5#4 == (-8#4  - -3#4);
output1{test++} = 4#4 == (8#4 -4#4);
output1{test++} = -12#4 == (-8#4 -4#4);
output1{test++} = 12#4 == (8#4  - -4#4);
output1{test++} = -4#4 == (-8#4  - -4#4);
output1{test++} = 3#4 == (8#4 -5#4);
output1{test++} = -13#4 == (-8#4 -5#4);
output1{test++} = 13#4 == (8#4  - -5#4);
output1{test++} = -3#4 == (-8#4  - -5#4);
output1{test++} = 2#4 == (8#4 -6#4);
output1{test++} = -14#4 == (-8#4 -6#4);
output1{test++} = 14#4 == (8#4  - -6#4);
output1{test++} = -2#4 == (-8#4  - -6#4);
output1{test++} = 1#4 == (8#4 -7#4);
output1{test++} = -15#4 == (-8#4 -7#4);
output1{test++} = 15#4 == (8#4  - -7#4);
output1{test++} = -1#4 == (-8#4  - -7#4);
output1{test++} = 0#4 == (8#4 -8#4);
output1{test++} = -16#4 == (-8#4 -8#4);
output1{test++} = 16#4 == (8#4  - -8#4);
output1{test++} = 0#4 == (-8#4  - -8#4);
output1{test++} = -1#4 == (8#4 -9#4);
output1{test++} = -17#4 == (-8#4 -9#4);
output1{test++} = 17#4 == (8#4  - -9#4);
output1{test++} = 1#4 == (-8#4  - -9#4);
output1{test++} = -2#4 == (8#4 -10#4);
output1{test++} = -18#4 == (-8#4 -10#4);
output1{test++} = 18#4 == (8#4  - -10#4);
output1{test++} = 2#4 == (-8#4  - -10#4);
output1{test++} = -3#4 == (8#4 -11#4);
output1{test++} = -19#4 == (-8#4 -11#4);
output1{test++} = 19#4 == (8#4  - -11#4);
output1{test++} = 3#4 == (-8#4  - -11#4);
output1{test++} = -4#4 == (8#4 -12#4);
output1{test++} = -20#4 == (-8#4 -12#4);
output1{test++} = 20#4 == (8#4  - -12#4);
output1{test++} = 4#4 == (-8#4  - -12#4);
output1{test++} = -5#4 == (8#4 -13#4);
output1{test++} = -21#4 == (-8#4 -13#4);
output1{test++} = 21#4 == (8#4  - -13#4);
output1{test++} = 5#4 == (-8#4  - -13#4);
output1{test++} = -6#4 == (8#4 -14#4);
output1{test++} = -22#4 == (-8#4 -14#4);
output1{test++} = 22#4 == (8#4  - -14#4);
output1{test++} = 6#4 == (-8#4  - -14#4);
output1{test++} = -7#4 == (8#4 -15#4);
output1{test++} = -23#4 == (-8#4 -15#4);
output1{test++} = 23#4 == (8#4  - -15#4);
output1{test++} = 7#4 == (-8#4  - -15#4);
output1{test++} = 9#4 == (9#4 -0#4);
output1{test++} = -9#4 == (-9#4 -0#4);
output1{test++} = 9#4 == (9#4  - -0#4);
output1{test++} = -9#4 == (-9#4  - -0#4);
output1{test++} = 8#4 == (9#4 -1#4);
output1{test++} = -10#4 == (-9#4 -1#4);
output1{test++} = 10#4 == (9#4  - -1#4);
output1{test++} = -8#4 == (-9#4  - -1#4);
output1{test++} = 7#4 == (9#4 -2#4);
output1{test++} = -11#4 == (-9#4 -2#4);
output1{test++} = 11#4 == (9#4  - -2#4);
output1{test++} = -7#4 == (-9#4  - -2#4);
output1{test++} = 6#4 == (9#4 -3#4);
output1{test++} = -12#4 == (-9#4 -3#4);
output1{test++} = 12#4 == (9#4  - -3#4);
output1{test++} = -6#4 == (-9#4  - -3#4);
output1{test++} = 5#4 == (9#4 -4#4);
output1{test++} = -13#4 == (-9#4 -4#4);
output1{test++} = 13#4 == (9#4  - -4#4);
output1{test++} = -5#4 == (-9#4  - -4#4);
output1{test++} = 4#4 == (9#4 -5#4);
output1{test++} = -14#4 == (-9#4 -5#4);
output1{test++} = 14#4 == (9#4  - -5#4);
output1{test++} = -4#4 == (-9#4  - -5#4);
output1{test++} = 3#4 == (9#4 -6#4);
output1{test++} = -15#4 == (-9#4 -6#4);
output1{test++} = 15#4 == (9#4  - -6#4);
output1{test++} = -3#4 == (-9#4  - -6#4);
output1{test++} = 2#4 == (9#4 -7#4);
output1{test++} = -16#4 == (-9#4 -7#4);
output1{test++} = 16#4 == (9#4  - -7#4);
output1{test++} = -2#4 == (-9#4  - -7#4);
output1{test++} = 1#4 == (9#4 -8#4);
output1{test++} = -17#4 == (-9#4 -8#4);
output1{test++} = 17#4 == (9#4  - -8#4);
output1{test++} = -1#4 == (-9#4  - -8#4);
output1{test++} = 0#4 == (9#4 -9#4);
output1{test++} = -18#4 == (-9#4 -9#4);
output1{test++} = 18#4 == (9#4  - -9#4);
output1{test++} = 0#4 == (-9#4  - -9#4);
output1{test++} = -1#4 == (9#4 -10#4);
output1{test++} = -19#4 == (-9#4 -10#4);
output1{test++} = 19#4 == (9#4  - -10#4);
output1{test++} = 1#4 == (-9#4  - -10#4);
output1{test++} = -2#4 == (9#4 -11#4);
output1{test++} = -20#4 == (-9#4 -11#4);
output1{test++} = 20#4 == (9#4  - -11#4);
output1{test++} = 2#4 == (-9#4  - -11#4);
output1{test++} = -3#4 == (9#4 -12#4);
output1{test++} = -21#4 == (-9#4 -12#4);
output1{test++} = 21#4 == (9#4  - -12#4);
output1{test++} = 3#4 == (-9#4  - -12#4);
output1{test++} = -4#4 == (9#4 -13#4);
output1{test++} = -22#4 == (-9#4 -13#4);
output1{test++} = 22#4 == (9#4  - -13#4);
output1{test++} = 4#4 == (-9#4  - -13#4);
output1{test++} = -5#4 == (9#4 -14#4);
output1{test++} = -23#4 == (-9#4 -14#4);
output1{test++} = 23#4 == (9#4  - -14#4);
output1{test++} = 5#4 == (-9#4  - -14#4);
output1{test++} = -6#4 == (9#4 -15#4);
output1{test++} = -24#4 == (-9#4 -15#4);
output1{test++} = 24#4 == (9#4  - -15#4);
output1{test++} = 6#4 == (-9#4  - -15#4);
output1{test++} = 10#4 == (10#4 -0#4);
output1{test++} = -10#4 == (-10#4 -0#4);
output1{test++} = 10#4 == (10#4  - -0#4);
output1{test++} = -10#4 == (-10#4  - -0#4);
output1{test++} = 9#4 == (10#4 -1#4);
output1{test++} = -11#4 == (-10#4 -1#4);
output1{test++} = 11#4 == (10#4  - -1#4);
output1{test++} = -9#4 == (-10#4  - -1#4);
output1{test++} = 8#4 == (10#4 -2#4);
output1{test++} = -12#4 == (-10#4 -2#4);
output1{test++} = 12#4 == (10#4  - -2#4);
output1{test++} = -8#4 == (-10#4  - -2#4);
output1{test++} = 7#4 == (10#4 -3#4);
output1{test++} = -13#4 == (-10#4 -3#4);
output1{test++} = 13#4 == (10#4  - -3#4);
output1{test++} = -7#4 == (-10#4  - -3#4);
output1{test++} = 6#4 == (10#4 -4#4);
output1{test++} = -14#4 == (-10#4 -4#4);
output1{test++} = 14#4 == (10#4  - -4#4);
output1{test++} = -6#4 == (-10#4  - -4#4);
output1{test++} = 5#4 == (10#4 -5#4);
output1{test++} = -15#4 == (-10#4 -5#4);
output1{test++} = 15#4 == (10#4  - -5#4);
output1{test++} = -5#4 == (-10#4  - -5#4);
output1{test++} = 4#4 == (10#4 -6#4);
output1{test++} = -16#4 == (-10#4 -6#4);
output1{test++} = 16#4 == (10#4  - -6#4);
output1{test++} = -4#4 == (-10#4  - -6#4);
output1{test++} = 3#4 == (10#4 -7#4);
output1{test++} = -17#4 == (-10#4 -7#4);
output1{test++} = 17#4 == (10#4  - -7#4);
output1{test++} = -3#4 == (-10#4  - -7#4);
output1{test++} = 2#4 == (10#4 -8#4);
output1{test++} = -18#4 == (-10#4 -8#4);
output1{test++} = 18#4 == (10#4  - -8#4);
output1{test++} = -2#4 == (-10#4  - -8#4);
output1{test++} = 1#4 == (10#4 -9#4);
output1{test++} = -19#4 == (-10#4 -9#4);
output1{test++} = 19#4 == (10#4  - -9#4);
output1{test++} = -1#4 == (-10#4  - -9#4);
output1{test++} = 0#4 == (10#4 -10#4);
output1{test++} = -20#4 == (-10#4 -10#4);
output1{test++} = 20#4 == (10#4  - -10#4);
output1{test++} = 0#4 == (-10#4  - -10#4);
output1{test++} = -1#4 == (10#4 -11#4);
output1{test++} = -21#4 == (-10#4 -11#4);
output1{test++} = 21#4 == (10#4  - -11#4);
output1{test++} = 1#4 == (-10#4  - -11#4);
output1{test++} = -2#4 == (10#4 -12#4);
output1{test++} = -22#4 == (-10#4 -12#4);
output1{test++} = 22#4 == (10#4  - -12#4);
output1{test++} = 2#4 == (-10#4  - -12#4);
output1{test++} = -3#4 == (10#4 -13#4);
output1{test++} = -23#4 == (-10#4 -13#4);
output1{test++} = 23#4 == (10#4  - -13#4);
output1{test++} = 3#4 == (-10#4  - -13#4);
output1{test++} = -4#4 == (10#4 -14#4);
output1{test++} = -24#4 == (-10#4 -14#4);
output1{test++} = 24#4 == (10#4  - -14#4);
output1{test++} = 4#4 == (-10#4  - -14#4);
output1{test++} = -5#4 == (10#4 -15#4);
output1{test++} = -25#4 == (-10#4 -15#4);
output1{test++} = 25#4 == (10#4  - -15#4);
output1{test++} = 5#4 == (-10#4  - -15#4);
output1{test++} = 11#4 == (11#4 -0#4);
output1{test++} = -11#4 == (-11#4 -0#4);
output1{test++} = 11#4 == (11#4  - -0#4);
output1{test++} = -11#4 == (-11#4  - -0#4);
output1{test++} = 10#4 == (11#4 -1#4);
output1{test++} = -12#4 == (-11#4 -1#4);
output1{test++} = 12#4 == (11#4  - -1#4);
output1{test++} = -10#4 == (-11#4  - -1#4);
output1{test++} = 9#4 == (11#4 -2#4);
output1{test++} = -13#4 == (-11#4 -2#4);
output1{test++} = 13#4 == (11#4  - -2#4);
output1{test++} = -9#4 == (-11#4  - -2#4);
output1{test++} = 8#4 == (11#4 -3#4);
output1{test++} = -14#4 == (-11#4 -3#4);
output1{test++} = 14#4 == (11#4  - -3#4);
output1{test++} = -8#4 == (-11#4  - -3#4);
output1{test++} = 7#4 == (11#4 -4#4);
output1{test++} = -15#4 == (-11#4 -4#4);
output1{test++} = 15#4 == (11#4  - -4#4);
output1{test++} = -7#4 == (-11#4  - -4#4);
output1{test++} = 6#4 == (11#4 -5#4);
output1{test++} = -16#4 == (-11#4 -5#4);
output1{test++} = 16#4 == (11#4  - -5#4);
output1{test++} = -6#4 == (-11#4  - -5#4);
output1{test++} = 5#4 == (11#4 -6#4);
output1{test++} = -17#4 == (-11#4 -6#4);
output1{test++} = 17#4 == (11#4  - -6#4);
output1{test++} = -5#4 == (-11#4  - -6#4);
output1{test++} = 4#4 == (11#4 -7#4);
output1{test++} = -18#4 == (-11#4 -7#4);
output1{test++} = 18#4 == (11#4  - -7#4);
output1{test++} = -4#4 == (-11#4  - -7#4);
output1{test++} = 3#4 == (11#4 -8#4);
output1{test++} = -19#4 == (-11#4 -8#4);
output1{test++} = 19#4 == (11#4  - -8#4);
output1{test++} = -3#4 == (-11#4  - -8#4);
output1{test++} = 2#4 == (11#4 -9#4);
output1{test++} = -20#4 == (-11#4 -9#4);
output1{test++} = 20#4 == (11#4  - -9#4);
output1{test++} = -2#4 == (-11#4  - -9#4);
output1{test++} = 1#4 == (11#4 -10#4);
output1{test++} = -21#4 == (-11#4 -10#4);
output1{test++} = 21#4 == (11#4  - -10#4);
output1{test++} = -1#4 == (-11#4  - -10#4);
output1{test++} = 0#4 == (11#4 -11#4);
output1{test++} = -22#4 == (-11#4 -11#4);
output1{test++} = 22#4 == (11#4  - -11#4);
output1{test++} = 0#4 == (-11#4  - -11#4);
output1{test++} = -1#4 == (11#4 -12#4);
output1{test++} = -23#4 == (-11#4 -12#4);
output1{test++} = 23#4 == (11#4  - -12#4);
output1{test++} = 1#4 == (-11#4  - -12#4);
output1{test++} = -2#4 == (11#4 -13#4);
output1{test++} = -24#4 == (-11#4 -13#4);
output1{test++} = 24#4 == (11#4  - -13#4);
output1{test++} = 2#4 == (-11#4  - -13#4);
output1{test++} = -3#4 == (11#4 -14#4);
output1{test++} = -25#4 == (-11#4 -14#4);
output1{test++} = 25#4 == (11#4  - -14#4);
output1{test++} = 3#4 == (-11#4  - -14#4);
output1{test++} = -4#4 == (11#4 -15#4);
output1{test++} = -26#4 == (-11#4 -15#4);
output1{test++} = 26#4 == (11#4  - -15#4);
output1{test++} = 4#4 == (-11#4  - -15#4);
output1{test++} = 12#4 == (12#4 -0#4);
output1{test++} = -12#4 == (-12#4 -0#4);
output1{test++} = 12#4 == (12#4  - -0#4);
output1{test++} = -12#4 == (-12#4  - -0#4);
output1{test++} = 11#4 == (12#4 -1#4);
output1{test++} = -13#4 == (-12#4 -1#4);
output1{test++} = 13#4 == (12#4  - -1#4);
output1{test++} = -11#4 == (-12#4  - -1#4);
output1{test++} = 10#4 == (12#4 -2#4);
output1{test++} = -14#4 == (-12#4 -2#4);
output1{test++} = 14#4 == (12#4  - -2#4);
output1{test++} = -10#4 == (-12#4  - -2#4);
output1{test++} = 9#4 == (12#4 -3#4);
output1{test++} = -15#4 == (-12#4 -3#4);
output1{test++} = 15#4 == (12#4  - -3#4);
output1{test++} = -9#4 == (-12#4  - -3#4);
output1{test++} = 8#4 == (12#4 -4#4);
output1{test++} = -16#4 == (-12#4 -4#4);
output1{test++} = 16#4 == (12#4  - -4#4);
output1{test++} = -8#4 == (-12#4  - -4#4);
output1{test++} = 7#4 == (12#4 -5#4);
output1{test++} = -17#4 == (-12#4 -5#4);
output1{test++} = 17#4 == (12#4  - -5#4);
output1{test++} = -7#4 == (-12#4  - -5#4);
output1{test++} = 6#4 == (12#4 -6#4);
output1{test++} = -18#4 == (-12#4 -6#4);
output1{test++} = 18#4 == (12#4  - -6#4);
output1{test++} = -6#4 == (-12#4  - -6#4);
output1{test++} = 5#4 == (12#4 -7#4);
output1{test++} = -19#4 == (-12#4 -7#4);
output1{test++} = 19#4 == (12#4  - -7#4);
output1{test++} = -5#4 == (-12#4  - -7#4);
output1{test++} = 4#4 == (12#4 -8#4);
output1{test++} = -20#4 == (-12#4 -8#4);
output1{test++} = 20#4 == (12#4  - -8#4);
output1{test++} = -4#4 == (-12#4  - -8#4);
output1{test++} = 3#4 == (12#4 -9#4);
output1{test++} = -21#4 == (-12#4 -9#4);
output1{test++} = 21#4 == (12#4  - -9#4);
output1{test++} = -3#4 == (-12#4  - -9#4);
output1{test++} = 2#4 == (12#4 -10#4);
output1{test++} = -22#4 == (-12#4 -10#4);
output1{test++} = 22#4 == (12#4  - -10#4);
output1{test++} = -2#4 == (-12#4  - -10#4);
output1{test++} = 1#4 == (12#4 -11#4);
output1{test++} = -23#4 == (-12#4 -11#4);
output1{test++} = 23#4 == (12#4  - -11#4);
output1{test++} = -1#4 == (-12#4  - -11#4);
output1{test++} = 0#4 == (12#4 -12#4);
output1{test++} = -24#4 == (-12#4 -12#4);
output1{test++} = 24#4 == (12#4  - -12#4);
output1{test++} = 0#4 == (-12#4  - -12#4);
output1{test++} = -1#4 == (12#4 -13#4);
output1{test++} = -25#4 == (-12#4 -13#4);
output1{test++} = 25#4 == (12#4  - -13#4);
output1{test++} = 1#4 == (-12#4  - -13#4);
output1{test++} = -2#4 == (12#4 -14#4);
output1{test++} = -26#4 == (-12#4 -14#4);
output1{test++} = 26#4 == (12#4  - -14#4);
output1{test++} = 2#4 == (-12#4  - -14#4);
output1{test++} = -3#4 == (12#4 -15#4);
output1{test++} = -27#4 == (-12#4 -15#4);
output1{test++} = 27#4 == (12#4  - -15#4);
output1{test++} = 3#4 == (-12#4  - -15#4);
output1{test++} = 13#4 == (13#4 -0#4);
output1{test++} = -13#4 == (-13#4 -0#4);
output1{test++} = 13#4 == (13#4  - -0#4);
output1{test++} = -13#4 == (-13#4  - -0#4);
output1{test++} = 12#4 == (13#4 -1#4);
output1{test++} = -14#4 == (-13#4 -1#4);
output1{test++} = 14#4 == (13#4  - -1#4);
output1{test++} = -12#4 == (-13#4  - -1#4);
output1{test++} = 11#4 == (13#4 -2#4);
output1{test++} = -15#4 == (-13#4 -2#4);
output1{test++} = 15#4 == (13#4  - -2#4);
output1{test++} = -11#4 == (-13#4  - -2#4);
output1{test++} = 10#4 == (13#4 -3#4);
output1{test++} = -16#4 == (-13#4 -3#4);
output1{test++} = 16#4 == (13#4  - -3#4);
output1{test++} = -10#4 == (-13#4  - -3#4);
output1{test++} = 9#4 == (13#4 -4#4);
output1{test++} = -17#4 == (-13#4 -4#4);
output1{test++} = 17#4 == (13#4  - -4#4);
output1{test++} = -9#4 == (-13#4  - -4#4);
output1{test++} = 8#4 == (13#4 -5#4);
output1{test++} = -18#4 == (-13#4 -5#4);
output1{test++} = 18#4 == (13#4  - -5#4);
output1{test++} = -8#4 == (-13#4  - -5#4);
output1{test++} = 7#4 == (13#4 -6#4);
output1{test++} = -19#4 == (-13#4 -6#4);
output1{test++} = 19#4 == (13#4  - -6#4);
output1{test++} = -7#4 == (-13#4  - -6#4);
output1{test++} = 6#4 == (13#4 -7#4);
output1{test++} = -20#4 == (-13#4 -7#4);
output1{test++} = 20#4 == (13#4  - -7#4);
output1{test++} = -6#4 == (-13#4  - -7#4);
output1{test++} = 5#4 == (13#4 -8#4);
output1{test++} = -21#4 == (-13#4 -8#4);
output1{test++} = 21#4 == (13#4  - -8#4);
output1{test++} = -5#4 == (-13#4  - -8#4);
output1{test++} = 4#4 == (13#4 -9#4);
output1{test++} = -22#4 == (-13#4 -9#4);
output1{test++} = 22#4 == (13#4  - -9#4);
output1{test++} = -4#4 == (-13#4  - -9#4);
output1{test++} = 3#4 == (13#4 -10#4);
output1{test++} = -23#4 == (-13#4 -10#4);
output1{test++} = 23#4 == (13#4  - -10#4);
output1{test++} = -3#4 == (-13#4  - -10#4);
output1{test++} = 2#4 == (13#4 -11#4);
output1{test++} = -24#4 == (-13#4 -11#4);
output1{test++} = 24#4 == (13#4  - -11#4);
output1{test++} = -2#4 == (-13#4  - -11#4);
output1{test++} = 1#4 == (13#4 -12#4);
output1{test++} = -25#4 == (-13#4 -12#4);
output1{test++} = 25#4 == (13#4  - -12#4);
output1{test++} = -1#4 == (-13#4  - -12#4);
output1{test++} = 0#4 == (13#4 -13#4);
output1{test++} = -26#4 == (-13#4 -13#4);
output1{test++} = 26#4 == (13#4  - -13#4);
output1{test++} = 0#4 == (-13#4  - -13#4);
output1{test++} = -1#4 == (13#4 -14#4);
output1{test++} = -27#4 == (-13#4 -14#4);
output1{test++} = 27#4 == (13#4  - -14#4);
output1{test++} = 1#4 == (-13#4  - -14#4);
output1{test++} = -2#4 == (13#4 -15#4);
output1{test++} = -28#4 == (-13#4 -15#4);
output1{test++} = 28#4 == (13#4  - -15#4);
output1{test++} = 2#4 == (-13#4  - -15#4);
output1{test++} = 14#4 == (14#4 -0#4);
output1{test++} = -14#4 == (-14#4 -0#4);
output1{test++} = 14#4 == (14#4  - -0#4);
output1{test++} = -14#4 == (-14#4  - -0#4);
output1{test++} = 13#4 == (14#4 -1#4);
output1{test++} = -15#4 == (-14#4 -1#4);
output1{test++} = 15#4 == (14#4  - -1#4);
output1{test++} = -13#4 == (-14#4  - -1#4);
output1{test++} = 12#4 == (14#4 -2#4);
output1{test++} = -16#4 == (-14#4 -2#4);
output1{test++} = 16#4 == (14#4  - -2#4);
output1{test++} = -12#4 == (-14#4  - -2#4);
output1{test++} = 11#4 == (14#4 -3#4);
output1{test++} = -17#4 == (-14#4 -3#4);
output1{test++} = 17#4 == (14#4  - -3#4);
output1{test++} = -11#4 == (-14#4  - -3#4);
output1{test++} = 10#4 == (14#4 -4#4);
output1{test++} = -18#4 == (-14#4 -4#4);
output1{test++} = 18#4 == (14#4  - -4#4);
output1{test++} = -10#4 == (-14#4  - -4#4);
output1{test++} = 9#4 == (14#4 -5#4);
output1{test++} = -19#4 == (-14#4 -5#4);
output1{test++} = 19#4 == (14#4  - -5#4);
output1{test++} = -9#4 == (-14#4  - -5#4);
output1{test++} = 8#4 == (14#4 -6#4);
output1{test++} = -20#4 == (-14#4 -6#4);
output1{test++} = 20#4 == (14#4  - -6#4);
output1{test++} = -8#4 == (-14#4  - -6#4);
output1{test++} = 7#4 == (14#4 -7#4);
output1{test++} = -21#4 == (-14#4 -7#4);
output1{test++} = 21#4 == (14#4  - -7#4);
output1{test++} = -7#4 == (-14#4  - -7#4);
output1{test++} = 6#4 == (14#4 -8#4);
output1{test++} = -22#4 == (-14#4 -8#4);
output1{test++} = 22#4 == (14#4  - -8#4);
output1{test++} = -6#4 == (-14#4  - -8#4);
output1{test++} = 5#4 == (14#4 -9#4);
output1{test++} = -23#4 == (-14#4 -9#4);
output1{test++} = 23#4 == (14#4  - -9#4);
output1{test++} = -5#4 == (-14#4  - -9#4);
output1{test++} = 4#4 == (14#4 -10#4);
output1{test++} = -24#4 == (-14#4 -10#4);
output1{test++} = 24#4 == (14#4  - -10#4);
output1{test++} = -4#4 == (-14#4  - -10#4);
output1{test++} = 3#4 == (14#4 -11#4);
output1{test++} = -25#4 == (-14#4 -11#4);
output1{test++} = 25#4 == (14#4  - -11#4);
output1{test++} = -3#4 == (-14#4  - -11#4);
output1{test++} = 2#4 == (14#4 -12#4);
output1{test++} = -26#4 == (-14#4 -12#4);
output1{test++} = 26#4 == (14#4  - -12#4);
output1{test++} = -2#4 == (-14#4  - -12#4);
output1{test++} = 1#4 == (14#4 -13#4);
output1{test++} = -27#4 == (-14#4 -13#4);
output1{test++} = 27#4 == (14#4  - -13#4);
output1{test++} = -1#4 == (-14#4  - -13#4);
output1{test++} = 0#4 == (14#4 -14#4);
output1{test++} = -28#4 == (-14#4 -14#4);
output1{test++} = 28#4 == (14#4  - -14#4);
output1{test++} = 0#4 == (-14#4  - -14#4);
output1{test++} = -1#4 == (14#4 -15#4);
output1{test++} = -29#4 == (-14#4 -15#4);
output1{test++} = 29#4 == (14#4  - -15#4);
output1{test++} = 1#4 == (-14#4  - -15#4);
output1{test++} = 15#4 == (15#4 -0#4);
output1{test++} = -15#4 == (-15#4 -0#4);
output1{test++} = 15#4 == (15#4  - -0#4);
output1{test++} = -15#4 == (-15#4  - -0#4);
output1{test++} = 14#4 == (15#4 -1#4);
output1{test++} = -16#4 == (-15#4 -1#4);
output1{test++} = 16#4 == (15#4  - -1#4);
output1{test++} = -14#4 == (-15#4  - -1#4);
output1{test++} = 13#4 == (15#4 -2#4);
output1{test++} = -17#4 == (-15#4 -2#4);
output1{test++} = 17#4 == (15#4  - -2#4);
output1{test++} = -13#4 == (-15#4  - -2#4);
output1{test++} = 12#4 == (15#4 -3#4);
output1{test++} = -18#4 == (-15#4 -3#4);
output1{test++} = 18#4 == (15#4  - -3#4);
output1{test++} = -12#4 == (-15#4  - -3#4);
output1{test++} = 11#4 == (15#4 -4#4);
output1{test++} = -19#4 == (-15#4 -4#4);
output1{test++} = 19#4 == (15#4  - -4#4);
output1{test++} = -11#4 == (-15#4  - -4#4);
output1{test++} = 10#4 == (15#4 -5#4);
output1{test++} = -20#4 == (-15#4 -5#4);
output1{test++} = 20#4 == (15#4  - -5#4);
output1{test++} = -10#4 == (-15#4  - -5#4);
output1{test++} = 9#4 == (15#4 -6#4);
output1{test++} = -21#4 == (-15#4 -6#4);
output1{test++} = 21#4 == (15#4  - -6#4);
output1{test++} = -9#4 == (-15#4  - -6#4);
output1{test++} = 8#4 == (15#4 -7#4);
output1{test++} = -22#4 == (-15#4 -7#4);
output1{test++} = 22#4 == (15#4  - -7#4);
output1{test++} = -8#4 == (-15#4  - -7#4);
output1{test++} = 7#4 == (15#4 -8#4);
output1{test++} = -23#4 == (-15#4 -8#4);
output1{test++} = 23#4 == (15#4  - -8#4);
output1{test++} = -7#4 == (-15#4  - -8#4);
output1{test++} = 6#4 == (15#4 -9#4);
output1{test++} = -24#4 == (-15#4 -9#4);
output1{test++} = 24#4 == (15#4  - -9#4);
output1{test++} = -6#4 == (-15#4  - -9#4);
output1{test++} = 5#4 == (15#4 -10#4);
output1{test++} = -25#4 == (-15#4 -10#4);
output1{test++} = 25#4 == (15#4  - -10#4);
output1{test++} = -5#4 == (-15#4  - -10#4);
output1{test++} = 4#4 == (15#4 -11#4);
output1{test++} = -26#4 == (-15#4 -11#4);
output1{test++} = 26#4 == (15#4  - -11#4);
output1{test++} = -4#4 == (-15#4  - -11#4);
output1{test++} = 3#4 == (15#4 -12#4);
output1{test++} = -27#4 == (-15#4 -12#4);
output1{test++} = 27#4 == (15#4  - -12#4);
output1{test++} = -3#4 == (-15#4  - -12#4);
output1{test++} = 2#4 == (15#4 -13#4);
output1{test++} = -28#4 == (-15#4 -13#4);
output1{test++} = 28#4 == (15#4  - -13#4);
output1{test++} = -2#4 == (-15#4  - -13#4);
output1{test++} = 1#4 == (15#4 -14#4);
output1{test++} = -29#4 == (-15#4 -14#4);
output1{test++} = 29#4 == (15#4  - -14#4);
output1{test++} = -1#4 == (-15#4  - -14#4);
output1{test++} = 0#4 == (15#4 -15#4);
output1{test++} = -30#4 == (-15#4 -15#4);
output1{test++} = 30#4 == (15#4  - -15#4);
output1{test++} = 0#4 == (-15#4  - -15#4);


output1{test++} = 0#4 == (0#4 &0#4);
output1{test++} = 0#4 == (0#4  | 0#4);
output1{test++} = 0#4 == (0#4  ^ 0#4);
output1{test++} = 0#4 == (0#4 &1#4);
output1{test++} = 1#4 == (0#4  | 1#4);
output1{test++} = 1#4 == (0#4  ^ 1#4);
output1{test++} = 0#4 == (0#4 &2#4);
output1{test++} = 2#4 == (0#4  | 2#4);
output1{test++} = 2#4 == (0#4  ^ 2#4);
output1{test++} = 0#4 == (0#4 &3#4);
output1{test++} = 3#4 == (0#4  | 3#4);
output1{test++} = 3#4 == (0#4  ^ 3#4);
output1{test++} = 0#4 == (0#4 &4#4);
output1{test++} = 4#4 == (0#4  | 4#4);
output1{test++} = 4#4 == (0#4  ^ 4#4);
output1{test++} = 0#4 == (0#4 &5#4);
output1{test++} = 5#4 == (0#4  | 5#4);
output1{test++} = 5#4 == (0#4  ^ 5#4);
output1{test++} = 0#4 == (0#4 &6#4);
output1{test++} = 6#4 == (0#4  | 6#4);
output1{test++} = 6#4 == (0#4  ^ 6#4);
output1{test++} = 0#4 == (0#4 &7#4);
output1{test++} = 7#4 == (0#4  | 7#4);
output1{test++} = 7#4 == (0#4  ^ 7#4);
output1{test++} = 0#4 == (0#4 &8#4);
output1{test++} = 8#4 == (0#4  | 8#4);
output1{test++} = 8#4 == (0#4  ^ 8#4);
output1{test++} = 0#4 == (0#4 &9#4);
output1{test++} = 9#4 == (0#4  | 9#4);
output1{test++} = 9#4 == (0#4  ^ 9#4);
output1{test++} = 0#4 == (0#4 &10#4);
output1{test++} = 10#4 == (0#4  | 10#4);
output1{test++} = 10#4 == (0#4  ^ 10#4);
output1{test++} = 0#4 == (0#4 &11#4);
output1{test++} = 11#4 == (0#4  | 11#4);
output1{test++} = 11#4 == (0#4  ^ 11#4);
output1{test++} = 0#4 == (0#4 &12#4);
output1{test++} = 12#4 == (0#4  | 12#4);
output1{test++} = 12#4 == (0#4  ^ 12#4);
output1{test++} = 0#4 == (0#4 &13#4);
output1{test++} = 13#4 == (0#4  | 13#4);
output1{test++} = 13#4 == (0#4  ^ 13#4);
output1{test++} = 0#4 == (0#4 &14#4);
output1{test++} = 14#4 == (0#4  | 14#4);
output1{test++} = 14#4 == (0#4  ^ 14#4);
output1{test++} = 0#4 == (0#4 &15#4);
output1{test++} = 15#4 == (0#4  | 15#4);
output1{test++} = 15#4 == (0#4  ^ 15#4);
output1{test++} = 0#4 == (1#4 &0#4);
output1{test++} = 1#4 == (1#4  | 0#4);
output1{test++} = 1#4 == (1#4  ^ 0#4);
output1{test++} = 1#4 == (1#4 &1#4);
output1{test++} = 1#4 == (1#4  | 1#4);
output1{test++} = 0#4 == (1#4  ^ 1#4);
output1{test++} = 0#4 == (1#4 &2#4);
output1{test++} = 3#4 == (1#4  | 2#4);
output1{test++} = 3#4 == (1#4  ^ 2#4);
output1{test++} = 1#4 == (1#4 &3#4);
output1{test++} = 3#4 == (1#4  | 3#4);
output1{test++} = 2#4 == (1#4  ^ 3#4);
output1{test++} = 0#4 == (1#4 &4#4);
output1{test++} = 5#4 == (1#4  | 4#4);
output1{test++} = 5#4 == (1#4  ^ 4#4);
output1{test++} = 1#4 == (1#4 &5#4);
output1{test++} = 5#4 == (1#4  | 5#4);
output1{test++} = 4#4 == (1#4  ^ 5#4);
output1{test++} = 0#4 == (1#4 &6#4);
output1{test++} = 7#4 == (1#4  | 6#4);
output1{test++} = 7#4 == (1#4  ^ 6#4);
output1{test++} = 1#4 == (1#4 &7#4);
output1{test++} = 7#4 == (1#4  | 7#4);
output1{test++} = 6#4 == (1#4  ^ 7#4);
output1{test++} = 0#4 == (1#4 &8#4);
output1{test++} = 9#4 == (1#4  | 8#4);
output1{test++} = 9#4 == (1#4  ^ 8#4);
output1{test++} = 1#4 == (1#4 &9#4);
output1{test++} = 9#4 == (1#4  | 9#4);
output1{test++} = 8#4 == (1#4  ^ 9#4);
output1{test++} = 0#4 == (1#4 &10#4);
output1{test++} = 11#4 == (1#4  | 10#4);
output1{test++} = 11#4 == (1#4  ^ 10#4);
output1{test++} = 1#4 == (1#4 &11#4);
output1{test++} = 11#4 == (1#4  | 11#4);
output1{test++} = 10#4 == (1#4  ^ 11#4);
output1{test++} = 0#4 == (1#4 &12#4);
output1{test++} = 13#4 == (1#4  | 12#4);
output1{test++} = 13#4 == (1#4  ^ 12#4);
output1{test++} = 1#4 == (1#4 &13#4);
output1{test++} = 13#4 == (1#4  | 13#4);
output1{test++} = 12#4 == (1#4  ^ 13#4);
output1{test++} = 0#4 == (1#4 &14#4);
output1{test++} = 15#4 == (1#4  | 14#4);
output1{test++} = 15#4 == (1#4  ^ 14#4);
output1{test++} = 1#4 == (1#4 &15#4);
output1{test++} = 15#4 == (1#4  | 15#4);
output1{test++} = 14#4 == (1#4  ^ 15#4);
output1{test++} = 0#4 == (2#4 &0#4);
output1{test++} = 2#4 == (2#4  | 0#4);
output1{test++} = 2#4 == (2#4  ^ 0#4);
output1{test++} = 0#4 == (2#4 &1#4);
output1{test++} = 3#4 == (2#4  | 1#4);
output1{test++} = 3#4 == (2#4  ^ 1#4);
output1{test++} = 2#4 == (2#4 &2#4);
output1{test++} = 2#4 == (2#4  | 2#4);
output1{test++} = 0#4 == (2#4  ^ 2#4);
output1{test++} = 2#4 == (2#4 &3#4);
output1{test++} = 3#4 == (2#4  | 3#4);
output1{test++} = 1#4 == (2#4  ^ 3#4);
output1{test++} = 0#4 == (2#4 &4#4);
output1{test++} = 6#4 == (2#4  | 4#4);
output1{test++} = 6#4 == (2#4  ^ 4#4);
output1{test++} = 0#4 == (2#4 &5#4);
output1{test++} = 7#4 == (2#4  | 5#4);
output1{test++} = 7#4 == (2#4  ^ 5#4);
output1{test++} = 2#4 == (2#4 &6#4);
output1{test++} = 6#4 == (2#4  | 6#4);
output1{test++} = 4#4 == (2#4  ^ 6#4);
output1{test++} = 2#4 == (2#4 &7#4);
output1{test++} = 7#4 == (2#4  | 7#4);
output1{test++} = 5#4 == (2#4  ^ 7#4);
output1{test++} = 0#4 == (2#4 &8#4);
output1{test++} = 10#4 == (2#4  | 8#4);
output1{test++} = 10#4 == (2#4  ^ 8#4);
output1{test++} = 0#4 == (2#4 &9#4);
output1{test++} = 11#4 == (2#4  | 9#4);
output1{test++} = 11#4 == (2#4  ^ 9#4);
output1{test++} = 2#4 == (2#4 &10#4);
output1{test++} = 10#4 == (2#4  | 10#4);
output1{test++} = 8#4 == (2#4  ^ 10#4);
output1{test++} = 2#4 == (2#4 &11#4);
output1{test++} = 11#4 == (2#4  | 11#4);
output1{test++} = 9#4 == (2#4  ^ 11#4);
output1{test++} = 0#4 == (2#4 &12#4);
output1{test++} = 14#4 == (2#4  | 12#4);
output1{test++} = 14#4 == (2#4  ^ 12#4);
output1{test++} = 0#4 == (2#4 &13#4);
output1{test++} = 15#4 == (2#4  | 13#4);
output1{test++} = 15#4 == (2#4  ^ 13#4);
output1{test++} = 2#4 == (2#4 &14#4);
output1{test++} = 14#4 == (2#4  | 14#4);
output1{test++} = 12#4 == (2#4  ^ 14#4);
output1{test++} = 2#4 == (2#4 &15#4);
output1{test++} = 15#4 == (2#4  | 15#4);
output1{test++} = 13#4 == (2#4  ^ 15#4);
output1{test++} = 0#4 == (3#4 &0#4);
output1{test++} = 3#4 == (3#4  | 0#4);
output1{test++} = 3#4 == (3#4  ^ 0#4);
output1{test++} = 1#4 == (3#4 &1#4);
output1{test++} = 3#4 == (3#4  | 1#4);
output1{test++} = 2#4 == (3#4  ^ 1#4);
output1{test++} = 2#4 == (3#4 &2#4);
output1{test++} = 3#4 == (3#4  | 2#4);
output1{test++} = 1#4 == (3#4  ^ 2#4);
output1{test++} = 3#4 == (3#4 &3#4);
output1{test++} = 3#4 == (3#4  | 3#4);
output1{test++} = 0#4 == (3#4  ^ 3#4);
output1{test++} = 0#4 == (3#4 &4#4);
output1{test++} = 7#4 == (3#4  | 4#4);
output1{test++} = 7#4 == (3#4  ^ 4#4);
output1{test++} = 1#4 == (3#4 &5#4);
output1{test++} = 7#4 == (3#4  | 5#4);
output1{test++} = 6#4 == (3#4  ^ 5#4);
output1{test++} = 2#4 == (3#4 &6#4);
output1{test++} = 7#4 == (3#4  | 6#4);
output1{test++} = 5#4 == (3#4  ^ 6#4);
output1{test++} = 3#4 == (3#4 &7#4);
output1{test++} = 7#4 == (3#4  | 7#4);
output1{test++} = 4#4 == (3#4  ^ 7#4);
output1{test++} = 0#4 == (3#4 &8#4);
output1{test++} = 11#4 == (3#4  | 8#4);
output1{test++} = 11#4 == (3#4  ^ 8#4);
output1{test++} = 1#4 == (3#4 &9#4);
output1{test++} = 11#4 == (3#4  | 9#4);
output1{test++} = 10#4 == (3#4  ^ 9#4);
output1{test++} = 2#4 == (3#4 &10#4);
output1{test++} = 11#4 == (3#4  | 10#4);
output1{test++} = 9#4 == (3#4  ^ 10#4);
output1{test++} = 3#4 == (3#4 &11#4);
output1{test++} = 11#4 == (3#4  | 11#4);
output1{test++} = 8#4 == (3#4  ^ 11#4);
output1{test++} = 0#4 == (3#4 &12#4);
output1{test++} = 15#4 == (3#4  | 12#4);
output1{test++} = 15#4 == (3#4  ^ 12#4);
output1{test++} = 1#4 == (3#4 &13#4);
output1{test++} = 15#4 == (3#4  | 13#4);
output1{test++} = 14#4 == (3#4  ^ 13#4);
output1{test++} = 2#4 == (3#4 &14#4);
output1{test++} = 15#4 == (3#4  | 14#4);
output1{test++} = 13#4 == (3#4  ^ 14#4);
output1{test++} = 3#4 == (3#4 &15#4);
output1{test++} = 15#4 == (3#4  | 15#4);
output1{test++} = 12#4 == (3#4  ^ 15#4);
output1{test++} = 0#4 == (4#4 &0#4);
output1{test++} = 4#4 == (4#4  | 0#4);
output1{test++} = 4#4 == (4#4  ^ 0#4);
output1{test++} = 0#4 == (4#4 &1#4);
output1{test++} = 5#4 == (4#4  | 1#4);
output1{test++} = 5#4 == (4#4  ^ 1#4);
output1{test++} = 0#4 == (4#4 &2#4);
output1{test++} = 6#4 == (4#4  | 2#4);
output1{test++} = 6#4 == (4#4  ^ 2#4);
output1{test++} = 0#4 == (4#4 &3#4);
output1{test++} = 7#4 == (4#4  | 3#4);
output1{test++} = 7#4 == (4#4  ^ 3#4);
output1{test++} = 4#4 == (4#4 &4#4);
output1{test++} = 4#4 == (4#4  | 4#4);
output1{test++} = 0#4 == (4#4  ^ 4#4);
output1{test++} = 4#4 == (4#4 &5#4);
output1{test++} = 5#4 == (4#4  | 5#4);
output1{test++} = 1#4 == (4#4  ^ 5#4);
output1{test++} = 4#4 == (4#4 &6#4);
output1{test++} = 6#4 == (4#4  | 6#4);
output1{test++} = 2#4 == (4#4  ^ 6#4);
output1{test++} = 4#4 == (4#4 &7#4);
output1{test++} = 7#4 == (4#4  | 7#4);
output1{test++} = 3#4 == (4#4  ^ 7#4);
output1{test++} = 0#4 == (4#4 &8#4);
output1{test++} = 12#4 == (4#4  | 8#4);
output1{test++} = 12#4 == (4#4  ^ 8#4);
output1{test++} = 0#4 == (4#4 &9#4);
output1{test++} = 13#4 == (4#4  | 9#4);
output1{test++} = 13#4 == (4#4  ^ 9#4);
output1{test++} = 0#4 == (4#4 &10#4);
output1{test++} = 14#4 == (4#4  | 10#4);
output1{test++} = 14#4 == (4#4  ^ 10#4);
output1{test++} = 0#4 == (4#4 &11#4);
output1{test++} = 15#4 == (4#4  | 11#4);
output1{test++} = 15#4 == (4#4  ^ 11#4);
output1{test++} = 4#4 == (4#4 &12#4);
output1{test++} = 12#4 == (4#4  | 12#4);
output1{test++} = 8#4 == (4#4  ^ 12#4);
output1{test++} = 4#4 == (4#4 &13#4);
output1{test++} = 13#4 == (4#4  | 13#4);
output1{test++} = 9#4 == (4#4  ^ 13#4);
output1{test++} = 4#4 == (4#4 &14#4);
output1{test++} = 14#4 == (4#4  | 14#4);
output1{test++} = 10#4 == (4#4  ^ 14#4);
output1{test++} = 4#4 == (4#4 &15#4);
output1{test++} = 15#4 == (4#4  | 15#4);
output1{test++} = 11#4 == (4#4  ^ 15#4);
output1{test++} = 0#4 == (5#4 &0#4);
output1{test++} = 5#4 == (5#4  | 0#4);
output1{test++} = 5#4 == (5#4  ^ 0#4);
output1{test++} = 1#4 == (5#4 &1#4);
output1{test++} = 5#4 == (5#4  | 1#4);
output1{test++} = 4#4 == (5#4  ^ 1#4);
output1{test++} = 0#4 == (5#4 &2#4);
output1{test++} = 7#4 == (5#4  | 2#4);
output1{test++} = 7#4 == (5#4  ^ 2#4);
output1{test++} = 1#4 == (5#4 &3#4);
output1{test++} = 7#4 == (5#4  | 3#4);
output1{test++} = 6#4 == (5#4  ^ 3#4);
output1{test++} = 4#4 == (5#4 &4#4);
output1{test++} = 5#4 == (5#4  | 4#4);
output1{test++} = 1#4 == (5#4  ^ 4#4);
output1{test++} = 5#4 == (5#4 &5#4);
output1{test++} = 5#4 == (5#4  | 5#4);
output1{test++} = 0#4 == (5#4  ^ 5#4);
output1{test++} = 4#4 == (5#4 &6#4);
output1{test++} = 7#4 == (5#4  | 6#4);
output1{test++} = 3#4 == (5#4  ^ 6#4);
output1{test++} = 5#4 == (5#4 &7#4);
output1{test++} = 7#4 == (5#4  | 7#4);
output1{test++} = 2#4 == (5#4  ^ 7#4);
output1{test++} = 0#4 == (5#4 &8#4);
output1{test++} = 13#4 == (5#4  | 8#4);
output1{test++} = 13#4 == (5#4  ^ 8#4);
output1{test++} = 1#4 == (5#4 &9#4);
output1{test++} = 13#4 == (5#4  | 9#4);
output1{test++} = 12#4 == (5#4  ^ 9#4);
output1{test++} = 0#4 == (5#4 &10#4);
output1{test++} = 15#4 == (5#4  | 10#4);
output1{test++} = 15#4 == (5#4  ^ 10#4);
output1{test++} = 1#4 == (5#4 &11#4);
output1{test++} = 15#4 == (5#4  | 11#4);
output1{test++} = 14#4 == (5#4  ^ 11#4);
output1{test++} = 4#4 == (5#4 &12#4);
output1{test++} = 13#4 == (5#4  | 12#4);
output1{test++} = 9#4 == (5#4  ^ 12#4);
output1{test++} = 5#4 == (5#4 &13#4);
output1{test++} = 13#4 == (5#4  | 13#4);
output1{test++} = 8#4 == (5#4  ^ 13#4);
output1{test++} = 4#4 == (5#4 &14#4);
output1{test++} = 15#4 == (5#4  | 14#4);
output1{test++} = 11#4 == (5#4  ^ 14#4);
output1{test++} = 5#4 == (5#4 &15#4);
output1{test++} = 15#4 == (5#4  | 15#4);
output1{test++} = 10#4 == (5#4  ^ 15#4);
output1{test++} = 0#4 == (6#4 &0#4);
output1{test++} = 6#4 == (6#4  | 0#4);
output1{test++} = 6#4 == (6#4  ^ 0#4);
output1{test++} = 0#4 == (6#4 &1#4);
output1{test++} = 7#4 == (6#4  | 1#4);
output1{test++} = 7#4 == (6#4  ^ 1#4);
output1{test++} = 2#4 == (6#4 &2#4);
output1{test++} = 6#4 == (6#4  | 2#4);
output1{test++} = 4#4 == (6#4  ^ 2#4);
output1{test++} = 2#4 == (6#4 &3#4);
output1{test++} = 7#4 == (6#4  | 3#4);
output1{test++} = 5#4 == (6#4  ^ 3#4);
output1{test++} = 4#4 == (6#4 &4#4);
output1{test++} = 6#4 == (6#4  | 4#4);
output1{test++} = 2#4 == (6#4  ^ 4#4);
output1{test++} = 4#4 == (6#4 &5#4);
output1{test++} = 7#4 == (6#4  | 5#4);
output1{test++} = 3#4 == (6#4  ^ 5#4);
output1{test++} = 6#4 == (6#4 &6#4);
output1{test++} = 6#4 == (6#4  | 6#4);
output1{test++} = 0#4 == (6#4  ^ 6#4);
output1{test++} = 6#4 == (6#4 &7#4);
output1{test++} = 7#4 == (6#4  | 7#4);
output1{test++} = 1#4 == (6#4  ^ 7#4);
output1{test++} = 0#4 == (6#4 &8#4);
output1{test++} = 14#4 == (6#4  | 8#4);
output1{test++} = 14#4 == (6#4  ^ 8#4);
output1{test++} = 0#4 == (6#4 &9#4);
output1{test++} = 15#4 == (6#4  | 9#4);
output1{test++} = 15#4 == (6#4  ^ 9#4);
output1{test++} = 2#4 == (6#4 &10#4);
output1{test++} = 14#4 == (6#4  | 10#4);
output1{test++} = 12#4 == (6#4  ^ 10#4);
output1{test++} = 2#4 == (6#4 &11#4);
output1{test++} = 15#4 == (6#4  | 11#4);
output1{test++} = 13#4 == (6#4  ^ 11#4);
output1{test++} = 4#4 == (6#4 &12#4);
output1{test++} = 14#4 == (6#4  | 12#4);
output1{test++} = 10#4 == (6#4  ^ 12#4);
output1{test++} = 4#4 == (6#4 &13#4);
output1{test++} = 15#4 == (6#4  | 13#4);
output1{test++} = 11#4 == (6#4  ^ 13#4);
output1{test++} = 6#4 == (6#4 &14#4);
output1{test++} = 14#4 == (6#4  | 14#4);
output1{test++} = 8#4 == (6#4  ^ 14#4);
output1{test++} = 6#4 == (6#4 &15#4);
output1{test++} = 15#4 == (6#4  | 15#4);
output1{test++} = 9#4 == (6#4  ^ 15#4);
output1{test++} = 0#4 == (7#4 &0#4);
output1{test++} = 7#4 == (7#4  | 0#4);
output1{test++} = 7#4 == (7#4  ^ 0#4);
output1{test++} = 1#4 == (7#4 &1#4);
output1{test++} = 7#4 == (7#4  | 1#4);
output1{test++} = 6#4 == (7#4  ^ 1#4);
output1{test++} = 2#4 == (7#4 &2#4);
output1{test++} = 7#4 == (7#4  | 2#4);
output1{test++} = 5#4 == (7#4  ^ 2#4);
output1{test++} = 3#4 == (7#4 &3#4);
output1{test++} = 7#4 == (7#4  | 3#4);
output1{test++} = 4#4 == (7#4  ^ 3#4);
output1{test++} = 4#4 == (7#4 &4#4);
output1{test++} = 7#4 == (7#4  | 4#4);
output1{test++} = 3#4 == (7#4  ^ 4#4);
output1{test++} = 5#4 == (7#4 &5#4);
output1{test++} = 7#4 == (7#4  | 5#4);
output1{test++} = 2#4 == (7#4  ^ 5#4);
output1{test++} = 6#4 == (7#4 &6#4);
output1{test++} = 7#4 == (7#4  | 6#4);
output1{test++} = 1#4 == (7#4  ^ 6#4);
output1{test++} = 7#4 == (7#4 &7#4);
output1{test++} = 7#4 == (7#4  | 7#4);
output1{test++} = 0#4 == (7#4  ^ 7#4);
output1{test++} = 0#4 == (7#4 &8#4);
output1{test++} = 15#4 == (7#4  | 8#4);
output1{test++} = 15#4 == (7#4  ^ 8#4);
output1{test++} = 1#4 == (7#4 &9#4);
output1{test++} = 15#4 == (7#4  | 9#4);
output1{test++} = 14#4 == (7#4  ^ 9#4);
output1{test++} = 2#4 == (7#4 &10#4);
output1{test++} = 15#4 == (7#4  | 10#4);
output1{test++} = 13#4 == (7#4  ^ 10#4);
output1{test++} = 3#4 == (7#4 &11#4);
output1{test++} = 15#4 == (7#4  | 11#4);
output1{test++} = 12#4 == (7#4  ^ 11#4);
output1{test++} = 4#4 == (7#4 &12#4);
output1{test++} = 15#4 == (7#4  | 12#4);
output1{test++} = 11#4 == (7#4  ^ 12#4);
output1{test++} = 5#4 == (7#4 &13#4);
output1{test++} = 15#4 == (7#4  | 13#4);
output1{test++} = 10#4 == (7#4  ^ 13#4);
output1{test++} = 6#4 == (7#4 &14#4);
output1{test++} = 15#4 == (7#4  | 14#4);
output1{test++} = 9#4 == (7#4  ^ 14#4);
output1{test++} = 7#4 == (7#4 &15#4);
output1{test++} = 15#4 == (7#4  | 15#4);
output1{test++} = 8#4 == (7#4  ^ 15#4);
output1{test++} = 0#4 == (8#4 &0#4);
output1{test++} = 8#4 == (8#4  | 0#4);
output1{test++} = 8#4 == (8#4  ^ 0#4);
output1{test++} = 0#4 == (8#4 &1#4);
output1{test++} = 9#4 == (8#4  | 1#4);
output1{test++} = 9#4 == (8#4  ^ 1#4);
output1{test++} = 0#4 == (8#4 &2#4);
output1{test++} = 10#4 == (8#4  | 2#4);
output1{test++} = 10#4 == (8#4  ^ 2#4);
output1{test++} = 0#4 == (8#4 &3#4);
output1{test++} = 11#4 == (8#4  | 3#4);
output1{test++} = 11#4 == (8#4  ^ 3#4);
output1{test++} = 0#4 == (8#4 &4#4);
output1{test++} = 12#4 == (8#4  | 4#4);
output1{test++} = 12#4 == (8#4  ^ 4#4);
output1{test++} = 0#4 == (8#4 &5#4);
output1{test++} = 13#4 == (8#4  | 5#4);
output1{test++} = 13#4 == (8#4  ^ 5#4);
output1{test++} = 0#4 == (8#4 &6#4);
output1{test++} = 14#4 == (8#4  | 6#4);
output1{test++} = 14#4 == (8#4  ^ 6#4);
output1{test++} = 0#4 == (8#4 &7#4);
output1{test++} = 15#4 == (8#4  | 7#4);
output1{test++} = 15#4 == (8#4  ^ 7#4);
output1{test++} = 8#4 == (8#4 &8#4);
output1{test++} = 8#4 == (8#4  | 8#4);
output1{test++} = 0#4 == (8#4  ^ 8#4);
output1{test++} = 8#4 == (8#4 &9#4);
output1{test++} = 9#4 == (8#4  | 9#4);
output1{test++} = 1#4 == (8#4  ^ 9#4);
output1{test++} = 8#4 == (8#4 &10#4);
output1{test++} = 10#4 == (8#4  | 10#4);
output1{test++} = 2#4 == (8#4  ^ 10#4);
output1{test++} = 8#4 == (8#4 &11#4);
output1{test++} = 11#4 == (8#4  | 11#4);
output1{test++} = 3#4 == (8#4  ^ 11#4);
output1{test++} = 8#4 == (8#4 &12#4);
output1{test++} = 12#4 == (8#4  | 12#4);
output1{test++} = 4#4 == (8#4  ^ 12#4);
output1{test++} = 8#4 == (8#4 &13#4);
output1{test++} = 13#4 == (8#4  | 13#4);
output1{test++} = 5#4 == (8#4  ^ 13#4);
output1{test++} = 8#4 == (8#4 &14#4);
output1{test++} = 14#4 == (8#4  | 14#4);
output1{test++} = 6#4 == (8#4  ^ 14#4);
output1{test++} = 8#4 == (8#4 &15#4);
output1{test++} = 15#4 == (8#4  | 15#4);
output1{test++} = 7#4 == (8#4  ^ 15#4);
output1{test++} = 0#4 == (9#4 &0#4);
output1{test++} = 9#4 == (9#4  | 0#4);
output1{test++} = 9#4 == (9#4  ^ 0#4);
output1{test++} = 1#4 == (9#4 &1#4);
output1{test++} = 9#4 == (9#4  | 1#4);
output1{test++} = 8#4 == (9#4  ^ 1#4);
output1{test++} = 0#4 == (9#4 &2#4);
output1{test++} = 11#4 == (9#4  | 2#4);
output1{test++} = 11#4 == (9#4  ^ 2#4);
output1{test++} = 1#4 == (9#4 &3#4);
output1{test++} = 11#4 == (9#4  | 3#4);
output1{test++} = 10#4 == (9#4  ^ 3#4);
output1{test++} = 0#4 == (9#4 &4#4);
output1{test++} = 13#4 == (9#4  | 4#4);
output1{test++} = 13#4 == (9#4  ^ 4#4);
output1{test++} = 1#4 == (9#4 &5#4);
output1{test++} = 13#4 == (9#4  | 5#4);
output1{test++} = 12#4 == (9#4  ^ 5#4);
output1{test++} = 0#4 == (9#4 &6#4);
output1{test++} = 15#4 == (9#4  | 6#4);
output1{test++} = 15#4 == (9#4  ^ 6#4);
output1{test++} = 1#4 == (9#4 &7#4);
output1{test++} = 15#4 == (9#4  | 7#4);
output1{test++} = 14#4 == (9#4  ^ 7#4);
output1{test++} = 8#4 == (9#4 &8#4);
output1{test++} = 9#4 == (9#4  | 8#4);
output1{test++} = 1#4 == (9#4  ^ 8#4);
output1{test++} = 9#4 == (9#4 &9#4);
output1{test++} = 9#4 == (9#4  | 9#4);
output1{test++} = 0#4 == (9#4  ^ 9#4);
output1{test++} = 8#4 == (9#4 &10#4);
output1{test++} = 11#4 == (9#4  | 10#4);
output1{test++} = 3#4 == (9#4  ^ 10#4);
output1{test++} = 9#4 == (9#4 &11#4);
output1{test++} = 11#4 == (9#4  | 11#4);
output1{test++} = 2#4 == (9#4  ^ 11#4);
output1{test++} = 8#4 == (9#4 &12#4);
output1{test++} = 13#4 == (9#4  | 12#4);
output1{test++} = 5#4 == (9#4  ^ 12#4);
output1{test++} = 9#4 == (9#4 &13#4);
output1{test++} = 13#4 == (9#4  | 13#4);
output1{test++} = 4#4 == (9#4  ^ 13#4);
output1{test++} = 8#4 == (9#4 &14#4);
output1{test++} = 15#4 == (9#4  | 14#4);
output1{test++} = 7#4 == (9#4  ^ 14#4);
output1{test++} = 9#4 == (9#4 &15#4);
output1{test++} = 15#4 == (9#4  | 15#4);
output1{test++} = 6#4 == (9#4  ^ 15#4);
output1{test++} = 0#4 == (10#4 &0#4);
output1{test++} = 10#4 == (10#4  | 0#4);
output1{test++} = 10#4 == (10#4  ^ 0#4);
output1{test++} = 0#4 == (10#4 &1#4);
output1{test++} = 11#4 == (10#4  | 1#4);
output1{test++} = 11#4 == (10#4  ^ 1#4);
output1{test++} = 2#4 == (10#4 &2#4);
output1{test++} = 10#4 == (10#4  | 2#4);
output1{test++} = 8#4 == (10#4  ^ 2#4);
output1{test++} = 2#4 == (10#4 &3#4);
output1{test++} = 11#4 == (10#4  | 3#4);
output1{test++} = 9#4 == (10#4  ^ 3#4);
output1{test++} = 0#4 == (10#4 &4#4);
output1{test++} = 14#4 == (10#4  | 4#4);
output1{test++} = 14#4 == (10#4  ^ 4#4);
output1{test++} = 0#4 == (10#4 &5#4);
output1{test++} = 15#4 == (10#4  | 5#4);
output1{test++} = 15#4 == (10#4  ^ 5#4);
output1{test++} = 2#4 == (10#4 &6#4);
output1{test++} = 14#4 == (10#4  | 6#4);
output1{test++} = 12#4 == (10#4  ^ 6#4);
output1{test++} = 2#4 == (10#4 &7#4);
output1{test++} = 15#4 == (10#4  | 7#4);
output1{test++} = 13#4 == (10#4  ^ 7#4);
output1{test++} = 8#4 == (10#4 &8#4);
output1{test++} = 10#4 == (10#4  | 8#4);
output1{test++} = 2#4 == (10#4  ^ 8#4);
output1{test++} = 8#4 == (10#4 &9#4);
output1{test++} = 11#4 == (10#4  | 9#4);
output1{test++} = 3#4 == (10#4  ^ 9#4);
output1{test++} = 10#4 == (10#4 &10#4);
output1{test++} = 10#4 == (10#4  | 10#4);
output1{test++} = 0#4 == (10#4  ^ 10#4);
output1{test++} = 10#4 == (10#4 &11#4);
output1{test++} = 11#4 == (10#4  | 11#4);
output1{test++} = 1#4 == (10#4  ^ 11#4);
output1{test++} = 8#4 == (10#4 &12#4);
output1{test++} = 14#4 == (10#4  | 12#4);
output1{test++} = 6#4 == (10#4  ^ 12#4);
output1{test++} = 8#4 == (10#4 &13#4);
output1{test++} = 15#4 == (10#4  | 13#4);
output1{test++} = 7#4 == (10#4  ^ 13#4);
output1{test++} = 10#4 == (10#4 &14#4);
output1{test++} = 14#4 == (10#4  | 14#4);
output1{test++} = 4#4 == (10#4  ^ 14#4);
output1{test++} = 10#4 == (10#4 &15#4);
output1{test++} = 15#4 == (10#4  | 15#4);
output1{test++} = 5#4 == (10#4  ^ 15#4);
output1{test++} = 0#4 == (11#4 &0#4);
output1{test++} = 11#4 == (11#4  | 0#4);
output1{test++} = 11#4 == (11#4  ^ 0#4);
output1{test++} = 1#4 == (11#4 &1#4);
output1{test++} = 11#4 == (11#4  | 1#4);
output1{test++} = 10#4 == (11#4  ^ 1#4);
output1{test++} = 2#4 == (11#4 &2#4);
output1{test++} = 11#4 == (11#4  | 2#4);
output1{test++} = 9#4 == (11#4  ^ 2#4);
output1{test++} = 3#4 == (11#4 &3#4);
output1{test++} = 11#4 == (11#4  | 3#4);
output1{test++} = 8#4 == (11#4  ^ 3#4);
output1{test++} = 0#4 == (11#4 &4#4);
output1{test++} = 15#4 == (11#4  | 4#4);
output1{test++} = 15#4 == (11#4  ^ 4#4);
output1{test++} = 1#4 == (11#4 &5#4);
output1{test++} = 15#4 == (11#4  | 5#4);
output1{test++} = 14#4 == (11#4  ^ 5#4);
output1{test++} = 2#4 == (11#4 &6#4);
output1{test++} = 15#4 == (11#4  | 6#4);
output1{test++} = 13#4 == (11#4  ^ 6#4);
output1{test++} = 3#4 == (11#4 &7#4);
output1{test++} = 15#4 == (11#4  | 7#4);
output1{test++} = 12#4 == (11#4  ^ 7#4);
output1{test++} = 8#4 == (11#4 &8#4);
output1{test++} = 11#4 == (11#4  | 8#4);
output1{test++} = 3#4 == (11#4  ^ 8#4);
output1{test++} = 9#4 == (11#4 &9#4);
output1{test++} = 11#4 == (11#4  | 9#4);
output1{test++} = 2#4 == (11#4  ^ 9#4);
output1{test++} = 10#4 == (11#4 &10#4);
output1{test++} = 11#4 == (11#4  | 10#4);
output1{test++} = 1#4 == (11#4  ^ 10#4);
output1{test++} = 11#4 == (11#4 &11#4);
output1{test++} = 11#4 == (11#4  | 11#4);
output1{test++} = 0#4 == (11#4  ^ 11#4);
output1{test++} = 8#4 == (11#4 &12#4);
output1{test++} = 15#4 == (11#4  | 12#4);
output1{test++} = 7#4 == (11#4  ^ 12#4);
output1{test++} = 9#4 == (11#4 &13#4);
output1{test++} = 15#4 == (11#4  | 13#4);
output1{test++} = 6#4 == (11#4  ^ 13#4);
output1{test++} = 10#4 == (11#4 &14#4);
output1{test++} = 15#4 == (11#4  | 14#4);
output1{test++} = 5#4 == (11#4  ^ 14#4);
output1{test++} = 11#4 == (11#4 &15#4);
output1{test++} = 15#4 == (11#4  | 15#4);
output1{test++} = 4#4 == (11#4  ^ 15#4);
output1{test++} = 0#4 == (12#4 &0#4);
output1{test++} = 12#4 == (12#4  | 0#4);
output1{test++} = 12#4 == (12#4  ^ 0#4);
output1{test++} = 0#4 == (12#4 &1#4);
output1{test++} = 13#4 == (12#4  | 1#4);
output1{test++} = 13#4 == (12#4  ^ 1#4);
output1{test++} = 0#4 == (12#4 &2#4);
output1{test++} = 14#4 == (12#4  | 2#4);
output1{test++} = 14#4 == (12#4  ^ 2#4);
output1{test++} = 0#4 == (12#4 &3#4);
output1{test++} = 15#4 == (12#4  | 3#4);
output1{test++} = 15#4 == (12#4  ^ 3#4);
output1{test++} = 4#4 == (12#4 &4#4);
output1{test++} = 12#4 == (12#4  | 4#4);
output1{test++} = 8#4 == (12#4  ^ 4#4);
output1{test++} = 4#4 == (12#4 &5#4);
output1{test++} = 13#4 == (12#4  | 5#4);
output1{test++} = 9#4 == (12#4  ^ 5#4);
output1{test++} = 4#4 == (12#4 &6#4);
output1{test++} = 14#4 == (12#4  | 6#4);
output1{test++} = 10#4 == (12#4  ^ 6#4);
output1{test++} = 4#4 == (12#4 &7#4);
output1{test++} = 15#4 == (12#4  | 7#4);
output1{test++} = 11#4 == (12#4  ^ 7#4);
output1{test++} = 8#4 == (12#4 &8#4);
output1{test++} = 12#4 == (12#4  | 8#4);
output1{test++} = 4#4 == (12#4  ^ 8#4);
output1{test++} = 8#4 == (12#4 &9#4);
output1{test++} = 13#4 == (12#4  | 9#4);
output1{test++} = 5#4 == (12#4  ^ 9#4);
output1{test++} = 8#4 == (12#4 &10#4);
output1{test++} = 14#4 == (12#4  | 10#4);
output1{test++} = 6#4 == (12#4  ^ 10#4);
output1{test++} = 8#4 == (12#4 &11#4);
output1{test++} = 15#4 == (12#4  | 11#4);
output1{test++} = 7#4 == (12#4  ^ 11#4);
output1{test++} = 12#4 == (12#4 &12#4);
output1{test++} = 12#4 == (12#4  | 12#4);
output1{test++} = 0#4 == (12#4  ^ 12#4);
output1{test++} = 12#4 == (12#4 &13#4);
output1{test++} = 13#4 == (12#4  | 13#4);
output1{test++} = 1#4 == (12#4  ^ 13#4);
output1{test++} = 12#4 == (12#4 &14#4);
output1{test++} = 14#4 == (12#4  | 14#4);
output1{test++} = 2#4 == (12#4  ^ 14#4);
output1{test++} = 12#4 == (12#4 &15#4);
output1{test++} = 15#4 == (12#4  | 15#4);
output1{test++} = 3#4 == (12#4  ^ 15#4);
output1{test++} = 0#4 == (13#4 &0#4);
output1{test++} = 13#4 == (13#4  | 0#4);
output1{test++} = 13#4 == (13#4  ^ 0#4);
output1{test++} = 1#4 == (13#4 &1#4);
output1{test++} = 13#4 == (13#4  | 1#4);
output1{test++} = 12#4 == (13#4  ^ 1#4);
output1{test++} = 0#4 == (13#4 &2#4);
output1{test++} = 15#4 == (13#4  | 2#4);
output1{test++} = 15#4 == (13#4  ^ 2#4);
output1{test++} = 1#4 == (13#4 &3#4);
output1{test++} = 15#4 == (13#4  | 3#4);
output1{test++} = 14#4 == (13#4  ^ 3#4);
output1{test++} = 4#4 == (13#4 &4#4);
output1{test++} = 13#4 == (13#4  | 4#4);
output1{test++} = 9#4 == (13#4  ^ 4#4);
output1{test++} = 5#4 == (13#4 &5#4);
output1{test++} = 13#4 == (13#4  | 5#4);
output1{test++} = 8#4 == (13#4  ^ 5#4);
output1{test++} = 4#4 == (13#4 &6#4);
output1{test++} = 15#4 == (13#4  | 6#4);
output1{test++} = 11#4 == (13#4  ^ 6#4);
output1{test++} = 5#4 == (13#4 &7#4);
output1{test++} = 15#4 == (13#4  | 7#4);
output1{test++} = 10#4 == (13#4  ^ 7#4);
output1{test++} = 8#4 == (13#4 &8#4);
output1{test++} = 13#4 == (13#4  | 8#4);
output1{test++} = 5#4 == (13#4  ^ 8#4);
output1{test++} = 9#4 == (13#4 &9#4);
output1{test++} = 13#4 == (13#4  | 9#4);
output1{test++} = 4#4 == (13#4  ^ 9#4);
output1{test++} = 8#4 == (13#4 &10#4);
output1{test++} = 15#4 == (13#4  | 10#4);
output1{test++} = 7#4 == (13#4  ^ 10#4);
output1{test++} = 9#4 == (13#4 &11#4);
output1{test++} = 15#4 == (13#4  | 11#4);
output1{test++} = 6#4 == (13#4  ^ 11#4);
output1{test++} = 12#4 == (13#4 &12#4);
output1{test++} = 13#4 == (13#4  | 12#4);
output1{test++} = 1#4 == (13#4  ^ 12#4);
output1{test++} = 13#4 == (13#4 &13#4);
output1{test++} = 13#4 == (13#4  | 13#4);
output1{test++} = 0#4 == (13#4  ^ 13#4);
output1{test++} = 12#4 == (13#4 &14#4);
output1{test++} = 15#4 == (13#4  | 14#4);
output1{test++} = 3#4 == (13#4  ^ 14#4);
output1{test++} = 13#4 == (13#4 &15#4);
output1{test++} = 15#4 == (13#4  | 15#4);
output1{test++} = 2#4 == (13#4  ^ 15#4);
output1{test++} = 0#4 == (14#4 &0#4);
output1{test++} = 14#4 == (14#4  | 0#4);
output1{test++} = 14#4 == (14#4  ^ 0#4);
output1{test++} = 0#4 == (14#4 &1#4);
output1{test++} = 15#4 == (14#4  | 1#4);
output1{test++} = 15#4 == (14#4  ^ 1#4);
output1{test++} = 2#4 == (14#4 &2#4);
output1{test++} = 14#4 == (14#4  | 2#4);
output1{test++} = 12#4 == (14#4  ^ 2#4);
output1{test++} = 2#4 == (14#4 &3#4);
output1{test++} = 15#4 == (14#4  | 3#4);
output1{test++} = 13#4 == (14#4  ^ 3#4);
output1{test++} = 4#4 == (14#4 &4#4);
output1{test++} = 14#4 == (14#4  | 4#4);
output1{test++} = 10#4 == (14#4  ^ 4#4);
output1{test++} = 4#4 == (14#4 &5#4);
output1{test++} = 15#4 == (14#4  | 5#4);
output1{test++} = 11#4 == (14#4  ^ 5#4);
output1{test++} = 6#4 == (14#4 &6#4);
output1{test++} = 14#4 == (14#4  | 6#4);
output1{test++} = 8#4 == (14#4  ^ 6#4);
output1{test++} = 6#4 == (14#4 &7#4);
output1{test++} = 15#4 == (14#4  | 7#4);
output1{test++} = 9#4 == (14#4  ^ 7#4);
output1{test++} = 8#4 == (14#4 &8#4);
output1{test++} = 14#4 == (14#4  | 8#4);
output1{test++} = 6#4 == (14#4  ^ 8#4);
output1{test++} = 8#4 == (14#4 &9#4);
output1{test++} = 15#4 == (14#4  | 9#4);
output1{test++} = 7#4 == (14#4  ^ 9#4);
output1{test++} = 10#4 == (14#4 &10#4);
output1{test++} = 14#4 == (14#4  | 10#4);
output1{test++} = 4#4 == (14#4  ^ 10#4);
output1{test++} = 10#4 == (14#4 &11#4);
output1{test++} = 15#4 == (14#4  | 11#4);
output1{test++} = 5#4 == (14#4  ^ 11#4);
output1{test++} = 12#4 == (14#4 &12#4);
output1{test++} = 14#4 == (14#4  | 12#4);
output1{test++} = 2#4 == (14#4  ^ 12#4);
output1{test++} = 12#4 == (14#4 &13#4);
output1{test++} = 15#4 == (14#4  | 13#4);
output1{test++} = 3#4 == (14#4  ^ 13#4);
output1{test++} = 14#4 == (14#4 &14#4);
output1{test++} = 14#4 == (14#4  | 14#4);
output1{test++} = 0#4 == (14#4  ^ 14#4);
output1{test++} = 14#4 == (14#4 &15#4);
output1{test++} = 15#4 == (14#4  | 15#4);
output1{test++} = 1#4 == (14#4  ^ 15#4);
output1{test++} = 0#4 == (15#4 &0#4);
output1{test++} = 15#4 == (15#4  | 0#4);
output1{test++} = 15#4 == (15#4  ^ 0#4);
output1{test++} = 1#4 == (15#4 &1#4);
output1{test++} = 15#4 == (15#4  | 1#4);
output1{test++} = 14#4 == (15#4  ^ 1#4);
output1{test++} = 2#4 == (15#4 &2#4);
output1{test++} = 15#4 == (15#4  | 2#4);
output1{test++} = 13#4 == (15#4  ^ 2#4);
output1{test++} = 3#4 == (15#4 &3#4);
output1{test++} = 15#4 == (15#4  | 3#4);
output1{test++} = 12#4 == (15#4  ^ 3#4);
output1{test++} = 4#4 == (15#4 &4#4);
output1{test++} = 15#4 == (15#4  | 4#4);
output1{test++} = 11#4 == (15#4  ^ 4#4);
output1{test++} = 5#4 == (15#4 &5#4);
output1{test++} = 15#4 == (15#4  | 5#4);
output1{test++} = 10#4 == (15#4  ^ 5#4);
output1{test++} = 6#4 == (15#4 &6#4);
output1{test++} = 15#4 == (15#4  | 6#4);
output1{test++} = 9#4 == (15#4  ^ 6#4);
output1{test++} = 7#4 == (15#4 &7#4);
output1{test++} = 15#4 == (15#4  | 7#4);
output1{test++} = 8#4 == (15#4  ^ 7#4);
output1{test++} = 8#4 == (15#4 &8#4);
output1{test++} = 15#4 == (15#4  | 8#4);
output1{test++} = 7#4 == (15#4  ^ 8#4);
output1{test++} = 9#4 == (15#4 &9#4);
output1{test++} = 15#4 == (15#4  | 9#4);
output1{test++} = 6#4 == (15#4  ^ 9#4);
output1{test++} = 10#4 == (15#4 &10#4);
output1{test++} = 15#4 == (15#4  | 10#4);
output1{test++} = 5#4 == (15#4  ^ 10#4);
output1{test++} = 11#4 == (15#4 &11#4);
output1{test++} = 15#4 == (15#4  | 11#4);
output1{test++} = 4#4 == (15#4  ^ 11#4);
output1{test++} = 12#4 == (15#4 &12#4);
output1{test++} = 15#4 == (15#4  | 12#4);
output1{test++} = 3#4 == (15#4  ^ 12#4);
output1{test++} = 13#4 == (15#4 &13#4);
output1{test++} = 15#4 == (15#4  | 13#4);
output1{test++} = 2#4 == (15#4  ^ 13#4);
output1{test++} = 14#4 == (15#4 &14#4);
output1{test++} = 15#4 == (15#4  | 14#4);
output1{test++} = 1#4 == (15#4  ^ 14#4);
output1{test++} = 15#4 == (15#4 &15#4);
output1{test++} = 15#4 == (15#4  | 15#4);
output1{test++} = 0#4 == (15#4  ^ 15#4);


output1{test++} = 1#4 == (-8#4 /-8#4);
output1{test++} = 0#4 == (-8#4 %-8#4);
output1{test++} = 1#4 == (-8#4 /-7#4);
output1{test++} = -1#4 == (-8#4 %-7#4);
output1{test++} = 1#4 == (-8#4 /-6#4);
output1{test++} = -2#4 == (-8#4 %-6#4);
output1{test++} = 1#4 == (-8#4 /-5#4);
output1{test++} = -3#4 == (-8#4 %-5#4);
output1{test++} = 2#4 == (-8#4 /-4#4);
output1{test++} = 0#4 == (-8#4 %-4#4);
output1{test++} = 2#4 == (-8#4 /-3#4);
output1{test++} = -2#4 == (-8#4 %-3#4);
output1{test++} = 4#4 == (-8#4 /-2#4);
output1{test++} = 0#4 == (-8#4 %-2#4);
output1{test++} = 8#4 == (-8#4 /-1#4);
output1{test++} = 0#4 == (-8#4 %-1#4);
output1{test++} = -8#4 == (-8#4 /1#4);
output1{test++} = 0#4 == (-8#4 %1#4);
output1{test++} = -4#4 == (-8#4 /2#4);
output1{test++} = 0#4 == (-8#4 %2#4);
output1{test++} = -2#4 == (-8#4 /3#4);
output1{test++} = -2#4 == (-8#4 %3#4);
output1{test++} = -2#4 == (-8#4 /4#4);
output1{test++} = 0#4 == (-8#4 %4#4);
output1{test++} = -1#4 == (-8#4 /5#4);
output1{test++} = -3#4 == (-8#4 %5#4);
output1{test++} = -1#4 == (-8#4 /6#4);
output1{test++} = -2#4 == (-8#4 %6#4);
output1{test++} = -1#4 == (-8#4 /7#4);
output1{test++} = -1#4 == (-8#4 %7#4);
output1{test++} = 0#4 == (-7#4 /-8#4);
output1{test++} = -7#4 == (-7#4 %-8#4);
output1{test++} = 1#4 == (-7#4 /-7#4);
output1{test++} = 0#4 == (-7#4 %-7#4);
output1{test++} = 1#4 == (-7#4 /-6#4);
output1{test++} = -1#4 == (-7#4 %-6#4);
output1{test++} = 1#4 == (-7#4 /-5#4);
output1{test++} = -2#4 == (-7#4 %-5#4);
output1{test++} = 1#4 == (-7#4 /-4#4);
output1{test++} = -3#4 == (-7#4 %-4#4);
output1{test++} = 2#4 == (-7#4 /-3#4);
output1{test++} = -1#4 == (-7#4 %-3#4);
output1{test++} = 3#4 == (-7#4 /-2#4);
output1{test++} = -1#4 == (-7#4 %-2#4);
output1{test++} = 7#4 == (-7#4 /-1#4);
output1{test++} = 0#4 == (-7#4 %-1#4);
output1{test++} = -7#4 == (-7#4 /1#4);
output1{test++} = 0#4 == (-7#4 %1#4);
output1{test++} = -3#4 == (-7#4 /2#4);
output1{test++} = -1#4 == (-7#4 %2#4);
output1{test++} = -2#4 == (-7#4 /3#4);
output1{test++} = -1#4 == (-7#4 %3#4);
output1{test++} = -1#4 == (-7#4 /4#4);
output1{test++} = -3#4 == (-7#4 %4#4);
output1{test++} = -1#4 == (-7#4 /5#4);
output1{test++} = -2#4 == (-7#4 %5#4);
output1{test++} = -1#4 == (-7#4 /6#4);
output1{test++} = -1#4 == (-7#4 %6#4);
output1{test++} = -1#4 == (-7#4 /7#4);
output1{test++} = 0#4 == (-7#4 %7#4);
output1{test++} = 0#4 == (-6#4 /-8#4);
output1{test++} = -6#4 == (-6#4 %-8#4);
output1{test++} = 0#4 == (-6#4 /-7#4);
output1{test++} = -6#4 == (-6#4 %-7#4);
output1{test++} = 1#4 == (-6#4 /-6#4);
output1{test++} = 0#4 == (-6#4 %-6#4);
output1{test++} = 1#4 == (-6#4 /-5#4);
output1{test++} = -1#4 == (-6#4 %-5#4);
output1{test++} = 1#4 == (-6#4 /-4#4);
output1{test++} = -2#4 == (-6#4 %-4#4);
output1{test++} = 2#4 == (-6#4 /-3#4);
output1{test++} = 0#4 == (-6#4 %-3#4);
output1{test++} = 3#4 == (-6#4 /-2#4);
output1{test++} = 0#4 == (-6#4 %-2#4);
output1{test++} = 6#4 == (-6#4 /-1#4);
output1{test++} = 0#4 == (-6#4 %-1#4);
output1{test++} = -6#4 == (-6#4 /1#4);
output1{test++} = 0#4 == (-6#4 %1#4);
output1{test++} = -3#4 == (-6#4 /2#4);
output1{test++} = 0#4 == (-6#4 %2#4);
output1{test++} = -2#4 == (-6#4 /3#4);
output1{test++} = 0#4 == (-6#4 %3#4);
output1{test++} = -1#4 == (-6#4 /4#4);
output1{test++} = -2#4 == (-6#4 %4#4);
output1{test++} = -1#4 == (-6#4 /5#4);
output1{test++} = -1#4 == (-6#4 %5#4);
output1{test++} = -1#4 == (-6#4 /6#4);
output1{test++} = 0#4 == (-6#4 %6#4);
output1{test++} = 0#4 == (-6#4 /7#4);
output1{test++} = -6#4 == (-6#4 %7#4);
output1{test++} = 0#4 == (-5#4 /-8#4);
output1{test++} = -5#4 == (-5#4 %-8#4);
output1{test++} = 0#4 == (-5#4 /-7#4);
output1{test++} = -5#4 == (-5#4 %-7#4);
output1{test++} = 0#4 == (-5#4 /-6#4);
output1{test++} = -5#4 == (-5#4 %-6#4);
output1{test++} = 1#4 == (-5#4 /-5#4);
output1{test++} = 0#4 == (-5#4 %-5#4);
output1{test++} = 1#4 == (-5#4 /-4#4);
output1{test++} = -1#4 == (-5#4 %-4#4);
output1{test++} = 1#4 == (-5#4 /-3#4);
output1{test++} = -2#4 == (-5#4 %-3#4);
output1{test++} = 2#4 == (-5#4 /-2#4);
output1{test++} = -1#4 == (-5#4 %-2#4);
output1{test++} = 5#4 == (-5#4 /-1#4);
output1{test++} = 0#4 == (-5#4 %-1#4);
output1{test++} = -5#4 == (-5#4 /1#4);
output1{test++} = 0#4 == (-5#4 %1#4);
output1{test++} = -2#4 == (-5#4 /2#4);
output1{test++} = -1#4 == (-5#4 %2#4);
output1{test++} = -1#4 == (-5#4 /3#4);
output1{test++} = -2#4 == (-5#4 %3#4);
output1{test++} = -1#4 == (-5#4 /4#4);
output1{test++} = -1#4 == (-5#4 %4#4);
output1{test++} = -1#4 == (-5#4 /5#4);
output1{test++} = 0#4 == (-5#4 %5#4);
output1{test++} = 0#4 == (-5#4 /6#4);
output1{test++} = -5#4 == (-5#4 %6#4);
output1{test++} = 0#4 == (-5#4 /7#4);
output1{test++} = -5#4 == (-5#4 %7#4);
output1{test++} = 0#4 == (-4#4 /-8#4);
output1{test++} = -4#4 == (-4#4 %-8#4);
output1{test++} = 0#4 == (-4#4 /-7#4);
output1{test++} = -4#4 == (-4#4 %-7#4);
output1{test++} = 0#4 == (-4#4 /-6#4);
output1{test++} = -4#4 == (-4#4 %-6#4);
output1{test++} = 0#4 == (-4#4 /-5#4);
output1{test++} = -4#4 == (-4#4 %-5#4);
output1{test++} = 1#4 == (-4#4 /-4#4);
output1{test++} = 0#4 == (-4#4 %-4#4);
output1{test++} = 1#4 == (-4#4 /-3#4);
output1{test++} = -1#4 == (-4#4 %-3#4);
output1{test++} = 2#4 == (-4#4 /-2#4);
output1{test++} = 0#4 == (-4#4 %-2#4);
output1{test++} = 4#4 == (-4#4 /-1#4);
output1{test++} = 0#4 == (-4#4 %-1#4);
output1{test++} = -4#4 == (-4#4 /1#4);
output1{test++} = 0#4 == (-4#4 %1#4);
output1{test++} = -2#4 == (-4#4 /2#4);
output1{test++} = 0#4 == (-4#4 %2#4);
output1{test++} = -1#4 == (-4#4 /3#4);
output1{test++} = -1#4 == (-4#4 %3#4);
output1{test++} = -1#4 == (-4#4 /4#4);
output1{test++} = 0#4 == (-4#4 %4#4);
output1{test++} = 0#4 == (-4#4 /5#4);
output1{test++} = -4#4 == (-4#4 %5#4);
output1{test++} = 0#4 == (-4#4 /6#4);
output1{test++} = -4#4 == (-4#4 %6#4);
output1{test++} = 0#4 == (-4#4 /7#4);
output1{test++} = -4#4 == (-4#4 %7#4);
output1{test++} = 0#4 == (-3#4 /-8#4);
output1{test++} = -3#4 == (-3#4 %-8#4);
output1{test++} = 0#4 == (-3#4 /-7#4);
output1{test++} = -3#4 == (-3#4 %-7#4);
output1{test++} = 0#4 == (-3#4 /-6#4);
output1{test++} = -3#4 == (-3#4 %-6#4);
output1{test++} = 0#4 == (-3#4 /-5#4);
output1{test++} = -3#4 == (-3#4 %-5#4);
output1{test++} = 0#4 == (-3#4 /-4#4);
output1{test++} = -3#4 == (-3#4 %-4#4);
output1{test++} = 1#4 == (-3#4 /-3#4);
output1{test++} = 0#4 == (-3#4 %-3#4);
output1{test++} = 1#4 == (-3#4 /-2#4);
output1{test++} = -1#4 == (-3#4 %-2#4);
output1{test++} = 3#4 == (-3#4 /-1#4);
output1{test++} = 0#4 == (-3#4 %-1#4);
output1{test++} = -3#4 == (-3#4 /1#4);
output1{test++} = 0#4 == (-3#4 %1#4);
output1{test++} = -1#4 == (-3#4 /2#4);
output1{test++} = -1#4 == (-3#4 %2#4);
output1{test++} = -1#4 == (-3#4 /3#4);
output1{test++} = 0#4 == (-3#4 %3#4);
output1{test++} = 0#4 == (-3#4 /4#4);
output1{test++} = -3#4 == (-3#4 %4#4);
output1{test++} = 0#4 == (-3#4 /5#4);
output1{test++} = -3#4 == (-3#4 %5#4);
output1{test++} = 0#4 == (-3#4 /6#4);
output1{test++} = -3#4 == (-3#4 %6#4);
output1{test++} = 0#4 == (-3#4 /7#4);
output1{test++} = -3#4 == (-3#4 %7#4);
output1{test++} = 0#4 == (-2#4 /-8#4);
output1{test++} = -2#4 == (-2#4 %-8#4);
output1{test++} = 0#4 == (-2#4 /-7#4);
output1{test++} = -2#4 == (-2#4 %-7#4);
output1{test++} = 0#4 == (-2#4 /-6#4);
output1{test++} = -2#4 == (-2#4 %-6#4);
output1{test++} = 0#4 == (-2#4 /-5#4);
output1{test++} = -2#4 == (-2#4 %-5#4);
output1{test++} = 0#4 == (-2#4 /-4#4);
output1{test++} = -2#4 == (-2#4 %-4#4);
output1{test++} = 0#4 == (-2#4 /-3#4);
output1{test++} = -2#4 == (-2#4 %-3#4);
output1{test++} = 1#4 == (-2#4 /-2#4);
output1{test++} = 0#4 == (-2#4 %-2#4);
output1{test++} = 2#4 == (-2#4 /-1#4);
output1{test++} = 0#4 == (-2#4 %-1#4);
output1{test++} = -2#4 == (-2#4 /1#4);
output1{test++} = 0#4 == (-2#4 %1#4);
output1{test++} = -1#4 == (-2#4 /2#4);
output1{test++} = 0#4 == (-2#4 %2#4);
output1{test++} = 0#4 == (-2#4 /3#4);
output1{test++} = -2#4 == (-2#4 %3#4);
output1{test++} = 0#4 == (-2#4 /4#4);
output1{test++} = -2#4 == (-2#4 %4#4);
output1{test++} = 0#4 == (-2#4 /5#4);
output1{test++} = -2#4 == (-2#4 %5#4);
output1{test++} = 0#4 == (-2#4 /6#4);
output1{test++} = -2#4 == (-2#4 %6#4);
output1{test++} = 0#4 == (-2#4 /7#4);
output1{test++} = -2#4 == (-2#4 %7#4);
output1{test++} = 0#4 == (-1#4 /-8#4);
output1{test++} = -1#4 == (-1#4 %-8#4);
output1{test++} = 0#4 == (-1#4 /-7#4);
output1{test++} = -1#4 == (-1#4 %-7#4);
output1{test++} = 0#4 == (-1#4 /-6#4);
output1{test++} = -1#4 == (-1#4 %-6#4);
output1{test++} = 0#4 == (-1#4 /-5#4);
output1{test++} = -1#4 == (-1#4 %-5#4);
output1{test++} = 0#4 == (-1#4 /-4#4);
output1{test++} = -1#4 == (-1#4 %-4#4);
output1{test++} = 0#4 == (-1#4 /-3#4);
output1{test++} = -1#4 == (-1#4 %-3#4);
output1{test++} = 0#4 == (-1#4 /-2#4);
output1{test++} = -1#4 == (-1#4 %-2#4);
output1{test++} = 1#4 == (-1#4 /-1#4);
output1{test++} = 0#4 == (-1#4 %-1#4);
output1{test++} = -1#4 == (-1#4 /1#4);
output1{test++} = 0#4 == (-1#4 %1#4);
output1{test++} = 0#4 == (-1#4 /2#4);
output1{test++} = -1#4 == (-1#4 %2#4);
output1{test++} = 0#4 == (-1#4 /3#4);
output1{test++} = -1#4 == (-1#4 %3#4);
output1{test++} = 0#4 == (-1#4 /4#4);
output1{test++} = -1#4 == (-1#4 %4#4);
output1{test++} = 0#4 == (-1#4 /5#4);
output1{test++} = -1#4 == (-1#4 %5#4);
output1{test++} = 0#4 == (-1#4 /6#4);
output1{test++} = -1#4 == (-1#4 %6#4);
output1{test++} = 0#4 == (-1#4 /7#4);
output1{test++} = -1#4 == (-1#4 %7#4);
output1{test++} = 0#4 == (0#4 /-8#4);
output1{test++} = 0#4 == (0#4 %-8#4);
output1{test++} = 0#4 == (0#4 /-7#4);
output1{test++} = 0#4 == (0#4 %-7#4);
output1{test++} = 0#4 == (0#4 /-6#4);
output1{test++} = 0#4 == (0#4 %-6#4);
output1{test++} = 0#4 == (0#4 /-5#4);
output1{test++} = 0#4 == (0#4 %-5#4);
output1{test++} = 0#4 == (0#4 /-4#4);
output1{test++} = 0#4 == (0#4 %-4#4);
output1{test++} = 0#4 == (0#4 /-3#4);
output1{test++} = 0#4 == (0#4 %-3#4);
output1{test++} = 0#4 == (0#4 /-2#4);
output1{test++} = 0#4 == (0#4 %-2#4);
output1{test++} = 0#4 == (0#4 /-1#4);
output1{test++} = 0#4 == (0#4 %-1#4);
output1{test++} = 0#4 == (0#4 /1#4);
output1{test++} = 0#4 == (0#4 %1#4);
output1{test++} = 0#4 == (0#4 /2#4);
output1{test++} = 0#4 == (0#4 %2#4);
output1{test++} = 0#4 == (0#4 /3#4);
output1{test++} = 0#4 == (0#4 %3#4);
output1{test++} = 0#4 == (0#4 /4#4);
output1{test++} = 0#4 == (0#4 %4#4);
output1{test++} = 0#4 == (0#4 /5#4);
output1{test++} = 0#4 == (0#4 %5#4);
output1{test++} = 0#4 == (0#4 /6#4);
output1{test++} = 0#4 == (0#4 %6#4);
output1{test++} = 0#4 == (0#4 /7#4);
output1{test++} = 0#4 == (0#4 %7#4);
output1{test++} = 0#4 == (1#4 /-8#4);
output1{test++} = 1#4 == (1#4 %-8#4);
output1{test++} = 0#4 == (1#4 /-7#4);
output1{test++} = 1#4 == (1#4 %-7#4);
output1{test++} = 0#4 == (1#4 /-6#4);
output1{test++} = 1#4 == (1#4 %-6#4);
output1{test++} = 0#4 == (1#4 /-5#4);
output1{test++} = 1#4 == (1#4 %-5#4);
output1{test++} = 0#4 == (1#4 /-4#4);
output1{test++} = 1#4 == (1#4 %-4#4);
output1{test++} = 0#4 == (1#4 /-3#4);
output1{test++} = 1#4 == (1#4 %-3#4);
output1{test++} = 0#4 == (1#4 /-2#4);
output1{test++} = 1#4 == (1#4 %-2#4);
output1{test++} = -1#4 == (1#4 /-1#4);
output1{test++} = 0#4 == (1#4 %-1#4);
output1{test++} = 1#4 == (1#4 /1#4);
output1{test++} = 0#4 == (1#4 %1#4);
output1{test++} = 0#4 == (1#4 /2#4);
output1{test++} = 1#4 == (1#4 %2#4);
output1{test++} = 0#4 == (1#4 /3#4);
output1{test++} = 1#4 == (1#4 %3#4);
output1{test++} = 0#4 == (1#4 /4#4);
output1{test++} = 1#4 == (1#4 %4#4);
output1{test++} = 0#4 == (1#4 /5#4);
output1{test++} = 1#4 == (1#4 %5#4);
output1{test++} = 0#4 == (1#4 /6#4);
output1{test++} = 1#4 == (1#4 %6#4);
output1{test++} = 0#4 == (1#4 /7#4);
output1{test++} = 1#4 == (1#4 %7#4);
output1{test++} = 0#4 == (2#4 /-8#4);
output1{test++} = 2#4 == (2#4 %-8#4);
output1{test++} = 0#4 == (2#4 /-7#4);
output1{test++} = 2#4 == (2#4 %-7#4);
output1{test++} = 0#4 == (2#4 /-6#4);
output1{test++} = 2#4 == (2#4 %-6#4);
output1{test++} = 0#4 == (2#4 /-5#4);
output1{test++} = 2#4 == (2#4 %-5#4);
output1{test++} = 0#4 == (2#4 /-4#4);
output1{test++} = 2#4 == (2#4 %-4#4);
output1{test++} = 0#4 == (2#4 /-3#4);
output1{test++} = 2#4 == (2#4 %-3#4);
output1{test++} = -1#4 == (2#4 /-2#4);
output1{test++} = 0#4 == (2#4 %-2#4);
output1{test++} = -2#4 == (2#4 /-1#4);
output1{test++} = 0#4 == (2#4 %-1#4);
output1{test++} = 2#4 == (2#4 /1#4);
output1{test++} = 0#4 == (2#4 %1#4);
output1{test++} = 1#4 == (2#4 /2#4);
output1{test++} = 0#4 == (2#4 %2#4);
output1{test++} = 0#4 == (2#4 /3#4);
output1{test++} = 2#4 == (2#4 %3#4);
output1{test++} = 0#4 == (2#4 /4#4);
output1{test++} = 2#4 == (2#4 %4#4);
output1{test++} = 0#4 == (2#4 /5#4);
output1{test++} = 2#4 == (2#4 %5#4);
output1{test++} = 0#4 == (2#4 /6#4);
output1{test++} = 2#4 == (2#4 %6#4);
output1{test++} = 0#4 == (2#4 /7#4);
output1{test++} = 2#4 == (2#4 %7#4);
output1{test++} = 0#4 == (3#4 /-8#4);
output1{test++} = 3#4 == (3#4 %-8#4);
output1{test++} = 0#4 == (3#4 /-7#4);
output1{test++} = 3#4 == (3#4 %-7#4);
output1{test++} = 0#4 == (3#4 /-6#4);
output1{test++} = 3#4 == (3#4 %-6#4);
output1{test++} = 0#4 == (3#4 /-5#4);
output1{test++} = 3#4 == (3#4 %-5#4);
output1{test++} = 0#4 == (3#4 /-4#4);
output1{test++} = 3#4 == (3#4 %-4#4);
output1{test++} = -1#4 == (3#4 /-3#4);
output1{test++} = 0#4 == (3#4 %-3#4);
output1{test++} = -1#4 == (3#4 /-2#4);
output1{test++} = 1#4 == (3#4 %-2#4);
output1{test++} = -3#4 == (3#4 /-1#4);
output1{test++} = 0#4 == (3#4 %-1#4);
output1{test++} = 3#4 == (3#4 /1#4);
output1{test++} = 0#4 == (3#4 %1#4);
output1{test++} = 1#4 == (3#4 /2#4);
output1{test++} = 1#4 == (3#4 %2#4);
output1{test++} = 1#4 == (3#4 /3#4);
output1{test++} = 0#4 == (3#4 %3#4);
output1{test++} = 0#4 == (3#4 /4#4);
output1{test++} = 3#4 == (3#4 %4#4);
output1{test++} = 0#4 == (3#4 /5#4);
output1{test++} = 3#4 == (3#4 %5#4);
output1{test++} = 0#4 == (3#4 /6#4);
output1{test++} = 3#4 == (3#4 %6#4);
output1{test++} = 0#4 == (3#4 /7#4);
output1{test++} = 3#4 == (3#4 %7#4);
output1{test++} = 0#4 == (4#4 /-8#4);
output1{test++} = 4#4 == (4#4 %-8#4);
output1{test++} = 0#4 == (4#4 /-7#4);
output1{test++} = 4#4 == (4#4 %-7#4);
output1{test++} = 0#4 == (4#4 /-6#4);
output1{test++} = 4#4 == (4#4 %-6#4);
output1{test++} = 0#4 == (4#4 /-5#4);
output1{test++} = 4#4 == (4#4 %-5#4);
output1{test++} = -1#4 == (4#4 /-4#4);
output1{test++} = 0#4 == (4#4 %-4#4);
output1{test++} = -1#4 == (4#4 /-3#4);
output1{test++} = 1#4 == (4#4 %-3#4);
output1{test++} = -2#4 == (4#4 /-2#4);
output1{test++} = 0#4 == (4#4 %-2#4);
output1{test++} = -4#4 == (4#4 /-1#4);
output1{test++} = 0#4 == (4#4 %-1#4);
output1{test++} = 4#4 == (4#4 /1#4);
output1{test++} = 0#4 == (4#4 %1#4);
output1{test++} = 2#4 == (4#4 /2#4);
output1{test++} = 0#4 == (4#4 %2#4);
output1{test++} = 1#4 == (4#4 /3#4);
output1{test++} = 1#4 == (4#4 %3#4);
output1{test++} = 1#4 == (4#4 /4#4);
output1{test++} = 0#4 == (4#4 %4#4);
output1{test++} = 0#4 == (4#4 /5#4);
output1{test++} = 4#4 == (4#4 %5#4);
output1{test++} = 0#4 == (4#4 /6#4);
output1{test++} = 4#4 == (4#4 %6#4);
output1{test++} = 0#4 == (4#4 /7#4);
output1{test++} = 4#4 == (4#4 %7#4);
output1{test++} = 0#4 == (5#4 /-8#4);
output1{test++} = 5#4 == (5#4 %-8#4);
output1{test++} = 0#4 == (5#4 /-7#4);
output1{test++} = 5#4 == (5#4 %-7#4);
output1{test++} = 0#4 == (5#4 /-6#4);
output1{test++} = 5#4 == (5#4 %-6#4);
output1{test++} = -1#4 == (5#4 /-5#4);
output1{test++} = 0#4 == (5#4 %-5#4);
output1{test++} = -1#4 == (5#4 /-4#4);
output1{test++} = 1#4 == (5#4 %-4#4);
output1{test++} = -1#4 == (5#4 /-3#4);
output1{test++} = 2#4 == (5#4 %-3#4);
output1{test++} = -2#4 == (5#4 /-2#4);
output1{test++} = 1#4 == (5#4 %-2#4);
output1{test++} = -5#4 == (5#4 /-1#4);
output1{test++} = 0#4 == (5#4 %-1#4);
output1{test++} = 5#4 == (5#4 /1#4);
output1{test++} = 0#4 == (5#4 %1#4);
output1{test++} = 2#4 == (5#4 /2#4);
output1{test++} = 1#4 == (5#4 %2#4);
output1{test++} = 1#4 == (5#4 /3#4);
output1{test++} = 2#4 == (5#4 %3#4);
output1{test++} = 1#4 == (5#4 /4#4);
output1{test++} = 1#4 == (5#4 %4#4);
output1{test++} = 1#4 == (5#4 /5#4);
output1{test++} = 0#4 == (5#4 %5#4);
output1{test++} = 0#4 == (5#4 /6#4);
output1{test++} = 5#4 == (5#4 %6#4);
output1{test++} = 0#4 == (5#4 /7#4);
output1{test++} = 5#4 == (5#4 %7#4);
output1{test++} = 0#4 == (6#4 /-8#4);
output1{test++} = 6#4 == (6#4 %-8#4);
output1{test++} = 0#4 == (6#4 /-7#4);
output1{test++} = 6#4 == (6#4 %-7#4);
output1{test++} = -1#4 == (6#4 /-6#4);
output1{test++} = 0#4 == (6#4 %-6#4);
output1{test++} = -1#4 == (6#4 /-5#4);
output1{test++} = 1#4 == (6#4 %-5#4);
output1{test++} = -1#4 == (6#4 /-4#4);
output1{test++} = 2#4 == (6#4 %-4#4);
output1{test++} = -2#4 == (6#4 /-3#4);
output1{test++} = 0#4 == (6#4 %-3#4);
output1{test++} = -3#4 == (6#4 /-2#4);
output1{test++} = 0#4 == (6#4 %-2#4);
output1{test++} = -6#4 == (6#4 /-1#4);
output1{test++} = 0#4 == (6#4 %-1#4);
output1{test++} = 6#4 == (6#4 /1#4);
output1{test++} = 0#4 == (6#4 %1#4);
output1{test++} = 3#4 == (6#4 /2#4);
output1{test++} = 0#4 == (6#4 %2#4);
output1{test++} = 2#4 == (6#4 /3#4);
output1{test++} = 0#4 == (6#4 %3#4);
output1{test++} = 1#4 == (6#4 /4#4);
output1{test++} = 2#4 == (6#4 %4#4);
output1{test++} = 1#4 == (6#4 /5#4);
output1{test++} = 1#4 == (6#4 %5#4);
output1{test++} = 1#4 == (6#4 /6#4);
output1{test++} = 0#4 == (6#4 %6#4);
output1{test++} = 0#4 == (6#4 /7#4);
output1{test++} = 6#4 == (6#4 %7#4);
output1{test++} = 0#4 == (7#4 /-8#4);
output1{test++} = 7#4 == (7#4 %-8#4);
output1{test++} = -1#4 == (7#4 /-7#4);
output1{test++} = 0#4 == (7#4 %-7#4);
output1{test++} = -1#4 == (7#4 /-6#4);
output1{test++} = 1#4 == (7#4 %-6#4);
output1{test++} = -1#4 == (7#4 /-5#4);
output1{test++} = 2#4 == (7#4 %-5#4);
output1{test++} = -1#4 == (7#4 /-4#4);
output1{test++} = 3#4 == (7#4 %-4#4);
output1{test++} = -2#4 == (7#4 /-3#4);
output1{test++} = 1#4 == (7#4 %-3#4);
output1{test++} = -3#4 == (7#4 /-2#4);
output1{test++} = 1#4 == (7#4 %-2#4);
output1{test++} = -7#4 == (7#4 /-1#4);
output1{test++} = 0#4 == (7#4 %-1#4);
output1{test++} = 7#4 == (7#4 /1#4);
output1{test++} = 0#4 == (7#4 %1#4);
output1{test++} = 3#4 == (7#4 /2#4);
output1{test++} = 1#4 == (7#4 %2#4);
output1{test++} = 2#4 == (7#4 /3#4);
output1{test++} = 1#4 == (7#4 %3#4);
output1{test++} = 1#4 == (7#4 /4#4);
output1{test++} = 3#4 == (7#4 %4#4);
output1{test++} = 1#4 == (7#4 /5#4);
output1{test++} = 2#4 == (7#4 %5#4);
output1{test++} = 1#4 == (7#4 /6#4);
output1{test++} = 1#4 == (7#4 %6#4);
output1{test++} = 1#4 == (7#4 /7#4);
output1{test++} = 0#4 == (7#4 %7#4);

output1{test++} = 0#1 == (-8#4 <-8#4);
output1{test++} = 1#1 == (-8#4 <=-8#4);
output1{test++} = 0#1 == (-8#4 >-8#4);
output1{test++} = 1#1 == (-8#4 >=-8#4);
output1{test++} = 1#1 == (-8#4 ==-8#4);
output1{test++} = 0#1 == (-8#4 !=-8#4);
output1{test++} = 1#1 == (-8#4 <-7#4);
output1{test++} = 1#1 == (-8#4 <=-7#4);
output1{test++} = 0#1 == (-8#4 >-7#4);
output1{test++} = 0#1 == (-8#4 >=-7#4);
output1{test++} = 0#1 == (-8#4 ==-7#4);
output1{test++} = 1#1 == (-8#4 !=-7#4);
output1{test++} = 1#1 == (-8#4 <-6#4);
output1{test++} = 1#1 == (-8#4 <=-6#4);
output1{test++} = 0#1 == (-8#4 >-6#4);
output1{test++} = 0#1 == (-8#4 >=-6#4);
output1{test++} = 0#1 == (-8#4 ==-6#4);
output1{test++} = 1#1 == (-8#4 !=-6#4);
output1{test++} = 1#1 == (-8#4 <-5#4);
output1{test++} = 1#1 == (-8#4 <=-5#4);
output1{test++} = 0#1 == (-8#4 >-5#4);
output1{test++} = 0#1 == (-8#4 >=-5#4);
output1{test++} = 0#1 == (-8#4 ==-5#4);
output1{test++} = 1#1 == (-8#4 !=-5#4);
output1{test++} = 1#1 == (-8#4 <-4#4);
output1{test++} = 1#1 == (-8#4 <=-4#4);
output1{test++} = 0#1 == (-8#4 >-4#4);
output1{test++} = 0#1 == (-8#4 >=-4#4);
output1{test++} = 0#1 == (-8#4 ==-4#4);
output1{test++} = 1#1 == (-8#4 !=-4#4);
output1{test++} = 1#1 == (-8#4 <-3#4);
output1{test++} = 1#1 == (-8#4 <=-3#4);
output1{test++} = 0#1 == (-8#4 >-3#4);
output1{test++} = 0#1 == (-8#4 >=-3#4);
output1{test++} = 0#1 == (-8#4 ==-3#4);
output1{test++} = 1#1 == (-8#4 !=-3#4);
output1{test++} = 1#1 == (-8#4 <-2#4);
output1{test++} = 1#1 == (-8#4 <=-2#4);
output1{test++} = 0#1 == (-8#4 >-2#4);
output1{test++} = 0#1 == (-8#4 >=-2#4);
output1{test++} = 0#1 == (-8#4 ==-2#4);
output1{test++} = 1#1 == (-8#4 !=-2#4);
output1{test++} = 1#1 == (-8#4 <-1#4);
output1{test++} = 1#1 == (-8#4 <=-1#4);
output1{test++} = 0#1 == (-8#4 >-1#4);
output1{test++} = 0#1 == (-8#4 >=-1#4);
output1{test++} = 0#1 == (-8#4 ==-1#4);
output1{test++} = 1#1 == (-8#4 !=-1#4);
output1{test++} = 1#1 == (-8#4 <0#4);
output1{test++} = 1#1 == (-8#4 <=0#4);
output1{test++} = 0#1 == (-8#4 >0#4);
output1{test++} = 0#1 == (-8#4 >=0#4);
output1{test++} = 0#1 == (-8#4 ==0#4);
output1{test++} = 1#1 == (-8#4 !=0#4);
output1{test++} = 1#1 == (-8#4 <1#4);
output1{test++} = 1#1 == (-8#4 <=1#4);
output1{test++} = 0#1 == (-8#4 >1#4);
output1{test++} = 0#1 == (-8#4 >=1#4);
output1{test++} = 0#1 == (-8#4 ==1#4);
output1{test++} = 1#1 == (-8#4 !=1#4);
output1{test++} = 1#1 == (-8#4 <2#4);
output1{test++} = 1#1 == (-8#4 <=2#4);
output1{test++} = 0#1 == (-8#4 >2#4);
output1{test++} = 0#1 == (-8#4 >=2#4);
output1{test++} = 0#1 == (-8#4 ==2#4);
output1{test++} = 1#1 == (-8#4 !=2#4);
output1{test++} = 1#1 == (-8#4 <3#4);
output1{test++} = 1#1 == (-8#4 <=3#4);
output1{test++} = 0#1 == (-8#4 >3#4);
output1{test++} = 0#1 == (-8#4 >=3#4);
output1{test++} = 0#1 == (-8#4 ==3#4);
output1{test++} = 1#1 == (-8#4 !=3#4);
output1{test++} = 1#1 == (-8#4 <4#4);
output1{test++} = 1#1 == (-8#4 <=4#4);
output1{test++} = 0#1 == (-8#4 >4#4);
output1{test++} = 0#1 == (-8#4 >=4#4);
output1{test++} = 0#1 == (-8#4 ==4#4);
output1{test++} = 1#1 == (-8#4 !=4#4);
output1{test++} = 1#1 == (-8#4 <5#4);
output1{test++} = 1#1 == (-8#4 <=5#4);
output1{test++} = 0#1 == (-8#4 >5#4);
output1{test++} = 0#1 == (-8#4 >=5#4);
output1{test++} = 0#1 == (-8#4 ==5#4);
output1{test++} = 1#1 == (-8#4 !=5#4);
output1{test++} = 1#1 == (-8#4 <6#4);
output1{test++} = 1#1 == (-8#4 <=6#4);
output1{test++} = 0#1 == (-8#4 >6#4);
output1{test++} = 0#1 == (-8#4 >=6#4);
output1{test++} = 0#1 == (-8#4 ==6#4);
output1{test++} = 1#1 == (-8#4 !=6#4);
output1{test++} = 1#1 == (-8#4 <7#4);
output1{test++} = 1#1 == (-8#4 <=7#4);
output1{test++} = 0#1 == (-8#4 >7#4);
output1{test++} = 0#1 == (-8#4 >=7#4);
output1{test++} = 0#1 == (-8#4 ==7#4);
output1{test++} = 1#1 == (-8#4 !=7#4);
output1{test++} = 0#1 == (-7#4 <-8#4);
output1{test++} = 0#1 == (-7#4 <=-8#4);
output1{test++} = 1#1 == (-7#4 >-8#4);
output1{test++} = 1#1 == (-7#4 >=-8#4);
output1{test++} = 0#1 == (-7#4 ==-8#4);
output1{test++} = 1#1 == (-7#4 !=-8#4);
output1{test++} = 0#1 == (-7#4 <-7#4);
output1{test++} = 1#1 == (-7#4 <=-7#4);
output1{test++} = 0#1 == (-7#4 >-7#4);
output1{test++} = 1#1 == (-7#4 >=-7#4);
output1{test++} = 1#1 == (-7#4 ==-7#4);
output1{test++} = 0#1 == (-7#4 !=-7#4);
output1{test++} = 1#1 == (-7#4 <-6#4);
output1{test++} = 1#1 == (-7#4 <=-6#4);
output1{test++} = 0#1 == (-7#4 >-6#4);
output1{test++} = 0#1 == (-7#4 >=-6#4);
output1{test++} = 0#1 == (-7#4 ==-6#4);
output1{test++} = 1#1 == (-7#4 !=-6#4);
output1{test++} = 1#1 == (-7#4 <-5#4);
output1{test++} = 1#1 == (-7#4 <=-5#4);
output1{test++} = 0#1 == (-7#4 >-5#4);
output1{test++} = 0#1 == (-7#4 >=-5#4);
output1{test++} = 0#1 == (-7#4 ==-5#4);
output1{test++} = 1#1 == (-7#4 !=-5#4);
output1{test++} = 1#1 == (-7#4 <-4#4);
output1{test++} = 1#1 == (-7#4 <=-4#4);
output1{test++} = 0#1 == (-7#4 >-4#4);
output1{test++} = 0#1 == (-7#4 >=-4#4);
output1{test++} = 0#1 == (-7#4 ==-4#4);
output1{test++} = 1#1 == (-7#4 !=-4#4);
output1{test++} = 1#1 == (-7#4 <-3#4);
output1{test++} = 1#1 == (-7#4 <=-3#4);
output1{test++} = 0#1 == (-7#4 >-3#4);
output1{test++} = 0#1 == (-7#4 >=-3#4);
output1{test++} = 0#1 == (-7#4 ==-3#4);
output1{test++} = 1#1 == (-7#4 !=-3#4);
output1{test++} = 1#1 == (-7#4 <-2#4);
output1{test++} = 1#1 == (-7#4 <=-2#4);
output1{test++} = 0#1 == (-7#4 >-2#4);
output1{test++} = 0#1 == (-7#4 >=-2#4);
output1{test++} = 0#1 == (-7#4 ==-2#4);
output1{test++} = 1#1 == (-7#4 !=-2#4);
output1{test++} = 1#1 == (-7#4 <-1#4);
output1{test++} = 1#1 == (-7#4 <=-1#4);
output1{test++} = 0#1 == (-7#4 >-1#4);
output1{test++} = 0#1 == (-7#4 >=-1#4);
output1{test++} = 0#1 == (-7#4 ==-1#4);
output1{test++} = 1#1 == (-7#4 !=-1#4);
output1{test++} = 1#1 == (-7#4 <0#4);
output1{test++} = 1#1 == (-7#4 <=0#4);
output1{test++} = 0#1 == (-7#4 >0#4);
output1{test++} = 0#1 == (-7#4 >=0#4);
output1{test++} = 0#1 == (-7#4 ==0#4);
output1{test++} = 1#1 == (-7#4 !=0#4);
output1{test++} = 1#1 == (-7#4 <1#4);
output1{test++} = 1#1 == (-7#4 <=1#4);
output1{test++} = 0#1 == (-7#4 >1#4);
output1{test++} = 0#1 == (-7#4 >=1#4);
output1{test++} = 0#1 == (-7#4 ==1#4);
output1{test++} = 1#1 == (-7#4 !=1#4);
output1{test++} = 1#1 == (-7#4 <2#4);
output1{test++} = 1#1 == (-7#4 <=2#4);
output1{test++} = 0#1 == (-7#4 >2#4);
output1{test++} = 0#1 == (-7#4 >=2#4);
output1{test++} = 0#1 == (-7#4 ==2#4);
output1{test++} = 1#1 == (-7#4 !=2#4);
output1{test++} = 1#1 == (-7#4 <3#4);
output1{test++} = 1#1 == (-7#4 <=3#4);
output1{test++} = 0#1 == (-7#4 >3#4);
output1{test++} = 0#1 == (-7#4 >=3#4);
output1{test++} = 0#1 == (-7#4 ==3#4);
output1{test++} = 1#1 == (-7#4 !=3#4);
output1{test++} = 1#1 == (-7#4 <4#4);
output1{test++} = 1#1 == (-7#4 <=4#4);
output1{test++} = 0#1 == (-7#4 >4#4);
output1{test++} = 0#1 == (-7#4 >=4#4);
output1{test++} = 0#1 == (-7#4 ==4#4);
output1{test++} = 1#1 == (-7#4 !=4#4);
output1{test++} = 1#1 == (-7#4 <5#4);
output1{test++} = 1#1 == (-7#4 <=5#4);
output1{test++} = 0#1 == (-7#4 >5#4);
output1{test++} = 0#1 == (-7#4 >=5#4);
output1{test++} = 0#1 == (-7#4 ==5#4);
output1{test++} = 1#1 == (-7#4 !=5#4);
output1{test++} = 1#1 == (-7#4 <6#4);
output1{test++} = 1#1 == (-7#4 <=6#4);
output1{test++} = 0#1 == (-7#4 >6#4);
output1{test++} = 0#1 == (-7#4 >=6#4);
output1{test++} = 0#1 == (-7#4 ==6#4);
output1{test++} = 1#1 == (-7#4 !=6#4);
output1{test++} = 1#1 == (-7#4 <7#4);
output1{test++} = 1#1 == (-7#4 <=7#4);
output1{test++} = 0#1 == (-7#4 >7#4);
output1{test++} = 0#1 == (-7#4 >=7#4);
output1{test++} = 0#1 == (-7#4 ==7#4);
output1{test++} = 1#1 == (-7#4 !=7#4);
output1{test++} = 0#1 == (-6#4 <-8#4);
output1{test++} = 0#1 == (-6#4 <=-8#4);
output1{test++} = 1#1 == (-6#4 >-8#4);
output1{test++} = 1#1 == (-6#4 >=-8#4);
output1{test++} = 0#1 == (-6#4 ==-8#4);
output1{test++} = 1#1 == (-6#4 !=-8#4);
output1{test++} = 0#1 == (-6#4 <-7#4);
output1{test++} = 0#1 == (-6#4 <=-7#4);
output1{test++} = 1#1 == (-6#4 >-7#4);
output1{test++} = 1#1 == (-6#4 >=-7#4);
output1{test++} = 0#1 == (-6#4 ==-7#4);
output1{test++} = 1#1 == (-6#4 !=-7#4);
output1{test++} = 0#1 == (-6#4 <-6#4);
output1{test++} = 1#1 == (-6#4 <=-6#4);
output1{test++} = 0#1 == (-6#4 >-6#4);
output1{test++} = 1#1 == (-6#4 >=-6#4);
output1{test++} = 1#1 == (-6#4 ==-6#4);
output1{test++} = 0#1 == (-6#4 !=-6#4);
output1{test++} = 1#1 == (-6#4 <-5#4);
output1{test++} = 1#1 == (-6#4 <=-5#4);
output1{test++} = 0#1 == (-6#4 >-5#4);
output1{test++} = 0#1 == (-6#4 >=-5#4);
output1{test++} = 0#1 == (-6#4 ==-5#4);
output1{test++} = 1#1 == (-6#4 !=-5#4);
output1{test++} = 1#1 == (-6#4 <-4#4);
output1{test++} = 1#1 == (-6#4 <=-4#4);
output1{test++} = 0#1 == (-6#4 >-4#4);
output1{test++} = 0#1 == (-6#4 >=-4#4);
output1{test++} = 0#1 == (-6#4 ==-4#4);
output1{test++} = 1#1 == (-6#4 !=-4#4);
output1{test++} = 1#1 == (-6#4 <-3#4);
output1{test++} = 1#1 == (-6#4 <=-3#4);
output1{test++} = 0#1 == (-6#4 >-3#4);
output1{test++} = 0#1 == (-6#4 >=-3#4);
output1{test++} = 0#1 == (-6#4 ==-3#4);
output1{test++} = 1#1 == (-6#4 !=-3#4);
output1{test++} = 1#1 == (-6#4 <-2#4);
output1{test++} = 1#1 == (-6#4 <=-2#4);
output1{test++} = 0#1 == (-6#4 >-2#4);
output1{test++} = 0#1 == (-6#4 >=-2#4);
output1{test++} = 0#1 == (-6#4 ==-2#4);
output1{test++} = 1#1 == (-6#4 !=-2#4);
output1{test++} = 1#1 == (-6#4 <-1#4);
output1{test++} = 1#1 == (-6#4 <=-1#4);
output1{test++} = 0#1 == (-6#4 >-1#4);
output1{test++} = 0#1 == (-6#4 >=-1#4);
output1{test++} = 0#1 == (-6#4 ==-1#4);
output1{test++} = 1#1 == (-6#4 !=-1#4);
output1{test++} = 1#1 == (-6#4 <0#4);
output1{test++} = 1#1 == (-6#4 <=0#4);
output1{test++} = 0#1 == (-6#4 >0#4);
output1{test++} = 0#1 == (-6#4 >=0#4);
output1{test++} = 0#1 == (-6#4 ==0#4);
output1{test++} = 1#1 == (-6#4 !=0#4);
output1{test++} = 1#1 == (-6#4 <1#4);
output1{test++} = 1#1 == (-6#4 <=1#4);
output1{test++} = 0#1 == (-6#4 >1#4);
output1{test++} = 0#1 == (-6#4 >=1#4);
output1{test++} = 0#1 == (-6#4 ==1#4);
output1{test++} = 1#1 == (-6#4 !=1#4);
output1{test++} = 1#1 == (-6#4 <2#4);
output1{test++} = 1#1 == (-6#4 <=2#4);
output1{test++} = 0#1 == (-6#4 >2#4);
output1{test++} = 0#1 == (-6#4 >=2#4);
output1{test++} = 0#1 == (-6#4 ==2#4);
output1{test++} = 1#1 == (-6#4 !=2#4);
output1{test++} = 1#1 == (-6#4 <3#4);
output1{test++} = 1#1 == (-6#4 <=3#4);
output1{test++} = 0#1 == (-6#4 >3#4);
output1{test++} = 0#1 == (-6#4 >=3#4);
output1{test++} = 0#1 == (-6#4 ==3#4);
output1{test++} = 1#1 == (-6#4 !=3#4);
output1{test++} = 1#1 == (-6#4 <4#4);
output1{test++} = 1#1 == (-6#4 <=4#4);
output1{test++} = 0#1 == (-6#4 >4#4);
output1{test++} = 0#1 == (-6#4 >=4#4);
output1{test++} = 0#1 == (-6#4 ==4#4);
output1{test++} = 1#1 == (-6#4 !=4#4);
output1{test++} = 1#1 == (-6#4 <5#4);
output1{test++} = 1#1 == (-6#4 <=5#4);
output1{test++} = 0#1 == (-6#4 >5#4);
output1{test++} = 0#1 == (-6#4 >=5#4);
output1{test++} = 0#1 == (-6#4 ==5#4);
output1{test++} = 1#1 == (-6#4 !=5#4);
output1{test++} = 1#1 == (-6#4 <6#4);
output1{test++} = 1#1 == (-6#4 <=6#4);
output1{test++} = 0#1 == (-6#4 >6#4);
output1{test++} = 0#1 == (-6#4 >=6#4);
output1{test++} = 0#1 == (-6#4 ==6#4);
output1{test++} = 1#1 == (-6#4 !=6#4);
output1{test++} = 1#1 == (-6#4 <7#4);
output1{test++} = 1#1 == (-6#4 <=7#4);
output1{test++} = 0#1 == (-6#4 >7#4);
output1{test++} = 0#1 == (-6#4 >=7#4);
output1{test++} = 0#1 == (-6#4 ==7#4);
output1{test++} = 1#1 == (-6#4 !=7#4);
output1{test++} = 0#1 == (-5#4 <-8#4);
output1{test++} = 0#1 == (-5#4 <=-8#4);
output1{test++} = 1#1 == (-5#4 >-8#4);
output1{test++} = 1#1 == (-5#4 >=-8#4);
output1{test++} = 0#1 == (-5#4 ==-8#4);
output1{test++} = 1#1 == (-5#4 !=-8#4);
output1{test++} = 0#1 == (-5#4 <-7#4);
output1{test++} = 0#1 == (-5#4 <=-7#4);
output1{test++} = 1#1 == (-5#4 >-7#4);
output1{test++} = 1#1 == (-5#4 >=-7#4);
output1{test++} = 0#1 == (-5#4 ==-7#4);
output1{test++} = 1#1 == (-5#4 !=-7#4);
output1{test++} = 0#1 == (-5#4 <-6#4);
output1{test++} = 0#1 == (-5#4 <=-6#4);
output1{test++} = 1#1 == (-5#4 >-6#4);
output1{test++} = 1#1 == (-5#4 >=-6#4);
output1{test++} = 0#1 == (-5#4 ==-6#4);
output1{test++} = 1#1 == (-5#4 !=-6#4);
output1{test++} = 0#1 == (-5#4 <-5#4);
output1{test++} = 1#1 == (-5#4 <=-5#4);
output1{test++} = 0#1 == (-5#4 >-5#4);
output1{test++} = 1#1 == (-5#4 >=-5#4);
output1{test++} = 1#1 == (-5#4 ==-5#4);
output1{test++} = 0#1 == (-5#4 !=-5#4);
output1{test++} = 1#1 == (-5#4 <-4#4);
output1{test++} = 1#1 == (-5#4 <=-4#4);
output1{test++} = 0#1 == (-5#4 >-4#4);
output1{test++} = 0#1 == (-5#4 >=-4#4);
output1{test++} = 0#1 == (-5#4 ==-4#4);
output1{test++} = 1#1 == (-5#4 !=-4#4);
output1{test++} = 1#1 == (-5#4 <-3#4);
output1{test++} = 1#1 == (-5#4 <=-3#4);
output1{test++} = 0#1 == (-5#4 >-3#4);
output1{test++} = 0#1 == (-5#4 >=-3#4);
output1{test++} = 0#1 == (-5#4 ==-3#4);
output1{test++} = 1#1 == (-5#4 !=-3#4);
output1{test++} = 1#1 == (-5#4 <-2#4);
output1{test++} = 1#1 == (-5#4 <=-2#4);
output1{test++} = 0#1 == (-5#4 >-2#4);
output1{test++} = 0#1 == (-5#4 >=-2#4);
output1{test++} = 0#1 == (-5#4 ==-2#4);
output1{test++} = 1#1 == (-5#4 !=-2#4);
output1{test++} = 1#1 == (-5#4 <-1#4);
output1{test++} = 1#1 == (-5#4 <=-1#4);
output1{test++} = 0#1 == (-5#4 >-1#4);
output1{test++} = 0#1 == (-5#4 >=-1#4);
output1{test++} = 0#1 == (-5#4 ==-1#4);
output1{test++} = 1#1 == (-5#4 !=-1#4);
output1{test++} = 1#1 == (-5#4 <0#4);
output1{test++} = 1#1 == (-5#4 <=0#4);
output1{test++} = 0#1 == (-5#4 >0#4);
output1{test++} = 0#1 == (-5#4 >=0#4);
output1{test++} = 0#1 == (-5#4 ==0#4);
output1{test++} = 1#1 == (-5#4 !=0#4);
output1{test++} = 1#1 == (-5#4 <1#4);
output1{test++} = 1#1 == (-5#4 <=1#4);
output1{test++} = 0#1 == (-5#4 >1#4);
output1{test++} = 0#1 == (-5#4 >=1#4);
output1{test++} = 0#1 == (-5#4 ==1#4);
output1{test++} = 1#1 == (-5#4 !=1#4);
output1{test++} = 1#1 == (-5#4 <2#4);
output1{test++} = 1#1 == (-5#4 <=2#4);
output1{test++} = 0#1 == (-5#4 >2#4);
output1{test++} = 0#1 == (-5#4 >=2#4);
output1{test++} = 0#1 == (-5#4 ==2#4);
output1{test++} = 1#1 == (-5#4 !=2#4);
output1{test++} = 1#1 == (-5#4 <3#4);
output1{test++} = 1#1 == (-5#4 <=3#4);
output1{test++} = 0#1 == (-5#4 >3#4);
output1{test++} = 0#1 == (-5#4 >=3#4);
output1{test++} = 0#1 == (-5#4 ==3#4);
output1{test++} = 1#1 == (-5#4 !=3#4);
output1{test++} = 1#1 == (-5#4 <4#4);
output1{test++} = 1#1 == (-5#4 <=4#4);
output1{test++} = 0#1 == (-5#4 >4#4);
output1{test++} = 0#1 == (-5#4 >=4#4);
output1{test++} = 0#1 == (-5#4 ==4#4);
output1{test++} = 1#1 == (-5#4 !=4#4);
output1{test++} = 1#1 == (-5#4 <5#4);
output1{test++} = 1#1 == (-5#4 <=5#4);
output1{test++} = 0#1 == (-5#4 >5#4);
output1{test++} = 0#1 == (-5#4 >=5#4);
output1{test++} = 0#1 == (-5#4 ==5#4);
output1{test++} = 1#1 == (-5#4 !=5#4);
output1{test++} = 1#1 == (-5#4 <6#4);
output1{test++} = 1#1 == (-5#4 <=6#4);
output1{test++} = 0#1 == (-5#4 >6#4);
output1{test++} = 0#1 == (-5#4 >=6#4);
output1{test++} = 0#1 == (-5#4 ==6#4);
output1{test++} = 1#1 == (-5#4 !=6#4);
output1{test++} = 1#1 == (-5#4 <7#4);
output1{test++} = 1#1 == (-5#4 <=7#4);
output1{test++} = 0#1 == (-5#4 >7#4);
output1{test++} = 0#1 == (-5#4 >=7#4);
output1{test++} = 0#1 == (-5#4 ==7#4);
output1{test++} = 1#1 == (-5#4 !=7#4);
output1{test++} = 0#1 == (-4#4 <-8#4);
output1{test++} = 0#1 == (-4#4 <=-8#4);
output1{test++} = 1#1 == (-4#4 >-8#4);
output1{test++} = 1#1 == (-4#4 >=-8#4);
output1{test++} = 0#1 == (-4#4 ==-8#4);
output1{test++} = 1#1 == (-4#4 !=-8#4);
output1{test++} = 0#1 == (-4#4 <-7#4);
output1{test++} = 0#1 == (-4#4 <=-7#4);
output1{test++} = 1#1 == (-4#4 >-7#4);
output1{test++} = 1#1 == (-4#4 >=-7#4);
output1{test++} = 0#1 == (-4#4 ==-7#4);
output1{test++} = 1#1 == (-4#4 !=-7#4);
output1{test++} = 0#1 == (-4#4 <-6#4);
output1{test++} = 0#1 == (-4#4 <=-6#4);
output1{test++} = 1#1 == (-4#4 >-6#4);
output1{test++} = 1#1 == (-4#4 >=-6#4);
output1{test++} = 0#1 == (-4#4 ==-6#4);
output1{test++} = 1#1 == (-4#4 !=-6#4);
output1{test++} = 0#1 == (-4#4 <-5#4);
output1{test++} = 0#1 == (-4#4 <=-5#4);
output1{test++} = 1#1 == (-4#4 >-5#4);
output1{test++} = 1#1 == (-4#4 >=-5#4);
output1{test++} = 0#1 == (-4#4 ==-5#4);
output1{test++} = 1#1 == (-4#4 !=-5#4);
output1{test++} = 0#1 == (-4#4 <-4#4);
output1{test++} = 1#1 == (-4#4 <=-4#4);
output1{test++} = 0#1 == (-4#4 >-4#4);
output1{test++} = 1#1 == (-4#4 >=-4#4);
output1{test++} = 1#1 == (-4#4 ==-4#4);
output1{test++} = 0#1 == (-4#4 !=-4#4);
output1{test++} = 1#1 == (-4#4 <-3#4);
output1{test++} = 1#1 == (-4#4 <=-3#4);
output1{test++} = 0#1 == (-4#4 >-3#4);
output1{test++} = 0#1 == (-4#4 >=-3#4);
output1{test++} = 0#1 == (-4#4 ==-3#4);
output1{test++} = 1#1 == (-4#4 !=-3#4);
output1{test++} = 1#1 == (-4#4 <-2#4);
output1{test++} = 1#1 == (-4#4 <=-2#4);
output1{test++} = 0#1 == (-4#4 >-2#4);
output1{test++} = 0#1 == (-4#4 >=-2#4);
output1{test++} = 0#1 == (-4#4 ==-2#4);
output1{test++} = 1#1 == (-4#4 !=-2#4);
output1{test++} = 1#1 == (-4#4 <-1#4);
output1{test++} = 1#1 == (-4#4 <=-1#4);
output1{test++} = 0#1 == (-4#4 >-1#4);
output1{test++} = 0#1 == (-4#4 >=-1#4);
output1{test++} = 0#1 == (-4#4 ==-1#4);
output1{test++} = 1#1 == (-4#4 !=-1#4);
output1{test++} = 1#1 == (-4#4 <0#4);
output1{test++} = 1#1 == (-4#4 <=0#4);
output1{test++} = 0#1 == (-4#4 >0#4);
output1{test++} = 0#1 == (-4#4 >=0#4);
output1{test++} = 0#1 == (-4#4 ==0#4);
output1{test++} = 1#1 == (-4#4 !=0#4);
output1{test++} = 1#1 == (-4#4 <1#4);
output1{test++} = 1#1 == (-4#4 <=1#4);
output1{test++} = 0#1 == (-4#4 >1#4);
output1{test++} = 0#1 == (-4#4 >=1#4);
output1{test++} = 0#1 == (-4#4 ==1#4);
output1{test++} = 1#1 == (-4#4 !=1#4);
output1{test++} = 1#1 == (-4#4 <2#4);
output1{test++} = 1#1 == (-4#4 <=2#4);
output1{test++} = 0#1 == (-4#4 >2#4);
output1{test++} = 0#1 == (-4#4 >=2#4);
output1{test++} = 0#1 == (-4#4 ==2#4);
output1{test++} = 1#1 == (-4#4 !=2#4);
output1{test++} = 1#1 == (-4#4 <3#4);
output1{test++} = 1#1 == (-4#4 <=3#4);
output1{test++} = 0#1 == (-4#4 >3#4);
output1{test++} = 0#1 == (-4#4 >=3#4);
output1{test++} = 0#1 == (-4#4 ==3#4);
output1{test++} = 1#1 == (-4#4 !=3#4);
output1{test++} = 1#1 == (-4#4 <4#4);
output1{test++} = 1#1 == (-4#4 <=4#4);
output1{test++} = 0#1 == (-4#4 >4#4);
output1{test++} = 0#1 == (-4#4 >=4#4);
output1{test++} = 0#1 == (-4#4 ==4#4);
output1{test++} = 1#1 == (-4#4 !=4#4);
output1{test++} = 1#1 == (-4#4 <5#4);
output1{test++} = 1#1 == (-4#4 <=5#4);
output1{test++} = 0#1 == (-4#4 >5#4);
output1{test++} = 0#1 == (-4#4 >=5#4);
output1{test++} = 0#1 == (-4#4 ==5#4);
output1{test++} = 1#1 == (-4#4 !=5#4);
output1{test++} = 1#1 == (-4#4 <6#4);
output1{test++} = 1#1 == (-4#4 <=6#4);
output1{test++} = 0#1 == (-4#4 >6#4);
output1{test++} = 0#1 == (-4#4 >=6#4);
output1{test++} = 0#1 == (-4#4 ==6#4);
output1{test++} = 1#1 == (-4#4 !=6#4);
output1{test++} = 1#1 == (-4#4 <7#4);
output1{test++} = 1#1 == (-4#4 <=7#4);
output1{test++} = 0#1 == (-4#4 >7#4);
output1{test++} = 0#1 == (-4#4 >=7#4);
output1{test++} = 0#1 == (-4#4 ==7#4);
output1{test++} = 1#1 == (-4#4 !=7#4);
output1{test++} = 0#1 == (-3#4 <-8#4);
output1{test++} = 0#1 == (-3#4 <=-8#4);
output1{test++} = 1#1 == (-3#4 >-8#4);
output1{test++} = 1#1 == (-3#4 >=-8#4);
output1{test++} = 0#1 == (-3#4 ==-8#4);
output1{test++} = 1#1 == (-3#4 !=-8#4);
output1{test++} = 0#1 == (-3#4 <-7#4);
output1{test++} = 0#1 == (-3#4 <=-7#4);
output1{test++} = 1#1 == (-3#4 >-7#4);
output1{test++} = 1#1 == (-3#4 >=-7#4);
output1{test++} = 0#1 == (-3#4 ==-7#4);
output1{test++} = 1#1 == (-3#4 !=-7#4);
output1{test++} = 0#1 == (-3#4 <-6#4);
output1{test++} = 0#1 == (-3#4 <=-6#4);
output1{test++} = 1#1 == (-3#4 >-6#4);
output1{test++} = 1#1 == (-3#4 >=-6#4);
output1{test++} = 0#1 == (-3#4 ==-6#4);
output1{test++} = 1#1 == (-3#4 !=-6#4);
output1{test++} = 0#1 == (-3#4 <-5#4);
output1{test++} = 0#1 == (-3#4 <=-5#4);
output1{test++} = 1#1 == (-3#4 >-5#4);
output1{test++} = 1#1 == (-3#4 >=-5#4);
output1{test++} = 0#1 == (-3#4 ==-5#4);
output1{test++} = 1#1 == (-3#4 !=-5#4);
output1{test++} = 0#1 == (-3#4 <-4#4);
output1{test++} = 0#1 == (-3#4 <=-4#4);
output1{test++} = 1#1 == (-3#4 >-4#4);
output1{test++} = 1#1 == (-3#4 >=-4#4);
output1{test++} = 0#1 == (-3#4 ==-4#4);
output1{test++} = 1#1 == (-3#4 !=-4#4);
output1{test++} = 0#1 == (-3#4 <-3#4);
output1{test++} = 1#1 == (-3#4 <=-3#4);
output1{test++} = 0#1 == (-3#4 >-3#4);
output1{test++} = 1#1 == (-3#4 >=-3#4);
output1{test++} = 1#1 == (-3#4 ==-3#4);
output1{test++} = 0#1 == (-3#4 !=-3#4);
output1{test++} = 1#1 == (-3#4 <-2#4);
output1{test++} = 1#1 == (-3#4 <=-2#4);
output1{test++} = 0#1 == (-3#4 >-2#4);
output1{test++} = 0#1 == (-3#4 >=-2#4);
output1{test++} = 0#1 == (-3#4 ==-2#4);
output1{test++} = 1#1 == (-3#4 !=-2#4);
output1{test++} = 1#1 == (-3#4 <-1#4);
output1{test++} = 1#1 == (-3#4 <=-1#4);
output1{test++} = 0#1 == (-3#4 >-1#4);
output1{test++} = 0#1 == (-3#4 >=-1#4);
output1{test++} = 0#1 == (-3#4 ==-1#4);
output1{test++} = 1#1 == (-3#4 !=-1#4);
output1{test++} = 1#1 == (-3#4 <0#4);
output1{test++} = 1#1 == (-3#4 <=0#4);
output1{test++} = 0#1 == (-3#4 >0#4);
output1{test++} = 0#1 == (-3#4 >=0#4);
output1{test++} = 0#1 == (-3#4 ==0#4);
output1{test++} = 1#1 == (-3#4 !=0#4);
output1{test++} = 1#1 == (-3#4 <1#4);
output1{test++} = 1#1 == (-3#4 <=1#4);
output1{test++} = 0#1 == (-3#4 >1#4);
output1{test++} = 0#1 == (-3#4 >=1#4);
output1{test++} = 0#1 == (-3#4 ==1#4);
output1{test++} = 1#1 == (-3#4 !=1#4);
output1{test++} = 1#1 == (-3#4 <2#4);
output1{test++} = 1#1 == (-3#4 <=2#4);
output1{test++} = 0#1 == (-3#4 >2#4);
output1{test++} = 0#1 == (-3#4 >=2#4);
output1{test++} = 0#1 == (-3#4 ==2#4);
output1{test++} = 1#1 == (-3#4 !=2#4);
output1{test++} = 1#1 == (-3#4 <3#4);
output1{test++} = 1#1 == (-3#4 <=3#4);
output1{test++} = 0#1 == (-3#4 >3#4);
output1{test++} = 0#1 == (-3#4 >=3#4);
output1{test++} = 0#1 == (-3#4 ==3#4);
output1{test++} = 1#1 == (-3#4 !=3#4);
output1{test++} = 1#1 == (-3#4 <4#4);
output1{test++} = 1#1 == (-3#4 <=4#4);
output1{test++} = 0#1 == (-3#4 >4#4);
output1{test++} = 0#1 == (-3#4 >=4#4);
output1{test++} = 0#1 == (-3#4 ==4#4);
output1{test++} = 1#1 == (-3#4 !=4#4);
output1{test++} = 1#1 == (-3#4 <5#4);
output1{test++} = 1#1 == (-3#4 <=5#4);
output1{test++} = 0#1 == (-3#4 >5#4);
output1{test++} = 0#1 == (-3#4 >=5#4);
output1{test++} = 0#1 == (-3#4 ==5#4);
output1{test++} = 1#1 == (-3#4 !=5#4);
output1{test++} = 1#1 == (-3#4 <6#4);
output1{test++} = 1#1 == (-3#4 <=6#4);
output1{test++} = 0#1 == (-3#4 >6#4);
output1{test++} = 0#1 == (-3#4 >=6#4);
output1{test++} = 0#1 == (-3#4 ==6#4);
output1{test++} = 1#1 == (-3#4 !=6#4);
output1{test++} = 1#1 == (-3#4 <7#4);
output1{test++} = 1#1 == (-3#4 <=7#4);
output1{test++} = 0#1 == (-3#4 >7#4);
output1{test++} = 0#1 == (-3#4 >=7#4);
output1{test++} = 0#1 == (-3#4 ==7#4);
output1{test++} = 1#1 == (-3#4 !=7#4);
output1{test++} = 0#1 == (-2#4 <-8#4);
output1{test++} = 0#1 == (-2#4 <=-8#4);
output1{test++} = 1#1 == (-2#4 >-8#4);
output1{test++} = 1#1 == (-2#4 >=-8#4);
output1{test++} = 0#1 == (-2#4 ==-8#4);
output1{test++} = 1#1 == (-2#4 !=-8#4);
output1{test++} = 0#1 == (-2#4 <-7#4);
output1{test++} = 0#1 == (-2#4 <=-7#4);
output1{test++} = 1#1 == (-2#4 >-7#4);
output1{test++} = 1#1 == (-2#4 >=-7#4);
output1{test++} = 0#1 == (-2#4 ==-7#4);
output1{test++} = 1#1 == (-2#4 !=-7#4);
output1{test++} = 0#1 == (-2#4 <-6#4);
output1{test++} = 0#1 == (-2#4 <=-6#4);
output1{test++} = 1#1 == (-2#4 >-6#4);
output1{test++} = 1#1 == (-2#4 >=-6#4);
output1{test++} = 0#1 == (-2#4 ==-6#4);
output1{test++} = 1#1 == (-2#4 !=-6#4);
output1{test++} = 0#1 == (-2#4 <-5#4);
output1{test++} = 0#1 == (-2#4 <=-5#4);
output1{test++} = 1#1 == (-2#4 >-5#4);
output1{test++} = 1#1 == (-2#4 >=-5#4);
output1{test++} = 0#1 == (-2#4 ==-5#4);
output1{test++} = 1#1 == (-2#4 !=-5#4);
output1{test++} = 0#1 == (-2#4 <-4#4);
output1{test++} = 0#1 == (-2#4 <=-4#4);
output1{test++} = 1#1 == (-2#4 >-4#4);
output1{test++} = 1#1 == (-2#4 >=-4#4);
output1{test++} = 0#1 == (-2#4 ==-4#4);
output1{test++} = 1#1 == (-2#4 !=-4#4);
output1{test++} = 0#1 == (-2#4 <-3#4);
output1{test++} = 0#1 == (-2#4 <=-3#4);
output1{test++} = 1#1 == (-2#4 >-3#4);
output1{test++} = 1#1 == (-2#4 >=-3#4);
output1{test++} = 0#1 == (-2#4 ==-3#4);
output1{test++} = 1#1 == (-2#4 !=-3#4);
output1{test++} = 0#1 == (-2#4 <-2#4);
output1{test++} = 1#1 == (-2#4 <=-2#4);
output1{test++} = 0#1 == (-2#4 >-2#4);
output1{test++} = 1#1 == (-2#4 >=-2#4);
output1{test++} = 1#1 == (-2#4 ==-2#4);
output1{test++} = 0#1 == (-2#4 !=-2#4);
output1{test++} = 1#1 == (-2#4 <-1#4);
output1{test++} = 1#1 == (-2#4 <=-1#4);
output1{test++} = 0#1 == (-2#4 >-1#4);
output1{test++} = 0#1 == (-2#4 >=-1#4);
output1{test++} = 0#1 == (-2#4 ==-1#4);
output1{test++} = 1#1 == (-2#4 !=-1#4);
output1{test++} = 1#1 == (-2#4 <0#4);
output1{test++} = 1#1 == (-2#4 <=0#4);
output1{test++} = 0#1 == (-2#4 >0#4);
output1{test++} = 0#1 == (-2#4 >=0#4);
output1{test++} = 0#1 == (-2#4 ==0#4);
output1{test++} = 1#1 == (-2#4 !=0#4);
output1{test++} = 1#1 == (-2#4 <1#4);
output1{test++} = 1#1 == (-2#4 <=1#4);
output1{test++} = 0#1 == (-2#4 >1#4);
output1{test++} = 0#1 == (-2#4 >=1#4);
output1{test++} = 0#1 == (-2#4 ==1#4);
output1{test++} = 1#1 == (-2#4 !=1#4);
output1{test++} = 1#1 == (-2#4 <2#4);
output1{test++} = 1#1 == (-2#4 <=2#4);
output1{test++} = 0#1 == (-2#4 >2#4);
output1{test++} = 0#1 == (-2#4 >=2#4);
output1{test++} = 0#1 == (-2#4 ==2#4);
output1{test++} = 1#1 == (-2#4 !=2#4);
output1{test++} = 1#1 == (-2#4 <3#4);
output1{test++} = 1#1 == (-2#4 <=3#4);
output1{test++} = 0#1 == (-2#4 >3#4);
output1{test++} = 0#1 == (-2#4 >=3#4);
output1{test++} = 0#1 == (-2#4 ==3#4);
output1{test++} = 1#1 == (-2#4 !=3#4);
output1{test++} = 1#1 == (-2#4 <4#4);
output1{test++} = 1#1 == (-2#4 <=4#4);
output1{test++} = 0#1 == (-2#4 >4#4);
output1{test++} = 0#1 == (-2#4 >=4#4);
output1{test++} = 0#1 == (-2#4 ==4#4);
output1{test++} = 1#1 == (-2#4 !=4#4);
output1{test++} = 1#1 == (-2#4 <5#4);
output1{test++} = 1#1 == (-2#4 <=5#4);
output1{test++} = 0#1 == (-2#4 >5#4);
output1{test++} = 0#1 == (-2#4 >=5#4);
output1{test++} = 0#1 == (-2#4 ==5#4);
output1{test++} = 1#1 == (-2#4 !=5#4);
output1{test++} = 1#1 == (-2#4 <6#4);
output1{test++} = 1#1 == (-2#4 <=6#4);
output1{test++} = 0#1 == (-2#4 >6#4);
output1{test++} = 0#1 == (-2#4 >=6#4);
output1{test++} = 0#1 == (-2#4 ==6#4);
output1{test++} = 1#1 == (-2#4 !=6#4);
output1{test++} = 1#1 == (-2#4 <7#4);
output1{test++} = 1#1 == (-2#4 <=7#4);
output1{test++} = 0#1 == (-2#4 >7#4);
output1{test++} = 0#1 == (-2#4 >=7#4);
output1{test++} = 0#1 == (-2#4 ==7#4);
output1{test++} = 1#1 == (-2#4 !=7#4);
output1{test++} = 0#1 == (-1#4 <-8#4);
output1{test++} = 0#1 == (-1#4 <=-8#4);
output1{test++} = 1#1 == (-1#4 >-8#4);
output1{test++} = 1#1 == (-1#4 >=-8#4);
output1{test++} = 0#1 == (-1#4 ==-8#4);
output1{test++} = 1#1 == (-1#4 !=-8#4);
output1{test++} = 0#1 == (-1#4 <-7#4);
output1{test++} = 0#1 == (-1#4 <=-7#4);
output1{test++} = 1#1 == (-1#4 >-7#4);
output1{test++} = 1#1 == (-1#4 >=-7#4);
output1{test++} = 0#1 == (-1#4 ==-7#4);
output1{test++} = 1#1 == (-1#4 !=-7#4);
output1{test++} = 0#1 == (-1#4 <-6#4);
output1{test++} = 0#1 == (-1#4 <=-6#4);
output1{test++} = 1#1 == (-1#4 >-6#4);
output1{test++} = 1#1 == (-1#4 >=-6#4);
output1{test++} = 0#1 == (-1#4 ==-6#4);
output1{test++} = 1#1 == (-1#4 !=-6#4);
output1{test++} = 0#1 == (-1#4 <-5#4);
output1{test++} = 0#1 == (-1#4 <=-5#4);
output1{test++} = 1#1 == (-1#4 >-5#4);
output1{test++} = 1#1 == (-1#4 >=-5#4);
output1{test++} = 0#1 == (-1#4 ==-5#4);
output1{test++} = 1#1 == (-1#4 !=-5#4);
output1{test++} = 0#1 == (-1#4 <-4#4);
output1{test++} = 0#1 == (-1#4 <=-4#4);
output1{test++} = 1#1 == (-1#4 >-4#4);
output1{test++} = 1#1 == (-1#4 >=-4#4);
output1{test++} = 0#1 == (-1#4 ==-4#4);
output1{test++} = 1#1 == (-1#4 !=-4#4);
output1{test++} = 0#1 == (-1#4 <-3#4);
output1{test++} = 0#1 == (-1#4 <=-3#4);
output1{test++} = 1#1 == (-1#4 >-3#4);
output1{test++} = 1#1 == (-1#4 >=-3#4);
output1{test++} = 0#1 == (-1#4 ==-3#4);
output1{test++} = 1#1 == (-1#4 !=-3#4);
output1{test++} = 0#1 == (-1#4 <-2#4);
output1{test++} = 0#1 == (-1#4 <=-2#4);
output1{test++} = 1#1 == (-1#4 >-2#4);
output1{test++} = 1#1 == (-1#4 >=-2#4);
output1{test++} = 0#1 == (-1#4 ==-2#4);
output1{test++} = 1#1 == (-1#4 !=-2#4);
output1{test++} = 0#1 == (-1#4 <-1#4);
output1{test++} = 1#1 == (-1#4 <=-1#4);
output1{test++} = 0#1 == (-1#4 >-1#4);
output1{test++} = 1#1 == (-1#4 >=-1#4);
output1{test++} = 1#1 == (-1#4 ==-1#4);
output1{test++} = 0#1 == (-1#4 !=-1#4);
output1{test++} = 1#1 == (-1#4 <0#4);
output1{test++} = 1#1 == (-1#4 <=0#4);
output1{test++} = 0#1 == (-1#4 >0#4);
output1{test++} = 0#1 == (-1#4 >=0#4);
output1{test++} = 0#1 == (-1#4 ==0#4);
output1{test++} = 1#1 == (-1#4 !=0#4);
output1{test++} = 1#1 == (-1#4 <1#4);
output1{test++} = 1#1 == (-1#4 <=1#4);
output1{test++} = 0#1 == (-1#4 >1#4);
output1{test++} = 0#1 == (-1#4 >=1#4);
output1{test++} = 0#1 == (-1#4 ==1#4);
output1{test++} = 1#1 == (-1#4 !=1#4);
output1{test++} = 1#1 == (-1#4 <2#4);
output1{test++} = 1#1 == (-1#4 <=2#4);
output1{test++} = 0#1 == (-1#4 >2#4);
output1{test++} = 0#1 == (-1#4 >=2#4);
output1{test++} = 0#1 == (-1#4 ==2#4);
output1{test++} = 1#1 == (-1#4 !=2#4);
output1{test++} = 1#1 == (-1#4 <3#4);
output1{test++} = 1#1 == (-1#4 <=3#4);
output1{test++} = 0#1 == (-1#4 >3#4);
output1{test++} = 0#1 == (-1#4 >=3#4);
output1{test++} = 0#1 == (-1#4 ==3#4);
output1{test++} = 1#1 == (-1#4 !=3#4);
output1{test++} = 1#1 == (-1#4 <4#4);
output1{test++} = 1#1 == (-1#4 <=4#4);
output1{test++} = 0#1 == (-1#4 >4#4);
output1{test++} = 0#1 == (-1#4 >=4#4);
output1{test++} = 0#1 == (-1#4 ==4#4);
output1{test++} = 1#1 == (-1#4 !=4#4);
output1{test++} = 1#1 == (-1#4 <5#4);
output1{test++} = 1#1 == (-1#4 <=5#4);
output1{test++} = 0#1 == (-1#4 >5#4);
output1{test++} = 0#1 == (-1#4 >=5#4);
output1{test++} = 0#1 == (-1#4 ==5#4);
output1{test++} = 1#1 == (-1#4 !=5#4);
output1{test++} = 1#1 == (-1#4 <6#4);
output1{test++} = 1#1 == (-1#4 <=6#4);
output1{test++} = 0#1 == (-1#4 >6#4);
output1{test++} = 0#1 == (-1#4 >=6#4);
output1{test++} = 0#1 == (-1#4 ==6#4);
output1{test++} = 1#1 == (-1#4 !=6#4);
output1{test++} = 1#1 == (-1#4 <7#4);
output1{test++} = 1#1 == (-1#4 <=7#4);
output1{test++} = 0#1 == (-1#4 >7#4);
output1{test++} = 0#1 == (-1#4 >=7#4);
output1{test++} = 0#1 == (-1#4 ==7#4);
output1{test++} = 1#1 == (-1#4 !=7#4);
output1{test++} = 0#1 == (0#4 <-8#4);
output1{test++} = 0#1 == (0#4 <=-8#4);
output1{test++} = 1#1 == (0#4 >-8#4);
output1{test++} = 1#1 == (0#4 >=-8#4);
output1{test++} = 0#1 == (0#4 ==-8#4);
output1{test++} = 1#1 == (0#4 !=-8#4);
output1{test++} = 0#1 == (0#4 <-7#4);
output1{test++} = 0#1 == (0#4 <=-7#4);
output1{test++} = 1#1 == (0#4 >-7#4);
output1{test++} = 1#1 == (0#4 >=-7#4);
output1{test++} = 0#1 == (0#4 ==-7#4);
output1{test++} = 1#1 == (0#4 !=-7#4);
output1{test++} = 0#1 == (0#4 <-6#4);
output1{test++} = 0#1 == (0#4 <=-6#4);
output1{test++} = 1#1 == (0#4 >-6#4);
output1{test++} = 1#1 == (0#4 >=-6#4);
output1{test++} = 0#1 == (0#4 ==-6#4);
output1{test++} = 1#1 == (0#4 !=-6#4);
output1{test++} = 0#1 == (0#4 <-5#4);
output1{test++} = 0#1 == (0#4 <=-5#4);
output1{test++} = 1#1 == (0#4 >-5#4);
output1{test++} = 1#1 == (0#4 >=-5#4);
output1{test++} = 0#1 == (0#4 ==-5#4);
output1{test++} = 1#1 == (0#4 !=-5#4);
output1{test++} = 0#1 == (0#4 <-4#4);
output1{test++} = 0#1 == (0#4 <=-4#4);
output1{test++} = 1#1 == (0#4 >-4#4);
output1{test++} = 1#1 == (0#4 >=-4#4);
output1{test++} = 0#1 == (0#4 ==-4#4);
output1{test++} = 1#1 == (0#4 !=-4#4);
output1{test++} = 0#1 == (0#4 <-3#4);
output1{test++} = 0#1 == (0#4 <=-3#4);
output1{test++} = 1#1 == (0#4 >-3#4);
output1{test++} = 1#1 == (0#4 >=-3#4);
output1{test++} = 0#1 == (0#4 ==-3#4);
output1{test++} = 1#1 == (0#4 !=-3#4);
output1{test++} = 0#1 == (0#4 <-2#4);
output1{test++} = 0#1 == (0#4 <=-2#4);
output1{test++} = 1#1 == (0#4 >-2#4);
output1{test++} = 1#1 == (0#4 >=-2#4);
output1{test++} = 0#1 == (0#4 ==-2#4);
output1{test++} = 1#1 == (0#4 !=-2#4);
output1{test++} = 0#1 == (0#4 <-1#4);
output1{test++} = 0#1 == (0#4 <=-1#4);
output1{test++} = 1#1 == (0#4 >-1#4);
output1{test++} = 1#1 == (0#4 >=-1#4);
output1{test++} = 0#1 == (0#4 ==-1#4);
output1{test++} = 1#1 == (0#4 !=-1#4);
output1{test++} = 0#1 == (0#4 <0#4);
output1{test++} = 1#1 == (0#4 <=0#4);
output1{test++} = 0#1 == (0#4 >0#4);
output1{test++} = 1#1 == (0#4 >=0#4);
output1{test++} = 1#1 == (0#4 ==0#4);
output1{test++} = 0#1 == (0#4 !=0#4);
output1{test++} = 1#1 == (0#4 <1#4);
output1{test++} = 1#1 == (0#4 <=1#4);
output1{test++} = 0#1 == (0#4 >1#4);
output1{test++} = 0#1 == (0#4 >=1#4);
output1{test++} = 0#1 == (0#4 ==1#4);
output1{test++} = 1#1 == (0#4 !=1#4);
output1{test++} = 1#1 == (0#4 <2#4);
output1{test++} = 1#1 == (0#4 <=2#4);
output1{test++} = 0#1 == (0#4 >2#4);
output1{test++} = 0#1 == (0#4 >=2#4);
output1{test++} = 0#1 == (0#4 ==2#4);
output1{test++} = 1#1 == (0#4 !=2#4);
output1{test++} = 1#1 == (0#4 <3#4);
output1{test++} = 1#1 == (0#4 <=3#4);
output1{test++} = 0#1 == (0#4 >3#4);
output1{test++} = 0#1 == (0#4 >=3#4);
output1{test++} = 0#1 == (0#4 ==3#4);
output1{test++} = 1#1 == (0#4 !=3#4);
output1{test++} = 1#1 == (0#4 <4#4);
output1{test++} = 1#1 == (0#4 <=4#4);
output1{test++} = 0#1 == (0#4 >4#4);
output1{test++} = 0#1 == (0#4 >=4#4);
output1{test++} = 0#1 == (0#4 ==4#4);
output1{test++} = 1#1 == (0#4 !=4#4);
output1{test++} = 1#1 == (0#4 <5#4);
output1{test++} = 1#1 == (0#4 <=5#4);
output1{test++} = 0#1 == (0#4 >5#4);
output1{test++} = 0#1 == (0#4 >=5#4);
output1{test++} = 0#1 == (0#4 ==5#4);
output1{test++} = 1#1 == (0#4 !=5#4);
output1{test++} = 1#1 == (0#4 <6#4);
output1{test++} = 1#1 == (0#4 <=6#4);
output1{test++} = 0#1 == (0#4 >6#4);
output1{test++} = 0#1 == (0#4 >=6#4);
output1{test++} = 0#1 == (0#4 ==6#4);
output1{test++} = 1#1 == (0#4 !=6#4);
output1{test++} = 1#1 == (0#4 <7#4);
output1{test++} = 1#1 == (0#4 <=7#4);
output1{test++} = 0#1 == (0#4 >7#4);
output1{test++} = 0#1 == (0#4 >=7#4);
output1{test++} = 0#1 == (0#4 ==7#4);
output1{test++} = 1#1 == (0#4 !=7#4);
output1{test++} = 0#1 == (1#4 <-8#4);
output1{test++} = 0#1 == (1#4 <=-8#4);
output1{test++} = 1#1 == (1#4 >-8#4);
output1{test++} = 1#1 == (1#4 >=-8#4);
output1{test++} = 0#1 == (1#4 ==-8#4);
output1{test++} = 1#1 == (1#4 !=-8#4);
output1{test++} = 0#1 == (1#4 <-7#4);
output1{test++} = 0#1 == (1#4 <=-7#4);
output1{test++} = 1#1 == (1#4 >-7#4);
output1{test++} = 1#1 == (1#4 >=-7#4);
output1{test++} = 0#1 == (1#4 ==-7#4);
output1{test++} = 1#1 == (1#4 !=-7#4);
output1{test++} = 0#1 == (1#4 <-6#4);
output1{test++} = 0#1 == (1#4 <=-6#4);
output1{test++} = 1#1 == (1#4 >-6#4);
output1{test++} = 1#1 == (1#4 >=-6#4);
output1{test++} = 0#1 == (1#4 ==-6#4);
output1{test++} = 1#1 == (1#4 !=-6#4);
output1{test++} = 0#1 == (1#4 <-5#4);
output1{test++} = 0#1 == (1#4 <=-5#4);
output1{test++} = 1#1 == (1#4 >-5#4);
output1{test++} = 1#1 == (1#4 >=-5#4);
output1{test++} = 0#1 == (1#4 ==-5#4);
output1{test++} = 1#1 == (1#4 !=-5#4);
output1{test++} = 0#1 == (1#4 <-4#4);
output1{test++} = 0#1 == (1#4 <=-4#4);
output1{test++} = 1#1 == (1#4 >-4#4);
output1{test++} = 1#1 == (1#4 >=-4#4);
output1{test++} = 0#1 == (1#4 ==-4#4);
output1{test++} = 1#1 == (1#4 !=-4#4);
output1{test++} = 0#1 == (1#4 <-3#4);
output1{test++} = 0#1 == (1#4 <=-3#4);
output1{test++} = 1#1 == (1#4 >-3#4);
output1{test++} = 1#1 == (1#4 >=-3#4);
output1{test++} = 0#1 == (1#4 ==-3#4);
output1{test++} = 1#1 == (1#4 !=-3#4);
output1{test++} = 0#1 == (1#4 <-2#4);
output1{test++} = 0#1 == (1#4 <=-2#4);
output1{test++} = 1#1 == (1#4 >-2#4);
output1{test++} = 1#1 == (1#4 >=-2#4);
output1{test++} = 0#1 == (1#4 ==-2#4);
output1{test++} = 1#1 == (1#4 !=-2#4);
output1{test++} = 0#1 == (1#4 <-1#4);
output1{test++} = 0#1 == (1#4 <=-1#4);
output1{test++} = 1#1 == (1#4 >-1#4);
output1{test++} = 1#1 == (1#4 >=-1#4);
output1{test++} = 0#1 == (1#4 ==-1#4);
output1{test++} = 1#1 == (1#4 !=-1#4);
output1{test++} = 0#1 == (1#4 <0#4);
output1{test++} = 0#1 == (1#4 <=0#4);
output1{test++} = 1#1 == (1#4 >0#4);
output1{test++} = 1#1 == (1#4 >=0#4);
output1{test++} = 0#1 == (1#4 ==0#4);
output1{test++} = 1#1 == (1#4 !=0#4);
output1{test++} = 0#1 == (1#4 <1#4);
output1{test++} = 1#1 == (1#4 <=1#4);
output1{test++} = 0#1 == (1#4 >1#4);
output1{test++} = 1#1 == (1#4 >=1#4);
output1{test++} = 1#1 == (1#4 ==1#4);
output1{test++} = 0#1 == (1#4 !=1#4);
output1{test++} = 1#1 == (1#4 <2#4);
output1{test++} = 1#1 == (1#4 <=2#4);
output1{test++} = 0#1 == (1#4 >2#4);
output1{test++} = 0#1 == (1#4 >=2#4);
output1{test++} = 0#1 == (1#4 ==2#4);
output1{test++} = 1#1 == (1#4 !=2#4);
output1{test++} = 1#1 == (1#4 <3#4);
output1{test++} = 1#1 == (1#4 <=3#4);
output1{test++} = 0#1 == (1#4 >3#4);
output1{test++} = 0#1 == (1#4 >=3#4);
output1{test++} = 0#1 == (1#4 ==3#4);
output1{test++} = 1#1 == (1#4 !=3#4);
output1{test++} = 1#1 == (1#4 <4#4);
output1{test++} = 1#1 == (1#4 <=4#4);
output1{test++} = 0#1 == (1#4 >4#4);
output1{test++} = 0#1 == (1#4 >=4#4);
output1{test++} = 0#1 == (1#4 ==4#4);
output1{test++} = 1#1 == (1#4 !=4#4);
output1{test++} = 1#1 == (1#4 <5#4);
output1{test++} = 1#1 == (1#4 <=5#4);
output1{test++} = 0#1 == (1#4 >5#4);
output1{test++} = 0#1 == (1#4 >=5#4);
output1{test++} = 0#1 == (1#4 ==5#4);
output1{test++} = 1#1 == (1#4 !=5#4);
output1{test++} = 1#1 == (1#4 <6#4);
output1{test++} = 1#1 == (1#4 <=6#4);
output1{test++} = 0#1 == (1#4 >6#4);
output1{test++} = 0#1 == (1#4 >=6#4);
output1{test++} = 0#1 == (1#4 ==6#4);
output1{test++} = 1#1 == (1#4 !=6#4);
output1{test++} = 1#1 == (1#4 <7#4);
output1{test++} = 1#1 == (1#4 <=7#4);
output1{test++} = 0#1 == (1#4 >7#4);
output1{test++} = 0#1 == (1#4 >=7#4);
output1{test++} = 0#1 == (1#4 ==7#4);
output1{test++} = 1#1 == (1#4 !=7#4);
output1{test++} = 0#1 == (2#4 <-8#4);
output1{test++} = 0#1 == (2#4 <=-8#4);
output1{test++} = 1#1 == (2#4 >-8#4);
output1{test++} = 1#1 == (2#4 >=-8#4);
output1{test++} = 0#1 == (2#4 ==-8#4);
output1{test++} = 1#1 == (2#4 !=-8#4);
output1{test++} = 0#1 == (2#4 <-7#4);
output1{test++} = 0#1 == (2#4 <=-7#4);
output1{test++} = 1#1 == (2#4 >-7#4);
output1{test++} = 1#1 == (2#4 >=-7#4);
output1{test++} = 0#1 == (2#4 ==-7#4);
output1{test++} = 1#1 == (2#4 !=-7#4);
output1{test++} = 0#1 == (2#4 <-6#4);
output1{test++} = 0#1 == (2#4 <=-6#4);
output1{test++} = 1#1 == (2#4 >-6#4);
output1{test++} = 1#1 == (2#4 >=-6#4);
output1{test++} = 0#1 == (2#4 ==-6#4);
output1{test++} = 1#1 == (2#4 !=-6#4);
output1{test++} = 0#1 == (2#4 <-5#4);
output1{test++} = 0#1 == (2#4 <=-5#4);
output1{test++} = 1#1 == (2#4 >-5#4);
output1{test++} = 1#1 == (2#4 >=-5#4);
output1{test++} = 0#1 == (2#4 ==-5#4);
output1{test++} = 1#1 == (2#4 !=-5#4);
output1{test++} = 0#1 == (2#4 <-4#4);
output1{test++} = 0#1 == (2#4 <=-4#4);
output1{test++} = 1#1 == (2#4 >-4#4);
output1{test++} = 1#1 == (2#4 >=-4#4);
output1{test++} = 0#1 == (2#4 ==-4#4);
output1{test++} = 1#1 == (2#4 !=-4#4);
output1{test++} = 0#1 == (2#4 <-3#4);
output1{test++} = 0#1 == (2#4 <=-3#4);
output1{test++} = 1#1 == (2#4 >-3#4);
output1{test++} = 1#1 == (2#4 >=-3#4);
output1{test++} = 0#1 == (2#4 ==-3#4);
output1{test++} = 1#1 == (2#4 !=-3#4);
output1{test++} = 0#1 == (2#4 <-2#4);
output1{test++} = 0#1 == (2#4 <=-2#4);
output1{test++} = 1#1 == (2#4 >-2#4);
output1{test++} = 1#1 == (2#4 >=-2#4);
output1{test++} = 0#1 == (2#4 ==-2#4);
output1{test++} = 1#1 == (2#4 !=-2#4);
output1{test++} = 0#1 == (2#4 <-1#4);
output1{test++} = 0#1 == (2#4 <=-1#4);
output1{test++} = 1#1 == (2#4 >-1#4);
output1{test++} = 1#1 == (2#4 >=-1#4);
output1{test++} = 0#1 == (2#4 ==-1#4);
output1{test++} = 1#1 == (2#4 !=-1#4);
output1{test++} = 0#1 == (2#4 <0#4);
output1{test++} = 0#1 == (2#4 <=0#4);
output1{test++} = 1#1 == (2#4 >0#4);
output1{test++} = 1#1 == (2#4 >=0#4);
output1{test++} = 0#1 == (2#4 ==0#4);
output1{test++} = 1#1 == (2#4 !=0#4);
output1{test++} = 0#1 == (2#4 <1#4);
output1{test++} = 0#1 == (2#4 <=1#4);
output1{test++} = 1#1 == (2#4 >1#4);
output1{test++} = 1#1 == (2#4 >=1#4);
output1{test++} = 0#1 == (2#4 ==1#4);
output1{test++} = 1#1 == (2#4 !=1#4);
output1{test++} = 0#1 == (2#4 <2#4);
output1{test++} = 1#1 == (2#4 <=2#4);
output1{test++} = 0#1 == (2#4 >2#4);
output1{test++} = 1#1 == (2#4 >=2#4);
output1{test++} = 1#1 == (2#4 ==2#4);
output1{test++} = 0#1 == (2#4 !=2#4);
output1{test++} = 1#1 == (2#4 <3#4);
output1{test++} = 1#1 == (2#4 <=3#4);
output1{test++} = 0#1 == (2#4 >3#4);
output1{test++} = 0#1 == (2#4 >=3#4);
output1{test++} = 0#1 == (2#4 ==3#4);
output1{test++} = 1#1 == (2#4 !=3#4);
output1{test++} = 1#1 == (2#4 <4#4);
output1{test++} = 1#1 == (2#4 <=4#4);
output1{test++} = 0#1 == (2#4 >4#4);
output1{test++} = 0#1 == (2#4 >=4#4);
output1{test++} = 0#1 == (2#4 ==4#4);
output1{test++} = 1#1 == (2#4 !=4#4);
output1{test++} = 1#1 == (2#4 <5#4);
output1{test++} = 1#1 == (2#4 <=5#4);
output1{test++} = 0#1 == (2#4 >5#4);
output1{test++} = 0#1 == (2#4 >=5#4);
output1{test++} = 0#1 == (2#4 ==5#4);
output1{test++} = 1#1 == (2#4 !=5#4);
output1{test++} = 1#1 == (2#4 <6#4);
output1{test++} = 1#1 == (2#4 <=6#4);
output1{test++} = 0#1 == (2#4 >6#4);
output1{test++} = 0#1 == (2#4 >=6#4);
output1{test++} = 0#1 == (2#4 ==6#4);
output1{test++} = 1#1 == (2#4 !=6#4);
output1{test++} = 1#1 == (2#4 <7#4);
output1{test++} = 1#1 == (2#4 <=7#4);
output1{test++} = 0#1 == (2#4 >7#4);
output1{test++} = 0#1 == (2#4 >=7#4);
output1{test++} = 0#1 == (2#4 ==7#4);
output1{test++} = 1#1 == (2#4 !=7#4);
output1{test++} = 0#1 == (3#4 <-8#4);
output1{test++} = 0#1 == (3#4 <=-8#4);
output1{test++} = 1#1 == (3#4 >-8#4);
output1{test++} = 1#1 == (3#4 >=-8#4);
output1{test++} = 0#1 == (3#4 ==-8#4);
output1{test++} = 1#1 == (3#4 !=-8#4);
output1{test++} = 0#1 == (3#4 <-7#4);
output1{test++} = 0#1 == (3#4 <=-7#4);
output1{test++} = 1#1 == (3#4 >-7#4);
output1{test++} = 1#1 == (3#4 >=-7#4);
output1{test++} = 0#1 == (3#4 ==-7#4);
output1{test++} = 1#1 == (3#4 !=-7#4);
output1{test++} = 0#1 == (3#4 <-6#4);
output1{test++} = 0#1 == (3#4 <=-6#4);
output1{test++} = 1#1 == (3#4 >-6#4);
output1{test++} = 1#1 == (3#4 >=-6#4);
output1{test++} = 0#1 == (3#4 ==-6#4);
output1{test++} = 1#1 == (3#4 !=-6#4);
output1{test++} = 0#1 == (3#4 <-5#4);
output1{test++} = 0#1 == (3#4 <=-5#4);
output1{test++} = 1#1 == (3#4 >-5#4);
output1{test++} = 1#1 == (3#4 >=-5#4);
output1{test++} = 0#1 == (3#4 ==-5#4);
output1{test++} = 1#1 == (3#4 !=-5#4);
output1{test++} = 0#1 == (3#4 <-4#4);
output1{test++} = 0#1 == (3#4 <=-4#4);
output1{test++} = 1#1 == (3#4 >-4#4);
output1{test++} = 1#1 == (3#4 >=-4#4);
output1{test++} = 0#1 == (3#4 ==-4#4);
output1{test++} = 1#1 == (3#4 !=-4#4);
output1{test++} = 0#1 == (3#4 <-3#4);
output1{test++} = 0#1 == (3#4 <=-3#4);
output1{test++} = 1#1 == (3#4 >-3#4);
output1{test++} = 1#1 == (3#4 >=-3#4);
output1{test++} = 0#1 == (3#4 ==-3#4);
output1{test++} = 1#1 == (3#4 !=-3#4);
output1{test++} = 0#1 == (3#4 <-2#4);
output1{test++} = 0#1 == (3#4 <=-2#4);
output1{test++} = 1#1 == (3#4 >-2#4);
output1{test++} = 1#1 == (3#4 >=-2#4);
output1{test++} = 0#1 == (3#4 ==-2#4);
output1{test++} = 1#1 == (3#4 !=-2#4);
output1{test++} = 0#1 == (3#4 <-1#4);
output1{test++} = 0#1 == (3#4 <=-1#4);
output1{test++} = 1#1 == (3#4 >-1#4);
output1{test++} = 1#1 == (3#4 >=-1#4);
output1{test++} = 0#1 == (3#4 ==-1#4);
output1{test++} = 1#1 == (3#4 !=-1#4);
output1{test++} = 0#1 == (3#4 <0#4);
output1{test++} = 0#1 == (3#4 <=0#4);
output1{test++} = 1#1 == (3#4 >0#4);
output1{test++} = 1#1 == (3#4 >=0#4);
output1{test++} = 0#1 == (3#4 ==0#4);
output1{test++} = 1#1 == (3#4 !=0#4);
output1{test++} = 0#1 == (3#4 <1#4);
output1{test++} = 0#1 == (3#4 <=1#4);
output1{test++} = 1#1 == (3#4 >1#4);
output1{test++} = 1#1 == (3#4 >=1#4);
output1{test++} = 0#1 == (3#4 ==1#4);
output1{test++} = 1#1 == (3#4 !=1#4);
output1{test++} = 0#1 == (3#4 <2#4);
output1{test++} = 0#1 == (3#4 <=2#4);
output1{test++} = 1#1 == (3#4 >2#4);
output1{test++} = 1#1 == (3#4 >=2#4);
output1{test++} = 0#1 == (3#4 ==2#4);
output1{test++} = 1#1 == (3#4 !=2#4);
output1{test++} = 0#1 == (3#4 <3#4);
output1{test++} = 1#1 == (3#4 <=3#4);
output1{test++} = 0#1 == (3#4 >3#4);
output1{test++} = 1#1 == (3#4 >=3#4);
output1{test++} = 1#1 == (3#4 ==3#4);
output1{test++} = 0#1 == (3#4 !=3#4);
output1{test++} = 1#1 == (3#4 <4#4);
output1{test++} = 1#1 == (3#4 <=4#4);
output1{test++} = 0#1 == (3#4 >4#4);
output1{test++} = 0#1 == (3#4 >=4#4);
output1{test++} = 0#1 == (3#4 ==4#4);
output1{test++} = 1#1 == (3#4 !=4#4);
output1{test++} = 1#1 == (3#4 <5#4);
output1{test++} = 1#1 == (3#4 <=5#4);
output1{test++} = 0#1 == (3#4 >5#4);
output1{test++} = 0#1 == (3#4 >=5#4);
output1{test++} = 0#1 == (3#4 ==5#4);
output1{test++} = 1#1 == (3#4 !=5#4);
output1{test++} = 1#1 == (3#4 <6#4);
output1{test++} = 1#1 == (3#4 <=6#4);
output1{test++} = 0#1 == (3#4 >6#4);
output1{test++} = 0#1 == (3#4 >=6#4);
output1{test++} = 0#1 == (3#4 ==6#4);
output1{test++} = 1#1 == (3#4 !=6#4);
output1{test++} = 1#1 == (3#4 <7#4);
output1{test++} = 1#1 == (3#4 <=7#4);
output1{test++} = 0#1 == (3#4 >7#4);
output1{test++} = 0#1 == (3#4 >=7#4);
output1{test++} = 0#1 == (3#4 ==7#4);
output1{test++} = 1#1 == (3#4 !=7#4);
output1{test++} = 0#1 == (4#4 <-8#4);
output1{test++} = 0#1 == (4#4 <=-8#4);
output1{test++} = 1#1 == (4#4 >-8#4);
output1{test++} = 1#1 == (4#4 >=-8#4);
output1{test++} = 0#1 == (4#4 ==-8#4);
output1{test++} = 1#1 == (4#4 !=-8#4);
output1{test++} = 0#1 == (4#4 <-7#4);
output1{test++} = 0#1 == (4#4 <=-7#4);
output1{test++} = 1#1 == (4#4 >-7#4);
output1{test++} = 1#1 == (4#4 >=-7#4);
output1{test++} = 0#1 == (4#4 ==-7#4);
output1{test++} = 1#1 == (4#4 !=-7#4);
output1{test++} = 0#1 == (4#4 <-6#4);
output1{test++} = 0#1 == (4#4 <=-6#4);
output1{test++} = 1#1 == (4#4 >-6#4);
output1{test++} = 1#1 == (4#4 >=-6#4);
output1{test++} = 0#1 == (4#4 ==-6#4);
output1{test++} = 1#1 == (4#4 !=-6#4);
output1{test++} = 0#1 == (4#4 <-5#4);
output1{test++} = 0#1 == (4#4 <=-5#4);
output1{test++} = 1#1 == (4#4 >-5#4);
output1{test++} = 1#1 == (4#4 >=-5#4);
output1{test++} = 0#1 == (4#4 ==-5#4);
output1{test++} = 1#1 == (4#4 !=-5#4);
output1{test++} = 0#1 == (4#4 <-4#4);
output1{test++} = 0#1 == (4#4 <=-4#4);
output1{test++} = 1#1 == (4#4 >-4#4);
output1{test++} = 1#1 == (4#4 >=-4#4);
output1{test++} = 0#1 == (4#4 ==-4#4);
output1{test++} = 1#1 == (4#4 !=-4#4);
output1{test++} = 0#1 == (4#4 <-3#4);
output1{test++} = 0#1 == (4#4 <=-3#4);
output1{test++} = 1#1 == (4#4 >-3#4);
output1{test++} = 1#1 == (4#4 >=-3#4);
output1{test++} = 0#1 == (4#4 ==-3#4);
output1{test++} = 1#1 == (4#4 !=-3#4);
output1{test++} = 0#1 == (4#4 <-2#4);
output1{test++} = 0#1 == (4#4 <=-2#4);
output1{test++} = 1#1 == (4#4 >-2#4);
output1{test++} = 1#1 == (4#4 >=-2#4);
output1{test++} = 0#1 == (4#4 ==-2#4);
output1{test++} = 1#1 == (4#4 !=-2#4);
output1{test++} = 0#1 == (4#4 <-1#4);
output1{test++} = 0#1 == (4#4 <=-1#4);
output1{test++} = 1#1 == (4#4 >-1#4);
output1{test++} = 1#1 == (4#4 >=-1#4);
output1{test++} = 0#1 == (4#4 ==-1#4);
output1{test++} = 1#1 == (4#4 !=-1#4);
output1{test++} = 0#1 == (4#4 <0#4);
output1{test++} = 0#1 == (4#4 <=0#4);
output1{test++} = 1#1 == (4#4 >0#4);
output1{test++} = 1#1 == (4#4 >=0#4);
output1{test++} = 0#1 == (4#4 ==0#4);
output1{test++} = 1#1 == (4#4 !=0#4);
output1{test++} = 0#1 == (4#4 <1#4);
output1{test++} = 0#1 == (4#4 <=1#4);
output1{test++} = 1#1 == (4#4 >1#4);
output1{test++} = 1#1 == (4#4 >=1#4);
output1{test++} = 0#1 == (4#4 ==1#4);
output1{test++} = 1#1 == (4#4 !=1#4);
output1{test++} = 0#1 == (4#4 <2#4);
output1{test++} = 0#1 == (4#4 <=2#4);
output1{test++} = 1#1 == (4#4 >2#4);
output1{test++} = 1#1 == (4#4 >=2#4);
output1{test++} = 0#1 == (4#4 ==2#4);
output1{test++} = 1#1 == (4#4 !=2#4);
output1{test++} = 0#1 == (4#4 <3#4);
output1{test++} = 0#1 == (4#4 <=3#4);
output1{test++} = 1#1 == (4#4 >3#4);
output1{test++} = 1#1 == (4#4 >=3#4);
output1{test++} = 0#1 == (4#4 ==3#4);
output1{test++} = 1#1 == (4#4 !=3#4);
output1{test++} = 0#1 == (4#4 <4#4);
output1{test++} = 1#1 == (4#4 <=4#4);
output1{test++} = 0#1 == (4#4 >4#4);
output1{test++} = 1#1 == (4#4 >=4#4);
output1{test++} = 1#1 == (4#4 ==4#4);
output1{test++} = 0#1 == (4#4 !=4#4);
output1{test++} = 1#1 == (4#4 <5#4);
output1{test++} = 1#1 == (4#4 <=5#4);
output1{test++} = 0#1 == (4#4 >5#4);
output1{test++} = 0#1 == (4#4 >=5#4);
output1{test++} = 0#1 == (4#4 ==5#4);
output1{test++} = 1#1 == (4#4 !=5#4);
output1{test++} = 1#1 == (4#4 <6#4);
output1{test++} = 1#1 == (4#4 <=6#4);
output1{test++} = 0#1 == (4#4 >6#4);
output1{test++} = 0#1 == (4#4 >=6#4);
output1{test++} = 0#1 == (4#4 ==6#4);
output1{test++} = 1#1 == (4#4 !=6#4);
output1{test++} = 1#1 == (4#4 <7#4);
output1{test++} = 1#1 == (4#4 <=7#4);
output1{test++} = 0#1 == (4#4 >7#4);
output1{test++} = 0#1 == (4#4 >=7#4);
output1{test++} = 0#1 == (4#4 ==7#4);
output1{test++} = 1#1 == (4#4 !=7#4);
output1{test++} = 0#1 == (5#4 <-8#4);
output1{test++} = 0#1 == (5#4 <=-8#4);
output1{test++} = 1#1 == (5#4 >-8#4);
output1{test++} = 1#1 == (5#4 >=-8#4);
output1{test++} = 0#1 == (5#4 ==-8#4);
output1{test++} = 1#1 == (5#4 !=-8#4);
output1{test++} = 0#1 == (5#4 <-7#4);
output1{test++} = 0#1 == (5#4 <=-7#4);
output1{test++} = 1#1 == (5#4 >-7#4);
output1{test++} = 1#1 == (5#4 >=-7#4);
output1{test++} = 0#1 == (5#4 ==-7#4);
output1{test++} = 1#1 == (5#4 !=-7#4);
output1{test++} = 0#1 == (5#4 <-6#4);
output1{test++} = 0#1 == (5#4 <=-6#4);
output1{test++} = 1#1 == (5#4 >-6#4);
output1{test++} = 1#1 == (5#4 >=-6#4);
output1{test++} = 0#1 == (5#4 ==-6#4);
output1{test++} = 1#1 == (5#4 !=-6#4);
output1{test++} = 0#1 == (5#4 <-5#4);
output1{test++} = 0#1 == (5#4 <=-5#4);
output1{test++} = 1#1 == (5#4 >-5#4);
output1{test++} = 1#1 == (5#4 >=-5#4);
output1{test++} = 0#1 == (5#4 ==-5#4);
output1{test++} = 1#1 == (5#4 !=-5#4);
output1{test++} = 0#1 == (5#4 <-4#4);
output1{test++} = 0#1 == (5#4 <=-4#4);
output1{test++} = 1#1 == (5#4 >-4#4);
output1{test++} = 1#1 == (5#4 >=-4#4);
output1{test++} = 0#1 == (5#4 ==-4#4);
output1{test++} = 1#1 == (5#4 !=-4#4);
output1{test++} = 0#1 == (5#4 <-3#4);
output1{test++} = 0#1 == (5#4 <=-3#4);
output1{test++} = 1#1 == (5#4 >-3#4);
output1{test++} = 1#1 == (5#4 >=-3#4);
output1{test++} = 0#1 == (5#4 ==-3#4);
output1{test++} = 1#1 == (5#4 !=-3#4);
output1{test++} = 0#1 == (5#4 <-2#4);
output1{test++} = 0#1 == (5#4 <=-2#4);
output1{test++} = 1#1 == (5#4 >-2#4);
output1{test++} = 1#1 == (5#4 >=-2#4);
output1{test++} = 0#1 == (5#4 ==-2#4);
output1{test++} = 1#1 == (5#4 !=-2#4);
output1{test++} = 0#1 == (5#4 <-1#4);
output1{test++} = 0#1 == (5#4 <=-1#4);
output1{test++} = 1#1 == (5#4 >-1#4);
output1{test++} = 1#1 == (5#4 >=-1#4);
output1{test++} = 0#1 == (5#4 ==-1#4);
output1{test++} = 1#1 == (5#4 !=-1#4);
output1{test++} = 0#1 == (5#4 <0#4);
output1{test++} = 0#1 == (5#4 <=0#4);
output1{test++} = 1#1 == (5#4 >0#4);
output1{test++} = 1#1 == (5#4 >=0#4);
output1{test++} = 0#1 == (5#4 ==0#4);
output1{test++} = 1#1 == (5#4 !=0#4);
output1{test++} = 0#1 == (5#4 <1#4);
output1{test++} = 0#1 == (5#4 <=1#4);
output1{test++} = 1#1 == (5#4 >1#4);
output1{test++} = 1#1 == (5#4 >=1#4);
output1{test++} = 0#1 == (5#4 ==1#4);
output1{test++} = 1#1 == (5#4 !=1#4);
output1{test++} = 0#1 == (5#4 <2#4);
output1{test++} = 0#1 == (5#4 <=2#4);
output1{test++} = 1#1 == (5#4 >2#4);
output1{test++} = 1#1 == (5#4 >=2#4);
output1{test++} = 0#1 == (5#4 ==2#4);
output1{test++} = 1#1 == (5#4 !=2#4);
output1{test++} = 0#1 == (5#4 <3#4);
output1{test++} = 0#1 == (5#4 <=3#4);
output1{test++} = 1#1 == (5#4 >3#4);
output1{test++} = 1#1 == (5#4 >=3#4);
output1{test++} = 0#1 == (5#4 ==3#4);
output1{test++} = 1#1 == (5#4 !=3#4);
output1{test++} = 0#1 == (5#4 <4#4);
output1{test++} = 0#1 == (5#4 <=4#4);
output1{test++} = 1#1 == (5#4 >4#4);
output1{test++} = 1#1 == (5#4 >=4#4);
output1{test++} = 0#1 == (5#4 ==4#4);
output1{test++} = 1#1 == (5#4 !=4#4);
output1{test++} = 0#1 == (5#4 <5#4);
output1{test++} = 1#1 == (5#4 <=5#4);
output1{test++} = 0#1 == (5#4 >5#4);
output1{test++} = 1#1 == (5#4 >=5#4);
output1{test++} = 1#1 == (5#4 ==5#4);
output1{test++} = 0#1 == (5#4 !=5#4);
output1{test++} = 1#1 == (5#4 <6#4);
output1{test++} = 1#1 == (5#4 <=6#4);
output1{test++} = 0#1 == (5#4 >6#4);
output1{test++} = 0#1 == (5#4 >=6#4);
output1{test++} = 0#1 == (5#4 ==6#4);
output1{test++} = 1#1 == (5#4 !=6#4);
output1{test++} = 1#1 == (5#4 <7#4);
output1{test++} = 1#1 == (5#4 <=7#4);
output1{test++} = 0#1 == (5#4 >7#4);
output1{test++} = 0#1 == (5#4 >=7#4);
output1{test++} = 0#1 == (5#4 ==7#4);
output1{test++} = 1#1 == (5#4 !=7#4);
output1{test++} = 0#1 == (6#4 <-8#4);
output1{test++} = 0#1 == (6#4 <=-8#4);
output1{test++} = 1#1 == (6#4 >-8#4);
output1{test++} = 1#1 == (6#4 >=-8#4);
output1{test++} = 0#1 == (6#4 ==-8#4);
output1{test++} = 1#1 == (6#4 !=-8#4);
output1{test++} = 0#1 == (6#4 <-7#4);
output1{test++} = 0#1 == (6#4 <=-7#4);
output1{test++} = 1#1 == (6#4 >-7#4);
output1{test++} = 1#1 == (6#4 >=-7#4);
output1{test++} = 0#1 == (6#4 ==-7#4);
output1{test++} = 1#1 == (6#4 !=-7#4);
output1{test++} = 0#1 == (6#4 <-6#4);
output1{test++} = 0#1 == (6#4 <=-6#4);
output1{test++} = 1#1 == (6#4 >-6#4);
output1{test++} = 1#1 == (6#4 >=-6#4);
output1{test++} = 0#1 == (6#4 ==-6#4);
output1{test++} = 1#1 == (6#4 !=-6#4);
output1{test++} = 0#1 == (6#4 <-5#4);
output1{test++} = 0#1 == (6#4 <=-5#4);
output1{test++} = 1#1 == (6#4 >-5#4);
output1{test++} = 1#1 == (6#4 >=-5#4);
output1{test++} = 0#1 == (6#4 ==-5#4);
output1{test++} = 1#1 == (6#4 !=-5#4);
output1{test++} = 0#1 == (6#4 <-4#4);
output1{test++} = 0#1 == (6#4 <=-4#4);
output1{test++} = 1#1 == (6#4 >-4#4);
output1{test++} = 1#1 == (6#4 >=-4#4);
output1{test++} = 0#1 == (6#4 ==-4#4);
output1{test++} = 1#1 == (6#4 !=-4#4);
output1{test++} = 0#1 == (6#4 <-3#4);
output1{test++} = 0#1 == (6#4 <=-3#4);
output1{test++} = 1#1 == (6#4 >-3#4);
output1{test++} = 1#1 == (6#4 >=-3#4);
output1{test++} = 0#1 == (6#4 ==-3#4);
output1{test++} = 1#1 == (6#4 !=-3#4);
output1{test++} = 0#1 == (6#4 <-2#4);
output1{test++} = 0#1 == (6#4 <=-2#4);
output1{test++} = 1#1 == (6#4 >-2#4);
output1{test++} = 1#1 == (6#4 >=-2#4);
output1{test++} = 0#1 == (6#4 ==-2#4);
output1{test++} = 1#1 == (6#4 !=-2#4);
output1{test++} = 0#1 == (6#4 <-1#4);
output1{test++} = 0#1 == (6#4 <=-1#4);
output1{test++} = 1#1 == (6#4 >-1#4);
output1{test++} = 1#1 == (6#4 >=-1#4);
output1{test++} = 0#1 == (6#4 ==-1#4);
output1{test++} = 1#1 == (6#4 !=-1#4);
output1{test++} = 0#1 == (6#4 <0#4);
output1{test++} = 0#1 == (6#4 <=0#4);
output1{test++} = 1#1 == (6#4 >0#4);
output1{test++} = 1#1 == (6#4 >=0#4);
output1{test++} = 0#1 == (6#4 ==0#4);
output1{test++} = 1#1 == (6#4 !=0#4);
output1{test++} = 0#1 == (6#4 <1#4);
output1{test++} = 0#1 == (6#4 <=1#4);
output1{test++} = 1#1 == (6#4 >1#4);
output1{test++} = 1#1 == (6#4 >=1#4);
output1{test++} = 0#1 == (6#4 ==1#4);
output1{test++} = 1#1 == (6#4 !=1#4);
output1{test++} = 0#1 == (6#4 <2#4);
output1{test++} = 0#1 == (6#4 <=2#4);
output1{test++} = 1#1 == (6#4 >2#4);
output1{test++} = 1#1 == (6#4 >=2#4);
output1{test++} = 0#1 == (6#4 ==2#4);
output1{test++} = 1#1 == (6#4 !=2#4);
output1{test++} = 0#1 == (6#4 <3#4);
output1{test++} = 0#1 == (6#4 <=3#4);
output1{test++} = 1#1 == (6#4 >3#4);
output1{test++} = 1#1 == (6#4 >=3#4);
output1{test++} = 0#1 == (6#4 ==3#4);
output1{test++} = 1#1 == (6#4 !=3#4);
output1{test++} = 0#1 == (6#4 <4#4);
output1{test++} = 0#1 == (6#4 <=4#4);
output1{test++} = 1#1 == (6#4 >4#4);
output1{test++} = 1#1 == (6#4 >=4#4);
output1{test++} = 0#1 == (6#4 ==4#4);
output1{test++} = 1#1 == (6#4 !=4#4);
output1{test++} = 0#1 == (6#4 <5#4);
output1{test++} = 0#1 == (6#4 <=5#4);
output1{test++} = 1#1 == (6#4 >5#4);
output1{test++} = 1#1 == (6#4 >=5#4);
output1{test++} = 0#1 == (6#4 ==5#4);
output1{test++} = 1#1 == (6#4 !=5#4);
output1{test++} = 0#1 == (6#4 <6#4);
output1{test++} = 1#1 == (6#4 <=6#4);
output1{test++} = 0#1 == (6#4 >6#4);
output1{test++} = 1#1 == (6#4 >=6#4);
output1{test++} = 1#1 == (6#4 ==6#4);
output1{test++} = 0#1 == (6#4 !=6#4);
output1{test++} = 1#1 == (6#4 <7#4);
output1{test++} = 1#1 == (6#4 <=7#4);
output1{test++} = 0#1 == (6#4 >7#4);
output1{test++} = 0#1 == (6#4 >=7#4);
output1{test++} = 0#1 == (6#4 ==7#4);
output1{test++} = 1#1 == (6#4 !=7#4);
output1{test++} = 0#1 == (7#4 <-8#4);
output1{test++} = 0#1 == (7#4 <=-8#4);
output1{test++} = 1#1 == (7#4 >-8#4);
output1{test++} = 1#1 == (7#4 >=-8#4);
output1{test++} = 0#1 == (7#4 ==-8#4);
output1{test++} = 1#1 == (7#4 !=-8#4);
output1{test++} = 0#1 == (7#4 <-7#4);
output1{test++} = 0#1 == (7#4 <=-7#4);
output1{test++} = 1#1 == (7#4 >-7#4);
output1{test++} = 1#1 == (7#4 >=-7#4);
output1{test++} = 0#1 == (7#4 ==-7#4);
output1{test++} = 1#1 == (7#4 !=-7#4);
output1{test++} = 0#1 == (7#4 <-6#4);
output1{test++} = 0#1 == (7#4 <=-6#4);
output1{test++} = 1#1 == (7#4 >-6#4);
output1{test++} = 1#1 == (7#4 >=-6#4);
output1{test++} = 0#1 == (7#4 ==-6#4);
output1{test++} = 1#1 == (7#4 !=-6#4);
output1{test++} = 0#1 == (7#4 <-5#4);
output1{test++} = 0#1 == (7#4 <=-5#4);
output1{test++} = 1#1 == (7#4 >-5#4);
output1{test++} = 1#1 == (7#4 >=-5#4);
output1{test++} = 0#1 == (7#4 ==-5#4);
output1{test++} = 1#1 == (7#4 !=-5#4);
output1{test++} = 0#1 == (7#4 <-4#4);
output1{test++} = 0#1 == (7#4 <=-4#4);
output1{test++} = 1#1 == (7#4 >-4#4);
output1{test++} = 1#1 == (7#4 >=-4#4);
output1{test++} = 0#1 == (7#4 ==-4#4);
output1{test++} = 1#1 == (7#4 !=-4#4);
output1{test++} = 0#1 == (7#4 <-3#4);
output1{test++} = 0#1 == (7#4 <=-3#4);
output1{test++} = 1#1 == (7#4 >-3#4);
output1{test++} = 1#1 == (7#4 >=-3#4);
output1{test++} = 0#1 == (7#4 ==-3#4);
output1{test++} = 1#1 == (7#4 !=-3#4);
output1{test++} = 0#1 == (7#4 <-2#4);
output1{test++} = 0#1 == (7#4 <=-2#4);
output1{test++} = 1#1 == (7#4 >-2#4);
output1{test++} = 1#1 == (7#4 >=-2#4);
output1{test++} = 0#1 == (7#4 ==-2#4);
output1{test++} = 1#1 == (7#4 !=-2#4);
output1{test++} = 0#1 == (7#4 <-1#4);
output1{test++} = 0#1 == (7#4 <=-1#4);
output1{test++} = 1#1 == (7#4 >-1#4);
output1{test++} = 1#1 == (7#4 >=-1#4);
output1{test++} = 0#1 == (7#4 ==-1#4);
output1{test++} = 1#1 == (7#4 !=-1#4);
output1{test++} = 0#1 == (7#4 <0#4);
output1{test++} = 0#1 == (7#4 <=0#4);
output1{test++} = 1#1 == (7#4 >0#4);
output1{test++} = 1#1 == (7#4 >=0#4);
output1{test++} = 0#1 == (7#4 ==0#4);
output1{test++} = 1#1 == (7#4 !=0#4);
output1{test++} = 0#1 == (7#4 <1#4);
output1{test++} = 0#1 == (7#4 <=1#4);
output1{test++} = 1#1 == (7#4 >1#4);
output1{test++} = 1#1 == (7#4 >=1#4);
output1{test++} = 0#1 == (7#4 ==1#4);
output1{test++} = 1#1 == (7#4 !=1#4);
output1{test++} = 0#1 == (7#4 <2#4);
output1{test++} = 0#1 == (7#4 <=2#4);
output1{test++} = 1#1 == (7#4 >2#4);
output1{test++} = 1#1 == (7#4 >=2#4);
output1{test++} = 0#1 == (7#4 ==2#4);
output1{test++} = 1#1 == (7#4 !=2#4);
output1{test++} = 0#1 == (7#4 <3#4);
output1{test++} = 0#1 == (7#4 <=3#4);
output1{test++} = 1#1 == (7#4 >3#4);
output1{test++} = 1#1 == (7#4 >=3#4);
output1{test++} = 0#1 == (7#4 ==3#4);
output1{test++} = 1#1 == (7#4 !=3#4);
output1{test++} = 0#1 == (7#4 <4#4);
output1{test++} = 0#1 == (7#4 <=4#4);
output1{test++} = 1#1 == (7#4 >4#4);
output1{test++} = 1#1 == (7#4 >=4#4);
output1{test++} = 0#1 == (7#4 ==4#4);
output1{test++} = 1#1 == (7#4 !=4#4);
output1{test++} = 0#1 == (7#4 <5#4);
output1{test++} = 0#1 == (7#4 <=5#4);
output1{test++} = 1#1 == (7#4 >5#4);
output1{test++} = 1#1 == (7#4 >=5#4);
output1{test++} = 0#1 == (7#4 ==5#4);
output1{test++} = 1#1 == (7#4 !=5#4);
output1{test++} = 0#1 == (7#4 <6#4);
output1{test++} = 0#1 == (7#4 <=6#4);
output1{test++} = 1#1 == (7#4 >6#4);
output1{test++} = 1#1 == (7#4 >=6#4);
output1{test++} = 0#1 == (7#4 ==6#4);
output1{test++} = 1#1 == (7#4 !=6#4);
output1{test++} = 0#1 == (7#4 <7#4);
output1{test++} = 1#1 == (7#4 <=7#4);
output1{test++} = 0#1 == (7#4 >7#4);
output1{test++} = 1#1 == (7#4 >=7#4);
output1{test++} = 1#1 == (7#4 ==7#4);
output1{test++} = 0#1 == (7#4 !=7#4);



output1{test++} = 0##1 == (0##4 <0##4);
output1{test++} = 1##1 == (0##4 <=0##4);
output1{test++} = 0##1 == (0##4 >0##4);
output1{test++} = 1##1 == (0##4 >=0##4);
output1{test++} = 1##1 == (0##4 ==0##4);
output1{test++} = 0##1 == (0##4 !=0##4);
output1{test++} = 1##1 == (0##4 <1##4);
output1{test++} = 1##1 == (0##4 <=1##4);
output1{test++} = 0##1 == (0##4 >1##4);
output1{test++} = 0##1 == (0##4 >=1##4);
output1{test++} = 0##1 == (0##4 ==1##4);
output1{test++} = 1##1 == (0##4 !=1##4);
output1{test++} = 0##4 == (0##4 /1##4);
output1{test++} = 0##4 == (0##4 %1##4);
output1{test++} = 1##1 == (0##4 <2##4);
output1{test++} = 1##1 == (0##4 <=2##4);
output1{test++} = 0##1 == (0##4 >2##4);
output1{test++} = 0##1 == (0##4 >=2##4);
output1{test++} = 0##1 == (0##4 ==2##4);
output1{test++} = 1##1 == (0##4 !=2##4);
output1{test++} = 0##4 == (0##4 /2##4);
output1{test++} = 0##4 == (0##4 %2##4);
output1{test++} = 1##1 == (0##4 <3##4);
output1{test++} = 1##1 == (0##4 <=3##4);
output1{test++} = 0##1 == (0##4 >3##4);
output1{test++} = 0##1 == (0##4 >=3##4);
output1{test++} = 0##1 == (0##4 ==3##4);
output1{test++} = 1##1 == (0##4 !=3##4);
output1{test++} = 0##4 == (0##4 /3##4);
output1{test++} = 0##4 == (0##4 %3##4);
output1{test++} = 1##1 == (0##4 <4##4);
output1{test++} = 1##1 == (0##4 <=4##4);
output1{test++} = 0##1 == (0##4 >4##4);
output1{test++} = 0##1 == (0##4 >=4##4);
output1{test++} = 0##1 == (0##4 ==4##4);
output1{test++} = 1##1 == (0##4 !=4##4);
output1{test++} = 0##4 == (0##4 /4##4);
output1{test++} = 0##4 == (0##4 %4##4);
output1{test++} = 1##1 == (0##4 <5##4);
output1{test++} = 1##1 == (0##4 <=5##4);
output1{test++} = 0##1 == (0##4 >5##4);
output1{test++} = 0##1 == (0##4 >=5##4);
output1{test++} = 0##1 == (0##4 ==5##4);
output1{test++} = 1##1 == (0##4 !=5##4);
output1{test++} = 0##4 == (0##4 /5##4);
output1{test++} = 0##4 == (0##4 %5##4);
output1{test++} = 1##1 == (0##4 <6##4);
output1{test++} = 1##1 == (0##4 <=6##4);
output1{test++} = 0##1 == (0##4 >6##4);
output1{test++} = 0##1 == (0##4 >=6##4);
output1{test++} = 0##1 == (0##4 ==6##4);
output1{test++} = 1##1 == (0##4 !=6##4);
output1{test++} = 0##4 == (0##4 /6##4);
output1{test++} = 0##4 == (0##4 %6##4);
output1{test++} = 1##1 == (0##4 <7##4);
output1{test++} = 1##1 == (0##4 <=7##4);
output1{test++} = 0##1 == (0##4 >7##4);
output1{test++} = 0##1 == (0##4 >=7##4);
output1{test++} = 0##1 == (0##4 ==7##4);
output1{test++} = 1##1 == (0##4 !=7##4);
output1{test++} = 0##4 == (0##4 /7##4);
output1{test++} = 0##4 == (0##4 %7##4);
output1{test++} = 1##1 == (0##4 <8##4);
output1{test++} = 1##1 == (0##4 <=8##4);
output1{test++} = 0##1 == (0##4 >8##4);
output1{test++} = 0##1 == (0##4 >=8##4);
output1{test++} = 0##1 == (0##4 ==8##4);
output1{test++} = 1##1 == (0##4 !=8##4);
output1{test++} = 0##4 == (0##4 /8##4);
output1{test++} = 0##4 == (0##4 %8##4);
output1{test++} = 1##1 == (0##4 <9##4);
output1{test++} = 1##1 == (0##4 <=9##4);
output1{test++} = 0##1 == (0##4 >9##4);
output1{test++} = 0##1 == (0##4 >=9##4);
output1{test++} = 0##1 == (0##4 ==9##4);
output1{test++} = 1##1 == (0##4 !=9##4);
output1{test++} = 0##4 == (0##4 /9##4);
output1{test++} = 0##4 == (0##4 %9##4);
output1{test++} = 1##1 == (0##4 <10##4);
output1{test++} = 1##1 == (0##4 <=10##4);
output1{test++} = 0##1 == (0##4 >10##4);
output1{test++} = 0##1 == (0##4 >=10##4);
output1{test++} = 0##1 == (0##4 ==10##4);
output1{test++} = 1##1 == (0##4 !=10##4);
output1{test++} = 0##4 == (0##4 /10##4);
output1{test++} = 0##4 == (0##4 %10##4);
output1{test++} = 1##1 == (0##4 <11##4);
output1{test++} = 1##1 == (0##4 <=11##4);
output1{test++} = 0##1 == (0##4 >11##4);
output1{test++} = 0##1 == (0##4 >=11##4);
output1{test++} = 0##1 == (0##4 ==11##4);
output1{test++} = 1##1 == (0##4 !=11##4);
output1{test++} = 0##4 == (0##4 /11##4);
output1{test++} = 0##4 == (0##4 %11##4);
output1{test++} = 1##1 == (0##4 <12##4);
output1{test++} = 1##1 == (0##4 <=12##4);
output1{test++} = 0##1 == (0##4 >12##4);
output1{test++} = 0##1 == (0##4 >=12##4);
output1{test++} = 0##1 == (0##4 ==12##4);
output1{test++} = 1##1 == (0##4 !=12##4);
output1{test++} = 0##4 == (0##4 /12##4);
output1{test++} = 0##4 == (0##4 %12##4);
output1{test++} = 1##1 == (0##4 <13##4);
output1{test++} = 1##1 == (0##4 <=13##4);
output1{test++} = 0##1 == (0##4 >13##4);
output1{test++} = 0##1 == (0##4 >=13##4);
output1{test++} = 0##1 == (0##4 ==13##4);
output1{test++} = 1##1 == (0##4 !=13##4);
output1{test++} = 0##4 == (0##4 /13##4);
output1{test++} = 0##4 == (0##4 %13##4);
output1{test++} = 1##1 == (0##4 <14##4);
output1{test++} = 1##1 == (0##4 <=14##4);
output1{test++} = 0##1 == (0##4 >14##4);
output1{test++} = 0##1 == (0##4 >=14##4);
output1{test++} = 0##1 == (0##4 ==14##4);
output1{test++} = 1##1 == (0##4 !=14##4);
output1{test++} = 0##4 == (0##4 /14##4);
output1{test++} = 0##4 == (0##4 %14##4);
output1{test++} = 1##1 == (0##4 <15##4);
output1{test++} = 1##1 == (0##4 <=15##4);
output1{test++} = 0##1 == (0##4 >15##4);
output1{test++} = 0##1 == (0##4 >=15##4);
output1{test++} = 0##1 == (0##4 ==15##4);
output1{test++} = 1##1 == (0##4 !=15##4);
output1{test++} = 0##4 == (0##4 /15##4);
output1{test++} = 0##4 == (0##4 %15##4);
output1{test++} = 0##1 == (1##4 <0##4);
output1{test++} = 0##1 == (1##4 <=0##4);
output1{test++} = 1##1 == (1##4 >0##4);
output1{test++} = 1##1 == (1##4 >=0##4);
output1{test++} = 0##1 == (1##4 ==0##4);
output1{test++} = 1##1 == (1##4 !=0##4);
output1{test++} = 0##1 == (1##4 <1##4);
output1{test++} = 1##1 == (1##4 <=1##4);
output1{test++} = 0##1 == (1##4 >1##4);
output1{test++} = 1##1 == (1##4 >=1##4);
output1{test++} = 1##1 == (1##4 ==1##4);
output1{test++} = 0##1 == (1##4 !=1##4);
output1{test++} = 1##4 == (1##4 /1##4);
output1{test++} = 0##4 == (1##4 %1##4);
output1{test++} = 1##1 == (1##4 <2##4);
output1{test++} = 1##1 == (1##4 <=2##4);
output1{test++} = 0##1 == (1##4 >2##4);
output1{test++} = 0##1 == (1##4 >=2##4);
output1{test++} = 0##1 == (1##4 ==2##4);
output1{test++} = 1##1 == (1##4 !=2##4);
output1{test++} = 0##4 == (1##4 /2##4);
output1{test++} = 1##4 == (1##4 %2##4);
output1{test++} = 1##1 == (1##4 <3##4);
output1{test++} = 1##1 == (1##4 <=3##4);
output1{test++} = 0##1 == (1##4 >3##4);
output1{test++} = 0##1 == (1##4 >=3##4);
output1{test++} = 0##1 == (1##4 ==3##4);
output1{test++} = 1##1 == (1##4 !=3##4);
output1{test++} = 0##4 == (1##4 /3##4);
output1{test++} = 1##4 == (1##4 %3##4);
output1{test++} = 1##1 == (1##4 <4##4);
output1{test++} = 1##1 == (1##4 <=4##4);
output1{test++} = 0##1 == (1##4 >4##4);
output1{test++} = 0##1 == (1##4 >=4##4);
output1{test++} = 0##1 == (1##4 ==4##4);
output1{test++} = 1##1 == (1##4 !=4##4);
output1{test++} = 0##4 == (1##4 /4##4);
output1{test++} = 1##4 == (1##4 %4##4);
output1{test++} = 1##1 == (1##4 <5##4);
output1{test++} = 1##1 == (1##4 <=5##4);
output1{test++} = 0##1 == (1##4 >5##4);
output1{test++} = 0##1 == (1##4 >=5##4);
output1{test++} = 0##1 == (1##4 ==5##4);
output1{test++} = 1##1 == (1##4 !=5##4);
output1{test++} = 0##4 == (1##4 /5##4);
output1{test++} = 1##4 == (1##4 %5##4);
output1{test++} = 1##1 == (1##4 <6##4);
output1{test++} = 1##1 == (1##4 <=6##4);
output1{test++} = 0##1 == (1##4 >6##4);
output1{test++} = 0##1 == (1##4 >=6##4);
output1{test++} = 0##1 == (1##4 ==6##4);
output1{test++} = 1##1 == (1##4 !=6##4);
output1{test++} = 0##4 == (1##4 /6##4);
output1{test++} = 1##4 == (1##4 %6##4);
output1{test++} = 1##1 == (1##4 <7##4);
output1{test++} = 1##1 == (1##4 <=7##4);
output1{test++} = 0##1 == (1##4 >7##4);
output1{test++} = 0##1 == (1##4 >=7##4);
output1{test++} = 0##1 == (1##4 ==7##4);
output1{test++} = 1##1 == (1##4 !=7##4);
output1{test++} = 0##4 == (1##4 /7##4);
output1{test++} = 1##4 == (1##4 %7##4);
output1{test++} = 1##1 == (1##4 <8##4);
output1{test++} = 1##1 == (1##4 <=8##4);
output1{test++} = 0##1 == (1##4 >8##4);
output1{test++} = 0##1 == (1##4 >=8##4);
output1{test++} = 0##1 == (1##4 ==8##4);
output1{test++} = 1##1 == (1##4 !=8##4);
output1{test++} = 0##4 == (1##4 /8##4);
output1{test++} = 1##4 == (1##4 %8##4);
output1{test++} = 1##1 == (1##4 <9##4);
output1{test++} = 1##1 == (1##4 <=9##4);
output1{test++} = 0##1 == (1##4 >9##4);
output1{test++} = 0##1 == (1##4 >=9##4);
output1{test++} = 0##1 == (1##4 ==9##4);
output1{test++} = 1##1 == (1##4 !=9##4);
output1{test++} = 0##4 == (1##4 /9##4);
output1{test++} = 1##4 == (1##4 %9##4);
output1{test++} = 1##1 == (1##4 <10##4);
output1{test++} = 1##1 == (1##4 <=10##4);
output1{test++} = 0##1 == (1##4 >10##4);
output1{test++} = 0##1 == (1##4 >=10##4);
output1{test++} = 0##1 == (1##4 ==10##4);
output1{test++} = 1##1 == (1##4 !=10##4);
output1{test++} = 0##4 == (1##4 /10##4);
output1{test++} = 1##4 == (1##4 %10##4);
output1{test++} = 1##1 == (1##4 <11##4);
output1{test++} = 1##1 == (1##4 <=11##4);
output1{test++} = 0##1 == (1##4 >11##4);
output1{test++} = 0##1 == (1##4 >=11##4);
output1{test++} = 0##1 == (1##4 ==11##4);
output1{test++} = 1##1 == (1##4 !=11##4);
output1{test++} = 0##4 == (1##4 /11##4);
output1{test++} = 1##4 == (1##4 %11##4);
output1{test++} = 1##1 == (1##4 <12##4);
output1{test++} = 1##1 == (1##4 <=12##4);
output1{test++} = 0##1 == (1##4 >12##4);
output1{test++} = 0##1 == (1##4 >=12##4);
output1{test++} = 0##1 == (1##4 ==12##4);
output1{test++} = 1##1 == (1##4 !=12##4);
output1{test++} = 0##4 == (1##4 /12##4);
output1{test++} = 1##4 == (1##4 %12##4);
output1{test++} = 1##1 == (1##4 <13##4);
output1{test++} = 1##1 == (1##4 <=13##4);
output1{test++} = 0##1 == (1##4 >13##4);
output1{test++} = 0##1 == (1##4 >=13##4);
output1{test++} = 0##1 == (1##4 ==13##4);
output1{test++} = 1##1 == (1##4 !=13##4);
output1{test++} = 0##4 == (1##4 /13##4);
output1{test++} = 1##4 == (1##4 %13##4);
output1{test++} = 1##1 == (1##4 <14##4);
output1{test++} = 1##1 == (1##4 <=14##4);
output1{test++} = 0##1 == (1##4 >14##4);
output1{test++} = 0##1 == (1##4 >=14##4);
output1{test++} = 0##1 == (1##4 ==14##4);
output1{test++} = 1##1 == (1##4 !=14##4);
output1{test++} = 0##4 == (1##4 /14##4);
output1{test++} = 1##4 == (1##4 %14##4);
output1{test++} = 1##1 == (1##4 <15##4);
output1{test++} = 1##1 == (1##4 <=15##4);
output1{test++} = 0##1 == (1##4 >15##4);
output1{test++} = 0##1 == (1##4 >=15##4);
output1{test++} = 0##1 == (1##4 ==15##4);
output1{test++} = 1##1 == (1##4 !=15##4);
output1{test++} = 0##4 == (1##4 /15##4);
output1{test++} = 1##4 == (1##4 %15##4);
output1{test++} = 0##1 == (2##4 <0##4);
output1{test++} = 0##1 == (2##4 <=0##4);
output1{test++} = 1##1 == (2##4 >0##4);
output1{test++} = 1##1 == (2##4 >=0##4);
output1{test++} = 0##1 == (2##4 ==0##4);
output1{test++} = 1##1 == (2##4 !=0##4);
output1{test++} = 0##1 == (2##4 <1##4);
output1{test++} = 0##1 == (2##4 <=1##4);
output1{test++} = 1##1 == (2##4 >1##4);
output1{test++} = 1##1 == (2##4 >=1##4);
output1{test++} = 0##1 == (2##4 ==1##4);
output1{test++} = 1##1 == (2##4 !=1##4);
output1{test++} = 2##4 == (2##4 /1##4);
output1{test++} = 0##4 == (2##4 %1##4);
output1{test++} = 0##1 == (2##4 <2##4);
output1{test++} = 1##1 == (2##4 <=2##4);
output1{test++} = 0##1 == (2##4 >2##4);
output1{test++} = 1##1 == (2##4 >=2##4);
output1{test++} = 1##1 == (2##4 ==2##4);
output1{test++} = 0##1 == (2##4 !=2##4);
output1{test++} = 1##4 == (2##4 /2##4);
output1{test++} = 0##4 == (2##4 %2##4);
output1{test++} = 1##1 == (2##4 <3##4);
output1{test++} = 1##1 == (2##4 <=3##4);
output1{test++} = 0##1 == (2##4 >3##4);
output1{test++} = 0##1 == (2##4 >=3##4);
output1{test++} = 0##1 == (2##4 ==3##4);
output1{test++} = 1##1 == (2##4 !=3##4);
output1{test++} = 0##4 == (2##4 /3##4);
output1{test++} = 2##4 == (2##4 %3##4);
output1{test++} = 1##1 == (2##4 <4##4);
output1{test++} = 1##1 == (2##4 <=4##4);
output1{test++} = 0##1 == (2##4 >4##4);
output1{test++} = 0##1 == (2##4 >=4##4);
output1{test++} = 0##1 == (2##4 ==4##4);
output1{test++} = 1##1 == (2##4 !=4##4);
output1{test++} = 0##4 == (2##4 /4##4);
output1{test++} = 2##4 == (2##4 %4##4);
output1{test++} = 1##1 == (2##4 <5##4);
output1{test++} = 1##1 == (2##4 <=5##4);
output1{test++} = 0##1 == (2##4 >5##4);
output1{test++} = 0##1 == (2##4 >=5##4);
output1{test++} = 0##1 == (2##4 ==5##4);
output1{test++} = 1##1 == (2##4 !=5##4);
output1{test++} = 0##4 == (2##4 /5##4);
output1{test++} = 2##4 == (2##4 %5##4);
output1{test++} = 1##1 == (2##4 <6##4);
output1{test++} = 1##1 == (2##4 <=6##4);
output1{test++} = 0##1 == (2##4 >6##4);
output1{test++} = 0##1 == (2##4 >=6##4);
output1{test++} = 0##1 == (2##4 ==6##4);
output1{test++} = 1##1 == (2##4 !=6##4);
output1{test++} = 0##4 == (2##4 /6##4);
output1{test++} = 2##4 == (2##4 %6##4);
output1{test++} = 1##1 == (2##4 <7##4);
output1{test++} = 1##1 == (2##4 <=7##4);
output1{test++} = 0##1 == (2##4 >7##4);
output1{test++} = 0##1 == (2##4 >=7##4);
output1{test++} = 0##1 == (2##4 ==7##4);
output1{test++} = 1##1 == (2##4 !=7##4);
output1{test++} = 0##4 == (2##4 /7##4);
output1{test++} = 2##4 == (2##4 %7##4);
output1{test++} = 1##1 == (2##4 <8##4);
output1{test++} = 1##1 == (2##4 <=8##4);
output1{test++} = 0##1 == (2##4 >8##4);
output1{test++} = 0##1 == (2##4 >=8##4);
output1{test++} = 0##1 == (2##4 ==8##4);
output1{test++} = 1##1 == (2##4 !=8##4);
output1{test++} = 0##4 == (2##4 /8##4);
output1{test++} = 2##4 == (2##4 %8##4);
output1{test++} = 1##1 == (2##4 <9##4);
output1{test++} = 1##1 == (2##4 <=9##4);
output1{test++} = 0##1 == (2##4 >9##4);
output1{test++} = 0##1 == (2##4 >=9##4);
output1{test++} = 0##1 == (2##4 ==9##4);
output1{test++} = 1##1 == (2##4 !=9##4);
output1{test++} = 0##4 == (2##4 /9##4);
output1{test++} = 2##4 == (2##4 %9##4);
output1{test++} = 1##1 == (2##4 <10##4);
output1{test++} = 1##1 == (2##4 <=10##4);
output1{test++} = 0##1 == (2##4 >10##4);
output1{test++} = 0##1 == (2##4 >=10##4);
output1{test++} = 0##1 == (2##4 ==10##4);
output1{test++} = 1##1 == (2##4 !=10##4);
output1{test++} = 0##4 == (2##4 /10##4);
output1{test++} = 2##4 == (2##4 %10##4);
output1{test++} = 1##1 == (2##4 <11##4);
output1{test++} = 1##1 == (2##4 <=11##4);
output1{test++} = 0##1 == (2##4 >11##4);
output1{test++} = 0##1 == (2##4 >=11##4);
output1{test++} = 0##1 == (2##4 ==11##4);
output1{test++} = 1##1 == (2##4 !=11##4);
output1{test++} = 0##4 == (2##4 /11##4);
output1{test++} = 2##4 == (2##4 %11##4);
output1{test++} = 1##1 == (2##4 <12##4);
output1{test++} = 1##1 == (2##4 <=12##4);
output1{test++} = 0##1 == (2##4 >12##4);
output1{test++} = 0##1 == (2##4 >=12##4);
output1{test++} = 0##1 == (2##4 ==12##4);
output1{test++} = 1##1 == (2##4 !=12##4);
output1{test++} = 0##4 == (2##4 /12##4);
output1{test++} = 2##4 == (2##4 %12##4);
output1{test++} = 1##1 == (2##4 <13##4);
output1{test++} = 1##1 == (2##4 <=13##4);
output1{test++} = 0##1 == (2##4 >13##4);
output1{test++} = 0##1 == (2##4 >=13##4);
output1{test++} = 0##1 == (2##4 ==13##4);
output1{test++} = 1##1 == (2##4 !=13##4);
output1{test++} = 0##4 == (2##4 /13##4);
output1{test++} = 2##4 == (2##4 %13##4);
output1{test++} = 1##1 == (2##4 <14##4);
output1{test++} = 1##1 == (2##4 <=14##4);
output1{test++} = 0##1 == (2##4 >14##4);
output1{test++} = 0##1 == (2##4 >=14##4);
output1{test++} = 0##1 == (2##4 ==14##4);
output1{test++} = 1##1 == (2##4 !=14##4);
output1{test++} = 0##4 == (2##4 /14##4);
output1{test++} = 2##4 == (2##4 %14##4);
output1{test++} = 1##1 == (2##4 <15##4);
output1{test++} = 1##1 == (2##4 <=15##4);
output1{test++} = 0##1 == (2##4 >15##4);
output1{test++} = 0##1 == (2##4 >=15##4);
output1{test++} = 0##1 == (2##4 ==15##4);
output1{test++} = 1##1 == (2##4 !=15##4);
output1{test++} = 0##4 == (2##4 /15##4);
output1{test++} = 2##4 == (2##4 %15##4);
output1{test++} = 0##1 == (3##4 <0##4);
output1{test++} = 0##1 == (3##4 <=0##4);
output1{test++} = 1##1 == (3##4 >0##4);
output1{test++} = 1##1 == (3##4 >=0##4);
output1{test++} = 0##1 == (3##4 ==0##4);
output1{test++} = 1##1 == (3##4 !=0##4);
output1{test++} = 0##1 == (3##4 <1##4);
output1{test++} = 0##1 == (3##4 <=1##4);
output1{test++} = 1##1 == (3##4 >1##4);
output1{test++} = 1##1 == (3##4 >=1##4);
output1{test++} = 0##1 == (3##4 ==1##4);
output1{test++} = 1##1 == (3##4 !=1##4);
output1{test++} = 3##4 == (3##4 /1##4);
output1{test++} = 0##4 == (3##4 %1##4);
output1{test++} = 0##1 == (3##4 <2##4);
output1{test++} = 0##1 == (3##4 <=2##4);
output1{test++} = 1##1 == (3##4 >2##4);
output1{test++} = 1##1 == (3##4 >=2##4);
output1{test++} = 0##1 == (3##4 ==2##4);
output1{test++} = 1##1 == (3##4 !=2##4);
output1{test++} = 1##4 == (3##4 /2##4);
output1{test++} = 1##4 == (3##4 %2##4);
output1{test++} = 0##1 == (3##4 <3##4);
output1{test++} = 1##1 == (3##4 <=3##4);
output1{test++} = 0##1 == (3##4 >3##4);
output1{test++} = 1##1 == (3##4 >=3##4);
output1{test++} = 1##1 == (3##4 ==3##4);
output1{test++} = 0##1 == (3##4 !=3##4);
output1{test++} = 1##4 == (3##4 /3##4);
output1{test++} = 0##4 == (3##4 %3##4);
output1{test++} = 1##1 == (3##4 <4##4);
output1{test++} = 1##1 == (3##4 <=4##4);
output1{test++} = 0##1 == (3##4 >4##4);
output1{test++} = 0##1 == (3##4 >=4##4);
output1{test++} = 0##1 == (3##4 ==4##4);
output1{test++} = 1##1 == (3##4 !=4##4);
output1{test++} = 0##4 == (3##4 /4##4);
output1{test++} = 3##4 == (3##4 %4##4);
output1{test++} = 1##1 == (3##4 <5##4);
output1{test++} = 1##1 == (3##4 <=5##4);
output1{test++} = 0##1 == (3##4 >5##4);
output1{test++} = 0##1 == (3##4 >=5##4);
output1{test++} = 0##1 == (3##4 ==5##4);
output1{test++} = 1##1 == (3##4 !=5##4);
output1{test++} = 0##4 == (3##4 /5##4);
output1{test++} = 3##4 == (3##4 %5##4);
output1{test++} = 1##1 == (3##4 <6##4);
output1{test++} = 1##1 == (3##4 <=6##4);
output1{test++} = 0##1 == (3##4 >6##4);
output1{test++} = 0##1 == (3##4 >=6##4);
output1{test++} = 0##1 == (3##4 ==6##4);
output1{test++} = 1##1 == (3##4 !=6##4);
output1{test++} = 0##4 == (3##4 /6##4);
output1{test++} = 3##4 == (3##4 %6##4);
output1{test++} = 1##1 == (3##4 <7##4);
output1{test++} = 1##1 == (3##4 <=7##4);
output1{test++} = 0##1 == (3##4 >7##4);
output1{test++} = 0##1 == (3##4 >=7##4);
output1{test++} = 0##1 == (3##4 ==7##4);
output1{test++} = 1##1 == (3##4 !=7##4);
output1{test++} = 0##4 == (3##4 /7##4);
output1{test++} = 3##4 == (3##4 %7##4);
output1{test++} = 1##1 == (3##4 <8##4);
output1{test++} = 1##1 == (3##4 <=8##4);
output1{test++} = 0##1 == (3##4 >8##4);
output1{test++} = 0##1 == (3##4 >=8##4);
output1{test++} = 0##1 == (3##4 ==8##4);
output1{test++} = 1##1 == (3##4 !=8##4);
output1{test++} = 0##4 == (3##4 /8##4);
output1{test++} = 3##4 == (3##4 %8##4);
output1{test++} = 1##1 == (3##4 <9##4);
output1{test++} = 1##1 == (3##4 <=9##4);
output1{test++} = 0##1 == (3##4 >9##4);
output1{test++} = 0##1 == (3##4 >=9##4);
output1{test++} = 0##1 == (3##4 ==9##4);
output1{test++} = 1##1 == (3##4 !=9##4);
output1{test++} = 0##4 == (3##4 /9##4);
output1{test++} = 3##4 == (3##4 %9##4);
output1{test++} = 1##1 == (3##4 <10##4);
output1{test++} = 1##1 == (3##4 <=10##4);
output1{test++} = 0##1 == (3##4 >10##4);
output1{test++} = 0##1 == (3##4 >=10##4);
output1{test++} = 0##1 == (3##4 ==10##4);
output1{test++} = 1##1 == (3##4 !=10##4);
output1{test++} = 0##4 == (3##4 /10##4);
output1{test++} = 3##4 == (3##4 %10##4);
output1{test++} = 1##1 == (3##4 <11##4);
output1{test++} = 1##1 == (3##4 <=11##4);
output1{test++} = 0##1 == (3##4 >11##4);
output1{test++} = 0##1 == (3##4 >=11##4);
output1{test++} = 0##1 == (3##4 ==11##4);
output1{test++} = 1##1 == (3##4 !=11##4);
output1{test++} = 0##4 == (3##4 /11##4);
output1{test++} = 3##4 == (3##4 %11##4);
output1{test++} = 1##1 == (3##4 <12##4);
output1{test++} = 1##1 == (3##4 <=12##4);
output1{test++} = 0##1 == (3##4 >12##4);
output1{test++} = 0##1 == (3##4 >=12##4);
output1{test++} = 0##1 == (3##4 ==12##4);
output1{test++} = 1##1 == (3##4 !=12##4);
output1{test++} = 0##4 == (3##4 /12##4);
output1{test++} = 3##4 == (3##4 %12##4);
output1{test++} = 1##1 == (3##4 <13##4);
output1{test++} = 1##1 == (3##4 <=13##4);
output1{test++} = 0##1 == (3##4 >13##4);
output1{test++} = 0##1 == (3##4 >=13##4);
output1{test++} = 0##1 == (3##4 ==13##4);
output1{test++} = 1##1 == (3##4 !=13##4);
output1{test++} = 0##4 == (3##4 /13##4);
output1{test++} = 3##4 == (3##4 %13##4);
output1{test++} = 1##1 == (3##4 <14##4);
output1{test++} = 1##1 == (3##4 <=14##4);
output1{test++} = 0##1 == (3##4 >14##4);
output1{test++} = 0##1 == (3##4 >=14##4);
output1{test++} = 0##1 == (3##4 ==14##4);
output1{test++} = 1##1 == (3##4 !=14##4);
output1{test++} = 0##4 == (3##4 /14##4);
output1{test++} = 3##4 == (3##4 %14##4);
output1{test++} = 1##1 == (3##4 <15##4);
output1{test++} = 1##1 == (3##4 <=15##4);
output1{test++} = 0##1 == (3##4 >15##4);
output1{test++} = 0##1 == (3##4 >=15##4);
output1{test++} = 0##1 == (3##4 ==15##4);
output1{test++} = 1##1 == (3##4 !=15##4);
output1{test++} = 0##4 == (3##4 /15##4);
output1{test++} = 3##4 == (3##4 %15##4);
output1{test++} = 0##1 == (4##4 <0##4);
output1{test++} = 0##1 == (4##4 <=0##4);
output1{test++} = 1##1 == (4##4 >0##4);
output1{test++} = 1##1 == (4##4 >=0##4);
output1{test++} = 0##1 == (4##4 ==0##4);
output1{test++} = 1##1 == (4##4 !=0##4);
output1{test++} = 0##1 == (4##4 <1##4);
output1{test++} = 0##1 == (4##4 <=1##4);
output1{test++} = 1##1 == (4##4 >1##4);
output1{test++} = 1##1 == (4##4 >=1##4);
output1{test++} = 0##1 == (4##4 ==1##4);
output1{test++} = 1##1 == (4##4 !=1##4);
output1{test++} = 4##4 == (4##4 /1##4);
output1{test++} = 0##4 == (4##4 %1##4);
output1{test++} = 0##1 == (4##4 <2##4);
output1{test++} = 0##1 == (4##4 <=2##4);
output1{test++} = 1##1 == (4##4 >2##4);
output1{test++} = 1##1 == (4##4 >=2##4);
output1{test++} = 0##1 == (4##4 ==2##4);
output1{test++} = 1##1 == (4##4 !=2##4);
output1{test++} = 2##4 == (4##4 /2##4);
output1{test++} = 0##4 == (4##4 %2##4);
output1{test++} = 0##1 == (4##4 <3##4);
output1{test++} = 0##1 == (4##4 <=3##4);
output1{test++} = 1##1 == (4##4 >3##4);
output1{test++} = 1##1 == (4##4 >=3##4);
output1{test++} = 0##1 == (4##4 ==3##4);
output1{test++} = 1##1 == (4##4 !=3##4);
output1{test++} = 1##4 == (4##4 /3##4);
output1{test++} = 1##4 == (4##4 %3##4);
output1{test++} = 0##1 == (4##4 <4##4);
output1{test++} = 1##1 == (4##4 <=4##4);
output1{test++} = 0##1 == (4##4 >4##4);
output1{test++} = 1##1 == (4##4 >=4##4);
output1{test++} = 1##1 == (4##4 ==4##4);
output1{test++} = 0##1 == (4##4 !=4##4);
output1{test++} = 1##4 == (4##4 /4##4);
output1{test++} = 0##4 == (4##4 %4##4);
output1{test++} = 1##1 == (4##4 <5##4);
output1{test++} = 1##1 == (4##4 <=5##4);
output1{test++} = 0##1 == (4##4 >5##4);
output1{test++} = 0##1 == (4##4 >=5##4);
output1{test++} = 0##1 == (4##4 ==5##4);
output1{test++} = 1##1 == (4##4 !=5##4);
output1{test++} = 0##4 == (4##4 /5##4);
output1{test++} = 4##4 == (4##4 %5##4);
output1{test++} = 1##1 == (4##4 <6##4);
output1{test++} = 1##1 == (4##4 <=6##4);
output1{test++} = 0##1 == (4##4 >6##4);
output1{test++} = 0##1 == (4##4 >=6##4);
output1{test++} = 0##1 == (4##4 ==6##4);
output1{test++} = 1##1 == (4##4 !=6##4);
output1{test++} = 0##4 == (4##4 /6##4);
output1{test++} = 4##4 == (4##4 %6##4);
output1{test++} = 1##1 == (4##4 <7##4);
output1{test++} = 1##1 == (4##4 <=7##4);
output1{test++} = 0##1 == (4##4 >7##4);
output1{test++} = 0##1 == (4##4 >=7##4);
output1{test++} = 0##1 == (4##4 ==7##4);
output1{test++} = 1##1 == (4##4 !=7##4);
output1{test++} = 0##4 == (4##4 /7##4);
output1{test++} = 4##4 == (4##4 %7##4);
output1{test++} = 1##1 == (4##4 <8##4);
output1{test++} = 1##1 == (4##4 <=8##4);
output1{test++} = 0##1 == (4##4 >8##4);
output1{test++} = 0##1 == (4##4 >=8##4);
output1{test++} = 0##1 == (4##4 ==8##4);
output1{test++} = 1##1 == (4##4 !=8##4);
output1{test++} = 0##4 == (4##4 /8##4);
output1{test++} = 4##4 == (4##4 %8##4);
output1{test++} = 1##1 == (4##4 <9##4);
output1{test++} = 1##1 == (4##4 <=9##4);
output1{test++} = 0##1 == (4##4 >9##4);
output1{test++} = 0##1 == (4##4 >=9##4);
output1{test++} = 0##1 == (4##4 ==9##4);
output1{test++} = 1##1 == (4##4 !=9##4);
output1{test++} = 0##4 == (4##4 /9##4);
output1{test++} = 4##4 == (4##4 %9##4);
output1{test++} = 1##1 == (4##4 <10##4);
output1{test++} = 1##1 == (4##4 <=10##4);
output1{test++} = 0##1 == (4##4 >10##4);
output1{test++} = 0##1 == (4##4 >=10##4);
output1{test++} = 0##1 == (4##4 ==10##4);
output1{test++} = 1##1 == (4##4 !=10##4);
output1{test++} = 0##4 == (4##4 /10##4);
output1{test++} = 4##4 == (4##4 %10##4);
output1{test++} = 1##1 == (4##4 <11##4);
output1{test++} = 1##1 == (4##4 <=11##4);
output1{test++} = 0##1 == (4##4 >11##4);
output1{test++} = 0##1 == (4##4 >=11##4);
output1{test++} = 0##1 == (4##4 ==11##4);
output1{test++} = 1##1 == (4##4 !=11##4);
output1{test++} = 0##4 == (4##4 /11##4);
output1{test++} = 4##4 == (4##4 %11##4);
output1{test++} = 1##1 == (4##4 <12##4);
output1{test++} = 1##1 == (4##4 <=12##4);
output1{test++} = 0##1 == (4##4 >12##4);
output1{test++} = 0##1 == (4##4 >=12##4);
output1{test++} = 0##1 == (4##4 ==12##4);
output1{test++} = 1##1 == (4##4 !=12##4);
output1{test++} = 0##4 == (4##4 /12##4);
output1{test++} = 4##4 == (4##4 %12##4);
output1{test++} = 1##1 == (4##4 <13##4);
output1{test++} = 1##1 == (4##4 <=13##4);
output1{test++} = 0##1 == (4##4 >13##4);
output1{test++} = 0##1 == (4##4 >=13##4);
output1{test++} = 0##1 == (4##4 ==13##4);
output1{test++} = 1##1 == (4##4 !=13##4);
output1{test++} = 0##4 == (4##4 /13##4);
output1{test++} = 4##4 == (4##4 %13##4);
output1{test++} = 1##1 == (4##4 <14##4);
output1{test++} = 1##1 == (4##4 <=14##4);
output1{test++} = 0##1 == (4##4 >14##4);
output1{test++} = 0##1 == (4##4 >=14##4);
output1{test++} = 0##1 == (4##4 ==14##4);
output1{test++} = 1##1 == (4##4 !=14##4);
output1{test++} = 0##4 == (4##4 /14##4);
output1{test++} = 4##4 == (4##4 %14##4);
output1{test++} = 1##1 == (4##4 <15##4);
output1{test++} = 1##1 == (4##4 <=15##4);
output1{test++} = 0##1 == (4##4 >15##4);
output1{test++} = 0##1 == (4##4 >=15##4);
output1{test++} = 0##1 == (4##4 ==15##4);
output1{test++} = 1##1 == (4##4 !=15##4);
output1{test++} = 0##4 == (4##4 /15##4);
output1{test++} = 4##4 == (4##4 %15##4);
output1{test++} = 0##1 == (5##4 <0##4);
output1{test++} = 0##1 == (5##4 <=0##4);
output1{test++} = 1##1 == (5##4 >0##4);
output1{test++} = 1##1 == (5##4 >=0##4);
output1{test++} = 0##1 == (5##4 ==0##4);
output1{test++} = 1##1 == (5##4 !=0##4);
output1{test++} = 0##1 == (5##4 <1##4);
output1{test++} = 0##1 == (5##4 <=1##4);
output1{test++} = 1##1 == (5##4 >1##4);
output1{test++} = 1##1 == (5##4 >=1##4);
output1{test++} = 0##1 == (5##4 ==1##4);
output1{test++} = 1##1 == (5##4 !=1##4);
output1{test++} = 5##4 == (5##4 /1##4);
output1{test++} = 0##4 == (5##4 %1##4);
output1{test++} = 0##1 == (5##4 <2##4);
output1{test++} = 0##1 == (5##4 <=2##4);
output1{test++} = 1##1 == (5##4 >2##4);
output1{test++} = 1##1 == (5##4 >=2##4);
output1{test++} = 0##1 == (5##4 ==2##4);
output1{test++} = 1##1 == (5##4 !=2##4);
output1{test++} = 2##4 == (5##4 /2##4);
output1{test++} = 1##4 == (5##4 %2##4);
output1{test++} = 0##1 == (5##4 <3##4);
output1{test++} = 0##1 == (5##4 <=3##4);
output1{test++} = 1##1 == (5##4 >3##4);
output1{test++} = 1##1 == (5##4 >=3##4);
output1{test++} = 0##1 == (5##4 ==3##4);
output1{test++} = 1##1 == (5##4 !=3##4);
output1{test++} = 1##4 == (5##4 /3##4);
output1{test++} = 2##4 == (5##4 %3##4);
output1{test++} = 0##1 == (5##4 <4##4);
output1{test++} = 0##1 == (5##4 <=4##4);
output1{test++} = 1##1 == (5##4 >4##4);
output1{test++} = 1##1 == (5##4 >=4##4);
output1{test++} = 0##1 == (5##4 ==4##4);
output1{test++} = 1##1 == (5##4 !=4##4);
output1{test++} = 1##4 == (5##4 /4##4);
output1{test++} = 1##4 == (5##4 %4##4);
output1{test++} = 0##1 == (5##4 <5##4);
output1{test++} = 1##1 == (5##4 <=5##4);
output1{test++} = 0##1 == (5##4 >5##4);
output1{test++} = 1##1 == (5##4 >=5##4);
output1{test++} = 1##1 == (5##4 ==5##4);
output1{test++} = 0##1 == (5##4 !=5##4);
output1{test++} = 1##4 == (5##4 /5##4);
output1{test++} = 0##4 == (5##4 %5##4);
output1{test++} = 1##1 == (5##4 <6##4);
output1{test++} = 1##1 == (5##4 <=6##4);
output1{test++} = 0##1 == (5##4 >6##4);
output1{test++} = 0##1 == (5##4 >=6##4);
output1{test++} = 0##1 == (5##4 ==6##4);
output1{test++} = 1##1 == (5##4 !=6##4);
output1{test++} = 0##4 == (5##4 /6##4);
output1{test++} = 5##4 == (5##4 %6##4);
output1{test++} = 1##1 == (5##4 <7##4);
output1{test++} = 1##1 == (5##4 <=7##4);
output1{test++} = 0##1 == (5##4 >7##4);
output1{test++} = 0##1 == (5##4 >=7##4);
output1{test++} = 0##1 == (5##4 ==7##4);
output1{test++} = 1##1 == (5##4 !=7##4);
output1{test++} = 0##4 == (5##4 /7##4);
output1{test++} = 5##4 == (5##4 %7##4);
output1{test++} = 1##1 == (5##4 <8##4);
output1{test++} = 1##1 == (5##4 <=8##4);
output1{test++} = 0##1 == (5##4 >8##4);
output1{test++} = 0##1 == (5##4 >=8##4);
output1{test++} = 0##1 == (5##4 ==8##4);
output1{test++} = 1##1 == (5##4 !=8##4);
output1{test++} = 0##4 == (5##4 /8##4);
output1{test++} = 5##4 == (5##4 %8##4);
output1{test++} = 1##1 == (5##4 <9##4);
output1{test++} = 1##1 == (5##4 <=9##4);
output1{test++} = 0##1 == (5##4 >9##4);
output1{test++} = 0##1 == (5##4 >=9##4);
output1{test++} = 0##1 == (5##4 ==9##4);
output1{test++} = 1##1 == (5##4 !=9##4);
output1{test++} = 0##4 == (5##4 /9##4);
output1{test++} = 5##4 == (5##4 %9##4);
output1{test++} = 1##1 == (5##4 <10##4);
output1{test++} = 1##1 == (5##4 <=10##4);
output1{test++} = 0##1 == (5##4 >10##4);
output1{test++} = 0##1 == (5##4 >=10##4);
output1{test++} = 0##1 == (5##4 ==10##4);
output1{test++} = 1##1 == (5##4 !=10##4);
output1{test++} = 0##4 == (5##4 /10##4);
output1{test++} = 5##4 == (5##4 %10##4);
output1{test++} = 1##1 == (5##4 <11##4);
output1{test++} = 1##1 == (5##4 <=11##4);
output1{test++} = 0##1 == (5##4 >11##4);
output1{test++} = 0##1 == (5##4 >=11##4);
output1{test++} = 0##1 == (5##4 ==11##4);
output1{test++} = 1##1 == (5##4 !=11##4);
output1{test++} = 0##4 == (5##4 /11##4);
output1{test++} = 5##4 == (5##4 %11##4);
output1{test++} = 1##1 == (5##4 <12##4);
output1{test++} = 1##1 == (5##4 <=12##4);
output1{test++} = 0##1 == (5##4 >12##4);
output1{test++} = 0##1 == (5##4 >=12##4);
output1{test++} = 0##1 == (5##4 ==12##4);
output1{test++} = 1##1 == (5##4 !=12##4);
output1{test++} = 0##4 == (5##4 /12##4);
output1{test++} = 5##4 == (5##4 %12##4);
output1{test++} = 1##1 == (5##4 <13##4);
output1{test++} = 1##1 == (5##4 <=13##4);
output1{test++} = 0##1 == (5##4 >13##4);
output1{test++} = 0##1 == (5##4 >=13##4);
output1{test++} = 0##1 == (5##4 ==13##4);
output1{test++} = 1##1 == (5##4 !=13##4);
output1{test++} = 0##4 == (5##4 /13##4);
output1{test++} = 5##4 == (5##4 %13##4);
output1{test++} = 1##1 == (5##4 <14##4);
output1{test++} = 1##1 == (5##4 <=14##4);
output1{test++} = 0##1 == (5##4 >14##4);
output1{test++} = 0##1 == (5##4 >=14##4);
output1{test++} = 0##1 == (5##4 ==14##4);
output1{test++} = 1##1 == (5##4 !=14##4);
output1{test++} = 0##4 == (5##4 /14##4);
output1{test++} = 5##4 == (5##4 %14##4);
output1{test++} = 1##1 == (5##4 <15##4);
output1{test++} = 1##1 == (5##4 <=15##4);
output1{test++} = 0##1 == (5##4 >15##4);
output1{test++} = 0##1 == (5##4 >=15##4);
output1{test++} = 0##1 == (5##4 ==15##4);
output1{test++} = 1##1 == (5##4 !=15##4);
output1{test++} = 0##4 == (5##4 /15##4);
output1{test++} = 5##4 == (5##4 %15##4);
output1{test++} = 0##1 == (6##4 <0##4);
output1{test++} = 0##1 == (6##4 <=0##4);
output1{test++} = 1##1 == (6##4 >0##4);
output1{test++} = 1##1 == (6##4 >=0##4);
output1{test++} = 0##1 == (6##4 ==0##4);
output1{test++} = 1##1 == (6##4 !=0##4);
output1{test++} = 0##1 == (6##4 <1##4);
output1{test++} = 0##1 == (6##4 <=1##4);
output1{test++} = 1##1 == (6##4 >1##4);
output1{test++} = 1##1 == (6##4 >=1##4);
output1{test++} = 0##1 == (6##4 ==1##4);
output1{test++} = 1##1 == (6##4 !=1##4);
output1{test++} = 6##4 == (6##4 /1##4);
output1{test++} = 0##4 == (6##4 %1##4);
output1{test++} = 0##1 == (6##4 <2##4);
output1{test++} = 0##1 == (6##4 <=2##4);
output1{test++} = 1##1 == (6##4 >2##4);
output1{test++} = 1##1 == (6##4 >=2##4);
output1{test++} = 0##1 == (6##4 ==2##4);
output1{test++} = 1##1 == (6##4 !=2##4);
output1{test++} = 3##4 == (6##4 /2##4);
output1{test++} = 0##4 == (6##4 %2##4);
output1{test++} = 0##1 == (6##4 <3##4);
output1{test++} = 0##1 == (6##4 <=3##4);
output1{test++} = 1##1 == (6##4 >3##4);
output1{test++} = 1##1 == (6##4 >=3##4);
output1{test++} = 0##1 == (6##4 ==3##4);
output1{test++} = 1##1 == (6##4 !=3##4);
output1{test++} = 2##4 == (6##4 /3##4);
output1{test++} = 0##4 == (6##4 %3##4);
output1{test++} = 0##1 == (6##4 <4##4);
output1{test++} = 0##1 == (6##4 <=4##4);
output1{test++} = 1##1 == (6##4 >4##4);
output1{test++} = 1##1 == (6##4 >=4##4);
output1{test++} = 0##1 == (6##4 ==4##4);
output1{test++} = 1##1 == (6##4 !=4##4);
output1{test++} = 1##4 == (6##4 /4##4);
output1{test++} = 2##4 == (6##4 %4##4);
output1{test++} = 0##1 == (6##4 <5##4);
output1{test++} = 0##1 == (6##4 <=5##4);
output1{test++} = 1##1 == (6##4 >5##4);
output1{test++} = 1##1 == (6##4 >=5##4);
output1{test++} = 0##1 == (6##4 ==5##4);
output1{test++} = 1##1 == (6##4 !=5##4);
output1{test++} = 1##4 == (6##4 /5##4);
output1{test++} = 1##4 == (6##4 %5##4);
output1{test++} = 0##1 == (6##4 <6##4);
output1{test++} = 1##1 == (6##4 <=6##4);
output1{test++} = 0##1 == (6##4 >6##4);
output1{test++} = 1##1 == (6##4 >=6##4);
output1{test++} = 1##1 == (6##4 ==6##4);
output1{test++} = 0##1 == (6##4 !=6##4);
output1{test++} = 1##4 == (6##4 /6##4);
output1{test++} = 0##4 == (6##4 %6##4);
output1{test++} = 1##1 == (6##4 <7##4);
output1{test++} = 1##1 == (6##4 <=7##4);
output1{test++} = 0##1 == (6##4 >7##4);
output1{test++} = 0##1 == (6##4 >=7##4);
output1{test++} = 0##1 == (6##4 ==7##4);
output1{test++} = 1##1 == (6##4 !=7##4);
output1{test++} = 0##4 == (6##4 /7##4);
output1{test++} = 6##4 == (6##4 %7##4);
output1{test++} = 1##1 == (6##4 <8##4);
output1{test++} = 1##1 == (6##4 <=8##4);
output1{test++} = 0##1 == (6##4 >8##4);
output1{test++} = 0##1 == (6##4 >=8##4);
output1{test++} = 0##1 == (6##4 ==8##4);
output1{test++} = 1##1 == (6##4 !=8##4);
output1{test++} = 0##4 == (6##4 /8##4);
output1{test++} = 6##4 == (6##4 %8##4);
output1{test++} = 1##1 == (6##4 <9##4);
output1{test++} = 1##1 == (6##4 <=9##4);
output1{test++} = 0##1 == (6##4 >9##4);
output1{test++} = 0##1 == (6##4 >=9##4);
output1{test++} = 0##1 == (6##4 ==9##4);
output1{test++} = 1##1 == (6##4 !=9##4);
output1{test++} = 0##4 == (6##4 /9##4);
output1{test++} = 6##4 == (6##4 %9##4);
output1{test++} = 1##1 == (6##4 <10##4);
output1{test++} = 1##1 == (6##4 <=10##4);
output1{test++} = 0##1 == (6##4 >10##4);
output1{test++} = 0##1 == (6##4 >=10##4);
output1{test++} = 0##1 == (6##4 ==10##4);
output1{test++} = 1##1 == (6##4 !=10##4);
output1{test++} = 0##4 == (6##4 /10##4);
output1{test++} = 6##4 == (6##4 %10##4);
output1{test++} = 1##1 == (6##4 <11##4);
output1{test++} = 1##1 == (6##4 <=11##4);
output1{test++} = 0##1 == (6##4 >11##4);
output1{test++} = 0##1 == (6##4 >=11##4);
output1{test++} = 0##1 == (6##4 ==11##4);
output1{test++} = 1##1 == (6##4 !=11##4);
output1{test++} = 0##4 == (6##4 /11##4);
output1{test++} = 6##4 == (6##4 %11##4);
output1{test++} = 1##1 == (6##4 <12##4);
output1{test++} = 1##1 == (6##4 <=12##4);
output1{test++} = 0##1 == (6##4 >12##4);
output1{test++} = 0##1 == (6##4 >=12##4);
output1{test++} = 0##1 == (6##4 ==12##4);
output1{test++} = 1##1 == (6##4 !=12##4);
output1{test++} = 0##4 == (6##4 /12##4);
output1{test++} = 6##4 == (6##4 %12##4);
output1{test++} = 1##1 == (6##4 <13##4);
output1{test++} = 1##1 == (6##4 <=13##4);
output1{test++} = 0##1 == (6##4 >13##4);
output1{test++} = 0##1 == (6##4 >=13##4);
output1{test++} = 0##1 == (6##4 ==13##4);
output1{test++} = 1##1 == (6##4 !=13##4);
output1{test++} = 0##4 == (6##4 /13##4);
output1{test++} = 6##4 == (6##4 %13##4);
output1{test++} = 1##1 == (6##4 <14##4);
output1{test++} = 1##1 == (6##4 <=14##4);
output1{test++} = 0##1 == (6##4 >14##4);
output1{test++} = 0##1 == (6##4 >=14##4);
output1{test++} = 0##1 == (6##4 ==14##4);
output1{test++} = 1##1 == (6##4 !=14##4);
output1{test++} = 0##4 == (6##4 /14##4);
output1{test++} = 6##4 == (6##4 %14##4);
output1{test++} = 1##1 == (6##4 <15##4);
output1{test++} = 1##1 == (6##4 <=15##4);
output1{test++} = 0##1 == (6##4 >15##4);
output1{test++} = 0##1 == (6##4 >=15##4);
output1{test++} = 0##1 == (6##4 ==15##4);
output1{test++} = 1##1 == (6##4 !=15##4);
output1{test++} = 0##4 == (6##4 /15##4);
output1{test++} = 6##4 == (6##4 %15##4);
output1{test++} = 0##1 == (7##4 <0##4);
output1{test++} = 0##1 == (7##4 <=0##4);
output1{test++} = 1##1 == (7##4 >0##4);
output1{test++} = 1##1 == (7##4 >=0##4);
output1{test++} = 0##1 == (7##4 ==0##4);
output1{test++} = 1##1 == (7##4 !=0##4);
output1{test++} = 0##1 == (7##4 <1##4);
output1{test++} = 0##1 == (7##4 <=1##4);
output1{test++} = 1##1 == (7##4 >1##4);
output1{test++} = 1##1 == (7##4 >=1##4);
output1{test++} = 0##1 == (7##4 ==1##4);
output1{test++} = 1##1 == (7##4 !=1##4);
output1{test++} = 7##4 == (7##4 /1##4);
output1{test++} = 0##4 == (7##4 %1##4);
output1{test++} = 0##1 == (7##4 <2##4);
output1{test++} = 0##1 == (7##4 <=2##4);
output1{test++} = 1##1 == (7##4 >2##4);
output1{test++} = 1##1 == (7##4 >=2##4);
output1{test++} = 0##1 == (7##4 ==2##4);
output1{test++} = 1##1 == (7##4 !=2##4);
output1{test++} = 3##4 == (7##4 /2##4);
output1{test++} = 1##4 == (7##4 %2##4);
output1{test++} = 0##1 == (7##4 <3##4);
output1{test++} = 0##1 == (7##4 <=3##4);
output1{test++} = 1##1 == (7##4 >3##4);
output1{test++} = 1##1 == (7##4 >=3##4);
output1{test++} = 0##1 == (7##4 ==3##4);
output1{test++} = 1##1 == (7##4 !=3##4);
output1{test++} = 2##4 == (7##4 /3##4);
output1{test++} = 1##4 == (7##4 %3##4);
output1{test++} = 0##1 == (7##4 <4##4);
output1{test++} = 0##1 == (7##4 <=4##4);
output1{test++} = 1##1 == (7##4 >4##4);
output1{test++} = 1##1 == (7##4 >=4##4);
output1{test++} = 0##1 == (7##4 ==4##4);
output1{test++} = 1##1 == (7##4 !=4##4);
output1{test++} = 1##4 == (7##4 /4##4);
output1{test++} = 3##4 == (7##4 %4##4);
output1{test++} = 0##1 == (7##4 <5##4);
output1{test++} = 0##1 == (7##4 <=5##4);
output1{test++} = 1##1 == (7##4 >5##4);
output1{test++} = 1##1 == (7##4 >=5##4);
output1{test++} = 0##1 == (7##4 ==5##4);
output1{test++} = 1##1 == (7##4 !=5##4);
output1{test++} = 1##4 == (7##4 /5##4);
output1{test++} = 2##4 == (7##4 %5##4);
output1{test++} = 0##1 == (7##4 <6##4);
output1{test++} = 0##1 == (7##4 <=6##4);
output1{test++} = 1##1 == (7##4 >6##4);
output1{test++} = 1##1 == (7##4 >=6##4);
output1{test++} = 0##1 == (7##4 ==6##4);
output1{test++} = 1##1 == (7##4 !=6##4);
output1{test++} = 1##4 == (7##4 /6##4);
output1{test++} = 1##4 == (7##4 %6##4);
output1{test++} = 0##1 == (7##4 <7##4);
output1{test++} = 1##1 == (7##4 <=7##4);
output1{test++} = 0##1 == (7##4 >7##4);
output1{test++} = 1##1 == (7##4 >=7##4);
output1{test++} = 1##1 == (7##4 ==7##4);
output1{test++} = 0##1 == (7##4 !=7##4);
output1{test++} = 1##4 == (7##4 /7##4);
output1{test++} = 0##4 == (7##4 %7##4);
output1{test++} = 1##1 == (7##4 <8##4);
output1{test++} = 1##1 == (7##4 <=8##4);
output1{test++} = 0##1 == (7##4 >8##4);
output1{test++} = 0##1 == (7##4 >=8##4);
output1{test++} = 0##1 == (7##4 ==8##4);
output1{test++} = 1##1 == (7##4 !=8##4);
output1{test++} = 0##4 == (7##4 /8##4);
output1{test++} = 7##4 == (7##4 %8##4);
output1{test++} = 1##1 == (7##4 <9##4);
output1{test++} = 1##1 == (7##4 <=9##4);
output1{test++} = 0##1 == (7##4 >9##4);
output1{test++} = 0##1 == (7##4 >=9##4);
output1{test++} = 0##1 == (7##4 ==9##4);
output1{test++} = 1##1 == (7##4 !=9##4);
output1{test++} = 0##4 == (7##4 /9##4);
output1{test++} = 7##4 == (7##4 %9##4);
output1{test++} = 1##1 == (7##4 <10##4);
output1{test++} = 1##1 == (7##4 <=10##4);
output1{test++} = 0##1 == (7##4 >10##4);
output1{test++} = 0##1 == (7##4 >=10##4);
output1{test++} = 0##1 == (7##4 ==10##4);
output1{test++} = 1##1 == (7##4 !=10##4);
output1{test++} = 0##4 == (7##4 /10##4);
output1{test++} = 7##4 == (7##4 %10##4);
output1{test++} = 1##1 == (7##4 <11##4);
output1{test++} = 1##1 == (7##4 <=11##4);
output1{test++} = 0##1 == (7##4 >11##4);
output1{test++} = 0##1 == (7##4 >=11##4);
output1{test++} = 0##1 == (7##4 ==11##4);
output1{test++} = 1##1 == (7##4 !=11##4);
output1{test++} = 0##4 == (7##4 /11##4);
output1{test++} = 7##4 == (7##4 %11##4);
output1{test++} = 1##1 == (7##4 <12##4);
output1{test++} = 1##1 == (7##4 <=12##4);
output1{test++} = 0##1 == (7##4 >12##4);
output1{test++} = 0##1 == (7##4 >=12##4);
output1{test++} = 0##1 == (7##4 ==12##4);
output1{test++} = 1##1 == (7##4 !=12##4);
output1{test++} = 0##4 == (7##4 /12##4);
output1{test++} = 7##4 == (7##4 %12##4);
output1{test++} = 1##1 == (7##4 <13##4);
output1{test++} = 1##1 == (7##4 <=13##4);
output1{test++} = 0##1 == (7##4 >13##4);
output1{test++} = 0##1 == (7##4 >=13##4);
output1{test++} = 0##1 == (7##4 ==13##4);
output1{test++} = 1##1 == (7##4 !=13##4);
output1{test++} = 0##4 == (7##4 /13##4);
output1{test++} = 7##4 == (7##4 %13##4);
output1{test++} = 1##1 == (7##4 <14##4);
output1{test++} = 1##1 == (7##4 <=14##4);
output1{test++} = 0##1 == (7##4 >14##4);
output1{test++} = 0##1 == (7##4 >=14##4);
output1{test++} = 0##1 == (7##4 ==14##4);
output1{test++} = 1##1 == (7##4 !=14##4);
output1{test++} = 0##4 == (7##4 /14##4);
output1{test++} = 7##4 == (7##4 %14##4);
output1{test++} = 1##1 == (7##4 <15##4);
output1{test++} = 1##1 == (7##4 <=15##4);
output1{test++} = 0##1 == (7##4 >15##4);
output1{test++} = 0##1 == (7##4 >=15##4);
output1{test++} = 0##1 == (7##4 ==15##4);
output1{test++} = 1##1 == (7##4 !=15##4);
output1{test++} = 0##4 == (7##4 /15##4);
output1{test++} = 7##4 == (7##4 %15##4);
output1{test++} = 0##1 == (8##4 <0##4);
output1{test++} = 0##1 == (8##4 <=0##4);
output1{test++} = 1##1 == (8##4 >0##4);
output1{test++} = 1##1 == (8##4 >=0##4);
output1{test++} = 0##1 == (8##4 ==0##4);
output1{test++} = 1##1 == (8##4 !=0##4);
output1{test++} = 0##1 == (8##4 <1##4);
output1{test++} = 0##1 == (8##4 <=1##4);
output1{test++} = 1##1 == (8##4 >1##4);
output1{test++} = 1##1 == (8##4 >=1##4);
output1{test++} = 0##1 == (8##4 ==1##4);
output1{test++} = 1##1 == (8##4 !=1##4);
output1{test++} = 8##4 == (8##4 /1##4);
output1{test++} = 0##4 == (8##4 %1##4);
output1{test++} = 0##1 == (8##4 <2##4);
output1{test++} = 0##1 == (8##4 <=2##4);
output1{test++} = 1##1 == (8##4 >2##4);
output1{test++} = 1##1 == (8##4 >=2##4);
output1{test++} = 0##1 == (8##4 ==2##4);
output1{test++} = 1##1 == (8##4 !=2##4);
output1{test++} = 4##4 == (8##4 /2##4);
output1{test++} = 0##4 == (8##4 %2##4);
output1{test++} = 0##1 == (8##4 <3##4);
output1{test++} = 0##1 == (8##4 <=3##4);
output1{test++} = 1##1 == (8##4 >3##4);
output1{test++} = 1##1 == (8##4 >=3##4);
output1{test++} = 0##1 == (8##4 ==3##4);
output1{test++} = 1##1 == (8##4 !=3##4);
output1{test++} = 2##4 == (8##4 /3##4);
output1{test++} = 2##4 == (8##4 %3##4);
output1{test++} = 0##1 == (8##4 <4##4);
output1{test++} = 0##1 == (8##4 <=4##4);
output1{test++} = 1##1 == (8##4 >4##4);
output1{test++} = 1##1 == (8##4 >=4##4);
output1{test++} = 0##1 == (8##4 ==4##4);
output1{test++} = 1##1 == (8##4 !=4##4);
output1{test++} = 2##4 == (8##4 /4##4);
output1{test++} = 0##4 == (8##4 %4##4);
output1{test++} = 0##1 == (8##4 <5##4);
output1{test++} = 0##1 == (8##4 <=5##4);
output1{test++} = 1##1 == (8##4 >5##4);
output1{test++} = 1##1 == (8##4 >=5##4);
output1{test++} = 0##1 == (8##4 ==5##4);
output1{test++} = 1##1 == (8##4 !=5##4);
output1{test++} = 1##4 == (8##4 /5##4);
output1{test++} = 3##4 == (8##4 %5##4);
output1{test++} = 0##1 == (8##4 <6##4);
output1{test++} = 0##1 == (8##4 <=6##4);
output1{test++} = 1##1 == (8##4 >6##4);
output1{test++} = 1##1 == (8##4 >=6##4);
output1{test++} = 0##1 == (8##4 ==6##4);
output1{test++} = 1##1 == (8##4 !=6##4);
output1{test++} = 1##4 == (8##4 /6##4);
output1{test++} = 2##4 == (8##4 %6##4);
output1{test++} = 0##1 == (8##4 <7##4);
output1{test++} = 0##1 == (8##4 <=7##4);
output1{test++} = 1##1 == (8##4 >7##4);
output1{test++} = 1##1 == (8##4 >=7##4);
output1{test++} = 0##1 == (8##4 ==7##4);
output1{test++} = 1##1 == (8##4 !=7##4);
output1{test++} = 1##4 == (8##4 /7##4);
output1{test++} = 1##4 == (8##4 %7##4);
output1{test++} = 0##1 == (8##4 <8##4);
output1{test++} = 1##1 == (8##4 <=8##4);
output1{test++} = 0##1 == (8##4 >8##4);
output1{test++} = 1##1 == (8##4 >=8##4);
output1{test++} = 1##1 == (8##4 ==8##4);
output1{test++} = 0##1 == (8##4 !=8##4);
output1{test++} = 1##4 == (8##4 /8##4);
output1{test++} = 0##4 == (8##4 %8##4);
output1{test++} = 1##1 == (8##4 <9##4);
output1{test++} = 1##1 == (8##4 <=9##4);
output1{test++} = 0##1 == (8##4 >9##4);
output1{test++} = 0##1 == (8##4 >=9##4);
output1{test++} = 0##1 == (8##4 ==9##4);
output1{test++} = 1##1 == (8##4 !=9##4);
output1{test++} = 0##4 == (8##4 /9##4);
output1{test++} = 8##4 == (8##4 %9##4);
output1{test++} = 1##1 == (8##4 <10##4);
output1{test++} = 1##1 == (8##4 <=10##4);
output1{test++} = 0##1 == (8##4 >10##4);
output1{test++} = 0##1 == (8##4 >=10##4);
output1{test++} = 0##1 == (8##4 ==10##4);
output1{test++} = 1##1 == (8##4 !=10##4);
output1{test++} = 0##4 == (8##4 /10##4);
output1{test++} = 8##4 == (8##4 %10##4);
output1{test++} = 1##1 == (8##4 <11##4);
output1{test++} = 1##1 == (8##4 <=11##4);
output1{test++} = 0##1 == (8##4 >11##4);
output1{test++} = 0##1 == (8##4 >=11##4);
output1{test++} = 0##1 == (8##4 ==11##4);
output1{test++} = 1##1 == (8##4 !=11##4);
output1{test++} = 0##4 == (8##4 /11##4);
output1{test++} = 8##4 == (8##4 %11##4);
output1{test++} = 1##1 == (8##4 <12##4);
output1{test++} = 1##1 == (8##4 <=12##4);
output1{test++} = 0##1 == (8##4 >12##4);
output1{test++} = 0##1 == (8##4 >=12##4);
output1{test++} = 0##1 == (8##4 ==12##4);
output1{test++} = 1##1 == (8##4 !=12##4);
output1{test++} = 0##4 == (8##4 /12##4);
output1{test++} = 8##4 == (8##4 %12##4);
output1{test++} = 1##1 == (8##4 <13##4);
output1{test++} = 1##1 == (8##4 <=13##4);
output1{test++} = 0##1 == (8##4 >13##4);
output1{test++} = 0##1 == (8##4 >=13##4);
output1{test++} = 0##1 == (8##4 ==13##4);
output1{test++} = 1##1 == (8##4 !=13##4);
output1{test++} = 0##4 == (8##4 /13##4);
output1{test++} = 8##4 == (8##4 %13##4);
output1{test++} = 1##1 == (8##4 <14##4);
output1{test++} = 1##1 == (8##4 <=14##4);
output1{test++} = 0##1 == (8##4 >14##4);
output1{test++} = 0##1 == (8##4 >=14##4);
output1{test++} = 0##1 == (8##4 ==14##4);
output1{test++} = 1##1 == (8##4 !=14##4);
output1{test++} = 0##4 == (8##4 /14##4);
output1{test++} = 8##4 == (8##4 %14##4);
output1{test++} = 1##1 == (8##4 <15##4);
output1{test++} = 1##1 == (8##4 <=15##4);
output1{test++} = 0##1 == (8##4 >15##4);
output1{test++} = 0##1 == (8##4 >=15##4);
output1{test++} = 0##1 == (8##4 ==15##4);
output1{test++} = 1##1 == (8##4 !=15##4);
output1{test++} = 0##4 == (8##4 /15##4);
output1{test++} = 8##4 == (8##4 %15##4);
output1{test++} = 0##1 == (9##4 <0##4);
output1{test++} = 0##1 == (9##4 <=0##4);
output1{test++} = 1##1 == (9##4 >0##4);
output1{test++} = 1##1 == (9##4 >=0##4);
output1{test++} = 0##1 == (9##4 ==0##4);
output1{test++} = 1##1 == (9##4 !=0##4);
output1{test++} = 0##1 == (9##4 <1##4);
output1{test++} = 0##1 == (9##4 <=1##4);
output1{test++} = 1##1 == (9##4 >1##4);
output1{test++} = 1##1 == (9##4 >=1##4);
output1{test++} = 0##1 == (9##4 ==1##4);
output1{test++} = 1##1 == (9##4 !=1##4);
output1{test++} = 9##4 == (9##4 /1##4);
output1{test++} = 0##4 == (9##4 %1##4);
output1{test++} = 0##1 == (9##4 <2##4);
output1{test++} = 0##1 == (9##4 <=2##4);
output1{test++} = 1##1 == (9##4 >2##4);
output1{test++} = 1##1 == (9##4 >=2##4);
output1{test++} = 0##1 == (9##4 ==2##4);
output1{test++} = 1##1 == (9##4 !=2##4);
output1{test++} = 4##4 == (9##4 /2##4);
output1{test++} = 1##4 == (9##4 %2##4);
output1{test++} = 0##1 == (9##4 <3##4);
output1{test++} = 0##1 == (9##4 <=3##4);
output1{test++} = 1##1 == (9##4 >3##4);
output1{test++} = 1##1 == (9##4 >=3##4);
output1{test++} = 0##1 == (9##4 ==3##4);
output1{test++} = 1##1 == (9##4 !=3##4);
output1{test++} = 3##4 == (9##4 /3##4);
output1{test++} = 0##4 == (9##4 %3##4);
output1{test++} = 0##1 == (9##4 <4##4);
output1{test++} = 0##1 == (9##4 <=4##4);
output1{test++} = 1##1 == (9##4 >4##4);
output1{test++} = 1##1 == (9##4 >=4##4);
output1{test++} = 0##1 == (9##4 ==4##4);
output1{test++} = 1##1 == (9##4 !=4##4);
output1{test++} = 2##4 == (9##4 /4##4);
output1{test++} = 1##4 == (9##4 %4##4);
output1{test++} = 0##1 == (9##4 <5##4);
output1{test++} = 0##1 == (9##4 <=5##4);
output1{test++} = 1##1 == (9##4 >5##4);
output1{test++} = 1##1 == (9##4 >=5##4);
output1{test++} = 0##1 == (9##4 ==5##4);
output1{test++} = 1##1 == (9##4 !=5##4);
output1{test++} = 1##4 == (9##4 /5##4);
output1{test++} = 4##4 == (9##4 %5##4);
output1{test++} = 0##1 == (9##4 <6##4);
output1{test++} = 0##1 == (9##4 <=6##4);
output1{test++} = 1##1 == (9##4 >6##4);
output1{test++} = 1##1 == (9##4 >=6##4);
output1{test++} = 0##1 == (9##4 ==6##4);
output1{test++} = 1##1 == (9##4 !=6##4);
output1{test++} = 1##4 == (9##4 /6##4);
output1{test++} = 3##4 == (9##4 %6##4);
output1{test++} = 0##1 == (9##4 <7##4);
output1{test++} = 0##1 == (9##4 <=7##4);
output1{test++} = 1##1 == (9##4 >7##4);
output1{test++} = 1##1 == (9##4 >=7##4);
output1{test++} = 0##1 == (9##4 ==7##4);
output1{test++} = 1##1 == (9##4 !=7##4);
output1{test++} = 1##4 == (9##4 /7##4);
output1{test++} = 2##4 == (9##4 %7##4);
output1{test++} = 0##1 == (9##4 <8##4);
output1{test++} = 0##1 == (9##4 <=8##4);
output1{test++} = 1##1 == (9##4 >8##4);
output1{test++} = 1##1 == (9##4 >=8##4);
output1{test++} = 0##1 == (9##4 ==8##4);
output1{test++} = 1##1 == (9##4 !=8##4);
output1{test++} = 1##4 == (9##4 /8##4);
output1{test++} = 1##4 == (9##4 %8##4);
output1{test++} = 0##1 == (9##4 <9##4);
output1{test++} = 1##1 == (9##4 <=9##4);
output1{test++} = 0##1 == (9##4 >9##4);
output1{test++} = 1##1 == (9##4 >=9##4);
output1{test++} = 1##1 == (9##4 ==9##4);
output1{test++} = 0##1 == (9##4 !=9##4);
output1{test++} = 1##4 == (9##4 /9##4);
output1{test++} = 0##4 == (9##4 %9##4);
output1{test++} = 1##1 == (9##4 <10##4);
output1{test++} = 1##1 == (9##4 <=10##4);
output1{test++} = 0##1 == (9##4 >10##4);
output1{test++} = 0##1 == (9##4 >=10##4);
output1{test++} = 0##1 == (9##4 ==10##4);
output1{test++} = 1##1 == (9##4 !=10##4);
output1{test++} = 0##4 == (9##4 /10##4);
output1{test++} = 9##4 == (9##4 %10##4);
output1{test++} = 1##1 == (9##4 <11##4);
output1{test++} = 1##1 == (9##4 <=11##4);
output1{test++} = 0##1 == (9##4 >11##4);
output1{test++} = 0##1 == (9##4 >=11##4);
output1{test++} = 0##1 == (9##4 ==11##4);
output1{test++} = 1##1 == (9##4 !=11##4);
output1{test++} = 0##4 == (9##4 /11##4);
output1{test++} = 9##4 == (9##4 %11##4);
output1{test++} = 1##1 == (9##4 <12##4);
output1{test++} = 1##1 == (9##4 <=12##4);
output1{test++} = 0##1 == (9##4 >12##4);
output1{test++} = 0##1 == (9##4 >=12##4);
output1{test++} = 0##1 == (9##4 ==12##4);
output1{test++} = 1##1 == (9##4 !=12##4);
output1{test++} = 0##4 == (9##4 /12##4);
output1{test++} = 9##4 == (9##4 %12##4);
output1{test++} = 1##1 == (9##4 <13##4);
output1{test++} = 1##1 == (9##4 <=13##4);
output1{test++} = 0##1 == (9##4 >13##4);
output1{test++} = 0##1 == (9##4 >=13##4);
output1{test++} = 0##1 == (9##4 ==13##4);
output1{test++} = 1##1 == (9##4 !=13##4);
output1{test++} = 0##4 == (9##4 /13##4);
output1{test++} = 9##4 == (9##4 %13##4);
output1{test++} = 1##1 == (9##4 <14##4);
output1{test++} = 1##1 == (9##4 <=14##4);
output1{test++} = 0##1 == (9##4 >14##4);
output1{test++} = 0##1 == (9##4 >=14##4);
output1{test++} = 0##1 == (9##4 ==14##4);
output1{test++} = 1##1 == (9##4 !=14##4);
output1{test++} = 0##4 == (9##4 /14##4);
output1{test++} = 9##4 == (9##4 %14##4);
output1{test++} = 1##1 == (9##4 <15##4);
output1{test++} = 1##1 == (9##4 <=15##4);
output1{test++} = 0##1 == (9##4 >15##4);
output1{test++} = 0##1 == (9##4 >=15##4);
output1{test++} = 0##1 == (9##4 ==15##4);
output1{test++} = 1##1 == (9##4 !=15##4);
output1{test++} = 0##4 == (9##4 /15##4);
output1{test++} = 9##4 == (9##4 %15##4);
output1{test++} = 0##1 == (10##4 <0##4);
output1{test++} = 0##1 == (10##4 <=0##4);
output1{test++} = 1##1 == (10##4 >0##4);
output1{test++} = 1##1 == (10##4 >=0##4);
output1{test++} = 0##1 == (10##4 ==0##4);
output1{test++} = 1##1 == (10##4 !=0##4);
output1{test++} = 0##1 == (10##4 <1##4);
output1{test++} = 0##1 == (10##4 <=1##4);
output1{test++} = 1##1 == (10##4 >1##4);
output1{test++} = 1##1 == (10##4 >=1##4);
output1{test++} = 0##1 == (10##4 ==1##4);
output1{test++} = 1##1 == (10##4 !=1##4);
output1{test++} = 10##4 == (10##4 /1##4);
output1{test++} = 0##4 == (10##4 %1##4);
output1{test++} = 0##1 == (10##4 <2##4);
output1{test++} = 0##1 == (10##4 <=2##4);
output1{test++} = 1##1 == (10##4 >2##4);
output1{test++} = 1##1 == (10##4 >=2##4);
output1{test++} = 0##1 == (10##4 ==2##4);
output1{test++} = 1##1 == (10##4 !=2##4);
output1{test++} = 5##4 == (10##4 /2##4);
output1{test++} = 0##4 == (10##4 %2##4);
output1{test++} = 0##1 == (10##4 <3##4);
output1{test++} = 0##1 == (10##4 <=3##4);
output1{test++} = 1##1 == (10##4 >3##4);
output1{test++} = 1##1 == (10##4 >=3##4);
output1{test++} = 0##1 == (10##4 ==3##4);
output1{test++} = 1##1 == (10##4 !=3##4);
output1{test++} = 3##4 == (10##4 /3##4);
output1{test++} = 1##4 == (10##4 %3##4);
output1{test++} = 0##1 == (10##4 <4##4);
output1{test++} = 0##1 == (10##4 <=4##4);
output1{test++} = 1##1 == (10##4 >4##4);
output1{test++} = 1##1 == (10##4 >=4##4);
output1{test++} = 0##1 == (10##4 ==4##4);
output1{test++} = 1##1 == (10##4 !=4##4);
output1{test++} = 2##4 == (10##4 /4##4);
output1{test++} = 2##4 == (10##4 %4##4);
output1{test++} = 0##1 == (10##4 <5##4);
output1{test++} = 0##1 == (10##4 <=5##4);
output1{test++} = 1##1 == (10##4 >5##4);
output1{test++} = 1##1 == (10##4 >=5##4);
output1{test++} = 0##1 == (10##4 ==5##4);
output1{test++} = 1##1 == (10##4 !=5##4);
output1{test++} = 2##4 == (10##4 /5##4);
output1{test++} = 0##4 == (10##4 %5##4);
output1{test++} = 0##1 == (10##4 <6##4);
output1{test++} = 0##1 == (10##4 <=6##4);
output1{test++} = 1##1 == (10##4 >6##4);
output1{test++} = 1##1 == (10##4 >=6##4);
output1{test++} = 0##1 == (10##4 ==6##4);
output1{test++} = 1##1 == (10##4 !=6##4);
output1{test++} = 1##4 == (10##4 /6##4);
output1{test++} = 4##4 == (10##4 %6##4);
output1{test++} = 0##1 == (10##4 <7##4);
output1{test++} = 0##1 == (10##4 <=7##4);
output1{test++} = 1##1 == (10##4 >7##4);
output1{test++} = 1##1 == (10##4 >=7##4);
output1{test++} = 0##1 == (10##4 ==7##4);
output1{test++} = 1##1 == (10##4 !=7##4);
output1{test++} = 1##4 == (10##4 /7##4);
output1{test++} = 3##4 == (10##4 %7##4);
output1{test++} = 0##1 == (10##4 <8##4);
output1{test++} = 0##1 == (10##4 <=8##4);
output1{test++} = 1##1 == (10##4 >8##4);
output1{test++} = 1##1 == (10##4 >=8##4);
output1{test++} = 0##1 == (10##4 ==8##4);
output1{test++} = 1##1 == (10##4 !=8##4);
output1{test++} = 1##4 == (10##4 /8##4);
output1{test++} = 2##4 == (10##4 %8##4);
output1{test++} = 0##1 == (10##4 <9##4);
output1{test++} = 0##1 == (10##4 <=9##4);
output1{test++} = 1##1 == (10##4 >9##4);
output1{test++} = 1##1 == (10##4 >=9##4);
output1{test++} = 0##1 == (10##4 ==9##4);
output1{test++} = 1##1 == (10##4 !=9##4);
output1{test++} = 1##4 == (10##4 /9##4);
output1{test++} = 1##4 == (10##4 %9##4);
output1{test++} = 0##1 == (10##4 <10##4);
output1{test++} = 1##1 == (10##4 <=10##4);
output1{test++} = 0##1 == (10##4 >10##4);
output1{test++} = 1##1 == (10##4 >=10##4);
output1{test++} = 1##1 == (10##4 ==10##4);
output1{test++} = 0##1 == (10##4 !=10##4);
output1{test++} = 1##4 == (10##4 /10##4);
output1{test++} = 0##4 == (10##4 %10##4);
output1{test++} = 1##1 == (10##4 <11##4);
output1{test++} = 1##1 == (10##4 <=11##4);
output1{test++} = 0##1 == (10##4 >11##4);
output1{test++} = 0##1 == (10##4 >=11##4);
output1{test++} = 0##1 == (10##4 ==11##4);
output1{test++} = 1##1 == (10##4 !=11##4);
output1{test++} = 0##4 == (10##4 /11##4);
output1{test++} = 10##4 == (10##4 %11##4);
output1{test++} = 1##1 == (10##4 <12##4);
output1{test++} = 1##1 == (10##4 <=12##4);
output1{test++} = 0##1 == (10##4 >12##4);
output1{test++} = 0##1 == (10##4 >=12##4);
output1{test++} = 0##1 == (10##4 ==12##4);
output1{test++} = 1##1 == (10##4 !=12##4);
output1{test++} = 0##4 == (10##4 /12##4);
output1{test++} = 10##4 == (10##4 %12##4);
output1{test++} = 1##1 == (10##4 <13##4);
output1{test++} = 1##1 == (10##4 <=13##4);
output1{test++} = 0##1 == (10##4 >13##4);
output1{test++} = 0##1 == (10##4 >=13##4);
output1{test++} = 0##1 == (10##4 ==13##4);
output1{test++} = 1##1 == (10##4 !=13##4);
output1{test++} = 0##4 == (10##4 /13##4);
output1{test++} = 10##4 == (10##4 %13##4);
output1{test++} = 1##1 == (10##4 <14##4);
output1{test++} = 1##1 == (10##4 <=14##4);
output1{test++} = 0##1 == (10##4 >14##4);
output1{test++} = 0##1 == (10##4 >=14##4);
output1{test++} = 0##1 == (10##4 ==14##4);
output1{test++} = 1##1 == (10##4 !=14##4);
output1{test++} = 0##4 == (10##4 /14##4);
output1{test++} = 10##4 == (10##4 %14##4);
output1{test++} = 1##1 == (10##4 <15##4);
output1{test++} = 1##1 == (10##4 <=15##4);
output1{test++} = 0##1 == (10##4 >15##4);
output1{test++} = 0##1 == (10##4 >=15##4);
output1{test++} = 0##1 == (10##4 ==15##4);
output1{test++} = 1##1 == (10##4 !=15##4);
output1{test++} = 0##4 == (10##4 /15##4);
output1{test++} = 10##4 == (10##4 %15##4);
output1{test++} = 0##1 == (11##4 <0##4);
output1{test++} = 0##1 == (11##4 <=0##4);
output1{test++} = 1##1 == (11##4 >0##4);
output1{test++} = 1##1 == (11##4 >=0##4);
output1{test++} = 0##1 == (11##4 ==0##4);
output1{test++} = 1##1 == (11##4 !=0##4);
output1{test++} = 0##1 == (11##4 <1##4);
output1{test++} = 0##1 == (11##4 <=1##4);
output1{test++} = 1##1 == (11##4 >1##4);
output1{test++} = 1##1 == (11##4 >=1##4);
output1{test++} = 0##1 == (11##4 ==1##4);
output1{test++} = 1##1 == (11##4 !=1##4);
output1{test++} = 11##4 == (11##4 /1##4);
output1{test++} = 0##4 == (11##4 %1##4);
output1{test++} = 0##1 == (11##4 <2##4);
output1{test++} = 0##1 == (11##4 <=2##4);
output1{test++} = 1##1 == (11##4 >2##4);
output1{test++} = 1##1 == (11##4 >=2##4);
output1{test++} = 0##1 == (11##4 ==2##4);
output1{test++} = 1##1 == (11##4 !=2##4);
output1{test++} = 5##4 == (11##4 /2##4);
output1{test++} = 1##4 == (11##4 %2##4);
output1{test++} = 0##1 == (11##4 <3##4);
output1{test++} = 0##1 == (11##4 <=3##4);
output1{test++} = 1##1 == (11##4 >3##4);
output1{test++} = 1##1 == (11##4 >=3##4);
output1{test++} = 0##1 == (11##4 ==3##4);
output1{test++} = 1##1 == (11##4 !=3##4);
output1{test++} = 3##4 == (11##4 /3##4);
output1{test++} = 2##4 == (11##4 %3##4);
output1{test++} = 0##1 == (11##4 <4##4);
output1{test++} = 0##1 == (11##4 <=4##4);
output1{test++} = 1##1 == (11##4 >4##4);
output1{test++} = 1##1 == (11##4 >=4##4);
output1{test++} = 0##1 == (11##4 ==4##4);
output1{test++} = 1##1 == (11##4 !=4##4);
output1{test++} = 2##4 == (11##4 /4##4);
output1{test++} = 3##4 == (11##4 %4##4);
output1{test++} = 0##1 == (11##4 <5##4);
output1{test++} = 0##1 == (11##4 <=5##4);
output1{test++} = 1##1 == (11##4 >5##4);
output1{test++} = 1##1 == (11##4 >=5##4);
output1{test++} = 0##1 == (11##4 ==5##4);
output1{test++} = 1##1 == (11##4 !=5##4);
output1{test++} = 2##4 == (11##4 /5##4);
output1{test++} = 1##4 == (11##4 %5##4);
output1{test++} = 0##1 == (11##4 <6##4);
output1{test++} = 0##1 == (11##4 <=6##4);
output1{test++} = 1##1 == (11##4 >6##4);
output1{test++} = 1##1 == (11##4 >=6##4);
output1{test++} = 0##1 == (11##4 ==6##4);
output1{test++} = 1##1 == (11##4 !=6##4);
output1{test++} = 1##4 == (11##4 /6##4);
output1{test++} = 5##4 == (11##4 %6##4);
output1{test++} = 0##1 == (11##4 <7##4);
output1{test++} = 0##1 == (11##4 <=7##4);
output1{test++} = 1##1 == (11##4 >7##4);
output1{test++} = 1##1 == (11##4 >=7##4);
output1{test++} = 0##1 == (11##4 ==7##4);
output1{test++} = 1##1 == (11##4 !=7##4);
output1{test++} = 1##4 == (11##4 /7##4);
output1{test++} = 4##4 == (11##4 %7##4);
output1{test++} = 0##1 == (11##4 <8##4);
output1{test++} = 0##1 == (11##4 <=8##4);
output1{test++} = 1##1 == (11##4 >8##4);
output1{test++} = 1##1 == (11##4 >=8##4);
output1{test++} = 0##1 == (11##4 ==8##4);
output1{test++} = 1##1 == (11##4 !=8##4);
output1{test++} = 1##4 == (11##4 /8##4);
output1{test++} = 3##4 == (11##4 %8##4);
output1{test++} = 0##1 == (11##4 <9##4);
output1{test++} = 0##1 == (11##4 <=9##4);
output1{test++} = 1##1 == (11##4 >9##4);
output1{test++} = 1##1 == (11##4 >=9##4);
output1{test++} = 0##1 == (11##4 ==9##4);
output1{test++} = 1##1 == (11##4 !=9##4);
output1{test++} = 1##4 == (11##4 /9##4);
output1{test++} = 2##4 == (11##4 %9##4);
output1{test++} = 0##1 == (11##4 <10##4);
output1{test++} = 0##1 == (11##4 <=10##4);
output1{test++} = 1##1 == (11##4 >10##4);
output1{test++} = 1##1 == (11##4 >=10##4);
output1{test++} = 0##1 == (11##4 ==10##4);
output1{test++} = 1##1 == (11##4 !=10##4);
output1{test++} = 1##4 == (11##4 /10##4);
output1{test++} = 1##4 == (11##4 %10##4);
output1{test++} = 0##1 == (11##4 <11##4);
output1{test++} = 1##1 == (11##4 <=11##4);
output1{test++} = 0##1 == (11##4 >11##4);
output1{test++} = 1##1 == (11##4 >=11##4);
output1{test++} = 1##1 == (11##4 ==11##4);
output1{test++} = 0##1 == (11##4 !=11##4);
output1{test++} = 1##4 == (11##4 /11##4);
output1{test++} = 0##4 == (11##4 %11##4);
output1{test++} = 1##1 == (11##4 <12##4);
output1{test++} = 1##1 == (11##4 <=12##4);
output1{test++} = 0##1 == (11##4 >12##4);
output1{test++} = 0##1 == (11##4 >=12##4);
output1{test++} = 0##1 == (11##4 ==12##4);
output1{test++} = 1##1 == (11##4 !=12##4);
output1{test++} = 0##4 == (11##4 /12##4);
output1{test++} = 11##4 == (11##4 %12##4);
output1{test++} = 1##1 == (11##4 <13##4);
output1{test++} = 1##1 == (11##4 <=13##4);
output1{test++} = 0##1 == (11##4 >13##4);
output1{test++} = 0##1 == (11##4 >=13##4);
output1{test++} = 0##1 == (11##4 ==13##4);
output1{test++} = 1##1 == (11##4 !=13##4);
output1{test++} = 0##4 == (11##4 /13##4);
output1{test++} = 11##4 == (11##4 %13##4);
output1{test++} = 1##1 == (11##4 <14##4);
output1{test++} = 1##1 == (11##4 <=14##4);
output1{test++} = 0##1 == (11##4 >14##4);
output1{test++} = 0##1 == (11##4 >=14##4);
output1{test++} = 0##1 == (11##4 ==14##4);
output1{test++} = 1##1 == (11##4 !=14##4);
output1{test++} = 0##4 == (11##4 /14##4);
output1{test++} = 11##4 == (11##4 %14##4);
output1{test++} = 1##1 == (11##4 <15##4);
output1{test++} = 1##1 == (11##4 <=15##4);
output1{test++} = 0##1 == (11##4 >15##4);
output1{test++} = 0##1 == (11##4 >=15##4);
output1{test++} = 0##1 == (11##4 ==15##4);
output1{test++} = 1##1 == (11##4 !=15##4);
output1{test++} = 0##4 == (11##4 /15##4);
output1{test++} = 11##4 == (11##4 %15##4);
output1{test++} = 0##1 == (12##4 <0##4);
output1{test++} = 0##1 == (12##4 <=0##4);
output1{test++} = 1##1 == (12##4 >0##4);
output1{test++} = 1##1 == (12##4 >=0##4);
output1{test++} = 0##1 == (12##4 ==0##4);
output1{test++} = 1##1 == (12##4 !=0##4);
output1{test++} = 0##1 == (12##4 <1##4);
output1{test++} = 0##1 == (12##4 <=1##4);
output1{test++} = 1##1 == (12##4 >1##4);
output1{test++} = 1##1 == (12##4 >=1##4);
output1{test++} = 0##1 == (12##4 ==1##4);
output1{test++} = 1##1 == (12##4 !=1##4);
output1{test++} = 12##4 == (12##4 /1##4);
output1{test++} = 0##4 == (12##4 %1##4);
output1{test++} = 0##1 == (12##4 <2##4);
output1{test++} = 0##1 == (12##4 <=2##4);
output1{test++} = 1##1 == (12##4 >2##4);
output1{test++} = 1##1 == (12##4 >=2##4);
output1{test++} = 0##1 == (12##4 ==2##4);
output1{test++} = 1##1 == (12##4 !=2##4);
output1{test++} = 6##4 == (12##4 /2##4);
output1{test++} = 0##4 == (12##4 %2##4);
output1{test++} = 0##1 == (12##4 <3##4);
output1{test++} = 0##1 == (12##4 <=3##4);
output1{test++} = 1##1 == (12##4 >3##4);
output1{test++} = 1##1 == (12##4 >=3##4);
output1{test++} = 0##1 == (12##4 ==3##4);
output1{test++} = 1##1 == (12##4 !=3##4);
output1{test++} = 4##4 == (12##4 /3##4);
output1{test++} = 0##4 == (12##4 %3##4);
output1{test++} = 0##1 == (12##4 <4##4);
output1{test++} = 0##1 == (12##4 <=4##4);
output1{test++} = 1##1 == (12##4 >4##4);
output1{test++} = 1##1 == (12##4 >=4##4);
output1{test++} = 0##1 == (12##4 ==4##4);
output1{test++} = 1##1 == (12##4 !=4##4);
output1{test++} = 3##4 == (12##4 /4##4);
output1{test++} = 0##4 == (12##4 %4##4);
output1{test++} = 0##1 == (12##4 <5##4);
output1{test++} = 0##1 == (12##4 <=5##4);
output1{test++} = 1##1 == (12##4 >5##4);
output1{test++} = 1##1 == (12##4 >=5##4);
output1{test++} = 0##1 == (12##4 ==5##4);
output1{test++} = 1##1 == (12##4 !=5##4);
output1{test++} = 2##4 == (12##4 /5##4);
output1{test++} = 2##4 == (12##4 %5##4);
output1{test++} = 0##1 == (12##4 <6##4);
output1{test++} = 0##1 == (12##4 <=6##4);
output1{test++} = 1##1 == (12##4 >6##4);
output1{test++} = 1##1 == (12##4 >=6##4);
output1{test++} = 0##1 == (12##4 ==6##4);
output1{test++} = 1##1 == (12##4 !=6##4);
output1{test++} = 2##4 == (12##4 /6##4);
output1{test++} = 0##4 == (12##4 %6##4);
output1{test++} = 0##1 == (12##4 <7##4);
output1{test++} = 0##1 == (12##4 <=7##4);
output1{test++} = 1##1 == (12##4 >7##4);
output1{test++} = 1##1 == (12##4 >=7##4);
output1{test++} = 0##1 == (12##4 ==7##4);
output1{test++} = 1##1 == (12##4 !=7##4);
output1{test++} = 1##4 == (12##4 /7##4);
output1{test++} = 5##4 == (12##4 %7##4);
output1{test++} = 0##1 == (12##4 <8##4);
output1{test++} = 0##1 == (12##4 <=8##4);
output1{test++} = 1##1 == (12##4 >8##4);
output1{test++} = 1##1 == (12##4 >=8##4);
output1{test++} = 0##1 == (12##4 ==8##4);
output1{test++} = 1##1 == (12##4 !=8##4);
output1{test++} = 1##4 == (12##4 /8##4);
output1{test++} = 4##4 == (12##4 %8##4);
output1{test++} = 0##1 == (12##4 <9##4);
output1{test++} = 0##1 == (12##4 <=9##4);
output1{test++} = 1##1 == (12##4 >9##4);
output1{test++} = 1##1 == (12##4 >=9##4);
output1{test++} = 0##1 == (12##4 ==9##4);
output1{test++} = 1##1 == (12##4 !=9##4);
output1{test++} = 1##4 == (12##4 /9##4);
output1{test++} = 3##4 == (12##4 %9##4);
output1{test++} = 0##1 == (12##4 <10##4);
output1{test++} = 0##1 == (12##4 <=10##4);
output1{test++} = 1##1 == (12##4 >10##4);
output1{test++} = 1##1 == (12##4 >=10##4);
output1{test++} = 0##1 == (12##4 ==10##4);
output1{test++} = 1##1 == (12##4 !=10##4);
output1{test++} = 1##4 == (12##4 /10##4);
output1{test++} = 2##4 == (12##4 %10##4);
output1{test++} = 0##1 == (12##4 <11##4);
output1{test++} = 0##1 == (12##4 <=11##4);
output1{test++} = 1##1 == (12##4 >11##4);
output1{test++} = 1##1 == (12##4 >=11##4);
output1{test++} = 0##1 == (12##4 ==11##4);
output1{test++} = 1##1 == (12##4 !=11##4);
output1{test++} = 1##4 == (12##4 /11##4);
output1{test++} = 1##4 == (12##4 %11##4);
output1{test++} = 0##1 == (12##4 <12##4);
output1{test++} = 1##1 == (12##4 <=12##4);
output1{test++} = 0##1 == (12##4 >12##4);
output1{test++} = 1##1 == (12##4 >=12##4);
output1{test++} = 1##1 == (12##4 ==12##4);
output1{test++} = 0##1 == (12##4 !=12##4);
output1{test++} = 1##4 == (12##4 /12##4);
output1{test++} = 0##4 == (12##4 %12##4);
output1{test++} = 1##1 == (12##4 <13##4);
output1{test++} = 1##1 == (12##4 <=13##4);
output1{test++} = 0##1 == (12##4 >13##4);
output1{test++} = 0##1 == (12##4 >=13##4);
output1{test++} = 0##1 == (12##4 ==13##4);
output1{test++} = 1##1 == (12##4 !=13##4);
output1{test++} = 0##4 == (12##4 /13##4);
output1{test++} = 12##4 == (12##4 %13##4);
output1{test++} = 1##1 == (12##4 <14##4);
output1{test++} = 1##1 == (12##4 <=14##4);
output1{test++} = 0##1 == (12##4 >14##4);
output1{test++} = 0##1 == (12##4 >=14##4);
output1{test++} = 0##1 == (12##4 ==14##4);
output1{test++} = 1##1 == (12##4 !=14##4);
output1{test++} = 0##4 == (12##4 /14##4);
output1{test++} = 12##4 == (12##4 %14##4);
output1{test++} = 1##1 == (12##4 <15##4);
output1{test++} = 1##1 == (12##4 <=15##4);
output1{test++} = 0##1 == (12##4 >15##4);
output1{test++} = 0##1 == (12##4 >=15##4);
output1{test++} = 0##1 == (12##4 ==15##4);
output1{test++} = 1##1 == (12##4 !=15##4);
output1{test++} = 0##4 == (12##4 /15##4);
output1{test++} = 12##4 == (12##4 %15##4);
output1{test++} = 0##1 == (13##4 <0##4);
output1{test++} = 0##1 == (13##4 <=0##4);
output1{test++} = 1##1 == (13##4 >0##4);
output1{test++} = 1##1 == (13##4 >=0##4);
output1{test++} = 0##1 == (13##4 ==0##4);
output1{test++} = 1##1 == (13##4 !=0##4);
output1{test++} = 0##1 == (13##4 <1##4);
output1{test++} = 0##1 == (13##4 <=1##4);
output1{test++} = 1##1 == (13##4 >1##4);
output1{test++} = 1##1 == (13##4 >=1##4);
output1{test++} = 0##1 == (13##4 ==1##4);
output1{test++} = 1##1 == (13##4 !=1##4);
output1{test++} = 13##4 == (13##4 /1##4);
output1{test++} = 0##4 == (13##4 %1##4);
output1{test++} = 0##1 == (13##4 <2##4);
output1{test++} = 0##1 == (13##4 <=2##4);
output1{test++} = 1##1 == (13##4 >2##4);
output1{test++} = 1##1 == (13##4 >=2##4);
output1{test++} = 0##1 == (13##4 ==2##4);
output1{test++} = 1##1 == (13##4 !=2##4);
output1{test++} = 6##4 == (13##4 /2##4);
output1{test++} = 1##4 == (13##4 %2##4);
output1{test++} = 0##1 == (13##4 <3##4);
output1{test++} = 0##1 == (13##4 <=3##4);
output1{test++} = 1##1 == (13##4 >3##4);
output1{test++} = 1##1 == (13##4 >=3##4);
output1{test++} = 0##1 == (13##4 ==3##4);
output1{test++} = 1##1 == (13##4 !=3##4);
output1{test++} = 4##4 == (13##4 /3##4);
output1{test++} = 1##4 == (13##4 %3##4);
output1{test++} = 0##1 == (13##4 <4##4);
output1{test++} = 0##1 == (13##4 <=4##4);
output1{test++} = 1##1 == (13##4 >4##4);
output1{test++} = 1##1 == (13##4 >=4##4);
output1{test++} = 0##1 == (13##4 ==4##4);
output1{test++} = 1##1 == (13##4 !=4##4);
output1{test++} = 3##4 == (13##4 /4##4);
output1{test++} = 1##4 == (13##4 %4##4);
output1{test++} = 0##1 == (13##4 <5##4);
output1{test++} = 0##1 == (13##4 <=5##4);
output1{test++} = 1##1 == (13##4 >5##4);
output1{test++} = 1##1 == (13##4 >=5##4);
output1{test++} = 0##1 == (13##4 ==5##4);
output1{test++} = 1##1 == (13##4 !=5##4);
output1{test++} = 2##4 == (13##4 /5##4);
output1{test++} = 3##4 == (13##4 %5##4);
output1{test++} = 0##1 == (13##4 <6##4);
output1{test++} = 0##1 == (13##4 <=6##4);
output1{test++} = 1##1 == (13##4 >6##4);
output1{test++} = 1##1 == (13##4 >=6##4);
output1{test++} = 0##1 == (13##4 ==6##4);
output1{test++} = 1##1 == (13##4 !=6##4);
output1{test++} = 2##4 == (13##4 /6##4);
output1{test++} = 1##4 == (13##4 %6##4);
output1{test++} = 0##1 == (13##4 <7##4);
output1{test++} = 0##1 == (13##4 <=7##4);
output1{test++} = 1##1 == (13##4 >7##4);
output1{test++} = 1##1 == (13##4 >=7##4);
output1{test++} = 0##1 == (13##4 ==7##4);
output1{test++} = 1##1 == (13##4 !=7##4);
output1{test++} = 1##4 == (13##4 /7##4);
output1{test++} = 6##4 == (13##4 %7##4);
output1{test++} = 0##1 == (13##4 <8##4);
output1{test++} = 0##1 == (13##4 <=8##4);
output1{test++} = 1##1 == (13##4 >8##4);
output1{test++} = 1##1 == (13##4 >=8##4);
output1{test++} = 0##1 == (13##4 ==8##4);
output1{test++} = 1##1 == (13##4 !=8##4);
output1{test++} = 1##4 == (13##4 /8##4);
output1{test++} = 5##4 == (13##4 %8##4);
output1{test++} = 0##1 == (13##4 <9##4);
output1{test++} = 0##1 == (13##4 <=9##4);
output1{test++} = 1##1 == (13##4 >9##4);
output1{test++} = 1##1 == (13##4 >=9##4);
output1{test++} = 0##1 == (13##4 ==9##4);
output1{test++} = 1##1 == (13##4 !=9##4);
output1{test++} = 1##4 == (13##4 /9##4);
output1{test++} = 4##4 == (13##4 %9##4);
output1{test++} = 0##1 == (13##4 <10##4);
output1{test++} = 0##1 == (13##4 <=10##4);
output1{test++} = 1##1 == (13##4 >10##4);
output1{test++} = 1##1 == (13##4 >=10##4);
output1{test++} = 0##1 == (13##4 ==10##4);
output1{test++} = 1##1 == (13##4 !=10##4);
output1{test++} = 1##4 == (13##4 /10##4);
output1{test++} = 3##4 == (13##4 %10##4);
output1{test++} = 0##1 == (13##4 <11##4);
output1{test++} = 0##1 == (13##4 <=11##4);
output1{test++} = 1##1 == (13##4 >11##4);
output1{test++} = 1##1 == (13##4 >=11##4);
output1{test++} = 0##1 == (13##4 ==11##4);
output1{test++} = 1##1 == (13##4 !=11##4);
output1{test++} = 1##4 == (13##4 /11##4);
output1{test++} = 2##4 == (13##4 %11##4);
output1{test++} = 0##1 == (13##4 <12##4);
output1{test++} = 0##1 == (13##4 <=12##4);
output1{test++} = 1##1 == (13##4 >12##4);
output1{test++} = 1##1 == (13##4 >=12##4);
output1{test++} = 0##1 == (13##4 ==12##4);
output1{test++} = 1##1 == (13##4 !=12##4);
output1{test++} = 1##4 == (13##4 /12##4);
output1{test++} = 1##4 == (13##4 %12##4);
output1{test++} = 0##1 == (13##4 <13##4);
output1{test++} = 1##1 == (13##4 <=13##4);
output1{test++} = 0##1 == (13##4 >13##4);
output1{test++} = 1##1 == (13##4 >=13##4);
output1{test++} = 1##1 == (13##4 ==13##4);
output1{test++} = 0##1 == (13##4 !=13##4);
output1{test++} = 1##4 == (13##4 /13##4);
output1{test++} = 0##4 == (13##4 %13##4);
output1{test++} = 1##1 == (13##4 <14##4);
output1{test++} = 1##1 == (13##4 <=14##4);
output1{test++} = 0##1 == (13##4 >14##4);
output1{test++} = 0##1 == (13##4 >=14##4);
output1{test++} = 0##1 == (13##4 ==14##4);
output1{test++} = 1##1 == (13##4 !=14##4);
output1{test++} = 0##4 == (13##4 /14##4);
output1{test++} = 13##4 == (13##4 %14##4);
output1{test++} = 1##1 == (13##4 <15##4);
output1{test++} = 1##1 == (13##4 <=15##4);
output1{test++} = 0##1 == (13##4 >15##4);
output1{test++} = 0##1 == (13##4 >=15##4);
output1{test++} = 0##1 == (13##4 ==15##4);
output1{test++} = 1##1 == (13##4 !=15##4);
output1{test++} = 0##4 == (13##4 /15##4);
output1{test++} = 13##4 == (13##4 %15##4);
output1{test++} = 0##1 == (14##4 <0##4);
output1{test++} = 0##1 == (14##4 <=0##4);
output1{test++} = 1##1 == (14##4 >0##4);
output1{test++} = 1##1 == (14##4 >=0##4);
output1{test++} = 0##1 == (14##4 ==0##4);
output1{test++} = 1##1 == (14##4 !=0##4);
output1{test++} = 0##1 == (14##4 <1##4);
output1{test++} = 0##1 == (14##4 <=1##4);
output1{test++} = 1##1 == (14##4 >1##4);
output1{test++} = 1##1 == (14##4 >=1##4);
output1{test++} = 0##1 == (14##4 ==1##4);
output1{test++} = 1##1 == (14##4 !=1##4);
output1{test++} = 14##4 == (14##4 /1##4);
output1{test++} = 0##4 == (14##4 %1##4);
output1{test++} = 0##1 == (14##4 <2##4);
output1{test++} = 0##1 == (14##4 <=2##4);
output1{test++} = 1##1 == (14##4 >2##4);
output1{test++} = 1##1 == (14##4 >=2##4);
output1{test++} = 0##1 == (14##4 ==2##4);
output1{test++} = 1##1 == (14##4 !=2##4);
output1{test++} = 7##4 == (14##4 /2##4);
output1{test++} = 0##4 == (14##4 %2##4);
output1{test++} = 0##1 == (14##4 <3##4);
output1{test++} = 0##1 == (14##4 <=3##4);
output1{test++} = 1##1 == (14##4 >3##4);
output1{test++} = 1##1 == (14##4 >=3##4);
output1{test++} = 0##1 == (14##4 ==3##4);
output1{test++} = 1##1 == (14##4 !=3##4);
output1{test++} = 4##4 == (14##4 /3##4);
output1{test++} = 2##4 == (14##4 %3##4);
output1{test++} = 0##1 == (14##4 <4##4);
output1{test++} = 0##1 == (14##4 <=4##4);
output1{test++} = 1##1 == (14##4 >4##4);
output1{test++} = 1##1 == (14##4 >=4##4);
output1{test++} = 0##1 == (14##4 ==4##4);
output1{test++} = 1##1 == (14##4 !=4##4);
output1{test++} = 3##4 == (14##4 /4##4);
output1{test++} = 2##4 == (14##4 %4##4);
output1{test++} = 0##1 == (14##4 <5##4);
output1{test++} = 0##1 == (14##4 <=5##4);
output1{test++} = 1##1 == (14##4 >5##4);
output1{test++} = 1##1 == (14##4 >=5##4);
output1{test++} = 0##1 == (14##4 ==5##4);
output1{test++} = 1##1 == (14##4 !=5##4);
output1{test++} = 2##4 == (14##4 /5##4);
output1{test++} = 4##4 == (14##4 %5##4);
output1{test++} = 0##1 == (14##4 <6##4);
output1{test++} = 0##1 == (14##4 <=6##4);
output1{test++} = 1##1 == (14##4 >6##4);
output1{test++} = 1##1 == (14##4 >=6##4);
output1{test++} = 0##1 == (14##4 ==6##4);
output1{test++} = 1##1 == (14##4 !=6##4);
output1{test++} = 2##4 == (14##4 /6##4);
output1{test++} = 2##4 == (14##4 %6##4);
output1{test++} = 0##1 == (14##4 <7##4);
output1{test++} = 0##1 == (14##4 <=7##4);
output1{test++} = 1##1 == (14##4 >7##4);
output1{test++} = 1##1 == (14##4 >=7##4);
output1{test++} = 0##1 == (14##4 ==7##4);
output1{test++} = 1##1 == (14##4 !=7##4);
output1{test++} = 2##4 == (14##4 /7##4);
output1{test++} = 0##4 == (14##4 %7##4);
output1{test++} = 0##1 == (14##4 <8##4);
output1{test++} = 0##1 == (14##4 <=8##4);
output1{test++} = 1##1 == (14##4 >8##4);
output1{test++} = 1##1 == (14##4 >=8##4);
output1{test++} = 0##1 == (14##4 ==8##4);
output1{test++} = 1##1 == (14##4 !=8##4);
output1{test++} = 1##4 == (14##4 /8##4);
output1{test++} = 6##4 == (14##4 %8##4);
output1{test++} = 0##1 == (14##4 <9##4);
output1{test++} = 0##1 == (14##4 <=9##4);
output1{test++} = 1##1 == (14##4 >9##4);
output1{test++} = 1##1 == (14##4 >=9##4);
output1{test++} = 0##1 == (14##4 ==9##4);
output1{test++} = 1##1 == (14##4 !=9##4);
output1{test++} = 1##4 == (14##4 /9##4);
output1{test++} = 5##4 == (14##4 %9##4);
output1{test++} = 0##1 == (14##4 <10##4);
output1{test++} = 0##1 == (14##4 <=10##4);
output1{test++} = 1##1 == (14##4 >10##4);
output1{test++} = 1##1 == (14##4 >=10##4);
output1{test++} = 0##1 == (14##4 ==10##4);
output1{test++} = 1##1 == (14##4 !=10##4);
output1{test++} = 1##4 == (14##4 /10##4);
output1{test++} = 4##4 == (14##4 %10##4);
output1{test++} = 0##1 == (14##4 <11##4);
output1{test++} = 0##1 == (14##4 <=11##4);
output1{test++} = 1##1 == (14##4 >11##4);
output1{test++} = 1##1 == (14##4 >=11##4);
output1{test++} = 0##1 == (14##4 ==11##4);
output1{test++} = 1##1 == (14##4 !=11##4);
output1{test++} = 1##4 == (14##4 /11##4);
output1{test++} = 3##4 == (14##4 %11##4);
output1{test++} = 0##1 == (14##4 <12##4);
output1{test++} = 0##1 == (14##4 <=12##4);
output1{test++} = 1##1 == (14##4 >12##4);
output1{test++} = 1##1 == (14##4 >=12##4);
output1{test++} = 0##1 == (14##4 ==12##4);
output1{test++} = 1##1 == (14##4 !=12##4);
output1{test++} = 1##4 == (14##4 /12##4);
output1{test++} = 2##4 == (14##4 %12##4);
output1{test++} = 0##1 == (14##4 <13##4);
output1{test++} = 0##1 == (14##4 <=13##4);
output1{test++} = 1##1 == (14##4 >13##4);
output1{test++} = 1##1 == (14##4 >=13##4);
output1{test++} = 0##1 == (14##4 ==13##4);
output1{test++} = 1##1 == (14##4 !=13##4);
output1{test++} = 1##4 == (14##4 /13##4);
output1{test++} = 1##4 == (14##4 %13##4);
output1{test++} = 0##1 == (14##4 <14##4);
output1{test++} = 1##1 == (14##4 <=14##4);
output1{test++} = 0##1 == (14##4 >14##4);
output1{test++} = 1##1 == (14##4 >=14##4);
output1{test++} = 1##1 == (14##4 ==14##4);
output1{test++} = 0##1 == (14##4 !=14##4);
output1{test++} = 1##4 == (14##4 /14##4);
output1{test++} = 0##4 == (14##4 %14##4);
output1{test++} = 1##1 == (14##4 <15##4);
output1{test++} = 1##1 == (14##4 <=15##4);
output1{test++} = 0##1 == (14##4 >15##4);
output1{test++} = 0##1 == (14##4 >=15##4);
output1{test++} = 0##1 == (14##4 ==15##4);
output1{test++} = 1##1 == (14##4 !=15##4);
output1{test++} = 0##4 == (14##4 /15##4);
output1{test++} = 14##4 == (14##4 %15##4);
output1{test++} = 0##1 == (15##4 <0##4);
output1{test++} = 0##1 == (15##4 <=0##4);
output1{test++} = 1##1 == (15##4 >0##4);
output1{test++} = 1##1 == (15##4 >=0##4);
output1{test++} = 0##1 == (15##4 ==0##4);
output1{test++} = 1##1 == (15##4 !=0##4);
output1{test++} = 0##1 == (15##4 <1##4);
output1{test++} = 0##1 == (15##4 <=1##4);
output1{test++} = 1##1 == (15##4 >1##4);
output1{test++} = 1##1 == (15##4 >=1##4);
output1{test++} = 0##1 == (15##4 ==1##4);
output1{test++} = 1##1 == (15##4 !=1##4);
output1{test++} = 15##4 == (15##4 /1##4);
output1{test++} = 0##4 == (15##4 %1##4);
output1{test++} = 0##1 == (15##4 <2##4);
output1{test++} = 0##1 == (15##4 <=2##4);
output1{test++} = 1##1 == (15##4 >2##4);
output1{test++} = 1##1 == (15##4 >=2##4);
output1{test++} = 0##1 == (15##4 ==2##4);
output1{test++} = 1##1 == (15##4 !=2##4);
output1{test++} = 7##4 == (15##4 /2##4);
output1{test++} = 1##4 == (15##4 %2##4);
output1{test++} = 0##1 == (15##4 <3##4);
output1{test++} = 0##1 == (15##4 <=3##4);
output1{test++} = 1##1 == (15##4 >3##4);
output1{test++} = 1##1 == (15##4 >=3##4);
output1{test++} = 0##1 == (15##4 ==3##4);
output1{test++} = 1##1 == (15##4 !=3##4);
output1{test++} = 5##4 == (15##4 /3##4);
output1{test++} = 0##4 == (15##4 %3##4);
output1{test++} = 0##1 == (15##4 <4##4);
output1{test++} = 0##1 == (15##4 <=4##4);
output1{test++} = 1##1 == (15##4 >4##4);
output1{test++} = 1##1 == (15##4 >=4##4);
output1{test++} = 0##1 == (15##4 ==4##4);
output1{test++} = 1##1 == (15##4 !=4##4);
output1{test++} = 3##4 == (15##4 /4##4);
output1{test++} = 3##4 == (15##4 %4##4);
output1{test++} = 0##1 == (15##4 <5##4);
output1{test++} = 0##1 == (15##4 <=5##4);
output1{test++} = 1##1 == (15##4 >5##4);
output1{test++} = 1##1 == (15##4 >=5##4);
output1{test++} = 0##1 == (15##4 ==5##4);
output1{test++} = 1##1 == (15##4 !=5##4);
output1{test++} = 3##4 == (15##4 /5##4);
output1{test++} = 0##4 == (15##4 %5##4);
output1{test++} = 0##1 == (15##4 <6##4);
output1{test++} = 0##1 == (15##4 <=6##4);
output1{test++} = 1##1 == (15##4 >6##4);
output1{test++} = 1##1 == (15##4 >=6##4);
output1{test++} = 0##1 == (15##4 ==6##4);
output1{test++} = 1##1 == (15##4 !=6##4);
output1{test++} = 2##4 == (15##4 /6##4);
output1{test++} = 3##4 == (15##4 %6##4);
output1{test++} = 0##1 == (15##4 <7##4);
output1{test++} = 0##1 == (15##4 <=7##4);
output1{test++} = 1##1 == (15##4 >7##4);
output1{test++} = 1##1 == (15##4 >=7##4);
output1{test++} = 0##1 == (15##4 ==7##4);
output1{test++} = 1##1 == (15##4 !=7##4);
output1{test++} = 2##4 == (15##4 /7##4);
output1{test++} = 1##4 == (15##4 %7##4);
output1{test++} = 0##1 == (15##4 <8##4);
output1{test++} = 0##1 == (15##4 <=8##4);
output1{test++} = 1##1 == (15##4 >8##4);
output1{test++} = 1##1 == (15##4 >=8##4);
output1{test++} = 0##1 == (15##4 ==8##4);
output1{test++} = 1##1 == (15##4 !=8##4);
output1{test++} = 1##4 == (15##4 /8##4);
output1{test++} = 7##4 == (15##4 %8##4);
output1{test++} = 0##1 == (15##4 <9##4);
output1{test++} = 0##1 == (15##4 <=9##4);
output1{test++} = 1##1 == (15##4 >9##4);
output1{test++} = 1##1 == (15##4 >=9##4);
output1{test++} = 0##1 == (15##4 ==9##4);
output1{test++} = 1##1 == (15##4 !=9##4);
output1{test++} = 1##4 == (15##4 /9##4);
output1{test++} = 6##4 == (15##4 %9##4);
output1{test++} = 0##1 == (15##4 <10##4);
output1{test++} = 0##1 == (15##4 <=10##4);
output1{test++} = 1##1 == (15##4 >10##4);
output1{test++} = 1##1 == (15##4 >=10##4);
output1{test++} = 0##1 == (15##4 ==10##4);
output1{test++} = 1##1 == (15##4 !=10##4);
output1{test++} = 1##4 == (15##4 /10##4);
output1{test++} = 5##4 == (15##4 %10##4);
output1{test++} = 0##1 == (15##4 <11##4);
output1{test++} = 0##1 == (15##4 <=11##4);
output1{test++} = 1##1 == (15##4 >11##4);
output1{test++} = 1##1 == (15##4 >=11##4);
output1{test++} = 0##1 == (15##4 ==11##4);
output1{test++} = 1##1 == (15##4 !=11##4);
output1{test++} = 1##4 == (15##4 /11##4);
output1{test++} = 4##4 == (15##4 %11##4);
output1{test++} = 0##1 == (15##4 <12##4);
output1{test++} = 0##1 == (15##4 <=12##4);
output1{test++} = 1##1 == (15##4 >12##4);
output1{test++} = 1##1 == (15##4 >=12##4);
output1{test++} = 0##1 == (15##4 ==12##4);
output1{test++} = 1##1 == (15##4 !=12##4);
output1{test++} = 1##4 == (15##4 /12##4);
output1{test++} = 3##4 == (15##4 %12##4);
output1{test++} = 0##1 == (15##4 <13##4);
output1{test++} = 0##1 == (15##4 <=13##4);
output1{test++} = 1##1 == (15##4 >13##4);
output1{test++} = 1##1 == (15##4 >=13##4);
output1{test++} = 0##1 == (15##4 ==13##4);
output1{test++} = 1##1 == (15##4 !=13##4);
output1{test++} = 1##4 == (15##4 /13##4);
output1{test++} = 2##4 == (15##4 %13##4);
output1{test++} = 0##1 == (15##4 <14##4);
output1{test++} = 0##1 == (15##4 <=14##4);
output1{test++} = 1##1 == (15##4 >14##4);
output1{test++} = 1##1 == (15##4 >=14##4);
output1{test++} = 0##1 == (15##4 ==14##4);
output1{test++} = 1##1 == (15##4 !=14##4);
output1{test++} = 1##4 == (15##4 /14##4);
output1{test++} = 1##4 == (15##4 %14##4);
output1{test++} = 0##1 == (15##4 <15##4);
output1{test++} = 1##1 == (15##4 <=15##4);
output1{test++} = 0##1 == (15##4 >15##4);
output1{test++} = 1##1 == (15##4 >=15##4);
output1{test++} = 1##1 == (15##4 ==15##4);
output1{test++} = 0##1 == (15##4 !=15##4);
output1{test++} = 1##4 == (15##4 /15##4);
output1{test++} = 0##4 == (15##4 %15##4);



val = 9;
makeUnknown(val);

int t001=10,t002=7,t008=3,t007 = val, t006= val-1;

output1{test++} = 10 == t001;
output1{test++} = 7 == t002;
output1{test++} = 3 == t008;
output1{test++} = 9 == t007;
output1{test++} = 8 == t006;


makeUnknown((val + 10+ val-val-10*10/10)%1000);

output1{test++} = 9 == val;

val = makeUnknown((val+100#32-100#32*100#32/100#32)%10000#32+1#32);
output1{test++} = 10 == val;
val = makeUnknown((val+72#32-72#32*72#32/72#32)%10000#32+1#32);
output1{test++} = 11 == val;
val = makeUnknown((val+7#32-7#32*7#32/7#32)%10000#32+1#32);
output1{test++} = 12 == val;
val = makeUnknown((val+70#32-70#32*70#32/70#32)%10000#32+1#32);
output1{test++} = 13 == val;
val = makeUnknown((val+15#32-15#32*15#32/15#32)%10000#32+1#32);
output1{test++} = 14 == val;
val = makeUnknown((val+7#32-7#32*7#32/7#32)%10000#32+1#32);
output1{test++} = 15 == val;
val = makeUnknown((val+64#32-64#32*64#32/64#32)%10000#32+1#32);
output1{test++} = 16 == val;
val = makeUnknown((val+17#32-17#32*17#32/17#32)%10000#32+1#32);
output1{test++} = 17 == val;
val = makeUnknown((val+96#32-96#32*96#32/96#32)%10000#32+1#32);
output1{test++} = 18 == val;
val = makeUnknown((val+89#32-89#32*89#32/89#32)%10000#32+1#32);
output1{test++} = 19 == val;
val = makeUnknown((val+30#32-30#32*30#32/30#32)%10000#32+1#32);
output1{test++} = 20 == val;
val = makeUnknown((val+35#32-35#32*35#32/35#32)%10000#32+1#32);
output1{test++} = 21 == val;
val = makeUnknown((val+19#32-19#32*19#32/19#32)%10000#32+1#32);
output1{test++} = 22 == val;
val = makeUnknown((val+81#32-81#32*81#32/81#32)%10000#32+1#32);
output1{test++} = 23 == val;
val = makeUnknown((val+91#32-91#32*91#32/91#32)%10000#32+1#32);
output1{test++} = 24 == val;
val = makeUnknown((val+20#32-20#32*20#32/20#32)%10000#32+1#32);
output1{test++} = 25 == val;
val = makeUnknown((val+48#32-48#32*48#32/48#32)%10000#32+1#32);
output1{test++} = 26 == val;
val = makeUnknown((val+19#32-19#32*19#32/19#32)%10000#32+1#32);
output1{test++} = 27 == val;
val = makeUnknown((val+13#32-13#32*13#32/13#32)%10000#32+1#32);
output1{test++} = 28 == val;
val = makeUnknown((val+55#32-55#32*55#32/55#32)%10000#32+1#32);
output1{test++} = 29 == val;
val = makeUnknown((val+63#32-63#32*63#32/63#32)%10000#32+1#32);
output1{test++} = 30 == val;
val = makeUnknown((val+63#32-63#32*63#32/63#32)%10000#32+1#32);
output1{test++} = 31 == val;
val = makeUnknown((val+89#32-89#32*89#32/89#32)%10000#32+1#32);
output1{test++} = 32 == val;
val = makeUnknown((val+45#32-45#32*45#32/45#32)%10000#32+1#32);
output1{test++} = 33 == val;
val = makeUnknown((val+59#32-59#32*59#32/59#32)%10000#32+1#32);
output1{test++} = 34 == val;
val = makeUnknown((val+35#32-35#32*35#32/35#32)%10000#32+1#32);
output1{test++} = 35 == val;
val = makeUnknown((val+46#32-46#32*46#32/46#32)%10000#32+1#32);
output1{test++} = 36 == val;
val = makeUnknown((val+19#32-19#32*19#32/19#32)%10000#32+1#32);
output1{test++} = 37 == val;
val = makeUnknown((val+37#32-37#32*37#32/37#32)%10000#32+1#32);
output1{test++} = 38 == val;
val = makeUnknown((val+31#32-31#32*31#32/31#32)%10000#32+1#32);
output1{test++} = 39 == val;
val = makeUnknown((val+75#32-75#32*75#32/75#32)%10000#32+1#32);
output1{test++} = 40 == val;
val = makeUnknown((val+80#32-80#32*80#32/80#32)%10000#32+1#32);
output1{test++} = 41 == val;
val = makeUnknown((val+96#32-96#32*96#32/96#32)%10000#32+1#32);
output1{test++} = 42 == val;
val = makeUnknown((val+28#32-28#32*28#32/28#32)%10000#32+1#32);
output1{test++} = 43 == val;
val = makeUnknown((val+49#32-49#32*49#32/49#32)%10000#32+1#32);
output1{test++} = 44 == val;
val = makeUnknown((val+80#32-80#32*80#32/80#32)%10000#32+1#32);
output1{test++} = 45 == val;
val = makeUnknown((val+18#32-18#32*18#32/18#32)%10000#32+1#32);
output1{test++} = 46 == val;
val = makeUnknown((val+21#32-21#32*21#32/21#32)%10000#32+1#32);
output1{test++} = 47 == val;
val = makeUnknown((val+41#32-41#32*41#32/41#32)%10000#32+1#32);
output1{test++} = 48 == val;
val = makeUnknown((val+99#32-99#32*99#32/99#32)%10000#32+1#32);
output1{test++} = 49 == val;
val = makeUnknown((val+81#32-81#32*81#32/81#32)%10000#32+1#32);
output1{test++} = 50 == val;
val = makeUnknown((val+99#32-99#32*99#32/99#32)%10000#32+1#32);
output1{test++} = 51 == val;
val = makeUnknown((val+34#32-34#32*34#32/34#32)%10000#32+1#32);
output1{test++} = 52 == val;
val = makeUnknown((val+77#32-77#32*77#32/77#32)%10000#32+1#32);
output1{test++} = 53 == val;
val = makeUnknown((val+25#32-25#32*25#32/25#32)%10000#32+1#32);
output1{test++} = 54 == val;
val = makeUnknown((val+35#32-35#32*35#32/35#32)%10000#32+1#32);
output1{test++} = 55 == val;
val = makeUnknown((val+28#32-28#32*28#32/28#32)%10000#32+1#32);
output1{test++} = 56 == val;
val = makeUnknown((val+6#32-6#32*6#32/6#32)%10000#32+1#32);
output1{test++} = 57 == val;
val = makeUnknown((val+11#32-11#32*11#32/11#32)%10000#32+1#32);
output1{test++} = 58 == val;
val = makeUnknown((val+95#32-95#32*95#32/95#32)%10000#32+1#32);
output1{test++} = 59 == val;
val = makeUnknown((val+48#32-48#32*48#32/48#32)%10000#32+1#32);
output1{test++} = 60 == val;
val = makeUnknown((val+19#32-19#32*19#32/19#32)%10000#32+1#32);
output1{test++} = 61 == val;
val = makeUnknown((val+43#32-43#32*43#32/43#32)%10000#32+1#32);
output1{test++} = 62 == val;
val = makeUnknown((val+82#32-82#32*82#32/82#32)%10000#32+1#32);
output1{test++} = 63 == val;
val = makeUnknown((val+44#32-44#32*44#32/44#32)%10000#32+1#32);
output1{test++} = 64 == val;
val = makeUnknown((val+73#32-73#32*73#32/73#32)%10000#32+1#32);
output1{test++} = 65 == val;
val = makeUnknown((val+84#32-84#32*84#32/84#32)%10000#32+1#32);
output1{test++} = 66 == val;
val = makeUnknown((val+72#32-72#32*72#32/72#32)%10000#32+1#32);
output1{test++} = 67 == val;
val = makeUnknown((val+71#32-71#32*71#32/71#32)%10000#32+1#32);
output1{test++} = 68 == val;
val = makeUnknown((val+98#32-98#32*98#32/98#32)%10000#32+1#32);
output1{test++} = 69 == val;
val = makeUnknown((val+43#32-43#32*43#32/43#32)%10000#32+1#32);
output1{test++} = 70 == val;
val = makeUnknown((val+81#32-81#32*81#32/81#32)%10000#32+1#32);
output1{test++} = 71 == val;
val = makeUnknown((val+34#32-34#32*34#32/34#32)%10000#32+1#32);
output1{test++} = 72 == val;
val = makeUnknown((val+18#32-18#32*18#32/18#32)%10000#32+1#32);
output1{test++} = 73 == val;
val = makeUnknown((val+26#32-26#32*26#32/26#32)%10000#32+1#32);
output1{test++} = 74 == val;
val = makeUnknown((val+1#32-1#32*1#32/1#32)%10000#32+1#32);
output1{test++} = 75 == val;
val = makeUnknown((val+66#32-66#32*66#32/66#32)%10000#32+1#32);
output1{test++} = 76 == val;
val = makeUnknown((val+39#32-39#32*39#32/39#32)%10000#32+1#32);
output1{test++} = 77 == val;
val = makeUnknown((val+19#32-19#32*19#32/19#32)%10000#32+1#32);
output1{test++} = 78 == val;
val = makeUnknown((val+90#32-90#32*90#32/90#32)%10000#32+1#32);
output1{test++} = 79 == val;
val = makeUnknown((val+90#32-90#32*90#32/90#32)%10000#32+1#32);
output1{test++} = 80 == val;
val = makeUnknown((val+17#32-17#32*17#32/17#32)%10000#32+1#32);
output1{test++} = 81 == val;
val = makeUnknown((val+90#32-90#32*90#32/90#32)%10000#32+1#32);
output1{test++} = 82 == val;
val = makeUnknown((val+100#32-100#32*100#32/100#32)%10000#32+1#32);
output1{test++} = 83 == val;
val = makeUnknown((val+78#32-78#32*78#32/78#32)%10000#32+1#32);
output1{test++} = 84 == val;
val = makeUnknown((val+65#32-65#32*65#32/65#32)%10000#32+1#32);
output1{test++} = 85 == val;
val = makeUnknown((val+69#32-69#32*69#32/69#32)%10000#32+1#32);
output1{test++} = 86 == val;
val = makeUnknown((val+83#32-83#32*83#32/83#32)%10000#32+1#32);
output1{test++} = 87 == val;
val = makeUnknown((val+90#32-90#32*90#32/90#32)%10000#32+1#32);
output1{test++} = 88 == val;
val = makeUnknown((val+33#32-33#32*33#32/33#32)%10000#32+1#32);
output1{test++} = 89 == val;
val = makeUnknown((val+62#32-62#32*62#32/62#32)%10000#32+1#32);
output1{test++} = 90 == val;
val = makeUnknown((val+58#32-58#32*58#32/58#32)%10000#32+1#32);
output1{test++} = 91 == val;
val = makeUnknown((val+72#32-72#32*72#32/72#32)%10000#32+1#32);
output1{test++} = 92 == val;
val = makeUnknown((val+62#32-62#32*62#32/62#32)%10000#32+1#32);
output1{test++} = 93 == val;
val = makeUnknown((val+15#32-15#32*15#32/15#32)%10000#32+1#32);
output1{test++} = 94 == val;
val = makeUnknown((val+46#32-46#32*46#32/46#32)%10000#32+1#32);
output1{test++} = 95 == val;
val = makeUnknown((val+21#32-21#32*21#32/21#32)%10000#32+1#32);
output1{test++} = 96 == val;
val = makeUnknown((val+38#32-38#32*38#32/38#32)%10000#32+1#32);
output1{test++} = 97 == val;
val = makeUnknown((val+13#32-13#32*13#32/13#32)%10000#32+1#32);
output1{test++} = 98 == val;
val = makeUnknown((val+25#32-25#32*25#32/25#32)%10000#32+1#32);
output1{test++} = 99 == val;
val = makeUnknown((val+59#32-59#32*59#32/59#32)%10000#32+1#32);
output1{test++} = 100 == val;
val = makeUnknown((val+5#32-5#32*5#32/5#32)%10000#32+1#32);
output1{test++} = 101 == val;
val = makeUnknown((val+11#32-11#32*11#32/11#32)%10000#32+1#32);
output1{test++} = 102 == val;
val = makeUnknown((val+2#32-2#32*2#32/2#32)%10000#32+1#32);
output1{test++} = 103 == val;
val = makeUnknown((val+84#32-84#32*84#32/84#32)%10000#32+1#32);
output1{test++} = 104 == val;
val = makeUnknown((val+59#32-59#32*59#32/59#32)%10000#32+1#32);
output1{test++} = 105 == val;
val = makeUnknown((val+75#32-75#32*75#32/75#32)%10000#32+1#32);
output1{test++} = 106 == val;
val = makeUnknown((val+87#32-87#32*87#32/87#32)%10000#32+1#32);
output1{test++} = 107 == val;
val = makeUnknown((val+79#32-79#32*79#32/79#32)%10000#32+1#32);
output1{test++} = 108 == val;
val = makeUnknown((val+6#32-6#32*6#32/6#32)%10000#32+1#32);
output1{test++} = 109 == val;
val = makeUnknown((val+87#32-87#32*87#32/87#32)%10000#32+1#32);
output1{test++} = 110 == val;
val = makeUnknown((val+51#32-51#32*51#32/51#32)%10000#32+1#32);
output1{test++} = 111 == val;
val = makeUnknown((val+60#32-60#32*60#32/60#32)%10000#32+1#32);
output1{test++} = 112 == val;
val = makeUnknown((val+15#32-15#32*15#32/15#32)%10000#32+1#32);
output1{test++} = 113 == val;
val = makeUnknown((val+34#32-34#32*34#32/34#32)%10000#32+1#32);
output1{test++} = 114 == val;
val = makeUnknown((val+45#32-45#32*45#32/45#32)%10000#32+1#32);
output1{test++} = 115 == val;
val = makeUnknown((val+14#32-14#32*14#32/14#32)%10000#32+1#32);
output1{test++} = 116 == val;
val = makeUnknown((val+79#32-79#32*79#32/79#32)%10000#32+1#32);
output1{test++} = 117 == val;
val = makeUnknown((val+30#32-30#32*30#32/30#32)%10000#32+1#32);
output1{test++} = 118 == val;
val = makeUnknown((val+74#32-74#32*74#32/74#32)%10000#32+1#32);
output1{test++} = 119 == val;
val = makeUnknown((val+13#32-13#32*13#32/13#32)%10000#32+1#32);
output1{test++} = 120 == val;
val = makeUnknown((val+73#32-73#32*73#32/73#32)%10000#32+1#32);
output1{test++} = 121 == val;
val = makeUnknown((val+86#32-86#32*86#32/86#32)%10000#32+1#32);
output1{test++} = 122 == val;
val = makeUnknown((val+35#32-35#32*35#32/35#32)%10000#32+1#32);
output1{test++} = 123 == val;
val = makeUnknown((val+39#32-39#32*39#32/39#32)%10000#32+1#32);
output1{test++} = 124 == val;
val = makeUnknown((val+95#32-95#32*95#32/95#32)%10000#32+1#32);
output1{test++} = 125 == val;
val = makeUnknown((val+92#32-92#32*92#32/92#32)%10000#32+1#32);
output1{test++} = 126 == val;
val = makeUnknown((val+91#32-91#32*91#32/91#32)%10000#32+1#32);
output1{test++} = 127 == val;
val = makeUnknown((val+4#32-4#32*4#32/4#32)%10000#32+1#32);
output1{test++} = 128 == val;
val = makeUnknown((val+33#32-33#32*33#32/33#32)%10000#32+1#32);
output1{test++} = 129 == val;
val = makeUnknown((val+16#32-16#32*16#32/16#32)%10000#32+1#32);
output1{test++} = 130 == val;
val = makeUnknown((val+97#32-97#32*97#32/97#32)%10000#32+1#32);
output1{test++} = 131 == val;
val = makeUnknown((val+73#32-73#32*73#32/73#32)%10000#32+1#32);
output1{test++} = 132 == val;
val = makeUnknown((val+60#32-60#32*60#32/60#32)%10000#32+1#32);
output1{test++} = 133 == val;
val = makeUnknown((val+17#32-17#32*17#32/17#32)%10000#32+1#32);
output1{test++} = 134 == val;
val = makeUnknown((val+85#32-85#32*85#32/85#32)%10000#32+1#32);
output1{test++} = 135 == val;
val = makeUnknown((val+73#32-73#32*73#32/73#32)%10000#32+1#32);
output1{test++} = 136 == val;
val = makeUnknown((val+42#32-42#32*42#32/42#32)%10000#32+1#32);
output1{test++} = 137 == val;
val = makeUnknown((val+74#32-74#32*74#32/74#32)%10000#32+1#32);
output1{test++} = 138 == val;
val = makeUnknown((val+37#32-37#32*37#32/37#32)%10000#32+1#32);
output1{test++} = 139 == val;
val = makeUnknown((val+72#32-72#32*72#32/72#32)%10000#32+1#32);
output1{test++} = 140 == val;
val = makeUnknown((val+79#32-79#32*79#32/79#32)%10000#32+1#32);
output1{test++} = 141 == val;
val = makeUnknown((val+38#32-38#32*38#32/38#32)%10000#32+1#32);
output1{test++} = 142 == val;
val = makeUnknown((val+14#32-14#32*14#32/14#32)%10000#32+1#32);
output1{test++} = 143 == val;
val = makeUnknown((val+57#32-57#32*57#32/57#32)%10000#32+1#32);
output1{test++} = 144 == val;
val = makeUnknown((val+67#32-67#32*67#32/67#32)%10000#32+1#32);
output1{test++} = 145 == val;
val = makeUnknown((val+5#32-5#32*5#32/5#32)%10000#32+1#32);
output1{test++} = 146 == val;
val = makeUnknown((val+29#32-29#32*29#32/29#32)%10000#32+1#32);
output1{test++} = 147 == val;
val = makeUnknown((val+51#32-51#32*51#32/51#32)%10000#32+1#32);
output1{test++} = 148 == val;
val = makeUnknown((val+92#32-92#32*92#32/92#32)%10000#32+1#32);
output1{test++} = 149 == val;
val = makeUnknown((val+74#32-74#32*74#32/74#32)%10000#32+1#32);
output1{test++} = 150 == val;
val = makeUnknown((val+37#32-37#32*37#32/37#32)%10000#32+1#32);
output1{test++} = 151 == val;
val = makeUnknown((val+85#32-85#32*85#32/85#32)%10000#32+1#32);
output1{test++} = 152 == val;
val = makeUnknown((val+100#32-100#32*100#32/100#32)%10000#32+1#32);
output1{test++} = 153 == val;
val = makeUnknown((val+93#32-93#32*93#32/93#32)%10000#32+1#32);
output1{test++} = 154 == val;
val = makeUnknown((val+11#32-11#32*11#32/11#32)%10000#32+1#32);
output1{test++} = 155 == val;
val = makeUnknown((val+62#32-62#32*62#32/62#32)%10000#32+1#32);
output1{test++} = 156 == val;
val = makeUnknown((val+72#32-72#32*72#32/72#32)%10000#32+1#32);
output1{test++} = 157 == val;
val = makeUnknown((val+10#32-10#32*10#32/10#32)%10000#32+1#32);
output1{test++} = 158 == val;
val = makeUnknown((val+38#32-38#32*38#32/38#32)%10000#32+1#32);
output1{test++} = 159 == val;
val = makeUnknown((val+81#32-81#32*81#32/81#32)%10000#32+1#32);
output1{test++} = 160 == val;
val = makeUnknown((val+97#32-97#32*97#32/97#32)%10000#32+1#32);
output1{test++} = 161 == val;
val = makeUnknown((val+1#32-1#32*1#32/1#32)%10000#32+1#32);
output1{test++} = 162 == val;
val = makeUnknown((val+13#32-13#32*13#32/13#32)%10000#32+1#32);
output1{test++} = 163 == val;
val = makeUnknown((val+50#32-50#32*50#32/50#32)%10000#32+1#32);
output1{test++} = 164 == val;
val = makeUnknown((val+26#32-26#32*26#32/26#32)%10000#32+1#32);
output1{test++} = 165 == val;
val = makeUnknown((val+17#32-17#32*17#32/17#32)%10000#32+1#32);
output1{test++} = 166 == val;
val = makeUnknown((val+50#32-50#32*50#32/50#32)%10000#32+1#32);
output1{test++} = 167 == val;
val = makeUnknown((val+5#32-5#32*5#32/5#32)%10000#32+1#32);
output1{test++} = 168 == val;
val = makeUnknown((val+39#32-39#32*39#32/39#32)%10000#32+1#32);
output1{test++} = 169 == val;
val = makeUnknown((val+8#32-8#32*8#32/8#32)%10000#32+1#32);
output1{test++} = 170 == val;
val = makeUnknown((val+4#32-4#32*4#32/4#32)%10000#32+1#32);
output1{test++} = 171 == val;
val = makeUnknown((val+84#32-84#32*84#32/84#32)%10000#32+1#32);
output1{test++} = 172 == val;
val = makeUnknown((val+89#32-89#32*89#32/89#32)%10000#32+1#32);
output1{test++} = 173 == val;
val = makeUnknown((val+64#32-64#32*64#32/64#32)%10000#32+1#32);
output1{test++} = 174 == val;
val = makeUnknown((val+33#32-33#32*33#32/33#32)%10000#32+1#32);
output1{test++} = 175 == val;
val = makeUnknown((val+59#32-59#32*59#32/59#32)%10000#32+1#32);
output1{test++} = 176 == val;
val = makeUnknown((val+39#32-39#32*39#32/39#32)%10000#32+1#32);
output1{test++} = 177 == val;
val = makeUnknown((val+4#32-4#32*4#32/4#32)%10000#32+1#32);
output1{test++} = 178 == val;
val = makeUnknown((val+10#32-10#32*10#32/10#32)%10000#32+1#32);
output1{test++} = 179 == val;
val = makeUnknown((val+89#32-89#32*89#32/89#32)%10000#32+1#32);
output1{test++} = 180 == val;
val = makeUnknown((val+41#32-41#32*41#32/41#32)%10000#32+1#32);
output1{test++} = 181 == val;
val = makeUnknown((val+15#32-15#32*15#32/15#32)%10000#32+1#32);
output1{test++} = 182 == val;
val = makeUnknown((val+69#32-69#32*69#32/69#32)%10000#32+1#32);
output1{test++} = 183 == val;
val = makeUnknown((val+62#32-62#32*62#32/62#32)%10000#32+1#32);
output1{test++} = 184 == val;
val = makeUnknown((val+60#32-60#32*60#32/60#32)%10000#32+1#32);
output1{test++} = 185 == val;
val = makeUnknown((val+21#32-21#32*21#32/21#32)%10000#32+1#32);
output1{test++} = 186 == val;
val = makeUnknown((val+90#32-90#32*90#32/90#32)%10000#32+1#32);
output1{test++} = 187 == val;
val = makeUnknown((val+60#32-60#32*60#32/60#32)%10000#32+1#32);
output1{test++} = 188 == val;
val = makeUnknown((val+48#32-48#32*48#32/48#32)%10000#32+1#32);
output1{test++} = 189 == val;
val = makeUnknown((val+53#32-53#32*53#32/53#32)%10000#32+1#32);
output1{test++} = 190 == val;
val = makeUnknown((val+50#32-50#32*50#32/50#32)%10000#32+1#32);
output1{test++} = 191 == val;
val = makeUnknown((val+20#32-20#32*20#32/20#32)%10000#32+1#32);
output1{test++} = 192 == val;
val = makeUnknown((val+14#32-14#32*14#32/14#32)%10000#32+1#32);
output1{test++} = 193 == val;
val = makeUnknown((val+58#32-58#32*58#32/58#32)%10000#32+1#32);
output1{test++} = 194 == val;
val = makeUnknown((val+68#32-68#32*68#32/68#32)%10000#32+1#32);
output1{test++} = 195 == val;
val = makeUnknown((val+13#32-13#32*13#32/13#32)%10000#32+1#32);
output1{test++} = 196 == val;
val = makeUnknown((val+32#32-32#32*32#32/32#32)%10000#32+1#32);
output1{test++} = 197 == val;
val = makeUnknown((val+31#32-31#32*31#32/31#32)%10000#32+1#32);
output1{test++} = 198 == val;
val = makeUnknown((val+25#32-25#32*25#32/25#32)%10000#32+1#32);
output1{test++} = 199 == val;
val = makeUnknown((val+52#32-52#32*52#32/52#32)%10000#32+1#32);
output1{test++} = 200 == val;
val = makeUnknown((val+35#32-35#32*35#32/35#32)%10000#32+1#32);
output1{test++} = 201 == val;
val = makeUnknown((val+3#32-3#32*3#32/3#32)%10000#32+1#32);
output1{test++} = 202 == val;
val = makeUnknown((val+16#32-16#32*16#32/16#32)%10000#32+1#32);
output1{test++} = 203 == val;
val = makeUnknown((val+67#32-67#32*67#32/67#32)%10000#32+1#32);
output1{test++} = 204 == val;
val = makeUnknown((val+7#32-7#32*7#32/7#32)%10000#32+1#32);
output1{test++} = 205 == val;
val = makeUnknown((val+41#32-41#32*41#32/41#32)%10000#32+1#32);
output1{test++} = 206 == val;
val = makeUnknown((val+19#32-19#32*19#32/19#32)%10000#32+1#32);
output1{test++} = 207 == val;
val = makeUnknown((val+76#32-76#32*76#32/76#32)%10000#32+1#32);
output1{test++} = 208 == val;
val = makeUnknown((val+63#32-63#32*63#32/63#32)%10000#32+1#32);
output1{test++} = 209 == val;
val = makeUnknown((val+45#32-45#32*45#32/45#32)%10000#32+1#32);
output1{test++} = 210 == val;
val = makeUnknown((val+9#32-9#32*9#32/9#32)%10000#32+1#32);
output1{test++} = 211 == val;
val = makeUnknown((val+19#32-19#32*19#32/19#32)%10000#32+1#32);
output1{test++} = 212 == val;
val = makeUnknown((val+1#32-1#32*1#32/1#32)%10000#32+1#32);
output1{test++} = 213 == val;
val = makeUnknown((val+39#32-39#32*39#32/39#32)%10000#32+1#32);
output1{test++} = 214 == val;
val = makeUnknown((val+57#32-57#32*57#32/57#32)%10000#32+1#32);
output1{test++} = 215 == val;
val = makeUnknown((val+32#32-32#32*32#32/32#32)%10000#32+1#32);
output1{test++} = 216 == val;
val = makeUnknown((val+65#32-65#32*65#32/65#32)%10000#32+1#32);
output1{test++} = 217 == val;
val = makeUnknown((val+69#32-69#32*69#32/69#32)%10000#32+1#32);
output1{test++} = 218 == val;
val = makeUnknown((val+99#32-99#32*99#32/99#32)%10000#32+1#32);
output1{test++} = 219 == val;
val = makeUnknown((val+14#32-14#32*14#32/14#32)%10000#32+1#32);
output1{test++} = 220 == val;
val = makeUnknown((val+70#32-70#32*70#32/70#32)%10000#32+1#32);
output1{test++} = 221 == val;
val = makeUnknown((val+49#32-49#32*49#32/49#32)%10000#32+1#32);
output1{test++} = 222 == val;
val = makeUnknown((val+58#32-58#32*58#32/58#32)%10000#32+1#32);
output1{test++} = 223 == val;
val = makeUnknown((val+5#32-5#32*5#32/5#32)%10000#32+1#32);
output1{test++} = 224 == val;
val = makeUnknown((val+9#32-9#32*9#32/9#32)%10000#32+1#32);
output1{test++} = 225 == val;
val = makeUnknown((val+29#32-29#32*29#32/29#32)%10000#32+1#32);
output1{test++} = 226 == val;
val = makeUnknown((val+75#32-75#32*75#32/75#32)%10000#32+1#32);
output1{test++} = 227 == val;
val = makeUnknown((val+23#32-23#32*23#32/23#32)%10000#32+1#32);
output1{test++} = 228 == val;
val = makeUnknown((val+11#32-11#32*11#32/11#32)%10000#32+1#32);
output1{test++} = 229 == val;
val = makeUnknown((val+86#32-86#32*86#32/86#32)%10000#32+1#32);
output1{test++} = 230 == val;
val = makeUnknown((val+18#32-18#32*18#32/18#32)%10000#32+1#32);
output1{test++} = 231 == val;
val = makeUnknown((val+55#32-55#32*55#32/55#32)%10000#32+1#32);
output1{test++} = 232 == val;
val = makeUnknown((val+49#32-49#32*49#32/49#32)%10000#32+1#32);
output1{test++} = 233 == val;
val = makeUnknown((val+61#32-61#32*61#32/61#32)%10000#32+1#32);
output1{test++} = 234 == val;
val = makeUnknown((val+44#32-44#32*44#32/44#32)%10000#32+1#32);
output1{test++} = 235 == val;
val = makeUnknown((val+54#32-54#32*54#32/54#32)%10000#32+1#32);
output1{test++} = 236 == val;
val = makeUnknown((val+47#32-47#32*47#32/47#32)%10000#32+1#32);
output1{test++} = 237 == val;
val = makeUnknown((val+32#32-32#32*32#32/32#32)%10000#32+1#32);
output1{test++} = 238 == val;
val = makeUnknown((val+56#32-56#32*56#32/56#32)%10000#32+1#32);
output1{test++} = 239 == val;
val = makeUnknown((val+66#32-66#32*66#32/66#32)%10000#32+1#32);
output1{test++} = 240 == val;
val = makeUnknown((val+22#32-22#32*22#32/22#32)%10000#32+1#32);
output1{test++} = 241 == val;
val = makeUnknown((val+94#32-94#32*94#32/94#32)%10000#32+1#32);
output1{test++} = 242 == val;
val = makeUnknown((val+58#32-58#32*58#32/58#32)%10000#32+1#32);
output1{test++} = 243 == val;
val = makeUnknown((val+77#32-77#32*77#32/77#32)%10000#32+1#32);
output1{test++} = 244 == val;
val = makeUnknown((val+55#32-55#32*55#32/55#32)%10000#32+1#32);
output1{test++} = 245 == val;
val = makeUnknown((val+98#32-98#32*98#32/98#32)%10000#32+1#32);
output1{test++} = 246 == val;
val = makeUnknown((val+44#32-44#32*44#32/44#32)%10000#32+1#32);
output1{test++} = 247 == val;
val = makeUnknown((val+27#32-27#32*27#32/27#32)%10000#32+1#32);
output1{test++} = 248 == val;
val = makeUnknown((val+14#32-14#32*14#32/14#32)%10000#32+1#32);
output1{test++} = 249 == val;
val = makeUnknown((val+74#32-74#32*74#32/74#32)%10000#32+1#32);
output1{test++} = 250 == val;
val = makeUnknown((val+63#32-63#32*63#32/63#32)%10000#32+1#32);
output1{test++} = 251 == val;
val = makeUnknown((val+43#32-43#32*43#32/43#32)%10000#32+1#32);
output1{test++} = 252 == val;
val = makeUnknown((val+63#32-63#32*63#32/63#32)%10000#32+1#32);
output1{test++} = 253 == val;
val = makeUnknown((val+85#32-85#32*85#32/85#32)%10000#32+1#32);
output1{test++} = 254 == val;
val = makeUnknown((val+92#32-92#32*92#32/92#32)%10000#32+1#32);
output1{test++} = 255 == val;
val = makeUnknown((val+96#32-96#32*96#32/96#32)%10000#32+1#32);
output1{test++} = 256 == val;
val = makeUnknown((val+57#32-57#32*57#32/57#32)%10000#32+1#32);
output1{test++} = 257 == val;
val = makeUnknown((val+89#32-89#32*89#32/89#32)%10000#32+1#32);
output1{test++} = 258 == val;
val = makeUnknown((val+34#32-34#32*34#32/34#32)%10000#32+1#32);
output1{test++} = 259 == val;
val = makeUnknown((val+35#32-35#32*35#32/35#32)%10000#32+1#32);
output1{test++} = 260 == val;
val = makeUnknown((val+1#32-1#32*1#32/1#32)%10000#32+1#32);
output1{test++} = 261 == val;
val = makeUnknown((val+43#32-43#32*43#32/43#32)%10000#32+1#32);
output1{test++} = 262 == val;
val = makeUnknown((val+42#32-42#32*42#32/42#32)%10000#32+1#32);
output1{test++} = 263 == val;
val = makeUnknown((val+92#32-92#32*92#32/92#32)%10000#32+1#32);
output1{test++} = 264 == val;
val = makeUnknown((val+46#32-46#32*46#32/46#32)%10000#32+1#32);
output1{test++} = 265 == val;


{
returntype tr;
tr = permute(64#8,242#8,149#8,232#8,52#8);
output1{test++} = tr.a == 232;
output1{test++} = tr.b == 64;
output1{test++} = tr.c == 242;
output1{test++} = tr.d == 149;
}
{
returntype tr;
tr = permute(84#8,131#8,111#8,117#8,14#8);
output1{test++} = tr.a == 117;
output1{test++} = tr.b == 84;
output1{test++} = tr.c == 131;
output1{test++} = tr.d == 111;
}
{
returntype tr;
tr = permute(250#8,212#8,124#8,147#8,16#8);
output1{test++} = tr.a == 250;
output1{test++} = tr.b == 147;
output1{test++} = tr.c == 124;
output1{test++} = tr.d == 212;
}
{
returntype tr;
tr = permute(152#8,241#8,202#8,204#8,25#8);
output1{test++} = tr.a == 241;
output1{test++} = tr.b == 204;
output1{test++} = tr.c == 152;
output1{test++} = tr.d == 202;
}
{
returntype tr;
tr = permute(115#8,195#8,25#8,228#8,29#8);
output1{test++} = tr.a == 228;
output1{test++} = tr.b == 195;
output1{test++} = tr.c == 115;
output1{test++} = tr.d == 25;
}
{
returntype tr;
tr = permute(124#8,9#8,208#8,106#8,43#8);
output1{test++} = tr.a == 208;
output1{test++} = tr.b == 9;
output1{test++} = tr.c == 106;
output1{test++} = tr.d == 124;
}
{
returntype tr;
tr = permute(200#8,55#8,180#8,73#8,27#8);
output1{test++} = tr.a == 180;
output1{test++} = tr.b == 73;
output1{test++} = tr.c == 200;
output1{test++} = tr.d == 55;
}
{
returntype tr;
tr = permute(173#8,1#8,123#8,168#8,38#8);
output1{test++} = tr.a == 168;
output1{test++} = tr.b == 1;
output1{test++} = tr.c == 123;
output1{test++} = tr.d == 173;
}
{
returntype tr;
tr = permute(159#8,61#8,2#8,87#8,42#8);
output1{test++} = tr.a == 2;
output1{test++} = tr.b == 159;
output1{test++} = tr.c == 87;
output1{test++} = tr.d == 61;
}
{
returntype tr;
tr = permute(35#8,50#8,165#8,39#8,6#8);
output1{test++} = tr.a == 39;
output1{test++} = tr.b == 50;
output1{test++} = tr.c == 35;
output1{test++} = tr.d == 165;
}
{
returntype tr;
tr = permute(212#8,68#8,95#8,202#8,53#8);
output1{test++} = tr.a == 202;
output1{test++} = tr.b == 68;
output1{test++} = tr.c == 212;
output1{test++} = tr.d == 95;
}
{
returntype tr;
tr = permute(241#8,250#8,155#8,70#8,34#8);
output1{test++} = tr.a == 155;
output1{test++} = tr.b == 250;
output1{test++} = tr.c == 70;
output1{test++} = tr.d == 241;
}
{
returntype tr;
tr = permute(32#8,222#8,202#8,225#8,34#8);
output1{test++} = tr.a == 202;
output1{test++} = tr.b == 222;
output1{test++} = tr.c == 225;
output1{test++} = tr.d == 32;
}
{
returntype tr;
tr = permute(45#8,88#8,231#8,116#8,32#8);
output1{test++} = tr.a == 45;
output1{test++} = tr.b == 88;
output1{test++} = tr.c == 116;
output1{test++} = tr.d == 231;
}
{
returntype tr;
tr = permute(216#8,234#8,38#8,45#8,53#8);
output1{test++} = tr.a == 45;
output1{test++} = tr.b == 234;
output1{test++} = tr.c == 216;
output1{test++} = tr.d == 38;
}
{
returntype tr;
tr = permute(128#8,3#8,136#8,57#8,8#8);
output1{test++} = tr.a == 128;
output1{test++} = tr.b == 136;
output1{test++} = tr.c == 3;
output1{test++} = tr.d == 57;
}
{
returntype tr;
tr = permute(180#8,214#8,233#8,24#8,44#8);
output1{test++} = tr.a == 24;
output1{test++} = tr.b == 233;
output1{test++} = tr.c == 180;
output1{test++} = tr.d == 214;
}
{
returntype tr;
tr = permute(15#8,196#8,37#8,28#8,58#8);
output1{test++} = tr.a == 37;
output1{test++} = tr.b == 28;
output1{test++} = tr.c == 15;
output1{test++} = tr.d == 196;
}
{
returntype tr;
tr = permute(179#8,185#8,37#8,222#8,15#8);
output1{test++} = tr.a == 222;
output1{test++} = tr.b == 185;
output1{test++} = tr.c == 179;
output1{test++} = tr.d == 37;
}
{
returntype tr;
tr = permute(88#8,105#8,245#8,141#8,45#8);
output1{test++} = tr.a == 141;
output1{test++} = tr.b == 245;
output1{test++} = tr.c == 105;
output1{test++} = tr.d == 88;
}
{
returntype tr;
tr = permute(144#8,185#8,30#8,198#8,7#8);
output1{test++} = tr.a == 198;
output1{test++} = tr.b == 144;
output1{test++} = tr.c == 185;
output1{test++} = tr.d == 30;
}
{
returntype tr;
tr = permute(212#8,89#8,48#8,184#8,35#8);
output1{test++} = tr.a == 48;
output1{test++} = tr.b == 212;
output1{test++} = tr.c == 184;
output1{test++} = tr.d == 89;
}
{
returntype tr;
tr = permute(153#8,165#8,70#8,219#8,2#8);
output1{test++} = tr.a == 70;
output1{test++} = tr.b == 165;
output1{test++} = tr.c == 153;
output1{test++} = tr.d == 219;
}
{
returntype tr;
tr = permute(227#8,110#8,29#8,142#8,54#8);
output1{test++} = tr.a == 142;
output1{test++} = tr.b == 29;
output1{test++} = tr.c == 110;
output1{test++} = tr.d == 227;
}
{
returntype tr;
tr = permute(80#8,117#8,110#8,58#8,55#8);
output1{test++} = tr.a == 58;
output1{test++} = tr.b == 110;
output1{test++} = tr.c == 80;
output1{test++} = tr.d == 117;
}
{
returntype tr;
tr = permute(142#8,16#8,178#8,236#8,36#8);
output1{test++} = tr.a == 236;
output1{test++} = tr.b == 16;
output1{test++} = tr.c == 142;
output1{test++} = tr.d == 178;
}
{
returntype tr;
tr = permute(30#8,213#8,71#8,164#8,47#8);
output1{test++} = tr.a == 164;
output1{test++} = tr.b == 213;
output1{test++} = tr.c == 71;
output1{test++} = tr.d == 30;
}
{
returntype tr;
tr = permute(34#8,165#8,173#8,121#8,10#8);
output1{test++} = tr.a == 173;
output1{test++} = tr.b == 34;
output1{test++} = tr.c == 165;
output1{test++} = tr.d == 121;
}
{
returntype tr;
tr = permute(227#8,25#8,173#8,159#8,12#8);
output1{test++} = tr.a == 159;
output1{test++} = tr.b == 173;
output1{test++} = tr.c == 25;
output1{test++} = tr.d == 227;
}
{
returntype tr;
tr = permute(119#8,41#8,45#8,90#8,40#8);
output1{test++} = tr.a == 119;
output1{test++} = tr.b == 45;
output1{test++} = tr.c == 90;
output1{test++} = tr.d == 41;
}
{
returntype tr;
tr = permute(162#8,72#8,25#8,68#8,25#8);
output1{test++} = tr.a == 72;
output1{test++} = tr.b == 68;
output1{test++} = tr.c == 162;
output1{test++} = tr.d == 25;
}
{
returntype tr;
tr = permute(39#8,252#8,185#8,177#8,6#8);
output1{test++} = tr.a == 177;
output1{test++} = tr.b == 252;
output1{test++} = tr.c == 39;
output1{test++} = tr.d == 185;
}
{
returntype tr;
tr = permute(111#8,153#8,2#8,248#8,46#8);
output1{test++} = tr.a == 248;
output1{test++} = tr.b == 111;
output1{test++} = tr.c == 2;
output1{test++} = tr.d == 153;
}
{
returntype tr;
tr = permute(58#8,177#8,215#8,93#8,17#8);
output1{test++} = tr.a == 177;
output1{test++} = tr.b == 93;
output1{test++} = tr.c == 215;
output1{test++} = tr.d == 58;
}
{
returntype tr;
tr = permute(217#8,238#8,5#8,24#8,53#8);
output1{test++} = tr.a == 24;
output1{test++} = tr.b == 238;
output1{test++} = tr.c == 217;
output1{test++} = tr.d == 5;
}
{
returntype tr;
tr = permute(162#8,38#8,4#8,110#8,39#8);
output1{test++} = tr.a == 110;
output1{test++} = tr.b == 162;
output1{test++} = tr.c == 4;
output1{test++} = tr.d == 38;
}
{
returntype tr;
tr = permute(54#8,86#8,234#8,145#8,27#8);
output1{test++} = tr.a == 234;
output1{test++} = tr.b == 145;
output1{test++} = tr.c == 54;
output1{test++} = tr.d == 86;
}
{
returntype tr;
tr = permute(19#8,212#8,68#8,136#8,29#8);
output1{test++} = tr.a == 136;
output1{test++} = tr.b == 212;
output1{test++} = tr.c == 19;
output1{test++} = tr.d == 68;
}
{
returntype tr;
tr = permute(201#8,33#8,182#8,9#8,36#8);
output1{test++} = tr.a == 9;
output1{test++} = tr.b == 33;
output1{test++} = tr.c == 201;
output1{test++} = tr.d == 182;
}
{
returntype tr;
tr = permute(40#8,62#8,40#8,155#8,60#8);
output1{test++} = tr.a == 155;
output1{test++} = tr.b == 40;
output1{test++} = tr.c == 40;
output1{test++} = tr.d == 62;
}
{
returntype tr;
tr = permute(210#8,209#8,36#8,88#8,59#8);
output1{test++} = tr.a == 36;
output1{test++} = tr.b == 88;
output1{test++} = tr.c == 209;
output1{test++} = tr.d == 210;
}
{
returntype tr;
tr = permute(249#8,19#8,92#8,208#8,19#8);
output1{test++} = tr.a == 92;
output1{test++} = tr.b == 208;
output1{test++} = tr.c == 19;
output1{test++} = tr.d == 249;
}
{
returntype tr;
tr = permute(13#8,217#8,157#8,34#8,14#8);
output1{test++} = tr.a == 34;
output1{test++} = tr.b == 13;
output1{test++} = tr.c == 217;
output1{test++} = tr.d == 157;
}
{
returntype tr;
tr = permute(246#8,70#8,111#8,127#8,26#8);
output1{test++} = tr.a == 111;
output1{test++} = tr.b == 127;
output1{test++} = tr.c == 70;
output1{test++} = tr.d == 246;
}
{
returntype tr;
tr = permute(203#8,75#8,198#8,229#8,51#8);
output1{test++} = tr.a == 198;
output1{test++} = tr.b == 229;
output1{test++} = tr.c == 203;
output1{test++} = tr.d == 75;
}
{
returntype tr;
tr = permute(247#8,238#8,213#8,49#8,24#8);
output1{test++} = tr.a == 247;
output1{test++} = tr.b == 49;
output1{test++} = tr.c == 238;
output1{test++} = tr.d == 213;
}
{
returntype tr;
tr = permute(211#8,116#8,72#8,128#8,27#8);
output1{test++} = tr.a == 72;
output1{test++} = tr.b == 128;
output1{test++} = tr.c == 211;
output1{test++} = tr.d == 116;
}
{
returntype tr;
tr = permute(107#8,156#8,29#8,172#8,35#8);
output1{test++} = tr.a == 29;
output1{test++} = tr.b == 107;
output1{test++} = tr.c == 172;
output1{test++} = tr.d == 156;
}
{
returntype tr;
tr = permute(37#8,85#8,100#8,91#8,62#8);
output1{test++} = tr.a == 91;
output1{test++} = tr.b == 100;
output1{test++} = tr.c == 37;
output1{test++} = tr.d == 85;
}
{
returntype tr;
tr = permute(209#8,242#8,178#8,188#8,50#8);
output1{test++} = tr.a == 178;
output1{test++} = tr.b == 188;
output1{test++} = tr.c == 242;
output1{test++} = tr.d == 209;
}
{
returntype tr;
tr = permute(84#8,102#8,84#8,152#8,51#8);
output1{test++} = tr.a == 84;
output1{test++} = tr.b == 152;
output1{test++} = tr.c == 84;
output1{test++} = tr.d == 102;
}
{
returntype tr;
tr = permute(126#8,186#8,241#8,243#8,62#8);
output1{test++} = tr.a == 243;
output1{test++} = tr.b == 241;
output1{test++} = tr.c == 126;
output1{test++} = tr.d == 186;
}
{
returntype tr;
tr = permute(46#8,168#8,215#8,239#8,28#8);
output1{test++} = tr.a == 239;
output1{test++} = tr.b == 46;
output1{test++} = tr.c == 168;
output1{test++} = tr.d == 215;
}
{
returntype tr;
tr = permute(248#8,39#8,234#8,161#8,53#8);
output1{test++} = tr.a == 161;
output1{test++} = tr.b == 39;
output1{test++} = tr.c == 248;
output1{test++} = tr.d == 234;
}
{
returntype tr;
tr = permute(135#8,138#8,157#8,215#8,48#8);
output1{test++} = tr.a == 135;
output1{test++} = tr.b == 215;
output1{test++} = tr.c == 138;
output1{test++} = tr.d == 157;
}
{
returntype tr;
tr = permute(139#8,28#8,247#8,125#8,3#8);
output1{test++} = tr.a == 247;
output1{test++} = tr.b == 139;
output1{test++} = tr.c == 28;
output1{test++} = tr.d == 125;
}
{
returntype tr;
tr = permute(122#8,16#8,204#8,215#8,49#8);
output1{test++} = tr.a == 16;
output1{test++} = tr.b == 215;
output1{test++} = tr.c == 122;
output1{test++} = tr.d == 204;
}
{
returntype tr;
tr = permute(202#8,145#8,62#8,125#8,26#8);
output1{test++} = tr.a == 62;
output1{test++} = tr.b == 125;
output1{test++} = tr.c == 145;
output1{test++} = tr.d == 202;
}
{
returntype tr;
tr = permute(240#8,232#8,28#8,108#8,52#8);
output1{test++} = tr.a == 108;
output1{test++} = tr.b == 240;
output1{test++} = tr.c == 232;
output1{test++} = tr.d == 28;
}
{
returntype tr;
tr = permute(162#8,137#8,138#8,14#8,9#8);
output1{test++} = tr.a == 137;
output1{test++} = tr.b == 138;
output1{test++} = tr.c == 162;
output1{test++} = tr.d == 14;
}
{
returntype tr;
tr = permute(112#8,105#8,157#8,218#8,1#8);
output1{test++} = tr.a == 105;
output1{test++} = tr.b == 112;
output1{test++} = tr.c == 157;
output1{test++} = tr.d == 218;
}
{
returntype tr;
tr = permute(63#8,89#8,199#8,213#8,30#8);
output1{test++} = tr.a == 213;
output1{test++} = tr.b == 199;
output1{test++} = tr.c == 89;
output1{test++} = tr.d == 63;
}
{
returntype tr;
tr = permute(243#8,19#8,181#8,28#8,41#8);
output1{test++} = tr.a == 19;
output1{test++} = tr.b == 181;
output1{test++} = tr.c == 28;
output1{test++} = tr.d == 243;
}
{
returntype tr;
tr = permute(148#8,218#8,202#8,130#8,14#8);
output1{test++} = tr.a == 130;
output1{test++} = tr.b == 148;
output1{test++} = tr.c == 218;
output1{test++} = tr.d == 202;
}
{
returntype tr;
tr = permute(200#8,185#8,250#8,24#8,34#8);
output1{test++} = tr.a == 250;
output1{test++} = tr.b == 185;
output1{test++} = tr.c == 24;
output1{test++} = tr.d == 200;
}
{
returntype tr;
tr = permute(152#8,147#8,122#8,103#8,40#8);
output1{test++} = tr.a == 152;
output1{test++} = tr.b == 122;
output1{test++} = tr.c == 103;
output1{test++} = tr.d == 147;
}
{
returntype tr;
tr = permute(207#8,127#8,48#8,154#8,2#8);
output1{test++} = tr.a == 48;
output1{test++} = tr.b == 127;
output1{test++} = tr.c == 207;
output1{test++} = tr.d == 154;
}
{
returntype tr;
tr = permute(76#8,93#8,96#8,249#8,48#8);
output1{test++} = tr.a == 76;
output1{test++} = tr.b == 249;
output1{test++} = tr.c == 93;
output1{test++} = tr.d == 96;
}
{
returntype tr;
tr = permute(66#8,60#8,146#8,130#8,22#8);
output1{test++} = tr.a == 130;
output1{test++} = tr.b == 146;
output1{test++} = tr.c == 66;
output1{test++} = tr.d == 60;
}
{
returntype tr;
tr = permute(182#8,108#8,254#8,20#8,14#8);
output1{test++} = tr.a == 20;
output1{test++} = tr.b == 182;
output1{test++} = tr.c == 108;
output1{test++} = tr.d == 254;
}
{
returntype tr;
tr = permute(230#8,160#8,16#8,55#8,5#8);
output1{test++} = tr.a == 55;
output1{test++} = tr.b == 230;
output1{test++} = tr.c == 16;
output1{test++} = tr.d == 160;
}
{
returntype tr;
tr = permute(185#8,246#8,191#8,159#8,31#8);
output1{test++} = tr.a == 159;
output1{test++} = tr.b == 191;
output1{test++} = tr.c == 185;
output1{test++} = tr.d == 246;
}
{
returntype tr;
tr = permute(228#8,228#8,159#8,67#8,33#8);
output1{test++} = tr.a == 228;
output1{test++} = tr.b == 228;
output1{test++} = tr.c == 67;
output1{test++} = tr.d == 159;
}
{
returntype tr;
tr = permute(49#8,73#8,44#8,34#8,33#8);
output1{test++} = tr.a == 73;
output1{test++} = tr.b == 49;
output1{test++} = tr.c == 34;
output1{test++} = tr.d == 44;
}
{
returntype tr;
tr = permute(214#8,190#8,34#8,105#8,26#8);
output1{test++} = tr.a == 34;
output1{test++} = tr.b == 105;
output1{test++} = tr.c == 190;
output1{test++} = tr.d == 214;
}
{
returntype tr;
tr = permute(85#8,233#8,126#8,92#8,55#8);
output1{test++} = tr.a == 92;
output1{test++} = tr.b == 126;
output1{test++} = tr.c == 85;
output1{test++} = tr.d == 233;
}
{
returntype tr;
tr = permute(192#8,242#8,75#8,92#8,24#8);
output1{test++} = tr.a == 192;
output1{test++} = tr.b == 92;
output1{test++} = tr.c == 242;
output1{test++} = tr.d == 75;
}
{
returntype tr;
tr = permute(226#8,220#8,62#8,91#8,11#8);
output1{test++} = tr.a == 62;
output1{test++} = tr.b == 220;
output1{test++} = tr.c == 226;
output1{test++} = tr.d == 91;
}
{
returntype tr;
tr = permute(162#8,37#8,63#8,135#8,29#8);
output1{test++} = tr.a == 135;
output1{test++} = tr.b == 37;
output1{test++} = tr.c == 162;
output1{test++} = tr.d == 63;
}
{
returntype tr;
tr = permute(34#8,201#8,12#8,2#8,62#8);
output1{test++} = tr.a == 2;
output1{test++} = tr.b == 12;
output1{test++} = tr.c == 34;
output1{test++} = tr.d == 201;
}
{
returntype tr;
tr = permute(207#8,92#8,32#8,38#8,50#8);
output1{test++} = tr.a == 32;
output1{test++} = tr.b == 38;
output1{test++} = tr.c == 92;
output1{test++} = tr.d == 207;
}
{
returntype tr;
tr = permute(245#8,214#8,143#8,106#8,17#8);
output1{test++} = tr.a == 214;
output1{test++} = tr.b == 106;
output1{test++} = tr.c == 143;
output1{test++} = tr.d == 245;
}
{
returntype tr;
tr = permute(2#8,45#8,154#8,69#8,57#8);
output1{test++} = tr.a == 45;
output1{test++} = tr.b == 69;
output1{test++} = tr.c == 154;
output1{test++} = tr.d == 2;
}
{
returntype tr;
tr = permute(135#8,121#8,39#8,15#8,39#8);
output1{test++} = tr.a == 15;
output1{test++} = tr.b == 135;
output1{test++} = tr.c == 39;
output1{test++} = tr.d == 121;
}
{
returntype tr;
tr = permute(167#8,106#8,250#8,45#8,54#8);
output1{test++} = tr.a == 45;
output1{test++} = tr.b == 250;
output1{test++} = tr.c == 106;
output1{test++} = tr.d == 167;
}
{
returntype tr;
tr = permute(87#8,67#8,243#8,79#8,14#8);
output1{test++} = tr.a == 79;
output1{test++} = tr.b == 87;
output1{test++} = tr.c == 67;
output1{test++} = tr.d == 243;
}
{
returntype tr;
tr = permute(9#8,43#8,193#8,40#8,47#8);
output1{test++} = tr.a == 40;
output1{test++} = tr.b == 43;
output1{test++} = tr.c == 193;
output1{test++} = tr.d == 9;
}
{
returntype tr;
tr = permute(5#8,45#8,178#8,39#8,41#8);
output1{test++} = tr.a == 45;
output1{test++} = tr.b == 178;
output1{test++} = tr.c == 39;
output1{test++} = tr.d == 5;
}
{
returntype tr;
tr = permute(33#8,107#8,65#8,122#8,45#8);
output1{test++} = tr.a == 122;
output1{test++} = tr.b == 65;
output1{test++} = tr.c == 107;
output1{test++} = tr.d == 33;
}
{
returntype tr;
tr = permute(136#8,58#8,42#8,178#8,12#8);
output1{test++} = tr.a == 178;
output1{test++} = tr.b == 42;
output1{test++} = tr.c == 58;
output1{test++} = tr.d == 136;
}
{
returntype tr;
tr = permute(160#8,163#8,128#8,135#8,47#8);
output1{test++} = tr.a == 135;
output1{test++} = tr.b == 163;
output1{test++} = tr.c == 128;
output1{test++} = tr.d == 160;
}
{
returntype tr;
tr = permute(67#8,230#8,251#8,220#8,15#8);
output1{test++} = tr.a == 220;
output1{test++} = tr.b == 230;
output1{test++} = tr.c == 67;
output1{test++} = tr.d == 251;
}
{
returntype tr;
tr = permute(18#8,145#8,243#8,147#8,13#8);
output1{test++} = tr.a == 147;
output1{test++} = tr.b == 243;
output1{test++} = tr.c == 18;
output1{test++} = tr.d == 145;
}
{
returntype tr;
tr = permute(219#8,175#8,217#8,138#8,35#8);
output1{test++} = tr.a == 217;
output1{test++} = tr.b == 219;
output1{test++} = tr.c == 138;
output1{test++} = tr.d == 175;
}
{
returntype tr;
tr = permute(34#8,28#8,87#8,160#8,6#8);
output1{test++} = tr.a == 160;
output1{test++} = tr.b == 28;
output1{test++} = tr.c == 34;
output1{test++} = tr.d == 87;
}
{
returntype tr;
tr = permute(40#8,26#8,96#8,200#8,48#8);
output1{test++} = tr.a == 40;
output1{test++} = tr.b == 200;
output1{test++} = tr.c == 26;
output1{test++} = tr.d == 96;
}
{
returntype tr;
tr = permute(46#8,85#8,162#8,223#8,57#8);
output1{test++} = tr.a == 85;
output1{test++} = tr.b == 223;
output1{test++} = tr.c == 162;
output1{test++} = tr.d == 46;
}
{
returntype tr;
tr = permute(241#8,182#8,40#8,129#8,57#8);
output1{test++} = tr.a == 182;
output1{test++} = tr.b == 129;
output1{test++} = tr.c == 40;
output1{test++} = tr.d == 241;
}
{
returntype tr;
tr = permute(201#8,231#8,93#8,79#8,51#8);
output1{test++} = tr.a == 93;
output1{test++} = tr.b == 79;
output1{test++} = tr.c == 201;
output1{test++} = tr.d == 231;
}
{
returntype tr;
tr = permute(172#8,208#8,122#8,196#8,16#8);
output1{test++} = tr.a == 172;
output1{test++} = tr.b == 196;
output1{test++} = tr.c == 122;
output1{test++} = tr.d == 208;
}
{
returntype tr;
tr = permute(31#8,130#8,175#8,206#8,53#8);
output1{test++} = tr.a == 206;
output1{test++} = tr.b == 130;
output1{test++} = tr.c == 31;
output1{test++} = tr.d == 175;
}
{
returntype tr;
tr = permute(170#8,208#8,61#8,160#8,21#8);
output1{test++} = tr.a == 160;
output1{test++} = tr.b == 208;
output1{test++} = tr.c == 61;
output1{test++} = tr.d == 170;
}
{
returntype tr;
tr = permute(248#8,34#8,207#8,25#8,45#8);
output1{test++} = tr.a == 25;
output1{test++} = tr.b == 207;
output1{test++} = tr.c == 34;
output1{test++} = tr.d == 248;
}
{
returntype tr;
tr = permute(185#8,39#8,15#8,247#8,49#8);
output1{test++} = tr.a == 39;
output1{test++} = tr.b == 247;
output1{test++} = tr.c == 185;
output1{test++} = tr.d == 15;
}
{
returntype tr;
tr = permute(172#8,127#8,205#8,191#8,61#8);
output1{test++} = tr.a == 191;
output1{test++} = tr.b == 127;
output1{test++} = tr.c == 205;
output1{test++} = tr.d == 172;
}
{
returntype tr;
tr = permute(65#8,131#8,151#8,34#8,20#8);
output1{test++} = tr.a == 34;
output1{test++} = tr.b == 65;
output1{test++} = tr.c == 151;
output1{test++} = tr.d == 131;
}
{
returntype tr;
tr = permute(211#8,15#8,135#8,142#8,21#8);
output1{test++} = tr.a == 142;
output1{test++} = tr.b == 15;
output1{test++} = tr.c == 135;
output1{test++} = tr.d == 211;
}
{
returntype tr;
tr = permute(100#8,143#8,147#8,213#8,11#8);
output1{test++} = tr.a == 147;
output1{test++} = tr.b == 143;
output1{test++} = tr.c == 100;
output1{test++} = tr.d == 213;
}
{
returntype tr;
tr = permute(127#8,42#8,247#8,10#8,31#8);
output1{test++} = tr.a == 10;
output1{test++} = tr.b == 247;
output1{test++} = tr.c == 127;
output1{test++} = tr.d == 42;
}
{
returntype tr;
tr = permute(67#8,88#8,28#8,197#8,20#8);
output1{test++} = tr.a == 197;
output1{test++} = tr.b == 67;
output1{test++} = tr.c == 28;
output1{test++} = tr.d == 88;
}
{
returntype tr;
tr = permute(87#8,164#8,180#8,8#8,26#8);
output1{test++} = tr.a == 180;
output1{test++} = tr.b == 8;
output1{test++} = tr.c == 164;
output1{test++} = tr.d == 87;
}
{
returntype tr;
tr = permute(40#8,53#8,234#8,69#8,3#8);
output1{test++} = tr.a == 234;
output1{test++} = tr.b == 40;
output1{test++} = tr.c == 53;
output1{test++} = tr.d == 69;
}
{
returntype tr;
tr = permute(197#8,144#8,71#8,43#8,9#8);
output1{test++} = tr.a == 144;
output1{test++} = tr.b == 71;
output1{test++} = tr.c == 197;
output1{test++} = tr.d == 43;
}
{
returntype tr;
tr = permute(118#8,235#8,121#8,224#8,54#8);
output1{test++} = tr.a == 224;
output1{test++} = tr.b == 121;
output1{test++} = tr.c == 235;
output1{test++} = tr.d == 118;
}
{
returntype tr;
tr = permute(9#8,30#8,23#8,116#8,62#8);
output1{test++} = tr.a == 116;
output1{test++} = tr.b == 23;
output1{test++} = tr.c == 9;
output1{test++} = tr.d == 30;
}
{
returntype tr;
tr = permute(39#8,38#8,128#8,189#8,14#8);
output1{test++} = tr.a == 189;
output1{test++} = tr.b == 39;
output1{test++} = tr.c == 38;
output1{test++} = tr.d == 128;
}
{
returntype tr;
tr = permute(141#8,39#8,125#8,86#8,33#8);
output1{test++} = tr.a == 39;
output1{test++} = tr.b == 141;
output1{test++} = tr.c == 86;
output1{test++} = tr.d == 125;
}
{
returntype tr;
tr = permute(166#8,241#8,145#8,161#8,13#8);
output1{test++} = tr.a == 161;
output1{test++} = tr.b == 145;
output1{test++} = tr.c == 166;
output1{test++} = tr.d == 241;
}
{
returntype tr;
tr = permute(183#8,242#8,119#8,158#8,19#8);
output1{test++} = tr.a == 119;
output1{test++} = tr.b == 158;
output1{test++} = tr.c == 242;
output1{test++} = tr.d == 183;
}
{
returntype tr;
tr = permute(225#8,57#8,139#8,23#8,57#8);
output1{test++} = tr.a == 57;
output1{test++} = tr.b == 23;
output1{test++} = tr.c == 139;
output1{test++} = tr.d == 225;
}
{
returntype tr;
tr = permute(14#8,3#8,210#8,42#8,29#8);
output1{test++} = tr.a == 42;
output1{test++} = tr.b == 3;
output1{test++} = tr.c == 14;
output1{test++} = tr.d == 210;
}
{
returntype tr;
tr = permute(5#8,79#8,202#8,32#8,11#8);
output1{test++} = tr.a == 202;
output1{test++} = tr.b == 79;
output1{test++} = tr.c == 5;
output1{test++} = tr.d == 32;
}
{
returntype tr;
tr = permute(119#8,243#8,169#8,77#8,58#8);
output1{test++} = tr.a == 169;
output1{test++} = tr.b == 77;
output1{test++} = tr.c == 119;
output1{test++} = tr.d == 243;
}
{
returntype tr;
tr = permute(81#8,101#8,47#8,190#8,9#8);
output1{test++} = tr.a == 101;
output1{test++} = tr.b == 47;
output1{test++} = tr.c == 81;
output1{test++} = tr.d == 190;
}
{
returntype tr;
tr = permute(125#8,41#8,41#8,222#8,49#8);
output1{test++} = tr.a == 41;
output1{test++} = tr.b == 222;
output1{test++} = tr.c == 125;
output1{test++} = tr.d == 41;
}
{
returntype tr;
tr = permute(224#8,62#8,2#8,234#8,11#8);
output1{test++} = tr.a == 2;
output1{test++} = tr.b == 62;
output1{test++} = tr.c == 224;
output1{test++} = tr.d == 234;
}
{
returntype tr;
tr = permute(6#8,190#8,97#8,60#8,30#8);
output1{test++} = tr.a == 60;
output1{test++} = tr.b == 97;
output1{test++} = tr.c == 190;
output1{test++} = tr.d == 6;
}
{
returntype tr;
tr = permute(32#8,15#8,138#8,233#8,61#8);
output1{test++} = tr.a == 233;
output1{test++} = tr.b == 15;
output1{test++} = tr.c == 138;
output1{test++} = tr.d == 32;
}
{
returntype tr;
tr = permute(57#8,160#8,171#8,96#8,62#8);
output1{test++} = tr.a == 96;
output1{test++} = tr.b == 171;
output1{test++} = tr.c == 57;
output1{test++} = tr.d == 160;
}
{
returntype tr;
tr = permute(16#8,126#8,173#8,142#8,9#8);
output1{test++} = tr.a == 126;
output1{test++} = tr.b == 173;
output1{test++} = tr.c == 16;
output1{test++} = tr.d == 142;
}
{
returntype tr;
tr = permute(228#8,62#8,205#8,28#8,28#8);
output1{test++} = tr.a == 28;
output1{test++} = tr.b == 228;
output1{test++} = tr.c == 62;
output1{test++} = tr.d == 205;
}
{
returntype tr;
tr = permute(73#8,181#8,68#8,160#8,25#8);
output1{test++} = tr.a == 181;
output1{test++} = tr.b == 160;
output1{test++} = tr.c == 73;
output1{test++} = tr.d == 68;
}
{
returntype tr;
tr = permute(26#8,101#8,229#8,129#8,27#8);
output1{test++} = tr.a == 229;
output1{test++} = tr.b == 129;
output1{test++} = tr.c == 26;
output1{test++} = tr.d == 101;
}
{
returntype tr;
tr = permute(85#8,92#8,64#8,59#8,63#8);
output1{test++} = tr.a == 59;
output1{test++} = tr.b == 64;
output1{test++} = tr.c == 92;
output1{test++} = tr.d == 85;
}
{
returntype tr;
tr = permute(179#8,55#8,34#8,155#8,11#8);
output1{test++} = tr.a == 34;
output1{test++} = tr.b == 55;
output1{test++} = tr.c == 179;
output1{test++} = tr.d == 155;
}
{
returntype tr;
tr = permute(230#8,76#8,235#8,15#8,21#8);
output1{test++} = tr.a == 15;
output1{test++} = tr.b == 76;
output1{test++} = tr.c == 235;
output1{test++} = tr.d == 230;
}
{
returntype tr;
tr = permute(67#8,116#8,2#8,4#8,23#8);
output1{test++} = tr.a == 4;
output1{test++} = tr.b == 2;
output1{test++} = tr.c == 116;
output1{test++} = tr.d == 67;
}
{
returntype tr;
tr = permute(249#8,239#8,183#8,11#8,8#8);
output1{test++} = tr.a == 249;
output1{test++} = tr.b == 183;
output1{test++} = tr.c == 239;
output1{test++} = tr.d == 11;
}
{
returntype tr;
tr = permute(129#8,69#8,44#8,39#8,39#8);
output1{test++} = tr.a == 39;
output1{test++} = tr.b == 129;
output1{test++} = tr.c == 44;
output1{test++} = tr.d == 69;
}
{
returntype tr;
tr = permute(232#8,253#8,197#8,125#8,28#8);
output1{test++} = tr.a == 125;
output1{test++} = tr.b == 232;
output1{test++} = tr.c == 253;
output1{test++} = tr.d == 197;
}
{
returntype tr;
tr = permute(217#8,80#8,86#8,206#8,38#8);
output1{test++} = tr.a == 206;
output1{test++} = tr.b == 80;
output1{test++} = tr.c == 86;
output1{test++} = tr.d == 217;
}
{
returntype tr;
tr = permute(68#8,9#8,123#8,244#8,3#8);
output1{test++} = tr.a == 123;
output1{test++} = tr.b == 68;
output1{test++} = tr.c == 9;
output1{test++} = tr.d == 244;
}
{
returntype tr;
tr = permute(107#8,45#8,193#8,65#8,39#8);
output1{test++} = tr.a == 65;
output1{test++} = tr.b == 107;
output1{test++} = tr.c == 193;
output1{test++} = tr.d == 45;
}
{
returntype tr;
tr = permute(225#8,63#8,254#8,43#8,29#8);
output1{test++} = tr.a == 43;
output1{test++} = tr.b == 63;
output1{test++} = tr.c == 225;
output1{test++} = tr.d == 254;
}
{
returntype tr;
tr = permute(130#8,250#8,93#8,0#8,29#8);
output1{test++} = tr.a == 0;
output1{test++} = tr.b == 250;
output1{test++} = tr.c == 130;
output1{test++} = tr.d == 93;
}
{
returntype tr;
tr = permute(190#8,78#8,239#8,51#8,6#8);
output1{test++} = tr.a == 51;
output1{test++} = tr.b == 78;
output1{test++} = tr.c == 190;
output1{test++} = tr.d == 239;
}
{
returntype tr;
tr = permute(207#8,125#8,188#8,228#8,54#8);
output1{test++} = tr.a == 228;
output1{test++} = tr.b == 188;
output1{test++} = tr.c == 125;
output1{test++} = tr.d == 207;
}
{
returntype tr;
tr = permute(160#8,233#8,57#8,6#8,31#8);
output1{test++} = tr.a == 6;
output1{test++} = tr.b == 57;
output1{test++} = tr.c == 160;
output1{test++} = tr.d == 233;
}
{
returntype tr;
tr = permute(40#8,70#8,102#8,137#8,38#8);
output1{test++} = tr.a == 137;
output1{test++} = tr.b == 70;
output1{test++} = tr.c == 102;
output1{test++} = tr.d == 40;
}
{
returntype tr;
tr = permute(157#8,137#8,33#8,46#8,33#8);
output1{test++} = tr.a == 137;
output1{test++} = tr.b == 157;
output1{test++} = tr.c == 46;
output1{test++} = tr.d == 33;
}
{
returntype tr;
tr = permute(154#8,100#8,155#8,122#8,19#8);
output1{test++} = tr.a == 155;
output1{test++} = tr.b == 122;
output1{test++} = tr.c == 100;
output1{test++} = tr.d == 154;
}
{
returntype tr;
tr = permute(168#8,191#8,213#8,21#8,32#8);
output1{test++} = tr.a == 168;
output1{test++} = tr.b == 191;
output1{test++} = tr.c == 21;
output1{test++} = tr.d == 213;
}
{
returntype tr;
tr = permute(69#8,97#8,221#8,191#8,19#8);
output1{test++} = tr.a == 221;
output1{test++} = tr.b == 191;
output1{test++} = tr.c == 97;
output1{test++} = tr.d == 69;
}
{
returntype tr;
tr = permute(71#8,163#8,114#8,29#8,14#8);
output1{test++} = tr.a == 29;
output1{test++} = tr.b == 71;
output1{test++} = tr.c == 163;
output1{test++} = tr.d == 114;
}
{
returntype tr;
tr = permute(146#8,170#8,204#8,209#8,27#8);
output1{test++} = tr.a == 204;
output1{test++} = tr.b == 209;
output1{test++} = tr.c == 146;
output1{test++} = tr.d == 170;
}
{
returntype tr;
tr = permute(186#8,0#8,78#8,246#8,20#8);
output1{test++} = tr.a == 246;
output1{test++} = tr.b == 186;
output1{test++} = tr.c == 78;
output1{test++} = tr.d == 0;
}
{
returntype tr;
tr = permute(141#8,86#8,251#8,76#8,28#8);
output1{test++} = tr.a == 76;
output1{test++} = tr.b == 141;
output1{test++} = tr.c == 86;
output1{test++} = tr.d == 251;
}
{
returntype tr;
tr = permute(101#8,218#8,255#8,108#8,43#8);
output1{test++} = tr.a == 255;
output1{test++} = tr.b == 218;
output1{test++} = tr.c == 108;
output1{test++} = tr.d == 101;
}
{
returntype tr;
tr = permute(129#8,95#8,105#8,254#8,17#8);
output1{test++} = tr.a == 95;
output1{test++} = tr.b == 254;
output1{test++} = tr.c == 105;
output1{test++} = tr.d == 129;
}
{
returntype tr;
tr = permute(218#8,220#8,176#8,93#8,63#8);
output1{test++} = tr.a == 93;
output1{test++} = tr.b == 176;
output1{test++} = tr.c == 220;
output1{test++} = tr.d == 218;
}
{
returntype tr;
tr = permute(150#8,228#8,160#8,176#8,3#8);
output1{test++} = tr.a == 160;
output1{test++} = tr.b == 150;
output1{test++} = tr.c == 228;
output1{test++} = tr.d == 176;
}
{
returntype tr;
tr = permute(144#8,15#8,228#8,114#8,21#8);
output1{test++} = tr.a == 114;
output1{test++} = tr.b == 15;
output1{test++} = tr.c == 228;
output1{test++} = tr.d == 144;
}
{
returntype tr;
tr = permute(117#8,235#8,70#8,238#8,56#8);
output1{test++} = tr.a == 117;
output1{test++} = tr.b == 238;
output1{test++} = tr.c == 70;
output1{test++} = tr.d == 235;
}
{
returntype tr;
tr = permute(66#8,27#8,207#8,7#8,17#8);
output1{test++} = tr.a == 27;
output1{test++} = tr.b == 7;
output1{test++} = tr.c == 207;
output1{test++} = tr.d == 66;
}
{
returntype tr;
tr = permute(172#8,246#8,86#8,158#8,26#8);
output1{test++} = tr.a == 86;
output1{test++} = tr.b == 158;
output1{test++} = tr.c == 246;
output1{test++} = tr.d == 172;
}
{
returntype tr;
tr = permute(129#8,131#8,221#8,64#8,48#8);
output1{test++} = tr.a == 129;
output1{test++} = tr.b == 64;
output1{test++} = tr.c == 131;
output1{test++} = tr.d == 221;
}
{
returntype tr;
tr = permute(55#8,72#8,86#8,5#8,63#8);
output1{test++} = tr.a == 5;
output1{test++} = tr.b == 86;
output1{test++} = tr.c == 72;
output1{test++} = tr.d == 55;
}
{
returntype tr;
tr = permute(226#8,76#8,30#8,21#8,53#8);
output1{test++} = tr.a == 21;
output1{test++} = tr.b == 76;
output1{test++} = tr.c == 226;
output1{test++} = tr.d == 30;
}
{
returntype tr;
tr = permute(83#8,167#8,155#8,153#8,9#8);
output1{test++} = tr.a == 167;
output1{test++} = tr.b == 155;
output1{test++} = tr.c == 83;
output1{test++} = tr.d == 153;
}
{
returntype tr;
tr = permute(95#8,205#8,153#8,12#8,7#8);
output1{test++} = tr.a == 12;
output1{test++} = tr.b == 95;
output1{test++} = tr.c == 205;
output1{test++} = tr.d == 153;
}
{
returntype tr;
tr = permute(10#8,104#8,77#8,192#8,3#8);
output1{test++} = tr.a == 77;
output1{test++} = tr.b == 10;
output1{test++} = tr.c == 104;
output1{test++} = tr.d == 192;
}
{
returntype tr;
tr = permute(104#8,100#8,235#8,131#8,30#8);
output1{test++} = tr.a == 131;
output1{test++} = tr.b == 235;
output1{test++} = tr.c == 100;
output1{test++} = tr.d == 104;
}
{
returntype tr;
tr = permute(19#8,28#8,10#8,199#8,39#8);
output1{test++} = tr.a == 199;
output1{test++} = tr.b == 19;
output1{test++} = tr.c == 10;
output1{test++} = tr.d == 28;
}
{
returntype tr;
tr = permute(0#8,152#8,134#8,253#8,21#8);
output1{test++} = tr.a == 253;
output1{test++} = tr.b == 152;
output1{test++} = tr.c == 134;
output1{test++} = tr.d == 0;
}
{
returntype tr;
tr = permute(139#8,67#8,240#8,164#8,46#8);
output1{test++} = tr.a == 164;
output1{test++} = tr.b == 139;
output1{test++} = tr.c == 240;
output1{test++} = tr.d == 67;
}
{
returntype tr;
tr = permute(231#8,55#8,41#8,130#8,55#8);
output1{test++} = tr.a == 130;
output1{test++} = tr.b == 41;
output1{test++} = tr.c == 231;
output1{test++} = tr.d == 55;
}
{
returntype tr;
tr = permute(6#8,123#8,57#8,20#8,41#8);
output1{test++} = tr.a == 123;
output1{test++} = tr.b == 57;
output1{test++} = tr.c == 20;
output1{test++} = tr.d == 6;
}
{
returntype tr;
tr = permute(42#8,160#8,94#8,43#8,58#8);
output1{test++} = tr.a == 94;
output1{test++} = tr.b == 43;
output1{test++} = tr.c == 42;
output1{test++} = tr.d == 160;
}
{
returntype tr;
tr = permute(148#8,155#8,64#8,30#8,57#8);
output1{test++} = tr.a == 155;
output1{test++} = tr.b == 30;
output1{test++} = tr.c == 64;
output1{test++} = tr.d == 148;
}
{
returntype tr;
tr = permute(215#8,76#8,207#8,32#8,14#8);
output1{test++} = tr.a == 32;
output1{test++} = tr.b == 215;
output1{test++} = tr.c == 76;
output1{test++} = tr.d == 207;
}
{
returntype tr;
tr = permute(186#8,179#8,89#8,245#8,25#8);
output1{test++} = tr.a == 179;
output1{test++} = tr.b == 245;
output1{test++} = tr.c == 186;
output1{test++} = tr.d == 89;
}
{
returntype tr;
tr = permute(183#8,20#8,142#8,145#8,39#8);
output1{test++} = tr.a == 145;
output1{test++} = tr.b == 183;
output1{test++} = tr.c == 142;
output1{test++} = tr.d == 20;
}
{
returntype tr;
tr = permute(225#8,101#8,22#8,249#8,40#8);
output1{test++} = tr.a == 225;
output1{test++} = tr.b == 22;
output1{test++} = tr.c == 249;
output1{test++} = tr.d == 101;
}
{
returntype tr;
tr = permute(21#8,22#8,33#8,245#8,10#8);
output1{test++} = tr.a == 33;
output1{test++} = tr.b == 21;
output1{test++} = tr.c == 22;
output1{test++} = tr.d == 245;
}
{
returntype tr;
tr = permute(216#8,126#8,29#8,32#8,15#8);
output1{test++} = tr.a == 32;
output1{test++} = tr.b == 126;
output1{test++} = tr.c == 216;
output1{test++} = tr.d == 29;
}
{
returntype tr;
tr = permute(134#8,106#8,252#8,152#8,3#8);
output1{test++} = tr.a == 252;
output1{test++} = tr.b == 134;
output1{test++} = tr.c == 106;
output1{test++} = tr.d == 152;
}
{
returntype tr;
tr = permute(192#8,0#8,81#8,19#8,52#8);
output1{test++} = tr.a == 19;
output1{test++} = tr.b == 192;
output1{test++} = tr.c == 0;
output1{test++} = tr.d == 81;
}
{
returntype tr;
tr = permute(93#8,249#8,177#8,73#8,1#8);
output1{test++} = tr.a == 249;
output1{test++} = tr.b == 93;
output1{test++} = tr.c == 177;
output1{test++} = tr.d == 73;
}
{
returntype tr;
tr = permute(34#8,66#8,242#8,220#8,4#8);
output1{test++} = tr.a == 220;
output1{test++} = tr.b == 66;
output1{test++} = tr.c == 242;
output1{test++} = tr.d == 34;
}
{
returntype tr;
tr = permute(42#8,219#8,163#8,169#8,51#8);
output1{test++} = tr.a == 163;
output1{test++} = tr.b == 169;
output1{test++} = tr.c == 42;
output1{test++} = tr.d == 219;
}
{
returntype tr;
tr = permute(187#8,192#8,6#8,180#8,44#8);
output1{test++} = tr.a == 180;
output1{test++} = tr.b == 6;
output1{test++} = tr.c == 187;
output1{test++} = tr.d == 192;
}
{
returntype tr;
tr = permute(231#8,128#8,66#8,159#8,28#8);
output1{test++} = tr.a == 159;
output1{test++} = tr.b == 231;
output1{test++} = tr.c == 128;
output1{test++} = tr.d == 66;
}
{
returntype tr;
tr = permute(119#8,162#8,38#8,101#8,4#8);
output1{test++} = tr.a == 101;
output1{test++} = tr.b == 162;
output1{test++} = tr.c == 38;
output1{test++} = tr.d == 119;
}
{
returntype tr;
tr = permute(111#8,199#8,29#8,76#8,22#8);
output1{test++} = tr.a == 76;
output1{test++} = tr.b == 29;
output1{test++} = tr.c == 111;
output1{test++} = tr.d == 199;
}
{
returntype tr;
tr = permute(38#8,214#8,243#8,186#8,35#8);
output1{test++} = tr.a == 243;
output1{test++} = tr.b == 38;
output1{test++} = tr.c == 186;
output1{test++} = tr.d == 214;
}
{
returntype tr;
tr = permute(115#8,30#8,126#8,123#8,0#8);
output1{test++} = tr.a == 115;
output1{test++} = tr.b == 30;
output1{test++} = tr.c == 126;
output1{test++} = tr.d == 123;
}
{
returntype tr;
tr = permute(69#8,29#8,223#8,195#8,11#8);
output1{test++} = tr.a == 223;
output1{test++} = tr.b == 29;
output1{test++} = tr.c == 69;
output1{test++} = tr.d == 195;
}
{
returntype tr;
tr = permute(172#8,228#8,251#8,177#8,4#8);
output1{test++} = tr.a == 177;
output1{test++} = tr.b == 228;
output1{test++} = tr.c == 251;
output1{test++} = tr.d == 172;
}
{
returntype tr;
tr = permute(147#8,126#8,103#8,120#8,36#8);
output1{test++} = tr.a == 120;
output1{test++} = tr.b == 126;
output1{test++} = tr.c == 147;
output1{test++} = tr.d == 103;
}
{
returntype tr;
tr = permute(61#8,9#8,232#8,163#8,62#8);
output1{test++} = tr.a == 163;
output1{test++} = tr.b == 232;
output1{test++} = tr.c == 61;
output1{test++} = tr.d == 9;
}
{
returntype tr;
tr = permute(12#8,183#8,163#8,38#8,24#8);
output1{test++} = tr.a == 12;
output1{test++} = tr.b == 38;
output1{test++} = tr.c == 183;
output1{test++} = tr.d == 163;
}
{
returntype tr;
tr = permute(187#8,40#8,15#8,208#8,62#8);
output1{test++} = tr.a == 208;
output1{test++} = tr.b == 15;
output1{test++} = tr.c == 187;
output1{test++} = tr.d == 40;
}
{
returntype tr;
tr = permute(207#8,5#8,249#8,6#8,22#8);
output1{test++} = tr.a == 6;
output1{test++} = tr.b == 249;
output1{test++} = tr.c == 207;
output1{test++} = tr.d == 5;
}
{
returntype tr;
tr = permute(164#8,171#8,173#8,132#8,9#8);
output1{test++} = tr.a == 171;
output1{test++} = tr.b == 173;
output1{test++} = tr.c == 164;
output1{test++} = tr.d == 132;
}
{
returntype tr;
tr = permute(14#8,98#8,103#8,40#8,60#8);
output1{test++} = tr.a == 40;
output1{test++} = tr.b == 14;
output1{test++} = tr.c == 103;
output1{test++} = tr.d == 98;
}
{
returntype tr;
tr = permute(211#8,61#8,133#8,130#8,47#8);
output1{test++} = tr.a == 130;
output1{test++} = tr.b == 61;
output1{test++} = tr.c == 133;
output1{test++} = tr.d == 211;
}
{
returntype tr;
tr = permute(251#8,186#8,123#8,125#8,27#8);
output1{test++} = tr.a == 123;
output1{test++} = tr.b == 125;
output1{test++} = tr.c == 251;
output1{test++} = tr.d == 186;
}
{
returntype tr;
tr = permute(5#8,215#8,130#8,58#8,1#8);
output1{test++} = tr.a == 215;
output1{test++} = tr.b == 5;
output1{test++} = tr.c == 130;
output1{test++} = tr.d == 58;
}
{
returntype tr;
tr = permute(61#8,186#8,51#8,232#8,57#8);
output1{test++} = tr.a == 186;
output1{test++} = tr.b == 232;
output1{test++} = tr.c == 51;
output1{test++} = tr.d == 61;
}
{
returntype tr;
tr = permute(213#8,174#8,231#8,3#8,43#8);
output1{test++} = tr.a == 231;
output1{test++} = tr.b == 174;
output1{test++} = tr.c == 3;
output1{test++} = tr.d == 213;
}
{
returntype tr;
tr = permute(145#8,147#8,145#8,255#8,14#8);
output1{test++} = tr.a == 255;
output1{test++} = tr.b == 145;
output1{test++} = tr.c == 147;
output1{test++} = tr.d == 145;
}
{
returntype tr;
tr = permute(158#8,131#8,174#8,218#8,55#8);
output1{test++} = tr.a == 218;
output1{test++} = tr.b == 174;
output1{test++} = tr.c == 158;
output1{test++} = tr.d == 131;
}
{
returntype tr;
tr = permute(112#8,173#8,38#8,112#8,26#8);
output1{test++} = tr.a == 38;
output1{test++} = tr.b == 112;
output1{test++} = tr.c == 173;
output1{test++} = tr.d == 112;
}
{
returntype tr;
tr = permute(68#8,119#8,238#8,112#8,17#8);
output1{test++} = tr.a == 119;
output1{test++} = tr.b == 112;
output1{test++} = tr.c == 238;
output1{test++} = tr.d == 68;
}
{
returntype tr;
tr = permute(202#8,230#8,166#8,223#8,42#8);
output1{test++} = tr.a == 166;
output1{test++} = tr.b == 202;
output1{test++} = tr.c == 223;
output1{test++} = tr.d == 230;
}
{
returntype tr;
tr = permute(13#8,61#8,46#8,189#8,5#8);
output1{test++} = tr.a == 189;
output1{test++} = tr.b == 13;
output1{test++} = tr.c == 46;
output1{test++} = tr.d == 61;
}
{
returntype tr;
tr = permute(168#8,202#8,144#8,216#8,18#8);
output1{test++} = tr.a == 144;
output1{test++} = tr.b == 216;
output1{test++} = tr.c == 168;
output1{test++} = tr.d == 202;
}
{
returntype tr;
tr = permute(250#8,117#8,255#8,250#8,46#8);
output1{test++} = tr.a == 250;
output1{test++} = tr.b == 250;
output1{test++} = tr.c == 255;
output1{test++} = tr.d == 117;
}
{
returntype tr;
tr = permute(88#8,34#8,41#8,52#8,21#8);
output1{test++} = tr.a == 52;
output1{test++} = tr.b == 34;
output1{test++} = tr.c == 41;
output1{test++} = tr.d == 88;
}
{
returntype tr;
tr = permute(184#8,18#8,236#8,49#8,4#8);
output1{test++} = tr.a == 49;
output1{test++} = tr.b == 18;
output1{test++} = tr.c == 236;
output1{test++} = tr.d == 184;
}
{
returntype tr;
tr = permute(44#8,68#8,157#8,217#8,9#8);
output1{test++} = tr.a == 68;
output1{test++} = tr.b == 157;
output1{test++} = tr.c == 44;
output1{test++} = tr.d == 217;
}
{
returntype tr;
tr = permute(55#8,17#8,16#8,218#8,13#8);
output1{test++} = tr.a == 218;
output1{test++} = tr.b == 16;
output1{test++} = tr.c == 55;
output1{test++} = tr.d == 17;
}
{
returntype tr;
tr = permute(66#8,220#8,17#8,47#8,43#8);
output1{test++} = tr.a == 17;
output1{test++} = tr.b == 220;
output1{test++} = tr.c == 47;
output1{test++} = tr.d == 66;
}
{
returntype tr;
tr = permute(17#8,101#8,88#8,250#8,58#8);
output1{test++} = tr.a == 88;
output1{test++} = tr.b == 250;
output1{test++} = tr.c == 17;
output1{test++} = tr.d == 101;
}
{
returntype tr;
tr = permute(150#8,112#8,185#8,166#8,61#8);
output1{test++} = tr.a == 166;
output1{test++} = tr.b == 112;
output1{test++} = tr.c == 185;
output1{test++} = tr.d == 150;
}
{
returntype tr;
tr = permute(54#8,181#8,90#8,107#8,44#8);
output1{test++} = tr.a == 107;
output1{test++} = tr.b == 90;
output1{test++} = tr.c == 54;
output1{test++} = tr.d == 181;
}
{
returntype tr;
tr = permute(178#8,207#8,5#8,177#8,32#8);
output1{test++} = tr.a == 178;
output1{test++} = tr.b == 207;
output1{test++} = tr.c == 177;
output1{test++} = tr.d == 5;
}
{
returntype tr;
tr = permute(3#8,228#8,76#8,170#8,47#8);
output1{test++} = tr.a == 170;
output1{test++} = tr.b == 228;
output1{test++} = tr.c == 76;
output1{test++} = tr.d == 3;
}
{
returntype tr;
tr = permute(244#8,87#8,163#8,216#8,23#8);
output1{test++} = tr.a == 216;
output1{test++} = tr.b == 163;
output1{test++} = tr.c == 87;
output1{test++} = tr.d == 244;
}
{
returntype tr;
tr = permute(2#8,50#8,109#8,144#8,4#8);
output1{test++} = tr.a == 144;
output1{test++} = tr.b == 50;
output1{test++} = tr.c == 109;
output1{test++} = tr.d == 2;
}
{
returntype tr;
tr = permute(174#8,91#8,158#8,170#8,18#8);
output1{test++} = tr.a == 158;
output1{test++} = tr.b == 170;
output1{test++} = tr.c == 174;
output1{test++} = tr.d == 91;
}
{
returntype tr;
tr = permute(125#8,15#8,135#8,247#8,55#8);
output1{test++} = tr.a == 247;
output1{test++} = tr.b == 135;
output1{test++} = tr.c == 125;
output1{test++} = tr.d == 15;
}
{
returntype tr;
tr = permute(83#8,124#8,142#8,252#8,35#8);
output1{test++} = tr.a == 142;
output1{test++} = tr.b == 83;
output1{test++} = tr.c == 252;
output1{test++} = tr.d == 124;
}
{
returntype tr;
tr = permute(86#8,62#8,113#8,99#8,17#8);
output1{test++} = tr.a == 62;
output1{test++} = tr.b == 99;
output1{test++} = tr.c == 113;
output1{test++} = tr.d == 86;
}
{
returntype tr;
tr = permute(40#8,104#8,104#8,48#8,30#8);
output1{test++} = tr.a == 48;
output1{test++} = tr.b == 104;
output1{test++} = tr.c == 104;
output1{test++} = tr.d == 40;
}
{
returntype tr;
tr = permute(149#8,44#8,180#8,192#8,45#8);
output1{test++} = tr.a == 192;
output1{test++} = tr.b == 180;
output1{test++} = tr.c == 44;
output1{test++} = tr.d == 149;
}
{
returntype tr;
tr = permute(233#8,192#8,234#8,74#8,21#8);
output1{test++} = tr.a == 74;
output1{test++} = tr.b == 192;
output1{test++} = tr.c == 234;
output1{test++} = tr.d == 233;
}
{
returntype tr;
tr = permute(104#8,199#8,111#8,79#8,55#8);
output1{test++} = tr.a == 79;
output1{test++} = tr.b == 111;
output1{test++} = tr.c == 104;
output1{test++} = tr.d == 199;
}
{
returntype tr;
tr = permute(252#8,144#8,45#8,226#8,43#8);
output1{test++} = tr.a == 45;
output1{test++} = tr.b == 144;
output1{test++} = tr.c == 226;
output1{test++} = tr.d == 252;
}
{
returntype tr;
tr = permute(87#8,127#8,17#8,160#8,8#8);
output1{test++} = tr.a == 87;
output1{test++} = tr.b == 17;
output1{test++} = tr.c == 127;
output1{test++} = tr.d == 160;
}
{
returntype tr;
tr = permute(59#8,17#8,13#8,9#8,8#8);
output1{test++} = tr.a == 59;
output1{test++} = tr.b == 13;
output1{test++} = tr.c == 17;
output1{test++} = tr.d == 9;
}
{
returntype tr;
tr = permute(43#8,100#8,46#8,37#8,21#8);
output1{test++} = tr.a == 37;
output1{test++} = tr.b == 100;
output1{test++} = tr.c == 46;
output1{test++} = tr.d == 43;
}
{
returntype tr;
tr = permute(239#8,103#8,68#8,178#8,18#8);
output1{test++} = tr.a == 68;
output1{test++} = tr.b == 178;
output1{test++} = tr.c == 239;
output1{test++} = tr.d == 103;
}
{
returntype tr;
tr = permute(177#8,193#8,23#8,11#8,2#8);
output1{test++} = tr.a == 23;
output1{test++} = tr.b == 193;
output1{test++} = tr.c == 177;
output1{test++} = tr.d == 11;
}
{
returntype tr;
tr = permute(101#8,165#8,233#8,103#8,26#8);
output1{test++} = tr.a == 233;
output1{test++} = tr.b == 103;
output1{test++} = tr.c == 165;
output1{test++} = tr.d == 101;
}
{
returntype tr;
tr = permute(93#8,188#8,195#8,199#8,58#8);
output1{test++} = tr.a == 195;
output1{test++} = tr.b == 199;
output1{test++} = tr.c == 93;
output1{test++} = tr.d == 188;
}
{
returntype tr;
tr = permute(47#8,139#8,241#8,122#8,45#8);
output1{test++} = tr.a == 122;
output1{test++} = tr.b == 241;
output1{test++} = tr.c == 139;
output1{test++} = tr.d == 47;
}
{
returntype tr;
tr = permute(217#8,9#8,48#8,132#8,9#8);
output1{test++} = tr.a == 9;
output1{test++} = tr.b == 48;
output1{test++} = tr.c == 217;
output1{test++} = tr.d == 132;
}
{
returntype tr;
tr = permute(152#8,74#8,176#8,160#8,9#8);
output1{test++} = tr.a == 74;
output1{test++} = tr.b == 176;
output1{test++} = tr.c == 152;
output1{test++} = tr.d == 160;
}
{
returntype tr;
tr = permute(158#8,99#8,65#8,160#8,62#8);
output1{test++} = tr.a == 160;
output1{test++} = tr.b == 65;
output1{test++} = tr.c == 158;
output1{test++} = tr.d == 99;
}
{
returntype tr;
tr = permute(139#8,61#8,198#8,64#8,18#8);
output1{test++} = tr.a == 198;
output1{test++} = tr.b == 64;
output1{test++} = tr.c == 139;
output1{test++} = tr.d == 61;
}
{
returntype tr;
tr = permute(101#8,105#8,59#8,170#8,47#8);
output1{test++} = tr.a == 170;
output1{test++} = tr.b == 105;
output1{test++} = tr.c == 59;
output1{test++} = tr.d == 101;
}
{
returntype tr;
tr = permute(136#8,53#8,250#8,56#8,22#8);
output1{test++} = tr.a == 56;
output1{test++} = tr.b == 250;
output1{test++} = tr.c == 136;
output1{test++} = tr.d == 53;
}
{
returntype tr;
tr = permute(125#8,126#8,181#8,49#8,1#8);
output1{test++} = tr.a == 126;
output1{test++} = tr.b == 125;
output1{test++} = tr.c == 181;
output1{test++} = tr.d == 49;
}
{
returntype tr;
tr = permute(93#8,224#8,211#8,19#8,0#8);
output1{test++} = tr.a == 93;
output1{test++} = tr.b == 224;
output1{test++} = tr.c == 211;
output1{test++} = tr.d == 19;
}
{
returntype tr;
tr = permute(184#8,234#8,183#8,204#8,31#8);
output1{test++} = tr.a == 204;
output1{test++} = tr.b == 183;
output1{test++} = tr.c == 184;
output1{test++} = tr.d == 234;
}



output1{test++} = 156 == ( makeUnknown((makeUnknown(8) + makeUnknown(7))+makeUnknown(6) + makeUnknown(9)+makeUnknown(9) + makeUnknown(9))+makeUnknown(makeUnknown(9) + makeUnknown(9)+makeUnknown(9) + makeUnknown(9)+makeUnknown(9) + makeUnknown(9))+makeUnknown(makeUnknown(9) + makeUnknown(9)+makeUnknown(9) + makeUnknown(9)+makeUnknown(9) + makeUnknown(9)));






ONE = 1#1;
ZERO = 0#1;

ONE = makeBoolUnknown(ONE);
ZERO = makeBoolUnknown(ZERO);

{
int add = makeUnknown(9);
int mul = makeUnknown(9);
int sub = makeUnknown(9);
int divide = makeUnknown(9);
int mod = makeUnknown(9);

int less = makeUnknown(9);
int lesse = makeUnknown(9);
int greater = makeUnknown(9);
int greatere = makeUnknown(9);
int ne = makeUnknown(9);
int equ = makeUnknown(9);

int shiftlX = makeUnknown(8);
int shiftrX = makeUnknown(9);
int rotateX = makeUnknown(8);

int ppp = makeUnknown(9);
int pmm = makeUnknown(9);
int postpp = makeUnknown(9);
int postmm = makeUnknown(9);

int structop = makeUnknown(9);
int arrayop[1] = {makeUnknown(9)};
int wireop = makeUnknown(9);

int andX = makeUnknown(9);
int xor = makeUnknown(9);
int or = makeUnknown(9);


if(ONE)
    add = add;

if(ONE)
{
add++;
mul = mul*mul;
sub = sub - sub;
divide = divide / divide;
mod = mod % mod;

less{0} = less < less;
lesse{0} = lesse <= lesse;
greater{0} = greater > greater;
greatere{0} = greatere >= greatere;
equ{0} = equ == equ;
ne{0} = ne != ne;

shiftlX = shiftlX << 1;
rotateX = rotateX <<> 1;
shiftrX = shiftrX >> 1;


++ppp;
postpp++;
--pmm;
postmm--;

wireop{0} = wireop{0} ^ 1;
arrayop[0] = arrayop[0]+arrayop[0];

andX = andX & andX;
xor = xor ^ xor;
or = or | or;
}






output1{test++} = add == 10;
output1{test++} = mul == 81;
output1{test++} = sub == 0;
output1{test++} = divide == 1;
output1{test++} = mod == 0;
output1{test++} = less == 8;
output1{test++} = lesse == 9;
output1{test++} = greater == 8;
output1{test++} = greatere == 9;
output1{test++} = equ == 9;
output1{test++} = ne == 8;
output1{test++} = shiftlX == 16;
output1{test++} = shiftrX == 4;
output1{test++} = rotateX == 16;
output1{test++} = ppp == 10;
output1{test++} = postpp == 10;
output1{test++} = pmm == 8;
output1{test++} = postmm == 8;
output1{test++} = wireop == 8;
output1{test++} = arrayop[0] == 18;
output1{test++} = andX == 9;
output1{test++} = xor == 0;
output1{test++} = or == 9;



if(ONE)
add = add;

if(ZERO)
{
add++;
mul = mul*mul;
sub = sub - sub;
divide = divide / divide;
mod = mod % mod;

less{0} = less < less;
lesse{0} = lesse <= lesse;
greater{0} = greater > greater;
greatere{0} = greatere >= greatere;
equ{0} = equ == equ;
ne{0} = ne != ne;

shiftlX = shiftlX << 1;
rotateX = rotateX <<> 1;
shiftrX = shiftrX >> 1;


++ppp;
postpp++;
--pmm;
postmm--;

wireop{0} = wireop{0} ^ 1;
arrayop[0] = arrayop[0]+arrayop[0];

andX = andX & andX;
xor = xor ^ xor;
or = or | or;
}






output1{test++} = add == 10;
output1{test++} = mul == 81;
output1{test++} = sub == 0;
output1{test++} = divide == 1;
output1{test++} = mod == 0;
output1{test++} = less == 8;
output1{test++} = lesse == 9;
output1{test++} = greater == 8;
output1{test++} = greatere == 9;
output1{test++} = equ == 9;
output1{test++} = ne == 8;
output1{test++} = shiftlX == 16;
output1{test++} = shiftrX == 4;
output1{test++} = rotateX == 16;
output1{test++} = ppp == 10;
output1{test++} = postpp == 10;
output1{test++} = pmm == 8;
output1{test++} = postmm == 8;
output1{test++} = wireop == 8;
output1{test++} = arrayop[0] == 18;
output1{test++} = andX == 9;
output1{test++} = xor == 0;
output1{test++} = or == 9;

if(ONE)
add = add;

if(ONE)
{
add = add + add;
mul = mul*mul;
sub = sub - sub;
divide = divide / divide;
mod = mod % mod;

less{0} = less < less;
lesse{0} = lesse <= lesse;
greater{0} = greater > greater;
greatere{0} = greatere >= greatere;
equ{0} = equ == equ;
ne{0} = ne != ne;

shiftlX = shiftlX << 1;
rotateX = rotateX <<> 1;
shiftrX = shiftrX >> 1;


++ppp;
postpp++;
--pmm;
postmm--;

wireop{0} = wireop{0} ^ 1;
arrayop[0] = arrayop[0]+arrayop[0];

andX = andX & andX;
xor = xor ^ xor;
or = or | or;
}






output1{test++} = add == 20;
output1{test++} = mul == 6561;
output1{test++} = sub == 0;
output1{test++} = divide == 1;
output1{test++} = mod == 0;
output1{test++} = less == 8;
output1{test++} = lesse == 9;
output1{test++} = greater == 8;
output1{test++} = greatere == 9;
output1{test++} = equ == 9;
output1{test++} = ne == 8;
output1{test++} = shiftlX == 32;
output1{test++} = shiftrX == 2;
output1{test++} = rotateX == 32;
output1{test++} = ppp == 11;
output1{test++} = postpp == 11;
output1{test++} = pmm == 7;
output1{test++} = postmm == 7;
output1{test++} = wireop == 9;
output1{test++} = arrayop[0] == 36;
output1{test++} = andX == 9;
output1{test++} = xor == 0;
output1{test++} = or == 9;



}





{

short i,j;

i = 0; j = 0;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 0#4 == (i +j);
output1{test++} = 0#4 == (-i +j);
output1{test++} = 0#4 == (i  + -j);
output1{test++} = 0#4 == (-i  + -j);
i = 0; j = 1;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 1#4 == (i +j);
output1{test++} = 1#4 == (-i +j);
output1{test++} = -1#4 == (i  + -j);
output1{test++} = -1#4 == (-i  + -j);
i = 0; j = 2;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 2#4 == (i +j);
output1{test++} = 2#4 == (-i +j);
output1{test++} = -2#4 == (i  + -j);
output1{test++} = -2#4 == (-i  + -j);
i = 0; j = 3;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 3#4 == (i +j);
output1{test++} = 3#4 == (-i +j);
output1{test++} = -3#4 == (i  + -j);
output1{test++} = -3#4 == (-i  + -j);
i = 0; j = 4;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 4#4 == (i +j);
output1{test++} = 4#4 == (-i +j);
output1{test++} = -4#4 == (i  + -j);
output1{test++} = -4#4 == (-i  + -j);
i = 0; j = 5;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 5#4 == (i +j);
output1{test++} = 5#4 == (-i +j);
output1{test++} = -5#4 == (i  + -j);
output1{test++} = -5#4 == (-i  + -j);
i = 0; j = 6;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 6#4 == (i +j);
output1{test++} = 6#4 == (-i +j);
output1{test++} = -6#4 == (i  + -j);
output1{test++} = -6#4 == (-i  + -j);
i = 0; j = 7;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 7#4 == (i +j);
output1{test++} = 7#4 == (-i +j);
output1{test++} = -7#4 == (i  + -j);
output1{test++} = -7#4 == (-i  + -j);
i = 0; j = 8;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 8#4 == (i +j);
output1{test++} = 8#4 == (-i +j);
output1{test++} = -8#4 == (i  + -j);
output1{test++} = -8#4 == (-i  + -j);
i = 0; j = 9;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 9#4 == (i +j);
output1{test++} = 9#4 == (-i +j);
output1{test++} = -9#4 == (i  + -j);
output1{test++} = -9#4 == (-i  + -j);
i = 0; j = 10;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 10#4 == (i +j);
output1{test++} = 10#4 == (-i +j);
output1{test++} = -10#4 == (i  + -j);
output1{test++} = -10#4 == (-i  + -j);
i = 0; j = 11;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 11#4 == (i +j);
output1{test++} = 11#4 == (-i +j);
output1{test++} = -11#4 == (i  + -j);
output1{test++} = -11#4 == (-i  + -j);
i = 0; j = 12;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 12#4 == (i +j);
output1{test++} = 12#4 == (-i +j);
output1{test++} = -12#4 == (i  + -j);
output1{test++} = -12#4 == (-i  + -j);
i = 0; j = 13;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 13#4 == (i +j);
output1{test++} = 13#4 == (-i +j);
output1{test++} = -13#4 == (i  + -j);
output1{test++} = -13#4 == (-i  + -j);
i = 0; j = 14;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 14#4 == (i +j);
output1{test++} = 14#4 == (-i +j);
output1{test++} = -14#4 == (i  + -j);
output1{test++} = -14#4 == (-i  + -j);
i = 0; j = 15;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 15#4 == (i +j);
output1{test++} = 15#4 == (-i +j);
output1{test++} = -15#4 == (i  + -j);
output1{test++} = -15#4 == (-i  + -j);
i = 1; j = 0;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 1#4 == (i +j);
output1{test++} = -1#4 == (-i +j);
output1{test++} = 1#4 == (i  + -j);
output1{test++} = -1#4 == (-i  + -j);
i = 1; j = 1;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 2#4 == (i +j);
output1{test++} = 0#4 == (-i +j);
output1{test++} = 0#4 == (i  + -j);
output1{test++} = -2#4 == (-i  + -j);
i = 1; j = 2;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 3#4 == (i +j);
output1{test++} = 1#4 == (-i +j);
output1{test++} = -1#4 == (i  + -j);
output1{test++} = -3#4 == (-i  + -j);
i = 1; j = 3;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 4#4 == (i +j);
output1{test++} = 2#4 == (-i +j);
output1{test++} = -2#4 == (i  + -j);
output1{test++} = -4#4 == (-i  + -j);
i = 1; j = 4;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 5#4 == (i +j);
output1{test++} = 3#4 == (-i +j);
output1{test++} = -3#4 == (i  + -j);
output1{test++} = -5#4 == (-i  + -j);
i = 1; j = 5;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 6#4 == (i +j);
output1{test++} = 4#4 == (-i +j);
output1{test++} = -4#4 == (i  + -j);
output1{test++} = -6#4 == (-i  + -j);
i = 1; j = 6;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 7#4 == (i +j);
output1{test++} = 5#4 == (-i +j);
output1{test++} = -5#4 == (i  + -j);
output1{test++} = -7#4 == (-i  + -j);
i = 1; j = 7;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 8#4 == (i +j);
output1{test++} = 6#4 == (-i +j);
output1{test++} = -6#4 == (i  + -j);
output1{test++} = -8#4 == (-i  + -j);
i = 1; j = 8;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 9#4 == (i +j);
output1{test++} = 7#4 == (-i +j);
output1{test++} = -7#4 == (i  + -j);
output1{test++} = -9#4 == (-i  + -j);
i = 1; j = 9;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 10#4 == (i +j);
output1{test++} = 8#4 == (-i +j);
output1{test++} = -8#4 == (i  + -j);
output1{test++} = -10#4 == (-i  + -j);
i = 1; j = 10;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 11#4 == (i +j);
output1{test++} = 9#4 == (-i +j);
output1{test++} = -9#4 == (i  + -j);
output1{test++} = -11#4 == (-i  + -j);
i = 1; j = 11;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 12#4 == (i +j);
output1{test++} = 10#4 == (-i +j);
output1{test++} = -10#4 == (i  + -j);
output1{test++} = -12#4 == (-i  + -j);
i = 1; j = 12;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 13#4 == (i +j);
output1{test++} = 11#4 == (-i +j);
output1{test++} = -11#4 == (i  + -j);
output1{test++} = -13#4 == (-i  + -j);
i = 1; j = 13;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 14#4 == (i +j);
output1{test++} = 12#4 == (-i +j);
output1{test++} = -12#4 == (i  + -j);
output1{test++} = -14#4 == (-i  + -j);
i = 1; j = 14;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 15#4 == (i +j);
output1{test++} = 13#4 == (-i +j);
output1{test++} = -13#4 == (i  + -j);
output1{test++} = -15#4 == (-i  + -j);
i = 1; j = 15;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 16#4 == (i +j);
output1{test++} = 14#4 == (-i +j);
output1{test++} = -14#4 == (i  + -j);
output1{test++} = -16#4 == (-i  + -j);
i = 2; j = 0;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 2#4 == (i +j);
output1{test++} = -2#4 == (-i +j);
output1{test++} = 2#4 == (i  + -j);
output1{test++} = -2#4 == (-i  + -j);
i = 2; j = 1;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 3#4 == (i +j);
output1{test++} = -1#4 == (-i +j);
output1{test++} = 1#4 == (i  + -j);
output1{test++} = -3#4 == (-i  + -j);
i = 2; j = 2;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 4#4 == (i +j);
output1{test++} = 0#4 == (-i +j);
output1{test++} = 0#4 == (i  + -j);
output1{test++} = -4#4 == (-i  + -j);
i = 2; j = 3;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 5#4 == (i +j);
output1{test++} = 1#4 == (-i +j);
output1{test++} = -1#4 == (i  + -j);
output1{test++} = -5#4 == (-i  + -j);
i = 2; j = 4;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 6#4 == (i +j);
output1{test++} = 2#4 == (-i +j);
output1{test++} = -2#4 == (i  + -j);
output1{test++} = -6#4 == (-i  + -j);
i = 2; j = 5;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 7#4 == (i +j);
output1{test++} = 3#4 == (-i +j);
output1{test++} = -3#4 == (i  + -j);
output1{test++} = -7#4 == (-i  + -j);
i = 2; j = 6;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 8#4 == (i +j);
output1{test++} = 4#4 == (-i +j);
output1{test++} = -4#4 == (i  + -j);
output1{test++} = -8#4 == (-i  + -j);
i = 2; j = 7;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 9#4 == (i +j);
output1{test++} = 5#4 == (-i +j);
output1{test++} = -5#4 == (i  + -j);
output1{test++} = -9#4 == (-i  + -j);
i = 2; j = 8;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 10#4 == (i +j);
output1{test++} = 6#4 == (-i +j);
output1{test++} = -6#4 == (i  + -j);
output1{test++} = -10#4 == (-i  + -j);
i = 2; j = 9;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 11#4 == (i +j);
output1{test++} = 7#4 == (-i +j);
output1{test++} = -7#4 == (i  + -j);
output1{test++} = -11#4 == (-i  + -j);
i = 2; j = 10;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 12#4 == (i +j);
output1{test++} = 8#4 == (-i +j);
output1{test++} = -8#4 == (i  + -j);
output1{test++} = -12#4 == (-i  + -j);
i = 2; j = 11;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 13#4 == (i +j);
output1{test++} = 9#4 == (-i +j);
output1{test++} = -9#4 == (i  + -j);
output1{test++} = -13#4 == (-i  + -j);
i = 2; j = 12;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 14#4 == (i +j);
output1{test++} = 10#4 == (-i +j);
output1{test++} = -10#4 == (i  + -j);
output1{test++} = -14#4 == (-i  + -j);
i = 2; j = 13;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 15#4 == (i +j);
output1{test++} = 11#4 == (-i +j);
output1{test++} = -11#4 == (i  + -j);
output1{test++} = -15#4 == (-i  + -j);
i = 2; j = 14;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 16#4 == (i +j);
output1{test++} = 12#4 == (-i +j);
output1{test++} = -12#4 == (i  + -j);
output1{test++} = -16#4 == (-i  + -j);
i = 2; j = 15;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 17#4 == (i +j);
output1{test++} = 13#4 == (-i +j);
output1{test++} = -13#4 == (i  + -j);
output1{test++} = -17#4 == (-i  + -j);
i = 3; j = 0;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 3#4 == (i +j);
output1{test++} = -3#4 == (-i +j);
output1{test++} = 3#4 == (i  + -j);
output1{test++} = -3#4 == (-i  + -j);
i = 3; j = 1;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 4#4 == (i +j);
output1{test++} = -2#4 == (-i +j);
output1{test++} = 2#4 == (i  + -j);
output1{test++} = -4#4 == (-i  + -j);
i = 3; j = 2;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 5#4 == (i +j);
output1{test++} = -1#4 == (-i +j);
output1{test++} = 1#4 == (i  + -j);
output1{test++} = -5#4 == (-i  + -j);
i = 3; j = 3;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 6#4 == (i +j);
output1{test++} = 0#4 == (-i +j);
output1{test++} = 0#4 == (i  + -j);
output1{test++} = -6#4 == (-i  + -j);
i = 3; j = 4;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 7#4 == (i +j);
output1{test++} = 1#4 == (-i +j);
output1{test++} = -1#4 == (i  + -j);
output1{test++} = -7#4 == (-i  + -j);
i = 3; j = 5;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 8#4 == (i +j);
output1{test++} = 2#4 == (-i +j);
output1{test++} = -2#4 == (i  + -j);
output1{test++} = -8#4 == (-i  + -j);
i = 3; j = 6;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 9#4 == (i +j);
output1{test++} = 3#4 == (-i +j);
output1{test++} = -3#4 == (i  + -j);
output1{test++} = -9#4 == (-i  + -j);
i = 3; j = 7;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 10#4 == (i +j);
output1{test++} = 4#4 == (-i +j);
output1{test++} = -4#4 == (i  + -j);
output1{test++} = -10#4 == (-i  + -j);
i = 3; j = 8;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 11#4 == (i +j);
output1{test++} = 5#4 == (-i +j);
output1{test++} = -5#4 == (i  + -j);
output1{test++} = -11#4 == (-i  + -j);
i = 3; j = 9;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 12#4 == (i +j);
output1{test++} = 6#4 == (-i +j);
output1{test++} = -6#4 == (i  + -j);
output1{test++} = -12#4 == (-i  + -j);
i = 3; j = 10;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 13#4 == (i +j);
output1{test++} = 7#4 == (-i +j);
output1{test++} = -7#4 == (i  + -j);
output1{test++} = -13#4 == (-i  + -j);
i = 3; j = 11;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 14#4 == (i +j);
output1{test++} = 8#4 == (-i +j);
output1{test++} = -8#4 == (i  + -j);
output1{test++} = -14#4 == (-i  + -j);
i = 3; j = 12;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 15#4 == (i +j);
output1{test++} = 9#4 == (-i +j);
output1{test++} = -9#4 == (i  + -j);
output1{test++} = -15#4 == (-i  + -j);
i = 3; j = 13;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 16#4 == (i +j);
output1{test++} = 10#4 == (-i +j);
output1{test++} = -10#4 == (i  + -j);
output1{test++} = -16#4 == (-i  + -j);
i = 3; j = 14;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 17#4 == (i +j);
output1{test++} = 11#4 == (-i +j);
output1{test++} = -11#4 == (i  + -j);
output1{test++} = -17#4 == (-i  + -j);
i = 3; j = 15;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 18#4 == (i +j);
output1{test++} = 12#4 == (-i +j);
output1{test++} = -12#4 == (i  + -j);
output1{test++} = -18#4 == (-i  + -j);
i = 4; j = 0;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 4#4 == (i +j);
output1{test++} = -4#4 == (-i +j);
output1{test++} = 4#4 == (i  + -j);
output1{test++} = -4#4 == (-i  + -j);
i = 4; j = 1;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 5#4 == (i +j);
output1{test++} = -3#4 == (-i +j);
output1{test++} = 3#4 == (i  + -j);
output1{test++} = -5#4 == (-i  + -j);
i = 4; j = 2;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 6#4 == (i +j);
output1{test++} = -2#4 == (-i +j);
output1{test++} = 2#4 == (i  + -j);
output1{test++} = -6#4 == (-i  + -j);
i = 4; j = 3;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 7#4 == (i +j);
output1{test++} = -1#4 == (-i +j);
output1{test++} = 1#4 == (i  + -j);
output1{test++} = -7#4 == (-i  + -j);
i = 4; j = 4;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 8#4 == (i +j);
output1{test++} = 0#4 == (-i +j);
output1{test++} = 0#4 == (i  + -j);
output1{test++} = -8#4 == (-i  + -j);
i = 4; j = 5;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 9#4 == (i +j);
output1{test++} = 1#4 == (-i +j);
output1{test++} = -1#4 == (i  + -j);
output1{test++} = -9#4 == (-i  + -j);
i = 4; j = 6;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 10#4 == (i +j);
output1{test++} = 2#4 == (-i +j);
output1{test++} = -2#4 == (i  + -j);
output1{test++} = -10#4 == (-i  + -j);
i = 4; j = 7;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 11#4 == (i +j);
output1{test++} = 3#4 == (-i +j);
output1{test++} = -3#4 == (i  + -j);
output1{test++} = -11#4 == (-i  + -j);
i = 4; j = 8;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 12#4 == (i +j);
output1{test++} = 4#4 == (-i +j);
output1{test++} = -4#4 == (i  + -j);
output1{test++} = -12#4 == (-i  + -j);
i = 4; j = 9;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 13#4 == (i +j);
output1{test++} = 5#4 == (-i +j);
output1{test++} = -5#4 == (i  + -j);
output1{test++} = -13#4 == (-i  + -j);
i = 4; j = 10;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 14#4 == (i +j);
output1{test++} = 6#4 == (-i +j);
output1{test++} = -6#4 == (i  + -j);
output1{test++} = -14#4 == (-i  + -j);
i = 4; j = 11;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 15#4 == (i +j);
output1{test++} = 7#4 == (-i +j);
output1{test++} = -7#4 == (i  + -j);
output1{test++} = -15#4 == (-i  + -j);
i = 4; j = 12;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 16#4 == (i +j);
output1{test++} = 8#4 == (-i +j);
output1{test++} = -8#4 == (i  + -j);
output1{test++} = -16#4 == (-i  + -j);
i = 4; j = 13;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 17#4 == (i +j);
output1{test++} = 9#4 == (-i +j);
output1{test++} = -9#4 == (i  + -j);
output1{test++} = -17#4 == (-i  + -j);
i = 4; j = 14;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 18#4 == (i +j);
output1{test++} = 10#4 == (-i +j);
output1{test++} = -10#4 == (i  + -j);
output1{test++} = -18#4 == (-i  + -j);
i = 4; j = 15;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 19#4 == (i +j);
output1{test++} = 11#4 == (-i +j);
output1{test++} = -11#4 == (i  + -j);
output1{test++} = -19#4 == (-i  + -j);
i = 5; j = 0;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 5#4 == (i +j);
output1{test++} = -5#4 == (-i +j);
output1{test++} = 5#4 == (i  + -j);
output1{test++} = -5#4 == (-i  + -j);
i = 5; j = 1;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 6#4 == (i +j);
output1{test++} = -4#4 == (-i +j);
output1{test++} = 4#4 == (i  + -j);
output1{test++} = -6#4 == (-i  + -j);
i = 5; j = 2;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 7#4 == (i +j);
output1{test++} = -3#4 == (-i +j);
output1{test++} = 3#4 == (i  + -j);
output1{test++} = -7#4 == (-i  + -j);
i = 5; j = 3;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 8#4 == (i +j);
output1{test++} = -2#4 == (-i +j);
output1{test++} = 2#4 == (i  + -j);
output1{test++} = -8#4 == (-i  + -j);
i = 5; j = 4;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 9#4 == (i +j);
output1{test++} = -1#4 == (-i +j);
output1{test++} = 1#4 == (i  + -j);
output1{test++} = -9#4 == (-i  + -j);
i = 5; j = 5;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 10#4 == (i +j);
output1{test++} = 0#4 == (-i +j);
output1{test++} = 0#4 == (i  + -j);
output1{test++} = -10#4 == (-i  + -j);
i = 5; j = 6;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 11#4 == (i +j);
output1{test++} = 1#4 == (-i +j);
output1{test++} = -1#4 == (i  + -j);
output1{test++} = -11#4 == (-i  + -j);
i = 5; j = 7;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 12#4 == (i +j);
output1{test++} = 2#4 == (-i +j);
output1{test++} = -2#4 == (i  + -j);
output1{test++} = -12#4 == (-i  + -j);
i = 5; j = 8;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 13#4 == (i +j);
output1{test++} = 3#4 == (-i +j);
output1{test++} = -3#4 == (i  + -j);
output1{test++} = -13#4 == (-i  + -j);
i = 5; j = 9;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 14#4 == (i +j);
output1{test++} = 4#4 == (-i +j);
output1{test++} = -4#4 == (i  + -j);
output1{test++} = -14#4 == (-i  + -j);
i = 5; j = 10;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 15#4 == (i +j);
output1{test++} = 5#4 == (-i +j);
output1{test++} = -5#4 == (i  + -j);
output1{test++} = -15#4 == (-i  + -j);
i = 5; j = 11;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 16#4 == (i +j);
output1{test++} = 6#4 == (-i +j);
output1{test++} = -6#4 == (i  + -j);
output1{test++} = -16#4 == (-i  + -j);
i = 5; j = 12;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 17#4 == (i +j);
output1{test++} = 7#4 == (-i +j);
output1{test++} = -7#4 == (i  + -j);
output1{test++} = -17#4 == (-i  + -j);
i = 5; j = 13;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 18#4 == (i +j);
output1{test++} = 8#4 == (-i +j);
output1{test++} = -8#4 == (i  + -j);
output1{test++} = -18#4 == (-i  + -j);
i = 5; j = 14;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 19#4 == (i +j);
output1{test++} = 9#4 == (-i +j);
output1{test++} = -9#4 == (i  + -j);
output1{test++} = -19#4 == (-i  + -j);
i = 5; j = 15;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 20#4 == (i +j);
output1{test++} = 10#4 == (-i +j);
output1{test++} = -10#4 == (i  + -j);
output1{test++} = -20#4 == (-i  + -j);
i = 6; j = 0;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 6#4 == (i +j);
output1{test++} = -6#4 == (-i +j);
output1{test++} = 6#4 == (i  + -j);
output1{test++} = -6#4 == (-i  + -j);
i = 6; j = 1;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 7#4 == (i +j);
output1{test++} = -5#4 == (-i +j);
output1{test++} = 5#4 == (i  + -j);
output1{test++} = -7#4 == (-i  + -j);
i = 6; j = 2;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 8#4 == (i +j);
output1{test++} = -4#4 == (-i +j);
output1{test++} = 4#4 == (i  + -j);
output1{test++} = -8#4 == (-i  + -j);
i = 6; j = 3;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 9#4 == (i +j);
output1{test++} = -3#4 == (-i +j);
output1{test++} = 3#4 == (i  + -j);
output1{test++} = -9#4 == (-i  + -j);
i = 6; j = 4;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 10#4 == (i +j);
output1{test++} = -2#4 == (-i +j);
output1{test++} = 2#4 == (i  + -j);
output1{test++} = -10#4 == (-i  + -j);
i = 6; j = 5;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 11#4 == (i +j);
output1{test++} = -1#4 == (-i +j);
output1{test++} = 1#4 == (i  + -j);
output1{test++} = -11#4 == (-i  + -j);
i = 6; j = 6;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 12#4 == (i +j);
output1{test++} = 0#4 == (-i +j);
output1{test++} = 0#4 == (i  + -j);
output1{test++} = -12#4 == (-i  + -j);
i = 6; j = 7;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 13#4 == (i +j);
output1{test++} = 1#4 == (-i +j);
output1{test++} = -1#4 == (i  + -j);
output1{test++} = -13#4 == (-i  + -j);
i = 6; j = 8;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 14#4 == (i +j);
output1{test++} = 2#4 == (-i +j);
output1{test++} = -2#4 == (i  + -j);
output1{test++} = -14#4 == (-i  + -j);
i = 6; j = 9;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 15#4 == (i +j);
output1{test++} = 3#4 == (-i +j);
output1{test++} = -3#4 == (i  + -j);
output1{test++} = -15#4 == (-i  + -j);
i = 6; j = 10;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 16#4 == (i +j);
output1{test++} = 4#4 == (-i +j);
output1{test++} = -4#4 == (i  + -j);
output1{test++} = -16#4 == (-i  + -j);
i = 6; j = 11;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 17#4 == (i +j);
output1{test++} = 5#4 == (-i +j);
output1{test++} = -5#4 == (i  + -j);
output1{test++} = -17#4 == (-i  + -j);
i = 6; j = 12;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 18#4 == (i +j);
output1{test++} = 6#4 == (-i +j);
output1{test++} = -6#4 == (i  + -j);
output1{test++} = -18#4 == (-i  + -j);
i = 6; j = 13;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 19#4 == (i +j);
output1{test++} = 7#4 == (-i +j);
output1{test++} = -7#4 == (i  + -j);
output1{test++} = -19#4 == (-i  + -j);
i = 6; j = 14;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 20#4 == (i +j);
output1{test++} = 8#4 == (-i +j);
output1{test++} = -8#4 == (i  + -j);
output1{test++} = -20#4 == (-i  + -j);
i = 6; j = 15;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 21#4 == (i +j);
output1{test++} = 9#4 == (-i +j);
output1{test++} = -9#4 == (i  + -j);
output1{test++} = -21#4 == (-i  + -j);
i = 7; j = 0;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 7#4 == (i +j);
output1{test++} = -7#4 == (-i +j);
output1{test++} = 7#4 == (i  + -j);
output1{test++} = -7#4 == (-i  + -j);
i = 7; j = 1;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 8#4 == (i +j);
output1{test++} = -6#4 == (-i +j);
output1{test++} = 6#4 == (i  + -j);
output1{test++} = -8#4 == (-i  + -j);
i = 7; j = 2;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 9#4 == (i +j);
output1{test++} = -5#4 == (-i +j);
output1{test++} = 5#4 == (i  + -j);
output1{test++} = -9#4 == (-i  + -j);
i = 7; j = 3;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 10#4 == (i +j);
output1{test++} = -4#4 == (-i +j);
output1{test++} = 4#4 == (i  + -j);
output1{test++} = -10#4 == (-i  + -j);
i = 7; j = 4;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 11#4 == (i +j);
output1{test++} = -3#4 == (-i +j);
output1{test++} = 3#4 == (i  + -j);
output1{test++} = -11#4 == (-i  + -j);
i = 7; j = 5;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 12#4 == (i +j);
output1{test++} = -2#4 == (-i +j);
output1{test++} = 2#4 == (i  + -j);
output1{test++} = -12#4 == (-i  + -j);
i = 7; j = 6;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 13#4 == (i +j);
output1{test++} = -1#4 == (-i +j);
output1{test++} = 1#4 == (i  + -j);
output1{test++} = -13#4 == (-i  + -j);
i = 7; j = 7;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 14#4 == (i +j);
output1{test++} = 0#4 == (-i +j);
output1{test++} = 0#4 == (i  + -j);
output1{test++} = -14#4 == (-i  + -j);
i = 7; j = 8;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 15#4 == (i +j);
output1{test++} = 1#4 == (-i +j);
output1{test++} = -1#4 == (i  + -j);
output1{test++} = -15#4 == (-i  + -j);
i = 7; j = 9;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 16#4 == (i +j);
output1{test++} = 2#4 == (-i +j);
output1{test++} = -2#4 == (i  + -j);
output1{test++} = -16#4 == (-i  + -j);
i = 7; j = 10;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 17#4 == (i +j);
output1{test++} = 3#4 == (-i +j);
output1{test++} = -3#4 == (i  + -j);
output1{test++} = -17#4 == (-i  + -j);
i = 7; j = 11;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 18#4 == (i +j);
output1{test++} = 4#4 == (-i +j);
output1{test++} = -4#4 == (i  + -j);
output1{test++} = -18#4 == (-i  + -j);
i = 7; j = 12;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 19#4 == (i +j);
output1{test++} = 5#4 == (-i +j);
output1{test++} = -5#4 == (i  + -j);
output1{test++} = -19#4 == (-i  + -j);
i = 7; j = 13;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 20#4 == (i +j);
output1{test++} = 6#4 == (-i +j);
output1{test++} = -6#4 == (i  + -j);
output1{test++} = -20#4 == (-i  + -j);
i = 7; j = 14;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 21#4 == (i +j);
output1{test++} = 7#4 == (-i +j);
output1{test++} = -7#4 == (i  + -j);
output1{test++} = -21#4 == (-i  + -j);
i = 7; j = 15;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 22#4 == (i +j);
output1{test++} = 8#4 == (-i +j);
output1{test++} = -8#4 == (i  + -j);
output1{test++} = -22#4 == (-i  + -j);
i = 8; j = 0;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 8#4 == (i +j);
output1{test++} = -8#4 == (-i +j);
output1{test++} = 8#4 == (i  + -j);
output1{test++} = -8#4 == (-i  + -j);
i = 8; j = 1;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 9#4 == (i +j);
output1{test++} = -7#4 == (-i +j);
output1{test++} = 7#4 == (i  + -j);
output1{test++} = -9#4 == (-i  + -j);
i = 8; j = 2;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 10#4 == (i +j);
output1{test++} = -6#4 == (-i +j);
output1{test++} = 6#4 == (i  + -j);
output1{test++} = -10#4 == (-i  + -j);
i = 8; j = 3;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 11#4 == (i +j);
output1{test++} = -5#4 == (-i +j);
output1{test++} = 5#4 == (i  + -j);
output1{test++} = -11#4 == (-i  + -j);
i = 8; j = 4;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 12#4 == (i +j);
output1{test++} = -4#4 == (-i +j);
output1{test++} = 4#4 == (i  + -j);
output1{test++} = -12#4 == (-i  + -j);
i = 8; j = 5;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 13#4 == (i +j);
output1{test++} = -3#4 == (-i +j);
output1{test++} = 3#4 == (i  + -j);
output1{test++} = -13#4 == (-i  + -j);
i = 8; j = 6;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 14#4 == (i +j);
output1{test++} = -2#4 == (-i +j);
output1{test++} = 2#4 == (i  + -j);
output1{test++} = -14#4 == (-i  + -j);
i = 8; j = 7;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 15#4 == (i +j);
output1{test++} = -1#4 == (-i +j);
output1{test++} = 1#4 == (i  + -j);
output1{test++} = -15#4 == (-i  + -j);
i = 8; j = 8;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 16#4 == (i +j);
output1{test++} = 0#4 == (-i +j);
output1{test++} = 0#4 == (i  + -j);
output1{test++} = -16#4 == (-i  + -j);
i = 8; j = 9;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 17#4 == (i +j);
output1{test++} = 1#4 == (-i +j);
output1{test++} = -1#4 == (i  + -j);
output1{test++} = -17#4 == (-i  + -j);
i = 8; j = 10;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 18#4 == (i +j);
output1{test++} = 2#4 == (-i +j);
output1{test++} = -2#4 == (i  + -j);
output1{test++} = -18#4 == (-i  + -j);
i = 8; j = 11;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 19#4 == (i +j);
output1{test++} = 3#4 == (-i +j);
output1{test++} = -3#4 == (i  + -j);
output1{test++} = -19#4 == (-i  + -j);
i = 8; j = 12;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 20#4 == (i +j);
output1{test++} = 4#4 == (-i +j);
output1{test++} = -4#4 == (i  + -j);
output1{test++} = -20#4 == (-i  + -j);
i = 8; j = 13;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 21#4 == (i +j);
output1{test++} = 5#4 == (-i +j);
output1{test++} = -5#4 == (i  + -j);
output1{test++} = -21#4 == (-i  + -j);
i = 8; j = 14;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 22#4 == (i +j);
output1{test++} = 6#4 == (-i +j);
output1{test++} = -6#4 == (i  + -j);
output1{test++} = -22#4 == (-i  + -j);
i = 8; j = 15;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 23#4 == (i +j);
output1{test++} = 7#4 == (-i +j);
output1{test++} = -7#4 == (i  + -j);
output1{test++} = -23#4 == (-i  + -j);
i = 9; j = 0;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 9#4 == (i +j);
output1{test++} = -9#4 == (-i +j);
output1{test++} = 9#4 == (i  + -j);
output1{test++} = -9#4 == (-i  + -j);
i = 9; j = 1;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 10#4 == (i +j);
output1{test++} = -8#4 == (-i +j);
output1{test++} = 8#4 == (i  + -j);
output1{test++} = -10#4 == (-i  + -j);
i = 9; j = 2;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 11#4 == (i +j);
output1{test++} = -7#4 == (-i +j);
output1{test++} = 7#4 == (i  + -j);
output1{test++} = -11#4 == (-i  + -j);
i = 9; j = 3;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 12#4 == (i +j);
output1{test++} = -6#4 == (-i +j);
output1{test++} = 6#4 == (i  + -j);
output1{test++} = -12#4 == (-i  + -j);
i = 9; j = 4;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 13#4 == (i +j);
output1{test++} = -5#4 == (-i +j);
output1{test++} = 5#4 == (i  + -j);
output1{test++} = -13#4 == (-i  + -j);
i = 9; j = 5;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 14#4 == (i +j);
output1{test++} = -4#4 == (-i +j);
output1{test++} = 4#4 == (i  + -j);
output1{test++} = -14#4 == (-i  + -j);
i = 9; j = 6;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 15#4 == (i +j);
output1{test++} = -3#4 == (-i +j);
output1{test++} = 3#4 == (i  + -j);
output1{test++} = -15#4 == (-i  + -j);
i = 9; j = 7;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 16#4 == (i +j);
output1{test++} = -2#4 == (-i +j);
output1{test++} = 2#4 == (i  + -j);
output1{test++} = -16#4 == (-i  + -j);
i = 9; j = 8;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 17#4 == (i +j);
output1{test++} = -1#4 == (-i +j);
output1{test++} = 1#4 == (i  + -j);
output1{test++} = -17#4 == (-i  + -j);
i = 9; j = 9;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 18#4 == (i +j);
output1{test++} = 0#4 == (-i +j);
output1{test++} = 0#4 == (i  + -j);
output1{test++} = -18#4 == (-i  + -j);
i = 9; j = 10;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 19#4 == (i +j);
output1{test++} = 1#4 == (-i +j);
output1{test++} = -1#4 == (i  + -j);
output1{test++} = -19#4 == (-i  + -j);
i = 9; j = 11;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 20#4 == (i +j);
output1{test++} = 2#4 == (-i +j);
output1{test++} = -2#4 == (i  + -j);
output1{test++} = -20#4 == (-i  + -j);
i = 9; j = 12;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 21#4 == (i +j);
output1{test++} = 3#4 == (-i +j);
output1{test++} = -3#4 == (i  + -j);
output1{test++} = -21#4 == (-i  + -j);
i = 9; j = 13;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 22#4 == (i +j);
output1{test++} = 4#4 == (-i +j);
output1{test++} = -4#4 == (i  + -j);
output1{test++} = -22#4 == (-i  + -j);
i = 9; j = 14;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 23#4 == (i +j);
output1{test++} = 5#4 == (-i +j);
output1{test++} = -5#4 == (i  + -j);
output1{test++} = -23#4 == (-i  + -j);
i = 9; j = 15;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 24#4 == (i +j);
output1{test++} = 6#4 == (-i +j);
output1{test++} = -6#4 == (i  + -j);
output1{test++} = -24#4 == (-i  + -j);
i = 10; j = 0;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 10#4 == (i +j);
output1{test++} = -10#4 == (-i +j);
output1{test++} = 10#4 == (i  + -j);
output1{test++} = -10#4 == (-i  + -j);
i = 10; j = 1;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 11#4 == (i +j);
output1{test++} = -9#4 == (-i +j);
output1{test++} = 9#4 == (i  + -j);
output1{test++} = -11#4 == (-i  + -j);
i = 10; j = 2;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 12#4 == (i +j);
output1{test++} = -8#4 == (-i +j);
output1{test++} = 8#4 == (i  + -j);
output1{test++} = -12#4 == (-i  + -j);
i = 10; j = 3;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 13#4 == (i +j);
output1{test++} = -7#4 == (-i +j);
output1{test++} = 7#4 == (i  + -j);
output1{test++} = -13#4 == (-i  + -j);
i = 10; j = 4;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 14#4 == (i +j);
output1{test++} = -6#4 == (-i +j);
output1{test++} = 6#4 == (i  + -j);
output1{test++} = -14#4 == (-i  + -j);
i = 10; j = 5;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 15#4 == (i +j);
output1{test++} = -5#4 == (-i +j);
output1{test++} = 5#4 == (i  + -j);
output1{test++} = -15#4 == (-i  + -j);
i = 10; j = 6;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 16#4 == (i +j);
output1{test++} = -4#4 == (-i +j);
output1{test++} = 4#4 == (i  + -j);
output1{test++} = -16#4 == (-i  + -j);
i = 10; j = 7;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 17#4 == (i +j);
output1{test++} = -3#4 == (-i +j);
output1{test++} = 3#4 == (i  + -j);
output1{test++} = -17#4 == (-i  + -j);
i = 10; j = 8;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 18#4 == (i +j);
output1{test++} = -2#4 == (-i +j);
output1{test++} = 2#4 == (i  + -j);
output1{test++} = -18#4 == (-i  + -j);
i = 10; j = 9;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 19#4 == (i +j);
output1{test++} = -1#4 == (-i +j);
output1{test++} = 1#4 == (i  + -j);
output1{test++} = -19#4 == (-i  + -j);
i = 10; j = 10;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 20#4 == (i +j);
output1{test++} = 0#4 == (-i +j);
output1{test++} = 0#4 == (i  + -j);
output1{test++} = -20#4 == (-i  + -j);
i = 10; j = 11;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 21#4 == (i +j);
output1{test++} = 1#4 == (-i +j);
output1{test++} = -1#4 == (i  + -j);
output1{test++} = -21#4 == (-i  + -j);
i = 10; j = 12;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 22#4 == (i +j);
output1{test++} = 2#4 == (-i +j);
output1{test++} = -2#4 == (i  + -j);
output1{test++} = -22#4 == (-i  + -j);
i = 10; j = 13;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 23#4 == (i +j);
output1{test++} = 3#4 == (-i +j);
output1{test++} = -3#4 == (i  + -j);
output1{test++} = -23#4 == (-i  + -j);
i = 10; j = 14;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 24#4 == (i +j);
output1{test++} = 4#4 == (-i +j);
output1{test++} = -4#4 == (i  + -j);
output1{test++} = -24#4 == (-i  + -j);
i = 10; j = 15;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 25#4 == (i +j);
output1{test++} = 5#4 == (-i +j);
output1{test++} = -5#4 == (i  + -j);
output1{test++} = -25#4 == (-i  + -j);
i = 11; j = 0;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 11#4 == (i +j);
output1{test++} = -11#4 == (-i +j);
output1{test++} = 11#4 == (i  + -j);
output1{test++} = -11#4 == (-i  + -j);
i = 11; j = 1;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 12#4 == (i +j);
output1{test++} = -10#4 == (-i +j);
output1{test++} = 10#4 == (i  + -j);
output1{test++} = -12#4 == (-i  + -j);
i = 11; j = 2;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 13#4 == (i +j);
output1{test++} = -9#4 == (-i +j);
output1{test++} = 9#4 == (i  + -j);
output1{test++} = -13#4 == (-i  + -j);
i = 11; j = 3;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 14#4 == (i +j);
output1{test++} = -8#4 == (-i +j);
output1{test++} = 8#4 == (i  + -j);
output1{test++} = -14#4 == (-i  + -j);
i = 11; j = 4;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 15#4 == (i +j);
output1{test++} = -7#4 == (-i +j);
output1{test++} = 7#4 == (i  + -j);
output1{test++} = -15#4 == (-i  + -j);
i = 11; j = 5;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 16#4 == (i +j);
output1{test++} = -6#4 == (-i +j);
output1{test++} = 6#4 == (i  + -j);
output1{test++} = -16#4 == (-i  + -j);
i = 11; j = 6;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 17#4 == (i +j);
output1{test++} = -5#4 == (-i +j);
output1{test++} = 5#4 == (i  + -j);
output1{test++} = -17#4 == (-i  + -j);
i = 11; j = 7;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 18#4 == (i +j);
output1{test++} = -4#4 == (-i +j);
output1{test++} = 4#4 == (i  + -j);
output1{test++} = -18#4 == (-i  + -j);
i = 11; j = 8;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 19#4 == (i +j);
output1{test++} = -3#4 == (-i +j);
output1{test++} = 3#4 == (i  + -j);
output1{test++} = -19#4 == (-i  + -j);
i = 11; j = 9;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 20#4 == (i +j);
output1{test++} = -2#4 == (-i +j);
output1{test++} = 2#4 == (i  + -j);
output1{test++} = -20#4 == (-i  + -j);
i = 11; j = 10;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 21#4 == (i +j);
output1{test++} = -1#4 == (-i +j);
output1{test++} = 1#4 == (i  + -j);
output1{test++} = -21#4 == (-i  + -j);
i = 11; j = 11;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 22#4 == (i +j);
output1{test++} = 0#4 == (-i +j);
output1{test++} = 0#4 == (i  + -j);
output1{test++} = -22#4 == (-i  + -j);
i = 11; j = 12;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 23#4 == (i +j);
output1{test++} = 1#4 == (-i +j);
output1{test++} = -1#4 == (i  + -j);
output1{test++} = -23#4 == (-i  + -j);
i = 11; j = 13;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 24#4 == (i +j);
output1{test++} = 2#4 == (-i +j);
output1{test++} = -2#4 == (i  + -j);
output1{test++} = -24#4 == (-i  + -j);
i = 11; j = 14;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 25#4 == (i +j);
output1{test++} = 3#4 == (-i +j);
output1{test++} = -3#4 == (i  + -j);
output1{test++} = -25#4 == (-i  + -j);
i = 11; j = 15;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 26#4 == (i +j);
output1{test++} = 4#4 == (-i +j);
output1{test++} = -4#4 == (i  + -j);
output1{test++} = -26#4 == (-i  + -j);
i = 12; j = 0;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 12#4 == (i +j);
output1{test++} = -12#4 == (-i +j);
output1{test++} = 12#4 == (i  + -j);
output1{test++} = -12#4 == (-i  + -j);
i = 12; j = 1;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 13#4 == (i +j);
output1{test++} = -11#4 == (-i +j);
output1{test++} = 11#4 == (i  + -j);
output1{test++} = -13#4 == (-i  + -j);
i = 12; j = 2;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 14#4 == (i +j);
output1{test++} = -10#4 == (-i +j);
output1{test++} = 10#4 == (i  + -j);
output1{test++} = -14#4 == (-i  + -j);
i = 12; j = 3;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 15#4 == (i +j);
output1{test++} = -9#4 == (-i +j);
output1{test++} = 9#4 == (i  + -j);
output1{test++} = -15#4 == (-i  + -j);
i = 12; j = 4;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 16#4 == (i +j);
output1{test++} = -8#4 == (-i +j);
output1{test++} = 8#4 == (i  + -j);
output1{test++} = -16#4 == (-i  + -j);
i = 12; j = 5;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 17#4 == (i +j);
output1{test++} = -7#4 == (-i +j);
output1{test++} = 7#4 == (i  + -j);
output1{test++} = -17#4 == (-i  + -j);
i = 12; j = 6;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 18#4 == (i +j);
output1{test++} = -6#4 == (-i +j);
output1{test++} = 6#4 == (i  + -j);
output1{test++} = -18#4 == (-i  + -j);
i = 12; j = 7;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 19#4 == (i +j);
output1{test++} = -5#4 == (-i +j);
output1{test++} = 5#4 == (i  + -j);
output1{test++} = -19#4 == (-i  + -j);
i = 12; j = 8;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 20#4 == (i +j);
output1{test++} = -4#4 == (-i +j);
output1{test++} = 4#4 == (i  + -j);
output1{test++} = -20#4 == (-i  + -j);
i = 12; j = 9;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 21#4 == (i +j);
output1{test++} = -3#4 == (-i +j);
output1{test++} = 3#4 == (i  + -j);
output1{test++} = -21#4 == (-i  + -j);
i = 12; j = 10;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 22#4 == (i +j);
output1{test++} = -2#4 == (-i +j);
output1{test++} = 2#4 == (i  + -j);
output1{test++} = -22#4 == (-i  + -j);
i = 12; j = 11;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 23#4 == (i +j);
output1{test++} = -1#4 == (-i +j);
output1{test++} = 1#4 == (i  + -j);
output1{test++} = -23#4 == (-i  + -j);
i = 12; j = 12;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 24#4 == (i +j);
output1{test++} = 0#4 == (-i +j);
output1{test++} = 0#4 == (i  + -j);
output1{test++} = -24#4 == (-i  + -j);
i = 12; j = 13;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 25#4 == (i +j);
output1{test++} = 1#4 == (-i +j);
output1{test++} = -1#4 == (i  + -j);
output1{test++} = -25#4 == (-i  + -j);
i = 12; j = 14;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 26#4 == (i +j);
output1{test++} = 2#4 == (-i +j);
output1{test++} = -2#4 == (i  + -j);
output1{test++} = -26#4 == (-i  + -j);
i = 12; j = 15;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 27#4 == (i +j);
output1{test++} = 3#4 == (-i +j);
output1{test++} = -3#4 == (i  + -j);
output1{test++} = -27#4 == (-i  + -j);
i = 13; j = 0;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 13#4 == (i +j);
output1{test++} = -13#4 == (-i +j);
output1{test++} = 13#4 == (i  + -j);
output1{test++} = -13#4 == (-i  + -j);
i = 13; j = 1;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 14#4 == (i +j);
output1{test++} = -12#4 == (-i +j);
output1{test++} = 12#4 == (i  + -j);
output1{test++} = -14#4 == (-i  + -j);
i = 13; j = 2;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 15#4 == (i +j);
output1{test++} = -11#4 == (-i +j);
output1{test++} = 11#4 == (i  + -j);
output1{test++} = -15#4 == (-i  + -j);
i = 13; j = 3;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 16#4 == (i +j);
output1{test++} = -10#4 == (-i +j);
output1{test++} = 10#4 == (i  + -j);
output1{test++} = -16#4 == (-i  + -j);
i = 13; j = 4;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 17#4 == (i +j);
output1{test++} = -9#4 == (-i +j);
output1{test++} = 9#4 == (i  + -j);
output1{test++} = -17#4 == (-i  + -j);
i = 13; j = 5;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 18#4 == (i +j);
output1{test++} = -8#4 == (-i +j);
output1{test++} = 8#4 == (i  + -j);
output1{test++} = -18#4 == (-i  + -j);
i = 13; j = 6;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 19#4 == (i +j);
output1{test++} = -7#4 == (-i +j);
output1{test++} = 7#4 == (i  + -j);
output1{test++} = -19#4 == (-i  + -j);
i = 13; j = 7;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 20#4 == (i +j);
output1{test++} = -6#4 == (-i +j);
output1{test++} = 6#4 == (i  + -j);
output1{test++} = -20#4 == (-i  + -j);
i = 13; j = 8;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 21#4 == (i +j);
output1{test++} = -5#4 == (-i +j);
output1{test++} = 5#4 == (i  + -j);
output1{test++} = -21#4 == (-i  + -j);
i = 13; j = 9;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 22#4 == (i +j);
output1{test++} = -4#4 == (-i +j);
output1{test++} = 4#4 == (i  + -j);
output1{test++} = -22#4 == (-i  + -j);
i = 13; j = 10;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 23#4 == (i +j);
output1{test++} = -3#4 == (-i +j);
output1{test++} = 3#4 == (i  + -j);
output1{test++} = -23#4 == (-i  + -j);
i = 13; j = 11;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 24#4 == (i +j);
output1{test++} = -2#4 == (-i +j);
output1{test++} = 2#4 == (i  + -j);
output1{test++} = -24#4 == (-i  + -j);
i = 13; j = 12;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 25#4 == (i +j);
output1{test++} = -1#4 == (-i +j);
output1{test++} = 1#4 == (i  + -j);
output1{test++} = -25#4 == (-i  + -j);
i = 13; j = 13;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 26#4 == (i +j);
output1{test++} = 0#4 == (-i +j);
output1{test++} = 0#4 == (i  + -j);
output1{test++} = -26#4 == (-i  + -j);
i = 13; j = 14;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 27#4 == (i +j);
output1{test++} = 1#4 == (-i +j);
output1{test++} = -1#4 == (i  + -j);
output1{test++} = -27#4 == (-i  + -j);
i = 13; j = 15;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 28#4 == (i +j);
output1{test++} = 2#4 == (-i +j);
output1{test++} = -2#4 == (i  + -j);
output1{test++} = -28#4 == (-i  + -j);
i = 14; j = 0;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 14#4 == (i +j);
output1{test++} = -14#4 == (-i +j);
output1{test++} = 14#4 == (i  + -j);
output1{test++} = -14#4 == (-i  + -j);
i = 14; j = 1;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 15#4 == (i +j);
output1{test++} = -13#4 == (-i +j);
output1{test++} = 13#4 == (i  + -j);
output1{test++} = -15#4 == (-i  + -j);
i = 14; j = 2;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 16#4 == (i +j);
output1{test++} = -12#4 == (-i +j);
output1{test++} = 12#4 == (i  + -j);
output1{test++} = -16#4 == (-i  + -j);
i = 14; j = 3;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 17#4 == (i +j);
output1{test++} = -11#4 == (-i +j);
output1{test++} = 11#4 == (i  + -j);
output1{test++} = -17#4 == (-i  + -j);
i = 14; j = 4;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 18#4 == (i +j);
output1{test++} = -10#4 == (-i +j);
output1{test++} = 10#4 == (i  + -j);
output1{test++} = -18#4 == (-i  + -j);
i = 14; j = 5;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 19#4 == (i +j);
output1{test++} = -9#4 == (-i +j);
output1{test++} = 9#4 == (i  + -j);
output1{test++} = -19#4 == (-i  + -j);
i = 14; j = 6;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 20#4 == (i +j);
output1{test++} = -8#4 == (-i +j);
output1{test++} = 8#4 == (i  + -j);
output1{test++} = -20#4 == (-i  + -j);
i = 14; j = 7;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 21#4 == (i +j);
output1{test++} = -7#4 == (-i +j);
output1{test++} = 7#4 == (i  + -j);
output1{test++} = -21#4 == (-i  + -j);
i = 14; j = 8;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 22#4 == (i +j);
output1{test++} = -6#4 == (-i +j);
output1{test++} = 6#4 == (i  + -j);
output1{test++} = -22#4 == (-i  + -j);
i = 14; j = 9;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 23#4 == (i +j);
output1{test++} = -5#4 == (-i +j);
output1{test++} = 5#4 == (i  + -j);
output1{test++} = -23#4 == (-i  + -j);
i = 14; j = 10;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 24#4 == (i +j);
output1{test++} = -4#4 == (-i +j);
output1{test++} = 4#4 == (i  + -j);
output1{test++} = -24#4 == (-i  + -j);
i = 14; j = 11;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 25#4 == (i +j);
output1{test++} = -3#4 == (-i +j);
output1{test++} = 3#4 == (i  + -j);
output1{test++} = -25#4 == (-i  + -j);
i = 14; j = 12;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 26#4 == (i +j);
output1{test++} = -2#4 == (-i +j);
output1{test++} = 2#4 == (i  + -j);
output1{test++} = -26#4 == (-i  + -j);
i = 14; j = 13;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 27#4 == (i +j);
output1{test++} = -1#4 == (-i +j);
output1{test++} = 1#4 == (i  + -j);
output1{test++} = -27#4 == (-i  + -j);
i = 14; j = 14;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 28#4 == (i +j);
output1{test++} = 0#4 == (-i +j);
output1{test++} = 0#4 == (i  + -j);
output1{test++} = -28#4 == (-i  + -j);
i = 14; j = 15;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 29#4 == (i +j);
output1{test++} = 1#4 == (-i +j);
output1{test++} = -1#4 == (i  + -j);
output1{test++} = -29#4 == (-i  + -j);
i = 15; j = 0;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 15#4 == (i +j);
output1{test++} = -15#4 == (-i +j);
output1{test++} = 15#4 == (i  + -j);
output1{test++} = -15#4 == (-i  + -j);
i = 15; j = 1;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 16#4 == (i +j);
output1{test++} = -14#4 == (-i +j);
output1{test++} = 14#4 == (i  + -j);
output1{test++} = -16#4 == (-i  + -j);
i = 15; j = 2;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 17#4 == (i +j);
output1{test++} = -13#4 == (-i +j);
output1{test++} = 13#4 == (i  + -j);
output1{test++} = -17#4 == (-i  + -j);
i = 15; j = 3;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 18#4 == (i +j);
output1{test++} = -12#4 == (-i +j);
output1{test++} = 12#4 == (i  + -j);
output1{test++} = -18#4 == (-i  + -j);
i = 15; j = 4;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 19#4 == (i +j);
output1{test++} = -11#4 == (-i +j);
output1{test++} = 11#4 == (i  + -j);
output1{test++} = -19#4 == (-i  + -j);
i = 15; j = 5;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 20#4 == (i +j);
output1{test++} = -10#4 == (-i +j);
output1{test++} = 10#4 == (i  + -j);
output1{test++} = -20#4 == (-i  + -j);
i = 15; j = 6;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 21#4 == (i +j);
output1{test++} = -9#4 == (-i +j);
output1{test++} = 9#4 == (i  + -j);
output1{test++} = -21#4 == (-i  + -j);
i = 15; j = 7;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 22#4 == (i +j);
output1{test++} = -8#4 == (-i +j);
output1{test++} = 8#4 == (i  + -j);
output1{test++} = -22#4 == (-i  + -j);
i = 15; j = 8;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 23#4 == (i +j);
output1{test++} = -7#4 == (-i +j);
output1{test++} = 7#4 == (i  + -j);
output1{test++} = -23#4 == (-i  + -j);
i = 15; j = 9;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 24#4 == (i +j);
output1{test++} = -6#4 == (-i +j);
output1{test++} = 6#4 == (i  + -j);
output1{test++} = -24#4 == (-i  + -j);
i = 15; j = 10;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 25#4 == (i +j);
output1{test++} = -5#4 == (-i +j);
output1{test++} = 5#4 == (i  + -j);
output1{test++} = -25#4 == (-i  + -j);
i = 15; j = 11;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 26#4 == (i +j);
output1{test++} = -4#4 == (-i +j);
output1{test++} = 4#4 == (i  + -j);
output1{test++} = -26#4 == (-i  + -j);
i = 15; j = 12;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 27#4 == (i +j);
output1{test++} = -3#4 == (-i +j);
output1{test++} = 3#4 == (i  + -j);
output1{test++} = -27#4 == (-i  + -j);
i = 15; j = 13;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 28#4 == (i +j);
output1{test++} = -2#4 == (-i +j);
output1{test++} = 2#4 == (i  + -j);
output1{test++} = -28#4 == (-i  + -j);
i = 15; j = 14;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 29#4 == (i +j);
output1{test++} = -1#4 == (-i +j);
output1{test++} = 1#4 == (i  + -j);
output1{test++} = -29#4 == (-i  + -j);
i = 15; j = 15;   i{0} = MUB(i{0}); i{1} = MUB(i{1});  j{2} = MUB(j{2}); j{1} = MUB(j{1});    /*if(i{4}==1){i{4} = get1();} if(i{4}==0){i{4} = get0();}*/ output1{test++} = 30#4 == (i +j);
output1{test++} = 0#4 == (-i +j);
output1{test++} = 0#4 == (i  + -j);
output1{test++} = -30#4 == (-i  + -j);

}






{
largeint temp;

for(int i=0;i<128;i++)
{
temp{i} = (i{0:8}%2#8){0};
}

temp = makeUnknownLI(temp);

for(int i=0;i<128;i++)
{
output1{test++} = (i{0:8}%2#8){0} == temp{i};
emptyfunction();
}


}


{
int temp[128];

for(int i=0;i<128;i++)
{
temp[i] = i;
temp[i] = makeUnknown(temp[i]);
}



for(int i=0;i<128;i++)
{
output1{test++} = temp[i] == i;
}


}

{
int temp[128];

if(ZERO)
    for(int i=0;i<128;i++)
    {
    temp[i] = i;
    temp[i] = makeUnknown(temp[i]);
    }



    for(int i=0;i<128;i++)
    {
        output1{test++} = temp[i] == 0;
    }


}



{
int temp[128];

if(ONE)
    for(int i=0;i<128;i++)
    {
    temp[i] = i;
    temp[i] = makeUnknown(temp[i]);
    }



for(int i=0;i<128;i++)
{
output1{test++} = temp[i] == i;
}


}


for(int j=0;j<10;j++)
{
    int temp[128];

    if(ONE)
        for(int i=0;i<128;i++)
        {
            temp[i] = makeUnknown(j)+i;
            temp[i] = makeUnknown(temp[i]);
        }



    for(int i=0;i<128;i++)
    {
        output1{test++} = temp[i] == j+i;
    }


}



for(int j=0;j<10;j++)
{
    int temp[128];

    if(ONE)
      if(ONE)
            for(int i=0;i<128;i++)
            {
                temp[i] = j+i;
                temp[i] = makeUnknown(temp[i]);
            }


    for(int i=0;i<128;i++)
    {
        output1{test++} = temp[i] == j+i;
    }
}




{
supershort ssi;
supershort ssj;
ssi = 0;
ssi = ssi + ssi;
ssi = ssi - ssi;
ssi = ssi / ssi;
ssi = ssi * ssi;
ssi = ssi % ssi;
ssi{0} = ssi < ssi;
ssi{0} = ssi > ssi;
ssi{0} = ssi <= ssi;
ssi{0} = ssi >= ssi;
ssi{0} = ssi == ssi;
ssi{0} = ssi != ssi;
ssi = ~ssi;
ssi = ssi << 1;
ssi = ssi <<> 2;
ssi = ssi >> 1;
}
{
bool ssi;
bool ssj;
ssi = 0;
ssi = ssi + ssi;
ssi = ssi - ssi;
ssi = ssi / ssi;
ssi = ssi * ssi;
ssi = ssi % ssi;
ssi{0} = ssi < ssi;
ssi{0} = ssi > ssi;
ssi{0} = ssi <= ssi;
ssi{0} = ssi >= ssi;
ssi{0} = ssi == ssi;
ssi{0} = ssi != ssi;
ssi = ~ssi;
ssi = ssi << 1;
ssi = ssi <<> 2;
ssi = ssi >> 1;
}




output1{test++} = 64#8 == (-8#4 ** -8#4);
output1{test++} = 0##8 == (0##4 ** 0##4);
output1{test++} = 56#8 == (-8#4 ** -7#4);
output1{test++} = 0##8 == (0##4 ** 1##4);
output1{test++} = 48#8 == (-8#4 ** -6#4);
output1{test++} = 0##8 == (0##4 ** 2##4);
output1{test++} = 40#8 == (-8#4 ** -5#4);
output1{test++} = 0##8 == (0##4 ** 3##4);
output1{test++} = 32#8 == (-8#4 ** -4#4);
output1{test++} = 0##8 == (0##4 ** 4##4);
output1{test++} = 24#8 == (-8#4 ** -3#4);
output1{test++} = 0##8 == (0##4 ** 5##4);
output1{test++} = 16#8 == (-8#4 ** -2#4);
output1{test++} = 0##8 == (0##4 ** 6##4);
output1{test++} = 8#8 == (-8#4 ** -1#4);
output1{test++} = 0##8 == (0##4 ** 7##4);
output1{test++} = 0#8 == (-8#4 ** 0#4);
output1{test++} = 0##8 == (0##4 ** 8##4);
output1{test++} = -8#8 == (-8#4 ** 1#4);
output1{test++} = 0##8 == (0##4 ** 9##4);
output1{test++} = -16#8 == (-8#4 ** 2#4);
output1{test++} = 0##8 == (0##4 ** 10##4);
output1{test++} = -24#8 == (-8#4 ** 3#4);
output1{test++} = 0##8 == (0##4 ** 11##4);
output1{test++} = -32#8 == (-8#4 ** 4#4);
output1{test++} = 0##8 == (0##4 ** 12##4);
output1{test++} = -40#8 == (-8#4 ** 5#4);
output1{test++} = 0##8 == (0##4 ** 13##4);
output1{test++} = -48#8 == (-8#4 ** 6#4);
output1{test++} = 0##8 == (0##4 ** 14##4);
output1{test++} = -56#8 == (-8#4 ** 7#4);
output1{test++} = 0##8 == (0##4 ** 15##4);
output1{test++} = 56#8 == (-7#4 ** -8#4);
output1{test++} = 0##8 == (1##4 ** 0##4);
output1{test++} = 49#8 == (-7#4 ** -7#4);
output1{test++} = 1##8 == (1##4 ** 1##4);
output1{test++} = 42#8 == (-7#4 ** -6#4);
output1{test++} = 2##8 == (1##4 ** 2##4);
output1{test++} = 35#8 == (-7#4 ** -5#4);
output1{test++} = 3##8 == (1##4 ** 3##4);
output1{test++} = 28#8 == (-7#4 ** -4#4);
output1{test++} = 4##8 == (1##4 ** 4##4);
output1{test++} = 21#8 == (-7#4 ** -3#4);
output1{test++} = 5##8 == (1##4 ** 5##4);
output1{test++} = 14#8 == (-7#4 ** -2#4);
output1{test++} = 6##8 == (1##4 ** 6##4);
output1{test++} = 7#8 == (-7#4 ** -1#4);
output1{test++} = 7##8 == (1##4 ** 7##4);
output1{test++} = 0#8 == (-7#4 ** 0#4);
output1{test++} = 8##8 == (1##4 ** 8##4);
output1{test++} = -7#8 == (-7#4 ** 1#4);
output1{test++} = 9##8 == (1##4 ** 9##4);
output1{test++} = -14#8 == (-7#4 ** 2#4);
output1{test++} = 10##8 == (1##4 ** 10##4);
output1{test++} = -21#8 == (-7#4 ** 3#4);
output1{test++} = 11##8 == (1##4 ** 11##4);
output1{test++} = -28#8 == (-7#4 ** 4#4);
output1{test++} = 12##8 == (1##4 ** 12##4);
output1{test++} = -35#8 == (-7#4 ** 5#4);
output1{test++} = 13##8 == (1##4 ** 13##4);
output1{test++} = -42#8 == (-7#4 ** 6#4);
output1{test++} = 14##8 == (1##4 ** 14##4);
output1{test++} = -49#8 == (-7#4 ** 7#4);
output1{test++} = 15##8 == (1##4 ** 15##4);
output1{test++} = 48#8 == (-6#4 ** -8#4);
output1{test++} = 0##8 == (2##4 ** 0##4);
output1{test++} = 42#8 == (-6#4 ** -7#4);
output1{test++} = 2##8 == (2##4 ** 1##4);
output1{test++} = 36#8 == (-6#4 ** -6#4);
output1{test++} = 4##8 == (2##4 ** 2##4);
output1{test++} = 30#8 == (-6#4 ** -5#4);
output1{test++} = 6##8 == (2##4 ** 3##4);
output1{test++} = 24#8 == (-6#4 ** -4#4);
output1{test++} = 8##8 == (2##4 ** 4##4);
output1{test++} = 18#8 == (-6#4 ** -3#4);
output1{test++} = 10##8 == (2##4 ** 5##4);
output1{test++} = 12#8 == (-6#4 ** -2#4);
output1{test++} = 12##8 == (2##4 ** 6##4);
output1{test++} = 6#8 == (-6#4 ** -1#4);
output1{test++} = 14##8 == (2##4 ** 7##4);
output1{test++} = 0#8 == (-6#4 ** 0#4);
output1{test++} = 16##8 == (2##4 ** 8##4);
output1{test++} = -6#8 == (-6#4 ** 1#4);
output1{test++} = 18##8 == (2##4 ** 9##4);
output1{test++} = -12#8 == (-6#4 ** 2#4);
output1{test++} = 20##8 == (2##4 ** 10##4);
output1{test++} = -18#8 == (-6#4 ** 3#4);
output1{test++} = 22##8 == (2##4 ** 11##4);
output1{test++} = -24#8 == (-6#4 ** 4#4);
output1{test++} = 24##8 == (2##4 ** 12##4);
output1{test++} = -30#8 == (-6#4 ** 5#4);
output1{test++} = 26##8 == (2##4 ** 13##4);
output1{test++} = -36#8 == (-6#4 ** 6#4);
output1{test++} = 28##8 == (2##4 ** 14##4);
output1{test++} = -42#8 == (-6#4 ** 7#4);
output1{test++} = 30##8 == (2##4 ** 15##4);
output1{test++} = 40#8 == (-5#4 ** -8#4);
output1{test++} = 0##8 == (3##4 ** 0##4);
output1{test++} = 35#8 == (-5#4 ** -7#4);
output1{test++} = 3##8 == (3##4 ** 1##4);
output1{test++} = 30#8 == (-5#4 ** -6#4);
output1{test++} = 6##8 == (3##4 ** 2##4);
output1{test++} = 25#8 == (-5#4 ** -5#4);
output1{test++} = 9##8 == (3##4 ** 3##4);
output1{test++} = 20#8 == (-5#4 ** -4#4);
output1{test++} = 12##8 == (3##4 ** 4##4);
output1{test++} = 15#8 == (-5#4 ** -3#4);
output1{test++} = 15##8 == (3##4 ** 5##4);
output1{test++} = 10#8 == (-5#4 ** -2#4);
output1{test++} = 18##8 == (3##4 ** 6##4);
output1{test++} = 5#8 == (-5#4 ** -1#4);
output1{test++} = 21##8 == (3##4 ** 7##4);
output1{test++} = 0#8 == (-5#4 ** 0#4);
output1{test++} = 24##8 == (3##4 ** 8##4);
output1{test++} = -5#8 == (-5#4 ** 1#4);
output1{test++} = 27##8 == (3##4 ** 9##4);
output1{test++} = -10#8 == (-5#4 ** 2#4);
output1{test++} = 30##8 == (3##4 ** 10##4);
output1{test++} = -15#8 == (-5#4 ** 3#4);
output1{test++} = 33##8 == (3##4 ** 11##4);
output1{test++} = -20#8 == (-5#4 ** 4#4);
output1{test++} = 36##8 == (3##4 ** 12##4);
output1{test++} = -25#8 == (-5#4 ** 5#4);
output1{test++} = 39##8 == (3##4 ** 13##4);
output1{test++} = -30#8 == (-5#4 ** 6#4);
output1{test++} = 42##8 == (3##4 ** 14##4);
output1{test++} = -35#8 == (-5#4 ** 7#4);
output1{test++} = 45##8 == (3##4 ** 15##4);
output1{test++} = 32#8 == (-4#4 ** -8#4);
output1{test++} = 0##8 == (4##4 ** 0##4);
output1{test++} = 28#8 == (-4#4 ** -7#4);
output1{test++} = 4##8 == (4##4 ** 1##4);
output1{test++} = 24#8 == (-4#4 ** -6#4);
output1{test++} = 8##8 == (4##4 ** 2##4);
output1{test++} = 20#8 == (-4#4 ** -5#4);
output1{test++} = 12##8 == (4##4 ** 3##4);
output1{test++} = 16#8 == (-4#4 ** -4#4);
output1{test++} = 16##8 == (4##4 ** 4##4);
output1{test++} = 12#8 == (-4#4 ** -3#4);
output1{test++} = 20##8 == (4##4 ** 5##4);
output1{test++} = 8#8 == (-4#4 ** -2#4);
output1{test++} = 24##8 == (4##4 ** 6##4);
output1{test++} = 4#8 == (-4#4 ** -1#4);
output1{test++} = 28##8 == (4##4 ** 7##4);
output1{test++} = 0#8 == (-4#4 ** 0#4);
output1{test++} = 32##8 == (4##4 ** 8##4);
output1{test++} = -4#8 == (-4#4 ** 1#4);
output1{test++} = 36##8 == (4##4 ** 9##4);
output1{test++} = -8#8 == (-4#4 ** 2#4);
output1{test++} = 40##8 == (4##4 ** 10##4);
output1{test++} = -12#8 == (-4#4 ** 3#4);
output1{test++} = 44##8 == (4##4 ** 11##4);
output1{test++} = -16#8 == (-4#4 ** 4#4);
output1{test++} = 48##8 == (4##4 ** 12##4);
output1{test++} = -20#8 == (-4#4 ** 5#4);
output1{test++} = 52##8 == (4##4 ** 13##4);
output1{test++} = -24#8 == (-4#4 ** 6#4);
output1{test++} = 56##8 == (4##4 ** 14##4);
output1{test++} = -28#8 == (-4#4 ** 7#4);
output1{test++} = 60##8 == (4##4 ** 15##4);
output1{test++} = 24#8 == (-3#4 ** -8#4);
output1{test++} = 0##8 == (5##4 ** 0##4);
output1{test++} = 21#8 == (-3#4 ** -7#4);
output1{test++} = 5##8 == (5##4 ** 1##4);
output1{test++} = 18#8 == (-3#4 ** -6#4);
output1{test++} = 10##8 == (5##4 ** 2##4);
output1{test++} = 15#8 == (-3#4 ** -5#4);
output1{test++} = 15##8 == (5##4 ** 3##4);
output1{test++} = 12#8 == (-3#4 ** -4#4);
output1{test++} = 20##8 == (5##4 ** 4##4);
output1{test++} = 9#8 == (-3#4 ** -3#4);
output1{test++} = 25##8 == (5##4 ** 5##4);
output1{test++} = 6#8 == (-3#4 ** -2#4);
output1{test++} = 30##8 == (5##4 ** 6##4);
output1{test++} = 3#8 == (-3#4 ** -1#4);
output1{test++} = 35##8 == (5##4 ** 7##4);
output1{test++} = 0#8 == (-3#4 ** 0#4);
output1{test++} = 40##8 == (5##4 ** 8##4);
output1{test++} = -3#8 == (-3#4 ** 1#4);
output1{test++} = 45##8 == (5##4 ** 9##4);
output1{test++} = -6#8 == (-3#4 ** 2#4);
output1{test++} = 50##8 == (5##4 ** 10##4);
output1{test++} = -9#8 == (-3#4 ** 3#4);
output1{test++} = 55##8 == (5##4 ** 11##4);
output1{test++} = -12#8 == (-3#4 ** 4#4);
output1{test++} = 60##8 == (5##4 ** 12##4);
output1{test++} = -15#8 == (-3#4 ** 5#4);
output1{test++} = 65##8 == (5##4 ** 13##4);
output1{test++} = -18#8 == (-3#4 ** 6#4);
output1{test++} = 70##8 == (5##4 ** 14##4);
output1{test++} = -21#8 == (-3#4 ** 7#4);
output1{test++} = 75##8 == (5##4 ** 15##4);
output1{test++} = 16#8 == (-2#4 ** -8#4);
output1{test++} = 0##8 == (6##4 ** 0##4);
output1{test++} = 14#8 == (-2#4 ** -7#4);
output1{test++} = 6##8 == (6##4 ** 1##4);
output1{test++} = 12#8 == (-2#4 ** -6#4);
output1{test++} = 12##8 == (6##4 ** 2##4);
output1{test++} = 10#8 == (-2#4 ** -5#4);
output1{test++} = 18##8 == (6##4 ** 3##4);
output1{test++} = 8#8 == (-2#4 ** -4#4);
output1{test++} = 24##8 == (6##4 ** 4##4);
output1{test++} = 6#8 == (-2#4 ** -3#4);
output1{test++} = 30##8 == (6##4 ** 5##4);
output1{test++} = 4#8 == (-2#4 ** -2#4);
output1{test++} = 36##8 == (6##4 ** 6##4);
output1{test++} = 2#8 == (-2#4 ** -1#4);
output1{test++} = 42##8 == (6##4 ** 7##4);
output1{test++} = 0#8 == (-2#4 ** 0#4);
output1{test++} = 48##8 == (6##4 ** 8##4);
output1{test++} = -2#8 == (-2#4 ** 1#4);
output1{test++} = 54##8 == (6##4 ** 9##4);
output1{test++} = -4#8 == (-2#4 ** 2#4);
output1{test++} = 60##8 == (6##4 ** 10##4);
output1{test++} = -6#8 == (-2#4 ** 3#4);
output1{test++} = 66##8 == (6##4 ** 11##4);
output1{test++} = -8#8 == (-2#4 ** 4#4);
output1{test++} = 72##8 == (6##4 ** 12##4);
output1{test++} = -10#8 == (-2#4 ** 5#4);
output1{test++} = 78##8 == (6##4 ** 13##4);
output1{test++} = -12#8 == (-2#4 ** 6#4);
output1{test++} = 84##8 == (6##4 ** 14##4);
output1{test++} = -14#8 == (-2#4 ** 7#4);
output1{test++} = 90##8 == (6##4 ** 15##4);
output1{test++} = 8#8 == (-1#4 ** -8#4);
output1{test++} = 0##8 == (7##4 ** 0##4);
output1{test++} = 7#8 == (-1#4 ** -7#4);
output1{test++} = 7##8 == (7##4 ** 1##4);
output1{test++} = 6#8 == (-1#4 ** -6#4);
output1{test++} = 14##8 == (7##4 ** 2##4);
output1{test++} = 5#8 == (-1#4 ** -5#4);
output1{test++} = 21##8 == (7##4 ** 3##4);
output1{test++} = 4#8 == (-1#4 ** -4#4);
output1{test++} = 28##8 == (7##4 ** 4##4);
output1{test++} = 3#8 == (-1#4 ** -3#4);
output1{test++} = 35##8 == (7##4 ** 5##4);
output1{test++} = 2#8 == (-1#4 ** -2#4);
output1{test++} = 42##8 == (7##4 ** 6##4);
output1{test++} = 1#8 == (-1#4 ** -1#4);
output1{test++} = 49##8 == (7##4 ** 7##4);
output1{test++} = 0#8 == (-1#4 ** 0#4);
output1{test++} = 56##8 == (7##4 ** 8##4);
output1{test++} = -1#8 == (-1#4 ** 1#4);
output1{test++} = 63##8 == (7##4 ** 9##4);
output1{test++} = -2#8 == (-1#4 ** 2#4);
output1{test++} = 70##8 == (7##4 ** 10##4);
output1{test++} = -3#8 == (-1#4 ** 3#4);
output1{test++} = 77##8 == (7##4 ** 11##4);
output1{test++} = -4#8 == (-1#4 ** 4#4);
output1{test++} = 84##8 == (7##4 ** 12##4);
output1{test++} = -5#8 == (-1#4 ** 5#4);
output1{test++} = 91##8 == (7##4 ** 13##4);
output1{test++} = -6#8 == (-1#4 ** 6#4);
output1{test++} = 98##8 == (7##4 ** 14##4);
output1{test++} = -7#8 == (-1#4 ** 7#4);
output1{test++} = 105##8 == (7##4 ** 15##4);
output1{test++} = 0#8 == (0#4 ** -8#4);
output1{test++} = 0##8 == (8##4 ** 0##4);
output1{test++} = 0#8 == (0#4 ** -7#4);
output1{test++} = 8##8 == (8##4 ** 1##4);
output1{test++} = 0#8 == (0#4 ** -6#4);
output1{test++} = 16##8 == (8##4 ** 2##4);
output1{test++} = 0#8 == (0#4 ** -5#4);
output1{test++} = 24##8 == (8##4 ** 3##4);
output1{test++} = 0#8 == (0#4 ** -4#4);
output1{test++} = 32##8 == (8##4 ** 4##4);
output1{test++} = 0#8 == (0#4 ** -3#4);
output1{test++} = 40##8 == (8##4 ** 5##4);
output1{test++} = 0#8 == (0#4 ** -2#4);
output1{test++} = 48##8 == (8##4 ** 6##4);
output1{test++} = 0#8 == (0#4 ** -1#4);
output1{test++} = 56##8 == (8##4 ** 7##4);
output1{test++} = 0#8 == (0#4 ** 0#4);
output1{test++} = 64##8 == (8##4 ** 8##4);
output1{test++} = 0#8 == (0#4 ** 1#4);
output1{test++} = 72##8 == (8##4 ** 9##4);
output1{test++} = 0#8 == (0#4 ** 2#4);
output1{test++} = 80##8 == (8##4 ** 10##4);
output1{test++} = 0#8 == (0#4 ** 3#4);
output1{test++} = 88##8 == (8##4 ** 11##4);
output1{test++} = 0#8 == (0#4 ** 4#4);
output1{test++} = 96##8 == (8##4 ** 12##4);
output1{test++} = 0#8 == (0#4 ** 5#4);
output1{test++} = 104##8 == (8##4 ** 13##4);
output1{test++} = 0#8 == (0#4 ** 6#4);
output1{test++} = 112##8 == (8##4 ** 14##4);
output1{test++} = 0#8 == (0#4 ** 7#4);
output1{test++} = 120##8 == (8##4 ** 15##4);
output1{test++} = -8#8 == (1#4 ** -8#4);
output1{test++} = 0##8 == (9##4 ** 0##4);
output1{test++} = -7#8 == (1#4 ** -7#4);
output1{test++} = 9##8 == (9##4 ** 1##4);
output1{test++} = -6#8 == (1#4 ** -6#4);
output1{test++} = 18##8 == (9##4 ** 2##4);
output1{test++} = -5#8 == (1#4 ** -5#4);
output1{test++} = 27##8 == (9##4 ** 3##4);
output1{test++} = -4#8 == (1#4 ** -4#4);
output1{test++} = 36##8 == (9##4 ** 4##4);
output1{test++} = -3#8 == (1#4 ** -3#4);
output1{test++} = 45##8 == (9##4 ** 5##4);
output1{test++} = -2#8 == (1#4 ** -2#4);
output1{test++} = 54##8 == (9##4 ** 6##4);
output1{test++} = -1#8 == (1#4 ** -1#4);
output1{test++} = 63##8 == (9##4 ** 7##4);
output1{test++} = 0#8 == (1#4 ** 0#4);
output1{test++} = 72##8 == (9##4 ** 8##4);
output1{test++} = 1#8 == (1#4 ** 1#4);
output1{test++} = 81##8 == (9##4 ** 9##4);
output1{test++} = 2#8 == (1#4 ** 2#4);
output1{test++} = 90##8 == (9##4 ** 10##4);
output1{test++} = 3#8 == (1#4 ** 3#4);
output1{test++} = 99##8 == (9##4 ** 11##4);
output1{test++} = 4#8 == (1#4 ** 4#4);
output1{test++} = 108##8 == (9##4 ** 12##4);
output1{test++} = 5#8 == (1#4 ** 5#4);
output1{test++} = 117##8 == (9##4 ** 13##4);
output1{test++} = 6#8 == (1#4 ** 6#4);
output1{test++} = 126##8 == (9##4 ** 14##4);
output1{test++} = 7#8 == (1#4 ** 7#4);
output1{test++} = 135##8 == (9##4 ** 15##4);
output1{test++} = -16#8 == (2#4 ** -8#4);
output1{test++} = 0##8 == (10##4 ** 0##4);
output1{test++} = -14#8 == (2#4 ** -7#4);
output1{test++} = 10##8 == (10##4 ** 1##4);
output1{test++} = -12#8 == (2#4 ** -6#4);
output1{test++} = 20##8 == (10##4 ** 2##4);
output1{test++} = -10#8 == (2#4 ** -5#4);
output1{test++} = 30##8 == (10##4 ** 3##4);
output1{test++} = -8#8 == (2#4 ** -4#4);
output1{test++} = 40##8 == (10##4 ** 4##4);
output1{test++} = -6#8 == (2#4 ** -3#4);
output1{test++} = 50##8 == (10##4 ** 5##4);
output1{test++} = -4#8 == (2#4 ** -2#4);
output1{test++} = 60##8 == (10##4 ** 6##4);
output1{test++} = -2#8 == (2#4 ** -1#4);
output1{test++} = 70##8 == (10##4 ** 7##4);
output1{test++} = 0#8 == (2#4 ** 0#4);
output1{test++} = 80##8 == (10##4 ** 8##4);
output1{test++} = 2#8 == (2#4 ** 1#4);
output1{test++} = 90##8 == (10##4 ** 9##4);
output1{test++} = 4#8 == (2#4 ** 2#4);
output1{test++} = 100##8 == (10##4 ** 10##4);
output1{test++} = 6#8 == (2#4 ** 3#4);
output1{test++} = 110##8 == (10##4 ** 11##4);
output1{test++} = 8#8 == (2#4 ** 4#4);
output1{test++} = 120##8 == (10##4 ** 12##4);
output1{test++} = 10#8 == (2#4 ** 5#4);
output1{test++} = 130##8 == (10##4 ** 13##4);
output1{test++} = 12#8 == (2#4 ** 6#4);
output1{test++} = 140##8 == (10##4 ** 14##4);
output1{test++} = 14#8 == (2#4 ** 7#4);
output1{test++} = 150##8 == (10##4 ** 15##4);
output1{test++} = -24#8 == (3#4 ** -8#4);
output1{test++} = 0##8 == (11##4 ** 0##4);
output1{test++} = -21#8 == (3#4 ** -7#4);
output1{test++} = 11##8 == (11##4 ** 1##4);
output1{test++} = -18#8 == (3#4 ** -6#4);
output1{test++} = 22##8 == (11##4 ** 2##4);
output1{test++} = -15#8 == (3#4 ** -5#4);
output1{test++} = 33##8 == (11##4 ** 3##4);
output1{test++} = -12#8 == (3#4 ** -4#4);
output1{test++} = 44##8 == (11##4 ** 4##4);
output1{test++} = -9#8 == (3#4 ** -3#4);
output1{test++} = 55##8 == (11##4 ** 5##4);
output1{test++} = -6#8 == (3#4 ** -2#4);
output1{test++} = 66##8 == (11##4 ** 6##4);
output1{test++} = -3#8 == (3#4 ** -1#4);
output1{test++} = 77##8 == (11##4 ** 7##4);
output1{test++} = 0#8 == (3#4 ** 0#4);
output1{test++} = 88##8 == (11##4 ** 8##4);
output1{test++} = 3#8 == (3#4 ** 1#4);
output1{test++} = 99##8 == (11##4 ** 9##4);
output1{test++} = 6#8 == (3#4 ** 2#4);
output1{test++} = 110##8 == (11##4 ** 10##4);
output1{test++} = 9#8 == (3#4 ** 3#4);
output1{test++} = 121##8 == (11##4 ** 11##4);
output1{test++} = 12#8 == (3#4 ** 4#4);
output1{test++} = 132##8 == (11##4 ** 12##4);
output1{test++} = 15#8 == (3#4 ** 5#4);
output1{test++} = 143##8 == (11##4 ** 13##4);
output1{test++} = 18#8 == (3#4 ** 6#4);
output1{test++} = 154##8 == (11##4 ** 14##4);
output1{test++} = 21#8 == (3#4 ** 7#4);
output1{test++} = 165##8 == (11##4 ** 15##4);
output1{test++} = -32#8 == (4#4 ** -8#4);
output1{test++} = 0##8 == (12##4 ** 0##4);
output1{test++} = -28#8 == (4#4 ** -7#4);
output1{test++} = 12##8 == (12##4 ** 1##4);
output1{test++} = -24#8 == (4#4 ** -6#4);
output1{test++} = 24##8 == (12##4 ** 2##4);
output1{test++} = -20#8 == (4#4 ** -5#4);
output1{test++} = 36##8 == (12##4 ** 3##4);
output1{test++} = -16#8 == (4#4 ** -4#4);
output1{test++} = 48##8 == (12##4 ** 4##4);
output1{test++} = -12#8 == (4#4 ** -3#4);
output1{test++} = 60##8 == (12##4 ** 5##4);
output1{test++} = -8#8 == (4#4 ** -2#4);
output1{test++} = 72##8 == (12##4 ** 6##4);
output1{test++} = -4#8 == (4#4 ** -1#4);
output1{test++} = 84##8 == (12##4 ** 7##4);
output1{test++} = 0#8 == (4#4 ** 0#4);
output1{test++} = 96##8 == (12##4 ** 8##4);
output1{test++} = 4#8 == (4#4 ** 1#4);
output1{test++} = 108##8 == (12##4 ** 9##4);
output1{test++} = 8#8 == (4#4 ** 2#4);
output1{test++} = 120##8 == (12##4 ** 10##4);
output1{test++} = 12#8 == (4#4 ** 3#4);
output1{test++} = 132##8 == (12##4 ** 11##4);
output1{test++} = 16#8 == (4#4 ** 4#4);
output1{test++} = 144##8 == (12##4 ** 12##4);
output1{test++} = 20#8 == (4#4 ** 5#4);
output1{test++} = 156##8 == (12##4 ** 13##4);
output1{test++} = 24#8 == (4#4 ** 6#4);
output1{test++} = 168##8 == (12##4 ** 14##4);
output1{test++} = 28#8 == (4#4 ** 7#4);
output1{test++} = 180##8 == (12##4 ** 15##4);
output1{test++} = -40#8 == (5#4 ** -8#4);
output1{test++} = 0##8 == (13##4 ** 0##4);
output1{test++} = -35#8 == (5#4 ** -7#4);
output1{test++} = 13##8 == (13##4 ** 1##4);
output1{test++} = -30#8 == (5#4 ** -6#4);
output1{test++} = 26##8 == (13##4 ** 2##4);
output1{test++} = -25#8 == (5#4 ** -5#4);
output1{test++} = 39##8 == (13##4 ** 3##4);
output1{test++} = -20#8 == (5#4 ** -4#4);
output1{test++} = 52##8 == (13##4 ** 4##4);
output1{test++} = -15#8 == (5#4 ** -3#4);
output1{test++} = 65##8 == (13##4 ** 5##4);
output1{test++} = -10#8 == (5#4 ** -2#4);
output1{test++} = 78##8 == (13##4 ** 6##4);
output1{test++} = -5#8 == (5#4 ** -1#4);
output1{test++} = 91##8 == (13##4 ** 7##4);
output1{test++} = 0#8 == (5#4 ** 0#4);
output1{test++} = 104##8 == (13##4 ** 8##4);
output1{test++} = 5#8 == (5#4 ** 1#4);
output1{test++} = 117##8 == (13##4 ** 9##4);
output1{test++} = 10#8 == (5#4 ** 2#4);
output1{test++} = 130##8 == (13##4 ** 10##4);
output1{test++} = 15#8 == (5#4 ** 3#4);
output1{test++} = 143##8 == (13##4 ** 11##4);
output1{test++} = 20#8 == (5#4 ** 4#4);
output1{test++} = 156##8 == (13##4 ** 12##4);
output1{test++} = 25#8 == (5#4 ** 5#4);
output1{test++} = 169##8 == (13##4 ** 13##4);
output1{test++} = 30#8 == (5#4 ** 6#4);
output1{test++} = 182##8 == (13##4 ** 14##4);
output1{test++} = 35#8 == (5#4 ** 7#4);
output1{test++} = 195##8 == (13##4 ** 15##4);
output1{test++} = -48#8 == (6#4 ** -8#4);
output1{test++} = 0##8 == (14##4 ** 0##4);
output1{test++} = -42#8 == (6#4 ** -7#4);
output1{test++} = 14##8 == (14##4 ** 1##4);
output1{test++} = -36#8 == (6#4 ** -6#4);
output1{test++} = 28##8 == (14##4 ** 2##4);
output1{test++} = -30#8 == (6#4 ** -5#4);
output1{test++} = 42##8 == (14##4 ** 3##4);
output1{test++} = -24#8 == (6#4 ** -4#4);
output1{test++} = 56##8 == (14##4 ** 4##4);
output1{test++} = -18#8 == (6#4 ** -3#4);
output1{test++} = 70##8 == (14##4 ** 5##4);
output1{test++} = -12#8 == (6#4 ** -2#4);
output1{test++} = 84##8 == (14##4 ** 6##4);
output1{test++} = -6#8 == (6#4 ** -1#4);
output1{test++} = 98##8 == (14##4 ** 7##4);
output1{test++} = 0#8 == (6#4 ** 0#4);
output1{test++} = 112##8 == (14##4 ** 8##4);
output1{test++} = 6#8 == (6#4 ** 1#4);
output1{test++} = 126##8 == (14##4 ** 9##4);
output1{test++} = 12#8 == (6#4 ** 2#4);
output1{test++} = 140##8 == (14##4 ** 10##4);
output1{test++} = 18#8 == (6#4 ** 3#4);
output1{test++} = 154##8 == (14##4 ** 11##4);
output1{test++} = 24#8 == (6#4 ** 4#4);
output1{test++} = 168##8 == (14##4 ** 12##4);
output1{test++} = 30#8 == (6#4 ** 5#4);
output1{test++} = 182##8 == (14##4 ** 13##4);
output1{test++} = 36#8 == (6#4 ** 6#4);
output1{test++} = 196##8 == (14##4 ** 14##4);
output1{test++} = 42#8 == (6#4 ** 7#4);
output1{test++} = 210##8 == (14##4 ** 15##4);
output1{test++} = -56#8 == (7#4 ** -8#4);
output1{test++} = 0##8 == (15##4 ** 0##4);
output1{test++} = -49#8 == (7#4 ** -7#4);
output1{test++} = 15##8 == (15##4 ** 1##4);
output1{test++} = -42#8 == (7#4 ** -6#4);
output1{test++} = 30##8 == (15##4 ** 2##4);
output1{test++} = -35#8 == (7#4 ** -5#4);
output1{test++} = 45##8 == (15##4 ** 3##4);
output1{test++} = -28#8 == (7#4 ** -4#4);
output1{test++} = 60##8 == (15##4 ** 4##4);
output1{test++} = -21#8 == (7#4 ** -3#4);
output1{test++} = 75##8 == (15##4 ** 5##4);
output1{test++} = -14#8 == (7#4 ** -2#4);
output1{test++} = 90##8 == (15##4 ** 6##4);
output1{test++} = -7#8 == (7#4 ** -1#4);
output1{test++} = 105##8 == (15##4 ** 7##4);
output1{test++} = 0#8 == (7#4 ** 0#4);
output1{test++} = 120##8 == (15##4 ** 8##4);
output1{test++} = 7#8 == (7#4 ** 1#4);
output1{test++} = 135##8 == (15##4 ** 9##4);
output1{test++} = 14#8 == (7#4 ** 2#4);
output1{test++} = 150##8 == (15##4 ** 10##4);
output1{test++} = 21#8 == (7#4 ** 3#4);
output1{test++} = 165##8 == (15##4 ** 11##4);
output1{test++} = 28#8 == (7#4 ** 4#4);
output1{test++} = 180##8 == (15##4 ** 12##4);
output1{test++} = 35#8 == (7#4 ** 5#4);
output1{test++} = 195##8 == (15##4 ** 13##4);
output1{test++} = 42#8 == (7#4 ** 6#4);
output1{test++} = 210##8 == (15##4 ** 14##4);
output1{test++} = 49#8 == (7#4 ** 7#4);
output1{test++} = 225##8 == (15##4 ** 15##4);

output1{test++} = 7#4 == (-63#8 // -8#4);
output1{test++} = -7#4 == (-63#8 %% -8#4);
output1{test++} = 7#4 == (-62#8 // -8#4);
output1{test++} = -6#4 == (-62#8 %% -8#4);
output1{test++} = -8#4 == (-62#8 // 7#4);
output1{test++} = -6#4 == (-62#8 %% 7#4);
output1{test++} = 7#4 == (-61#8 // -8#4);
output1{test++} = -5#4 == (-61#8 %% -8#4);
output1{test++} = -8#4 == (-61#8 // 7#4);
output1{test++} = -5#4 == (-61#8 %% 7#4);
output1{test++} = 7#4 == (-60#8 // -8#4);
output1{test++} = -4#4 == (-60#8 %% -8#4);
output1{test++} = -8#4 == (-60#8 // 7#4);
output1{test++} = -4#4 == (-60#8 %% 7#4);
output1{test++} = 7#4 == (-59#8 // -8#4);
output1{test++} = -3#4 == (-59#8 %% -8#4);
output1{test++} = -8#4 == (-59#8 // 7#4);
output1{test++} = -3#4 == (-59#8 %% 7#4);
output1{test++} = 7#4 == (-58#8 // -8#4);
output1{test++} = -2#4 == (-58#8 %% -8#4);
output1{test++} = -8#4 == (-58#8 // 7#4);
output1{test++} = -2#4 == (-58#8 %% 7#4);
output1{test++} = 7#4 == (-57#8 // -8#4);
output1{test++} = -1#4 == (-57#8 %% -8#4);
output1{test++} = -8#4 == (-57#8 // 7#4);
output1{test++} = -1#4 == (-57#8 %% 7#4);
output1{test++} = 7#4 == (-56#8 // -8#4);
output1{test++} = 0#4 == (-56#8 %% -8#4);
output1{test++} = -8#4 == (-56#8 // 7#4);
output1{test++} = 0#4 == (-56#8 %% 7#4);
output1{test++} = 6#4 == (-55#8 // -8#4);
output1{test++} = -7#4 == (-55#8 %% -8#4);
output1{test++} = 7#4 == (-55#8 // -7#4);
output1{test++} = -6#4 == (-55#8 %% -7#4);
output1{test++} = -7#4 == (-55#8 // 7#4);
output1{test++} = -6#4 == (-55#8 %% 7#4);
output1{test++} = 6#4 == (-54#8 // -8#4);
output1{test++} = -6#4 == (-54#8 %% -8#4);
output1{test++} = 7#4 == (-54#8 // -7#4);
output1{test++} = -5#4 == (-54#8 %% -7#4);
output1{test++} = -7#4 == (-54#8 // 7#4);
output1{test++} = -5#4 == (-54#8 %% 7#4);
output1{test++} = 6#4 == (-53#8 // -8#4);
output1{test++} = -5#4 == (-53#8 %% -8#4);
output1{test++} = 7#4 == (-53#8 // -7#4);
output1{test++} = -4#4 == (-53#8 %% -7#4);
output1{test++} = -8#4 == (-53#8 // 6#4);
output1{test++} = -5#4 == (-53#8 %% 6#4);
output1{test++} = -7#4 == (-53#8 // 7#4);
output1{test++} = -4#4 == (-53#8 %% 7#4);
output1{test++} = 6#4 == (-52#8 // -8#4);
output1{test++} = -4#4 == (-52#8 %% -8#4);
output1{test++} = 7#4 == (-52#8 // -7#4);
output1{test++} = -3#4 == (-52#8 %% -7#4);
output1{test++} = -8#4 == (-52#8 // 6#4);
output1{test++} = -4#4 == (-52#8 %% 6#4);
output1{test++} = -7#4 == (-52#8 // 7#4);
output1{test++} = -3#4 == (-52#8 %% 7#4);
output1{test++} = 6#4 == (-51#8 // -8#4);
output1{test++} = -3#4 == (-51#8 %% -8#4);
output1{test++} = 7#4 == (-51#8 // -7#4);
output1{test++} = -2#4 == (-51#8 %% -7#4);
output1{test++} = -8#4 == (-51#8 // 6#4);
output1{test++} = -3#4 == (-51#8 %% 6#4);
output1{test++} = -7#4 == (-51#8 // 7#4);
output1{test++} = -2#4 == (-51#8 %% 7#4);
output1{test++} = 6#4 == (-50#8 // -8#4);
output1{test++} = -2#4 == (-50#8 %% -8#4);
output1{test++} = 7#4 == (-50#8 // -7#4);
output1{test++} = -1#4 == (-50#8 %% -7#4);
output1{test++} = -8#4 == (-50#8 // 6#4);
output1{test++} = -2#4 == (-50#8 %% 6#4);
output1{test++} = -7#4 == (-50#8 // 7#4);
output1{test++} = -1#4 == (-50#8 %% 7#4);
output1{test++} = 6#4 == (-49#8 // -8#4);
output1{test++} = -1#4 == (-49#8 %% -8#4);
output1{test++} = 7#4 == (-49#8 // -7#4);
output1{test++} = 0#4 == (-49#8 %% -7#4);
output1{test++} = -8#4 == (-49#8 // 6#4);
output1{test++} = -1#4 == (-49#8 %% 6#4);
output1{test++} = -7#4 == (-49#8 // 7#4);
output1{test++} = 0#4 == (-49#8 %% 7#4);
output1{test++} = 6#4 == (-48#8 // -8#4);
output1{test++} = 0#4 == (-48#8 %% -8#4);
output1{test++} = 6#4 == (-48#8 // -7#4);
output1{test++} = -6#4 == (-48#8 %% -7#4);
output1{test++} = -8#4 == (-48#8 // 6#4);
output1{test++} = 0#4 == (-48#8 %% 6#4);
output1{test++} = -6#4 == (-48#8 // 7#4);
output1{test++} = -6#4 == (-48#8 %% 7#4);
output1{test++} = 5#4 == (-47#8 // -8#4);
output1{test++} = -7#4 == (-47#8 %% -8#4);
output1{test++} = 6#4 == (-47#8 // -7#4);
output1{test++} = -5#4 == (-47#8 %% -7#4);
output1{test++} = 7#4 == (-47#8 // -6#4);
output1{test++} = -5#4 == (-47#8 %% -6#4);
output1{test++} = -7#4 == (-47#8 // 6#4);
output1{test++} = -5#4 == (-47#8 %% 6#4);
output1{test++} = -6#4 == (-47#8 // 7#4);
output1{test++} = -5#4 == (-47#8 %% 7#4);
output1{test++} = 5#4 == (-46#8 // -8#4);
output1{test++} = -6#4 == (-46#8 %% -8#4);
output1{test++} = 6#4 == (-46#8 // -7#4);
output1{test++} = -4#4 == (-46#8 %% -7#4);
output1{test++} = 7#4 == (-46#8 // -6#4);
output1{test++} = -4#4 == (-46#8 %% -6#4);
output1{test++} = -7#4 == (-46#8 // 6#4);
output1{test++} = -4#4 == (-46#8 %% 6#4);
output1{test++} = -6#4 == (-46#8 // 7#4);
output1{test++} = -4#4 == (-46#8 %% 7#4);
output1{test++} = 5#4 == (-45#8 // -8#4);
output1{test++} = -5#4 == (-45#8 %% -8#4);
output1{test++} = 6#4 == (-45#8 // -7#4);
output1{test++} = -3#4 == (-45#8 %% -7#4);
output1{test++} = 7#4 == (-45#8 // -6#4);
output1{test++} = -3#4 == (-45#8 %% -6#4);
output1{test++} = -7#4 == (-45#8 // 6#4);
output1{test++} = -3#4 == (-45#8 %% 6#4);
output1{test++} = -6#4 == (-45#8 // 7#4);
output1{test++} = -3#4 == (-45#8 %% 7#4);
output1{test++} = 5#4 == (-44#8 // -8#4);
output1{test++} = -4#4 == (-44#8 %% -8#4);
output1{test++} = 6#4 == (-44#8 // -7#4);
output1{test++} = -2#4 == (-44#8 %% -7#4);
output1{test++} = 7#4 == (-44#8 // -6#4);
output1{test++} = -2#4 == (-44#8 %% -6#4);
output1{test++} = -8#4 == (-44#8 // 5#4);
output1{test++} = -4#4 == (-44#8 %% 5#4);
output1{test++} = -7#4 == (-44#8 // 6#4);
output1{test++} = -2#4 == (-44#8 %% 6#4);
output1{test++} = -6#4 == (-44#8 // 7#4);
output1{test++} = -2#4 == (-44#8 %% 7#4);
output1{test++} = 5#4 == (-43#8 // -8#4);
output1{test++} = -3#4 == (-43#8 %% -8#4);
output1{test++} = 6#4 == (-43#8 // -7#4);
output1{test++} = -1#4 == (-43#8 %% -7#4);
output1{test++} = 7#4 == (-43#8 // -6#4);
output1{test++} = -1#4 == (-43#8 %% -6#4);
output1{test++} = -8#4 == (-43#8 // 5#4);
output1{test++} = -3#4 == (-43#8 %% 5#4);
output1{test++} = -7#4 == (-43#8 // 6#4);
output1{test++} = -1#4 == (-43#8 %% 6#4);
output1{test++} = -6#4 == (-43#8 // 7#4);
output1{test++} = -1#4 == (-43#8 %% 7#4);
output1{test++} = 5#4 == (-42#8 // -8#4);
output1{test++} = -2#4 == (-42#8 %% -8#4);
output1{test++} = 6#4 == (-42#8 // -7#4);
output1{test++} = 0#4 == (-42#8 %% -7#4);
output1{test++} = 7#4 == (-42#8 // -6#4);
output1{test++} = 0#4 == (-42#8 %% -6#4);
output1{test++} = -8#4 == (-42#8 // 5#4);
output1{test++} = -2#4 == (-42#8 %% 5#4);
output1{test++} = -7#4 == (-42#8 // 6#4);
output1{test++} = 0#4 == (-42#8 %% 6#4);
output1{test++} = -6#4 == (-42#8 // 7#4);
output1{test++} = 0#4 == (-42#8 %% 7#4);
output1{test++} = 5#4 == (-41#8 // -8#4);
output1{test++} = -1#4 == (-41#8 %% -8#4);
output1{test++} = 5#4 == (-41#8 // -7#4);
output1{test++} = -6#4 == (-41#8 %% -7#4);
output1{test++} = 6#4 == (-41#8 // -6#4);
output1{test++} = -5#4 == (-41#8 %% -6#4);
output1{test++} = -8#4 == (-41#8 // 5#4);
output1{test++} = -1#4 == (-41#8 %% 5#4);
output1{test++} = -6#4 == (-41#8 // 6#4);
output1{test++} = -5#4 == (-41#8 %% 6#4);
output1{test++} = -5#4 == (-41#8 // 7#4);
output1{test++} = -6#4 == (-41#8 %% 7#4);
output1{test++} = 5#4 == (-40#8 // -8#4);
output1{test++} = 0#4 == (-40#8 %% -8#4);
output1{test++} = 5#4 == (-40#8 // -7#4);
output1{test++} = -5#4 == (-40#8 %% -7#4);
output1{test++} = 6#4 == (-40#8 // -6#4);
output1{test++} = -4#4 == (-40#8 %% -6#4);
output1{test++} = -8#4 == (-40#8 // 5#4);
output1{test++} = 0#4 == (-40#8 %% 5#4);
output1{test++} = -6#4 == (-40#8 // 6#4);
output1{test++} = -4#4 == (-40#8 %% 6#4);
output1{test++} = -5#4 == (-40#8 // 7#4);
output1{test++} = -5#4 == (-40#8 %% 7#4);
output1{test++} = 4#4 == (-39#8 // -8#4);
output1{test++} = -7#4 == (-39#8 %% -8#4);
output1{test++} = 5#4 == (-39#8 // -7#4);
output1{test++} = -4#4 == (-39#8 %% -7#4);
output1{test++} = 6#4 == (-39#8 // -6#4);
output1{test++} = -3#4 == (-39#8 %% -6#4);
output1{test++} = 7#4 == (-39#8 // -5#4);
output1{test++} = -4#4 == (-39#8 %% -5#4);
output1{test++} = -7#4 == (-39#8 // 5#4);
output1{test++} = -4#4 == (-39#8 %% 5#4);
output1{test++} = -6#4 == (-39#8 // 6#4);
output1{test++} = -3#4 == (-39#8 %% 6#4);
output1{test++} = -5#4 == (-39#8 // 7#4);
output1{test++} = -4#4 == (-39#8 %% 7#4);
output1{test++} = 4#4 == (-38#8 // -8#4);
output1{test++} = -6#4 == (-38#8 %% -8#4);
output1{test++} = 5#4 == (-38#8 // -7#4);
output1{test++} = -3#4 == (-38#8 %% -7#4);
output1{test++} = 6#4 == (-38#8 // -6#4);
output1{test++} = -2#4 == (-38#8 %% -6#4);
output1{test++} = 7#4 == (-38#8 // -5#4);
output1{test++} = -3#4 == (-38#8 %% -5#4);
output1{test++} = -7#4 == (-38#8 // 5#4);
output1{test++} = -3#4 == (-38#8 %% 5#4);
output1{test++} = -6#4 == (-38#8 // 6#4);
output1{test++} = -2#4 == (-38#8 %% 6#4);
output1{test++} = -5#4 == (-38#8 // 7#4);
output1{test++} = -3#4 == (-38#8 %% 7#4);
output1{test++} = 4#4 == (-37#8 // -8#4);
output1{test++} = -5#4 == (-37#8 %% -8#4);
output1{test++} = 5#4 == (-37#8 // -7#4);
output1{test++} = -2#4 == (-37#8 %% -7#4);
output1{test++} = 6#4 == (-37#8 // -6#4);
output1{test++} = -1#4 == (-37#8 %% -6#4);
output1{test++} = 7#4 == (-37#8 // -5#4);
output1{test++} = -2#4 == (-37#8 %% -5#4);
output1{test++} = -7#4 == (-37#8 // 5#4);
output1{test++} = -2#4 == (-37#8 %% 5#4);
output1{test++} = -6#4 == (-37#8 // 6#4);
output1{test++} = -1#4 == (-37#8 %% 6#4);
output1{test++} = -5#4 == (-37#8 // 7#4);
output1{test++} = -2#4 == (-37#8 %% 7#4);
output1{test++} = 4#4 == (-36#8 // -8#4);
output1{test++} = -4#4 == (-36#8 %% -8#4);
output1{test++} = 5#4 == (-36#8 // -7#4);
output1{test++} = -1#4 == (-36#8 %% -7#4);
output1{test++} = 6#4 == (-36#8 // -6#4);
output1{test++} = 0#4 == (-36#8 %% -6#4);
output1{test++} = 7#4 == (-36#8 // -5#4);
output1{test++} = -1#4 == (-36#8 %% -5#4);
output1{test++} = -7#4 == (-36#8 // 5#4);
output1{test++} = -1#4 == (-36#8 %% 5#4);
output1{test++} = -6#4 == (-36#8 // 6#4);
output1{test++} = 0#4 == (-36#8 %% 6#4);
output1{test++} = -5#4 == (-36#8 // 7#4);
output1{test++} = -1#4 == (-36#8 %% 7#4);
output1{test++} = 4#4 == (-35#8 // -8#4);
output1{test++} = -3#4 == (-35#8 %% -8#4);
output1{test++} = 5#4 == (-35#8 // -7#4);
output1{test++} = 0#4 == (-35#8 %% -7#4);
output1{test++} = 5#4 == (-35#8 // -6#4);
output1{test++} = -5#4 == (-35#8 %% -6#4);
output1{test++} = 7#4 == (-35#8 // -5#4);
output1{test++} = 0#4 == (-35#8 %% -5#4);
output1{test++} = -8#4 == (-35#8 // 4#4);
output1{test++} = -3#4 == (-35#8 %% 4#4);
output1{test++} = -7#4 == (-35#8 // 5#4);
output1{test++} = 0#4 == (-35#8 %% 5#4);
output1{test++} = -5#4 == (-35#8 // 6#4);
output1{test++} = -5#4 == (-35#8 %% 6#4);
output1{test++} = -5#4 == (-35#8 // 7#4);
output1{test++} = 0#4 == (-35#8 %% 7#4);
output1{test++} = 4#4 == (-34#8 // -8#4);
output1{test++} = -2#4 == (-34#8 %% -8#4);
output1{test++} = 4#4 == (-34#8 // -7#4);
output1{test++} = -6#4 == (-34#8 %% -7#4);
output1{test++} = 5#4 == (-34#8 // -6#4);
output1{test++} = -4#4 == (-34#8 %% -6#4);
output1{test++} = 6#4 == (-34#8 // -5#4);
output1{test++} = -4#4 == (-34#8 %% -5#4);
output1{test++} = -8#4 == (-34#8 // 4#4);
output1{test++} = -2#4 == (-34#8 %% 4#4);
output1{test++} = -6#4 == (-34#8 // 5#4);
output1{test++} = -4#4 == (-34#8 %% 5#4);
output1{test++} = -5#4 == (-34#8 // 6#4);
output1{test++} = -4#4 == (-34#8 %% 6#4);
output1{test++} = -4#4 == (-34#8 // 7#4);
output1{test++} = -6#4 == (-34#8 %% 7#4);
output1{test++} = 4#4 == (-33#8 // -8#4);
output1{test++} = -1#4 == (-33#8 %% -8#4);
output1{test++} = 4#4 == (-33#8 // -7#4);
output1{test++} = -5#4 == (-33#8 %% -7#4);
output1{test++} = 5#4 == (-33#8 // -6#4);
output1{test++} = -3#4 == (-33#8 %% -6#4);
output1{test++} = 6#4 == (-33#8 // -5#4);
output1{test++} = -3#4 == (-33#8 %% -5#4);
output1{test++} = -8#4 == (-33#8 // 4#4);
output1{test++} = -1#4 == (-33#8 %% 4#4);
output1{test++} = -6#4 == (-33#8 // 5#4);
output1{test++} = -3#4 == (-33#8 %% 5#4);
output1{test++} = -5#4 == (-33#8 // 6#4);
output1{test++} = -3#4 == (-33#8 %% 6#4);
output1{test++} = -4#4 == (-33#8 // 7#4);
output1{test++} = -5#4 == (-33#8 %% 7#4);
output1{test++} = 4#4 == (-32#8 // -8#4);
output1{test++} = 0#4 == (-32#8 %% -8#4);
output1{test++} = 4#4 == (-32#8 // -7#4);
output1{test++} = -4#4 == (-32#8 %% -7#4);
output1{test++} = 5#4 == (-32#8 // -6#4);
output1{test++} = -2#4 == (-32#8 %% -6#4);
output1{test++} = 6#4 == (-32#8 // -5#4);
output1{test++} = -2#4 == (-32#8 %% -5#4);
output1{test++} = -8#4 == (-32#8 // 4#4);
output1{test++} = 0#4 == (-32#8 %% 4#4);
output1{test++} = -6#4 == (-32#8 // 5#4);
output1{test++} = -2#4 == (-32#8 %% 5#4);
output1{test++} = -5#4 == (-32#8 // 6#4);
output1{test++} = -2#4 == (-32#8 %% 6#4);
output1{test++} = -4#4 == (-32#8 // 7#4);
output1{test++} = -4#4 == (-32#8 %% 7#4);
output1{test++} = 3#4 == (-31#8 // -8#4);
output1{test++} = -7#4 == (-31#8 %% -8#4);
output1{test++} = 4#4 == (-31#8 // -7#4);
output1{test++} = -3#4 == (-31#8 %% -7#4);
output1{test++} = 5#4 == (-31#8 // -6#4);
output1{test++} = -1#4 == (-31#8 %% -6#4);
output1{test++} = 6#4 == (-31#8 // -5#4);
output1{test++} = -1#4 == (-31#8 %% -5#4);
output1{test++} = 7#4 == (-31#8 // -4#4);
output1{test++} = -3#4 == (-31#8 %% -4#4);
output1{test++} = -7#4 == (-31#8 // 4#4);
output1{test++} = -3#4 == (-31#8 %% 4#4);
output1{test++} = -6#4 == (-31#8 // 5#4);
output1{test++} = -1#4 == (-31#8 %% 5#4);
output1{test++} = -5#4 == (-31#8 // 6#4);
output1{test++} = -1#4 == (-31#8 %% 6#4);
output1{test++} = -4#4 == (-31#8 // 7#4);
output1{test++} = -3#4 == (-31#8 %% 7#4);
output1{test++} = 3#4 == (-30#8 // -8#4);
output1{test++} = -6#4 == (-30#8 %% -8#4);
output1{test++} = 4#4 == (-30#8 // -7#4);
output1{test++} = -2#4 == (-30#8 %% -7#4);
output1{test++} = 5#4 == (-30#8 // -6#4);
output1{test++} = 0#4 == (-30#8 %% -6#4);
output1{test++} = 6#4 == (-30#8 // -5#4);
output1{test++} = 0#4 == (-30#8 %% -5#4);
output1{test++} = 7#4 == (-30#8 // -4#4);
output1{test++} = -2#4 == (-30#8 %% -4#4);
output1{test++} = -7#4 == (-30#8 // 4#4);
output1{test++} = -2#4 == (-30#8 %% 4#4);
output1{test++} = -6#4 == (-30#8 // 5#4);
output1{test++} = 0#4 == (-30#8 %% 5#4);
output1{test++} = -5#4 == (-30#8 // 6#4);
output1{test++} = 0#4 == (-30#8 %% 6#4);
output1{test++} = -4#4 == (-30#8 // 7#4);
output1{test++} = -2#4 == (-30#8 %% 7#4);
output1{test++} = 3#4 == (-29#8 // -8#4);
output1{test++} = -5#4 == (-29#8 %% -8#4);
output1{test++} = 4#4 == (-29#8 // -7#4);
output1{test++} = -1#4 == (-29#8 %% -7#4);
output1{test++} = 4#4 == (-29#8 // -6#4);
output1{test++} = -5#4 == (-29#8 %% -6#4);
output1{test++} = 5#4 == (-29#8 // -5#4);
output1{test++} = -4#4 == (-29#8 %% -5#4);
output1{test++} = 7#4 == (-29#8 // -4#4);
output1{test++} = -1#4 == (-29#8 %% -4#4);
output1{test++} = -7#4 == (-29#8 // 4#4);
output1{test++} = -1#4 == (-29#8 %% 4#4);
output1{test++} = -5#4 == (-29#8 // 5#4);
output1{test++} = -4#4 == (-29#8 %% 5#4);
output1{test++} = -4#4 == (-29#8 // 6#4);
output1{test++} = -5#4 == (-29#8 %% 6#4);
output1{test++} = -4#4 == (-29#8 // 7#4);
output1{test++} = -1#4 == (-29#8 %% 7#4);
output1{test++} = 3#4 == (-28#8 // -8#4);
output1{test++} = -4#4 == (-28#8 %% -8#4);
output1{test++} = 4#4 == (-28#8 // -7#4);
output1{test++} = 0#4 == (-28#8 %% -7#4);
output1{test++} = 4#4 == (-28#8 // -6#4);
output1{test++} = -4#4 == (-28#8 %% -6#4);
output1{test++} = 5#4 == (-28#8 // -5#4);
output1{test++} = -3#4 == (-28#8 %% -5#4);
output1{test++} = 7#4 == (-28#8 // -4#4);
output1{test++} = 0#4 == (-28#8 %% -4#4);
output1{test++} = -7#4 == (-28#8 // 4#4);
output1{test++} = 0#4 == (-28#8 %% 4#4);
output1{test++} = -5#4 == (-28#8 // 5#4);
output1{test++} = -3#4 == (-28#8 %% 5#4);
output1{test++} = -4#4 == (-28#8 // 6#4);
output1{test++} = -4#4 == (-28#8 %% 6#4);
output1{test++} = -4#4 == (-28#8 // 7#4);
output1{test++} = 0#4 == (-28#8 %% 7#4);
output1{test++} = 3#4 == (-27#8 // -8#4);
output1{test++} = -3#4 == (-27#8 %% -8#4);
output1{test++} = 3#4 == (-27#8 // -7#4);
output1{test++} = -6#4 == (-27#8 %% -7#4);
output1{test++} = 4#4 == (-27#8 // -6#4);
output1{test++} = -3#4 == (-27#8 %% -6#4);
output1{test++} = 5#4 == (-27#8 // -5#4);
output1{test++} = -2#4 == (-27#8 %% -5#4);
output1{test++} = 6#4 == (-27#8 // -4#4);
output1{test++} = -3#4 == (-27#8 %% -4#4);
output1{test++} = -6#4 == (-27#8 // 4#4);
output1{test++} = -3#4 == (-27#8 %% 4#4);
output1{test++} = -5#4 == (-27#8 // 5#4);
output1{test++} = -2#4 == (-27#8 %% 5#4);
output1{test++} = -4#4 == (-27#8 // 6#4);
output1{test++} = -3#4 == (-27#8 %% 6#4);
output1{test++} = -3#4 == (-27#8 // 7#4);
output1{test++} = -6#4 == (-27#8 %% 7#4);
output1{test++} = 3#4 == (-26#8 // -8#4);
output1{test++} = -2#4 == (-26#8 %% -8#4);
output1{test++} = 3#4 == (-26#8 // -7#4);
output1{test++} = -5#4 == (-26#8 %% -7#4);
output1{test++} = 4#4 == (-26#8 // -6#4);
output1{test++} = -2#4 == (-26#8 %% -6#4);
output1{test++} = 5#4 == (-26#8 // -5#4);
output1{test++} = -1#4 == (-26#8 %% -5#4);
output1{test++} = 6#4 == (-26#8 // -4#4);
output1{test++} = -2#4 == (-26#8 %% -4#4);
output1{test++} = -8#4 == (-26#8 // 3#4);
output1{test++} = -2#4 == (-26#8 %% 3#4);
output1{test++} = -6#4 == (-26#8 // 4#4);
output1{test++} = -2#4 == (-26#8 %% 4#4);
output1{test++} = -5#4 == (-26#8 // 5#4);
output1{test++} = -1#4 == (-26#8 %% 5#4);
output1{test++} = -4#4 == (-26#8 // 6#4);
output1{test++} = -2#4 == (-26#8 %% 6#4);
output1{test++} = -3#4 == (-26#8 // 7#4);
output1{test++} = -5#4 == (-26#8 %% 7#4);
output1{test++} = 3#4 == (-25#8 // -8#4);
output1{test++} = -1#4 == (-25#8 %% -8#4);
output1{test++} = 3#4 == (-25#8 // -7#4);
output1{test++} = -4#4 == (-25#8 %% -7#4);
output1{test++} = 4#4 == (-25#8 // -6#4);
output1{test++} = -1#4 == (-25#8 %% -6#4);
output1{test++} = 5#4 == (-25#8 // -5#4);
output1{test++} = 0#4 == (-25#8 %% -5#4);
output1{test++} = 6#4 == (-25#8 // -4#4);
output1{test++} = -1#4 == (-25#8 %% -4#4);
output1{test++} = -8#4 == (-25#8 // 3#4);
output1{test++} = -1#4 == (-25#8 %% 3#4);
output1{test++} = -6#4 == (-25#8 // 4#4);
output1{test++} = -1#4 == (-25#8 %% 4#4);
output1{test++} = -5#4 == (-25#8 // 5#4);
output1{test++} = 0#4 == (-25#8 %% 5#4);
output1{test++} = -4#4 == (-25#8 // 6#4);
output1{test++} = -1#4 == (-25#8 %% 6#4);
output1{test++} = -3#4 == (-25#8 // 7#4);
output1{test++} = -4#4 == (-25#8 %% 7#4);
output1{test++} = 3#4 == (-24#8 // -8#4);
output1{test++} = 0#4 == (-24#8 %% -8#4);
output1{test++} = 3#4 == (-24#8 // -7#4);
output1{test++} = -3#4 == (-24#8 %% -7#4);
output1{test++} = 4#4 == (-24#8 // -6#4);
output1{test++} = 0#4 == (-24#8 %% -6#4);
output1{test++} = 4#4 == (-24#8 // -5#4);
output1{test++} = -4#4 == (-24#8 %% -5#4);
output1{test++} = 6#4 == (-24#8 // -4#4);
output1{test++} = 0#4 == (-24#8 %% -4#4);
output1{test++} = -8#4 == (-24#8 // 3#4);
output1{test++} = 0#4 == (-24#8 %% 3#4);
output1{test++} = -6#4 == (-24#8 // 4#4);
output1{test++} = 0#4 == (-24#8 %% 4#4);
output1{test++} = -4#4 == (-24#8 // 5#4);
output1{test++} = -4#4 == (-24#8 %% 5#4);
output1{test++} = -4#4 == (-24#8 // 6#4);
output1{test++} = 0#4 == (-24#8 %% 6#4);
output1{test++} = -3#4 == (-24#8 // 7#4);
output1{test++} = -3#4 == (-24#8 %% 7#4);
output1{test++} = 2#4 == (-23#8 // -8#4);
output1{test++} = -7#4 == (-23#8 %% -8#4);
output1{test++} = 3#4 == (-23#8 // -7#4);
output1{test++} = -2#4 == (-23#8 %% -7#4);
output1{test++} = 3#4 == (-23#8 // -6#4);
output1{test++} = -5#4 == (-23#8 %% -6#4);
output1{test++} = 4#4 == (-23#8 // -5#4);
output1{test++} = -3#4 == (-23#8 %% -5#4);
output1{test++} = 5#4 == (-23#8 // -4#4);
output1{test++} = -3#4 == (-23#8 %% -4#4);
output1{test++} = 7#4 == (-23#8 // -3#4);
output1{test++} = -2#4 == (-23#8 %% -3#4);
output1{test++} = -7#4 == (-23#8 // 3#4);
output1{test++} = -2#4 == (-23#8 %% 3#4);
output1{test++} = -5#4 == (-23#8 // 4#4);
output1{test++} = -3#4 == (-23#8 %% 4#4);
output1{test++} = -4#4 == (-23#8 // 5#4);
output1{test++} = -3#4 == (-23#8 %% 5#4);
output1{test++} = -3#4 == (-23#8 // 6#4);
output1{test++} = -5#4 == (-23#8 %% 6#4);
output1{test++} = -3#4 == (-23#8 // 7#4);
output1{test++} = -2#4 == (-23#8 %% 7#4);
output1{test++} = 2#4 == (-22#8 // -8#4);
output1{test++} = -6#4 == (-22#8 %% -8#4);
output1{test++} = 3#4 == (-22#8 // -7#4);
output1{test++} = -1#4 == (-22#8 %% -7#4);
output1{test++} = 3#4 == (-22#8 // -6#4);
output1{test++} = -4#4 == (-22#8 %% -6#4);
output1{test++} = 4#4 == (-22#8 // -5#4);
output1{test++} = -2#4 == (-22#8 %% -5#4);
output1{test++} = 5#4 == (-22#8 // -4#4);
output1{test++} = -2#4 == (-22#8 %% -4#4);
output1{test++} = 7#4 == (-22#8 // -3#4);
output1{test++} = -1#4 == (-22#8 %% -3#4);
output1{test++} = -7#4 == (-22#8 // 3#4);
output1{test++} = -1#4 == (-22#8 %% 3#4);
output1{test++} = -5#4 == (-22#8 // 4#4);
output1{test++} = -2#4 == (-22#8 %% 4#4);
output1{test++} = -4#4 == (-22#8 // 5#4);
output1{test++} = -2#4 == (-22#8 %% 5#4);
output1{test++} = -3#4 == (-22#8 // 6#4);
output1{test++} = -4#4 == (-22#8 %% 6#4);
output1{test++} = -3#4 == (-22#8 // 7#4);
output1{test++} = -1#4 == (-22#8 %% 7#4);
output1{test++} = 2#4 == (-21#8 // -8#4);
output1{test++} = -5#4 == (-21#8 %% -8#4);
output1{test++} = 3#4 == (-21#8 // -7#4);
output1{test++} = 0#4 == (-21#8 %% -7#4);
output1{test++} = 3#4 == (-21#8 // -6#4);
output1{test++} = -3#4 == (-21#8 %% -6#4);
output1{test++} = 4#4 == (-21#8 // -5#4);
output1{test++} = -1#4 == (-21#8 %% -5#4);
output1{test++} = 5#4 == (-21#8 // -4#4);
output1{test++} = -1#4 == (-21#8 %% -4#4);
output1{test++} = 7#4 == (-21#8 // -3#4);
output1{test++} = 0#4 == (-21#8 %% -3#4);
output1{test++} = -7#4 == (-21#8 // 3#4);
output1{test++} = 0#4 == (-21#8 %% 3#4);
output1{test++} = -5#4 == (-21#8 // 4#4);
output1{test++} = -1#4 == (-21#8 %% 4#4);
output1{test++} = -4#4 == (-21#8 // 5#4);
output1{test++} = -1#4 == (-21#8 %% 5#4);
output1{test++} = -3#4 == (-21#8 // 6#4);
output1{test++} = -3#4 == (-21#8 %% 6#4);
output1{test++} = -3#4 == (-21#8 // 7#4);
output1{test++} = 0#4 == (-21#8 %% 7#4);
output1{test++} = 2#4 == (-20#8 // -8#4);
output1{test++} = -4#4 == (-20#8 %% -8#4);
output1{test++} = 2#4 == (-20#8 // -7#4);
output1{test++} = -6#4 == (-20#8 %% -7#4);
output1{test++} = 3#4 == (-20#8 // -6#4);
output1{test++} = -2#4 == (-20#8 %% -6#4);
output1{test++} = 4#4 == (-20#8 // -5#4);
output1{test++} = 0#4 == (-20#8 %% -5#4);
output1{test++} = 5#4 == (-20#8 // -4#4);
output1{test++} = 0#4 == (-20#8 %% -4#4);
output1{test++} = 6#4 == (-20#8 // -3#4);
output1{test++} = -2#4 == (-20#8 %% -3#4);
output1{test++} = -6#4 == (-20#8 // 3#4);
output1{test++} = -2#4 == (-20#8 %% 3#4);
output1{test++} = -5#4 == (-20#8 // 4#4);
output1{test++} = 0#4 == (-20#8 %% 4#4);
output1{test++} = -4#4 == (-20#8 // 5#4);
output1{test++} = 0#4 == (-20#8 %% 5#4);
output1{test++} = -3#4 == (-20#8 // 6#4);
output1{test++} = -2#4 == (-20#8 %% 6#4);
output1{test++} = -2#4 == (-20#8 // 7#4);
output1{test++} = -6#4 == (-20#8 %% 7#4);
output1{test++} = 2#4 == (-19#8 // -8#4);
output1{test++} = -3#4 == (-19#8 %% -8#4);
output1{test++} = 2#4 == (-19#8 // -7#4);
output1{test++} = -5#4 == (-19#8 %% -7#4);
output1{test++} = 3#4 == (-19#8 // -6#4);
output1{test++} = -1#4 == (-19#8 %% -6#4);
output1{test++} = 3#4 == (-19#8 // -5#4);
output1{test++} = -4#4 == (-19#8 %% -5#4);
output1{test++} = 4#4 == (-19#8 // -4#4);
output1{test++} = -3#4 == (-19#8 %% -4#4);
output1{test++} = 6#4 == (-19#8 // -3#4);
output1{test++} = -1#4 == (-19#8 %% -3#4);
output1{test++} = -6#4 == (-19#8 // 3#4);
output1{test++} = -1#4 == (-19#8 %% 3#4);
output1{test++} = -4#4 == (-19#8 // 4#4);
output1{test++} = -3#4 == (-19#8 %% 4#4);
output1{test++} = -3#4 == (-19#8 // 5#4);
output1{test++} = -4#4 == (-19#8 %% 5#4);
output1{test++} = -3#4 == (-19#8 // 6#4);
output1{test++} = -1#4 == (-19#8 %% 6#4);
output1{test++} = -2#4 == (-19#8 // 7#4);
output1{test++} = -5#4 == (-19#8 %% 7#4);
output1{test++} = 2#4 == (-18#8 // -8#4);
output1{test++} = -2#4 == (-18#8 %% -8#4);
output1{test++} = 2#4 == (-18#8 // -7#4);
output1{test++} = -4#4 == (-18#8 %% -7#4);
output1{test++} = 3#4 == (-18#8 // -6#4);
output1{test++} = 0#4 == (-18#8 %% -6#4);
output1{test++} = 3#4 == (-18#8 // -5#4);
output1{test++} = -3#4 == (-18#8 %% -5#4);
output1{test++} = 4#4 == (-18#8 // -4#4);
output1{test++} = -2#4 == (-18#8 %% -4#4);
output1{test++} = 6#4 == (-18#8 // -3#4);
output1{test++} = 0#4 == (-18#8 %% -3#4);
output1{test++} = -6#4 == (-18#8 // 3#4);
output1{test++} = 0#4 == (-18#8 %% 3#4);
output1{test++} = -4#4 == (-18#8 // 4#4);
output1{test++} = -2#4 == (-18#8 %% 4#4);
output1{test++} = -3#4 == (-18#8 // 5#4);
output1{test++} = -3#4 == (-18#8 %% 5#4);
output1{test++} = -3#4 == (-18#8 // 6#4);
output1{test++} = 0#4 == (-18#8 %% 6#4);
output1{test++} = -2#4 == (-18#8 // 7#4);
output1{test++} = -4#4 == (-18#8 %% 7#4);
output1{test++} = 2#4 == (-17#8 // -8#4);
output1{test++} = -1#4 == (-17#8 %% -8#4);
output1{test++} = 2#4 == (-17#8 // -7#4);
output1{test++} = -3#4 == (-17#8 %% -7#4);
output1{test++} = 2#4 == (-17#8 // -6#4);
output1{test++} = -5#4 == (-17#8 %% -6#4);
output1{test++} = 3#4 == (-17#8 // -5#4);
output1{test++} = -2#4 == (-17#8 %% -5#4);
output1{test++} = 4#4 == (-17#8 // -4#4);
output1{test++} = -1#4 == (-17#8 %% -4#4);
output1{test++} = 5#4 == (-17#8 // -3#4);
output1{test++} = -2#4 == (-17#8 %% -3#4);
output1{test++} = -8#4 == (-17#8 // 2#4);
output1{test++} = -1#4 == (-17#8 %% 2#4);
output1{test++} = -5#4 == (-17#8 // 3#4);
output1{test++} = -2#4 == (-17#8 %% 3#4);
output1{test++} = -4#4 == (-17#8 // 4#4);
output1{test++} = -1#4 == (-17#8 %% 4#4);
output1{test++} = -3#4 == (-17#8 // 5#4);
output1{test++} = -2#4 == (-17#8 %% 5#4);
output1{test++} = -2#4 == (-17#8 // 6#4);
output1{test++} = -5#4 == (-17#8 %% 6#4);
output1{test++} = -2#4 == (-17#8 // 7#4);
output1{test++} = -3#4 == (-17#8 %% 7#4);
output1{test++} = 2#4 == (-16#8 // -8#4);
output1{test++} = 0#4 == (-16#8 %% -8#4);
output1{test++} = 2#4 == (-16#8 // -7#4);
output1{test++} = -2#4 == (-16#8 %% -7#4);
output1{test++} = 2#4 == (-16#8 // -6#4);
output1{test++} = -4#4 == (-16#8 %% -6#4);
output1{test++} = 3#4 == (-16#8 // -5#4);
output1{test++} = -1#4 == (-16#8 %% -5#4);
output1{test++} = 4#4 == (-16#8 // -4#4);
output1{test++} = 0#4 == (-16#8 %% -4#4);
output1{test++} = 5#4 == (-16#8 // -3#4);
output1{test++} = -1#4 == (-16#8 %% -3#4);
output1{test++} = -8#4 == (-16#8 // 2#4);
output1{test++} = 0#4 == (-16#8 %% 2#4);
output1{test++} = -5#4 == (-16#8 // 3#4);
output1{test++} = -1#4 == (-16#8 %% 3#4);
output1{test++} = -4#4 == (-16#8 // 4#4);
output1{test++} = 0#4 == (-16#8 %% 4#4);
output1{test++} = -3#4 == (-16#8 // 5#4);
output1{test++} = -1#4 == (-16#8 %% 5#4);
output1{test++} = -2#4 == (-16#8 // 6#4);
output1{test++} = -4#4 == (-16#8 %% 6#4);
output1{test++} = -2#4 == (-16#8 // 7#4);
output1{test++} = -2#4 == (-16#8 %% 7#4);
output1{test++} = 1#4 == (-15#8 // -8#4);
output1{test++} = -7#4 == (-15#8 %% -8#4);
output1{test++} = 2#4 == (-15#8 // -7#4);
output1{test++} = -1#4 == (-15#8 %% -7#4);
output1{test++} = 2#4 == (-15#8 // -6#4);
output1{test++} = -3#4 == (-15#8 %% -6#4);
output1{test++} = 3#4 == (-15#8 // -5#4);
output1{test++} = 0#4 == (-15#8 %% -5#4);
output1{test++} = 3#4 == (-15#8 // -4#4);
output1{test++} = -3#4 == (-15#8 %% -4#4);
output1{test++} = 5#4 == (-15#8 // -3#4);
output1{test++} = 0#4 == (-15#8 %% -3#4);
output1{test++} = 7#4 == (-15#8 // -2#4);
output1{test++} = -1#4 == (-15#8 %% -2#4);
output1{test++} = -7#4 == (-15#8 // 2#4);
output1{test++} = -1#4 == (-15#8 %% 2#4);
output1{test++} = -5#4 == (-15#8 // 3#4);
output1{test++} = 0#4 == (-15#8 %% 3#4);
output1{test++} = -3#4 == (-15#8 // 4#4);
output1{test++} = -3#4 == (-15#8 %% 4#4);
output1{test++} = -3#4 == (-15#8 // 5#4);
output1{test++} = 0#4 == (-15#8 %% 5#4);
output1{test++} = -2#4 == (-15#8 // 6#4);
output1{test++} = -3#4 == (-15#8 %% 6#4);
output1{test++} = -2#4 == (-15#8 // 7#4);
output1{test++} = -1#4 == (-15#8 %% 7#4);
output1{test++} = 1#4 == (-14#8 // -8#4);
output1{test++} = -6#4 == (-14#8 %% -8#4);
output1{test++} = 2#4 == (-14#8 // -7#4);
output1{test++} = 0#4 == (-14#8 %% -7#4);
output1{test++} = 2#4 == (-14#8 // -6#4);
output1{test++} = -2#4 == (-14#8 %% -6#4);
output1{test++} = 2#4 == (-14#8 // -5#4);
output1{test++} = -4#4 == (-14#8 %% -5#4);
output1{test++} = 3#4 == (-14#8 // -4#4);
output1{test++} = -2#4 == (-14#8 %% -4#4);
output1{test++} = 4#4 == (-14#8 // -3#4);
output1{test++} = -2#4 == (-14#8 %% -3#4);
output1{test++} = 7#4 == (-14#8 // -2#4);
output1{test++} = 0#4 == (-14#8 %% -2#4);
output1{test++} = -7#4 == (-14#8 // 2#4);
output1{test++} = 0#4 == (-14#8 %% 2#4);
output1{test++} = -4#4 == (-14#8 // 3#4);
output1{test++} = -2#4 == (-14#8 %% 3#4);
output1{test++} = -3#4 == (-14#8 // 4#4);
output1{test++} = -2#4 == (-14#8 %% 4#4);
output1{test++} = -2#4 == (-14#8 // 5#4);
output1{test++} = -4#4 == (-14#8 %% 5#4);
output1{test++} = -2#4 == (-14#8 // 6#4);
output1{test++} = -2#4 == (-14#8 %% 6#4);
output1{test++} = -2#4 == (-14#8 // 7#4);
output1{test++} = 0#4 == (-14#8 %% 7#4);
output1{test++} = 1#4 == (-13#8 // -8#4);
output1{test++} = -5#4 == (-13#8 %% -8#4);
output1{test++} = 1#4 == (-13#8 // -7#4);
output1{test++} = -6#4 == (-13#8 %% -7#4);
output1{test++} = 2#4 == (-13#8 // -6#4);
output1{test++} = -1#4 == (-13#8 %% -6#4);
output1{test++} = 2#4 == (-13#8 // -5#4);
output1{test++} = -3#4 == (-13#8 %% -5#4);
output1{test++} = 3#4 == (-13#8 // -4#4);
output1{test++} = -1#4 == (-13#8 %% -4#4);
output1{test++} = 4#4 == (-13#8 // -3#4);
output1{test++} = -1#4 == (-13#8 %% -3#4);
output1{test++} = 6#4 == (-13#8 // -2#4);
output1{test++} = -1#4 == (-13#8 %% -2#4);
output1{test++} = -6#4 == (-13#8 // 2#4);
output1{test++} = -1#4 == (-13#8 %% 2#4);
output1{test++} = -4#4 == (-13#8 // 3#4);
output1{test++} = -1#4 == (-13#8 %% 3#4);
output1{test++} = -3#4 == (-13#8 // 4#4);
output1{test++} = -1#4 == (-13#8 %% 4#4);
output1{test++} = -2#4 == (-13#8 // 5#4);
output1{test++} = -3#4 == (-13#8 %% 5#4);
output1{test++} = -2#4 == (-13#8 // 6#4);
output1{test++} = -1#4 == (-13#8 %% 6#4);
output1{test++} = -1#4 == (-13#8 // 7#4);
output1{test++} = -6#4 == (-13#8 %% 7#4);
output1{test++} = 1#4 == (-12#8 // -8#4);
output1{test++} = -4#4 == (-12#8 %% -8#4);
output1{test++} = 1#4 == (-12#8 // -7#4);
output1{test++} = -5#4 == (-12#8 %% -7#4);
output1{test++} = 2#4 == (-12#8 // -6#4);
output1{test++} = 0#4 == (-12#8 %% -6#4);
output1{test++} = 2#4 == (-12#8 // -5#4);
output1{test++} = -2#4 == (-12#8 %% -5#4);
output1{test++} = 3#4 == (-12#8 // -4#4);
output1{test++} = 0#4 == (-12#8 %% -4#4);
output1{test++} = 4#4 == (-12#8 // -3#4);
output1{test++} = 0#4 == (-12#8 %% -3#4);
output1{test++} = 6#4 == (-12#8 // -2#4);
output1{test++} = 0#4 == (-12#8 %% -2#4);
output1{test++} = -6#4 == (-12#8 // 2#4);
output1{test++} = 0#4 == (-12#8 %% 2#4);
output1{test++} = -4#4 == (-12#8 // 3#4);
output1{test++} = 0#4 == (-12#8 %% 3#4);
output1{test++} = -3#4 == (-12#8 // 4#4);
output1{test++} = 0#4 == (-12#8 %% 4#4);
output1{test++} = -2#4 == (-12#8 // 5#4);
output1{test++} = -2#4 == (-12#8 %% 5#4);
output1{test++} = -2#4 == (-12#8 // 6#4);
output1{test++} = 0#4 == (-12#8 %% 6#4);
output1{test++} = -1#4 == (-12#8 // 7#4);
output1{test++} = -5#4 == (-12#8 %% 7#4);
output1{test++} = 1#4 == (-11#8 // -8#4);
output1{test++} = -3#4 == (-11#8 %% -8#4);
output1{test++} = 1#4 == (-11#8 // -7#4);
output1{test++} = -4#4 == (-11#8 %% -7#4);
output1{test++} = 1#4 == (-11#8 // -6#4);
output1{test++} = -5#4 == (-11#8 %% -6#4);
output1{test++} = 2#4 == (-11#8 // -5#4);
output1{test++} = -1#4 == (-11#8 %% -5#4);
output1{test++} = 2#4 == (-11#8 // -4#4);
output1{test++} = -3#4 == (-11#8 %% -4#4);
output1{test++} = 3#4 == (-11#8 // -3#4);
output1{test++} = -2#4 == (-11#8 %% -3#4);
output1{test++} = 5#4 == (-11#8 // -2#4);
output1{test++} = -1#4 == (-11#8 %% -2#4);
output1{test++} = -5#4 == (-11#8 // 2#4);
output1{test++} = -1#4 == (-11#8 %% 2#4);
output1{test++} = -3#4 == (-11#8 // 3#4);
output1{test++} = -2#4 == (-11#8 %% 3#4);
output1{test++} = -2#4 == (-11#8 // 4#4);
output1{test++} = -3#4 == (-11#8 %% 4#4);
output1{test++} = -2#4 == (-11#8 // 5#4);
output1{test++} = -1#4 == (-11#8 %% 5#4);
output1{test++} = -1#4 == (-11#8 // 6#4);
output1{test++} = -5#4 == (-11#8 %% 6#4);
output1{test++} = -1#4 == (-11#8 // 7#4);
output1{test++} = -4#4 == (-11#8 %% 7#4);
output1{test++} = 1#4 == (-10#8 // -8#4);
output1{test++} = -2#4 == (-10#8 %% -8#4);
output1{test++} = 1#4 == (-10#8 // -7#4);
output1{test++} = -3#4 == (-10#8 %% -7#4);
output1{test++} = 1#4 == (-10#8 // -6#4);
output1{test++} = -4#4 == (-10#8 %% -6#4);
output1{test++} = 2#4 == (-10#8 // -5#4);
output1{test++} = 0#4 == (-10#8 %% -5#4);
output1{test++} = 2#4 == (-10#8 // -4#4);
output1{test++} = -2#4 == (-10#8 %% -4#4);
output1{test++} = 3#4 == (-10#8 // -3#4);
output1{test++} = -1#4 == (-10#8 %% -3#4);
output1{test++} = 5#4 == (-10#8 // -2#4);
output1{test++} = 0#4 == (-10#8 %% -2#4);
output1{test++} = -5#4 == (-10#8 // 2#4);
output1{test++} = 0#4 == (-10#8 %% 2#4);
output1{test++} = -3#4 == (-10#8 // 3#4);
output1{test++} = -1#4 == (-10#8 %% 3#4);
output1{test++} = -2#4 == (-10#8 // 4#4);
output1{test++} = -2#4 == (-10#8 %% 4#4);
output1{test++} = -2#4 == (-10#8 // 5#4);
output1{test++} = 0#4 == (-10#8 %% 5#4);
output1{test++} = -1#4 == (-10#8 // 6#4);
output1{test++} = -4#4 == (-10#8 %% 6#4);
output1{test++} = -1#4 == (-10#8 // 7#4);
output1{test++} = -3#4 == (-10#8 %% 7#4);
output1{test++} = 1#4 == (-9#8 // -8#4);
output1{test++} = -1#4 == (-9#8 %% -8#4);
output1{test++} = 1#4 == (-9#8 // -7#4);
output1{test++} = -2#4 == (-9#8 %% -7#4);
output1{test++} = 1#4 == (-9#8 // -6#4);
output1{test++} = -3#4 == (-9#8 %% -6#4);
output1{test++} = 1#4 == (-9#8 // -5#4);
output1{test++} = -4#4 == (-9#8 %% -5#4);
output1{test++} = 2#4 == (-9#8 // -4#4);
output1{test++} = -1#4 == (-9#8 %% -4#4);
output1{test++} = 3#4 == (-9#8 // -3#4);
output1{test++} = 0#4 == (-9#8 %% -3#4);
output1{test++} = 4#4 == (-9#8 // -2#4);
output1{test++} = -1#4 == (-9#8 %% -2#4);
output1{test++} = -4#4 == (-9#8 // 2#4);
output1{test++} = -1#4 == (-9#8 %% 2#4);
output1{test++} = -3#4 == (-9#8 // 3#4);
output1{test++} = 0#4 == (-9#8 %% 3#4);
output1{test++} = -2#4 == (-9#8 // 4#4);
output1{test++} = -1#4 == (-9#8 %% 4#4);
output1{test++} = -1#4 == (-9#8 // 5#4);
output1{test++} = -4#4 == (-9#8 %% 5#4);
output1{test++} = -1#4 == (-9#8 // 6#4);
output1{test++} = -3#4 == (-9#8 %% 6#4);
output1{test++} = -1#4 == (-9#8 // 7#4);
output1{test++} = -2#4 == (-9#8 %% 7#4);
output1{test++} = 1#4 == (-8#8 // -8#4);
output1{test++} = 0#4 == (-8#8 %% -8#4);
output1{test++} = 1#4 == (-8#8 // -7#4);
output1{test++} = -1#4 == (-8#8 %% -7#4);
output1{test++} = 1#4 == (-8#8 // -6#4);
output1{test++} = -2#4 == (-8#8 %% -6#4);
output1{test++} = 1#4 == (-8#8 // -5#4);
output1{test++} = -3#4 == (-8#8 %% -5#4);
output1{test++} = 2#4 == (-8#8 // -4#4);
output1{test++} = 0#4 == (-8#8 %% -4#4);
output1{test++} = 2#4 == (-8#8 // -3#4);
output1{test++} = -2#4 == (-8#8 %% -3#4);
output1{test++} = 4#4 == (-8#8 // -2#4);
output1{test++} = 0#4 == (-8#8 %% -2#4);
output1{test++} = -8#4 == (-8#8 // 1#4);
output1{test++} = 0#4 == (-8#8 %% 1#4);
output1{test++} = -4#4 == (-8#8 // 2#4);
output1{test++} = 0#4 == (-8#8 %% 2#4);
output1{test++} = -2#4 == (-8#8 // 3#4);
output1{test++} = -2#4 == (-8#8 %% 3#4);
output1{test++} = -2#4 == (-8#8 // 4#4);
output1{test++} = 0#4 == (-8#8 %% 4#4);
output1{test++} = -1#4 == (-8#8 // 5#4);
output1{test++} = -3#4 == (-8#8 %% 5#4);
output1{test++} = -1#4 == (-8#8 // 6#4);
output1{test++} = -2#4 == (-8#8 %% 6#4);
output1{test++} = -1#4 == (-8#8 // 7#4);
output1{test++} = -1#4 == (-8#8 %% 7#4);
output1{test++} = 0#4 == (-7#8 // -8#4);
output1{test++} = -7#4 == (-7#8 %% -8#4);
output1{test++} = 1#4 == (-7#8 // -7#4);
output1{test++} = 0#4 == (-7#8 %% -7#4);
output1{test++} = 1#4 == (-7#8 // -6#4);
output1{test++} = -1#4 == (-7#8 %% -6#4);
output1{test++} = 1#4 == (-7#8 // -5#4);
output1{test++} = -2#4 == (-7#8 %% -5#4);
output1{test++} = 1#4 == (-7#8 // -4#4);
output1{test++} = -3#4 == (-7#8 %% -4#4);
output1{test++} = 2#4 == (-7#8 // -3#4);
output1{test++} = -1#4 == (-7#8 %% -3#4);
output1{test++} = 3#4 == (-7#8 // -2#4);
output1{test++} = -1#4 == (-7#8 %% -2#4);
output1{test++} = 7#4 == (-7#8 // -1#4);
output1{test++} = 0#4 == (-7#8 %% -1#4);
output1{test++} = -7#4 == (-7#8 // 1#4);
output1{test++} = 0#4 == (-7#8 %% 1#4);
output1{test++} = -3#4 == (-7#8 // 2#4);
output1{test++} = -1#4 == (-7#8 %% 2#4);
output1{test++} = -2#4 == (-7#8 // 3#4);
output1{test++} = -1#4 == (-7#8 %% 3#4);
output1{test++} = -1#4 == (-7#8 // 4#4);
output1{test++} = -3#4 == (-7#8 %% 4#4);
output1{test++} = -1#4 == (-7#8 // 5#4);
output1{test++} = -2#4 == (-7#8 %% 5#4);
output1{test++} = -1#4 == (-7#8 // 6#4);
output1{test++} = -1#4 == (-7#8 %% 6#4);
output1{test++} = -1#4 == (-7#8 // 7#4);
output1{test++} = 0#4 == (-7#8 %% 7#4);
output1{test++} = 0#4 == (-6#8 // -8#4);
output1{test++} = -6#4 == (-6#8 %% -8#4);
output1{test++} = 0#4 == (-6#8 // -7#4);
output1{test++} = -6#4 == (-6#8 %% -7#4);
output1{test++} = 1#4 == (-6#8 // -6#4);
output1{test++} = 0#4 == (-6#8 %% -6#4);
output1{test++} = 1#4 == (-6#8 // -5#4);
output1{test++} = -1#4 == (-6#8 %% -5#4);
output1{test++} = 1#4 == (-6#8 // -4#4);
output1{test++} = -2#4 == (-6#8 %% -4#4);
output1{test++} = 2#4 == (-6#8 // -3#4);
output1{test++} = 0#4 == (-6#8 %% -3#4);
output1{test++} = 3#4 == (-6#8 // -2#4);
output1{test++} = 0#4 == (-6#8 %% -2#4);
output1{test++} = 6#4 == (-6#8 // -1#4);
output1{test++} = 0#4 == (-6#8 %% -1#4);
output1{test++} = -6#4 == (-6#8 // 1#4);
output1{test++} = 0#4 == (-6#8 %% 1#4);
output1{test++} = -3#4 == (-6#8 // 2#4);
output1{test++} = 0#4 == (-6#8 %% 2#4);
output1{test++} = -2#4 == (-6#8 // 3#4);
output1{test++} = 0#4 == (-6#8 %% 3#4);
output1{test++} = -1#4 == (-6#8 // 4#4);
output1{test++} = -2#4 == (-6#8 %% 4#4);
output1{test++} = -1#4 == (-6#8 // 5#4);
output1{test++} = -1#4 == (-6#8 %% 5#4);
output1{test++} = -1#4 == (-6#8 // 6#4);
output1{test++} = 0#4 == (-6#8 %% 6#4);
output1{test++} = 0#4 == (-6#8 // 7#4);
output1{test++} = -6#4 == (-6#8 %% 7#4);
output1{test++} = 0#4 == (-5#8 // -8#4);
output1{test++} = -5#4 == (-5#8 %% -8#4);
output1{test++} = 0#4 == (-5#8 // -7#4);
output1{test++} = -5#4 == (-5#8 %% -7#4);
output1{test++} = 0#4 == (-5#8 // -6#4);
output1{test++} = -5#4 == (-5#8 %% -6#4);
output1{test++} = 1#4 == (-5#8 // -5#4);
output1{test++} = 0#4 == (-5#8 %% -5#4);
output1{test++} = 1#4 == (-5#8 // -4#4);
output1{test++} = -1#4 == (-5#8 %% -4#4);
output1{test++} = 1#4 == (-5#8 // -3#4);
output1{test++} = -2#4 == (-5#8 %% -3#4);
output1{test++} = 2#4 == (-5#8 // -2#4);
output1{test++} = -1#4 == (-5#8 %% -2#4);
output1{test++} = 5#4 == (-5#8 // -1#4);
output1{test++} = 0#4 == (-5#8 %% -1#4);
output1{test++} = -5#4 == (-5#8 // 1#4);
output1{test++} = 0#4 == (-5#8 %% 1#4);
output1{test++} = -2#4 == (-5#8 // 2#4);
output1{test++} = -1#4 == (-5#8 %% 2#4);
output1{test++} = -1#4 == (-5#8 // 3#4);
output1{test++} = -2#4 == (-5#8 %% 3#4);
output1{test++} = -1#4 == (-5#8 // 4#4);
output1{test++} = -1#4 == (-5#8 %% 4#4);
output1{test++} = -1#4 == (-5#8 // 5#4);
output1{test++} = 0#4 == (-5#8 %% 5#4);
output1{test++} = 0#4 == (-5#8 // 6#4);
output1{test++} = -5#4 == (-5#8 %% 6#4);
output1{test++} = 0#4 == (-5#8 // 7#4);
output1{test++} = -5#4 == (-5#8 %% 7#4);
output1{test++} = 0#4 == (-4#8 // -8#4);
output1{test++} = -4#4 == (-4#8 %% -8#4);
output1{test++} = 0#4 == (-4#8 // -7#4);
output1{test++} = -4#4 == (-4#8 %% -7#4);
output1{test++} = 0#4 == (-4#8 // -6#4);
output1{test++} = -4#4 == (-4#8 %% -6#4);
output1{test++} = 0#4 == (-4#8 // -5#4);
output1{test++} = -4#4 == (-4#8 %% -5#4);
output1{test++} = 1#4 == (-4#8 // -4#4);
output1{test++} = 0#4 == (-4#8 %% -4#4);
output1{test++} = 1#4 == (-4#8 // -3#4);
output1{test++} = -1#4 == (-4#8 %% -3#4);
output1{test++} = 2#4 == (-4#8 // -2#4);
output1{test++} = 0#4 == (-4#8 %% -2#4);
output1{test++} = 4#4 == (-4#8 // -1#4);
output1{test++} = 0#4 == (-4#8 %% -1#4);
output1{test++} = -4#4 == (-4#8 // 1#4);
output1{test++} = 0#4 == (-4#8 %% 1#4);
output1{test++} = -2#4 == (-4#8 // 2#4);
output1{test++} = 0#4 == (-4#8 %% 2#4);
output1{test++} = -1#4 == (-4#8 // 3#4);
output1{test++} = -1#4 == (-4#8 %% 3#4);
output1{test++} = -1#4 == (-4#8 // 4#4);
output1{test++} = 0#4 == (-4#8 %% 4#4);
output1{test++} = 0#4 == (-4#8 // 5#4);
output1{test++} = -4#4 == (-4#8 %% 5#4);
output1{test++} = 0#4 == (-4#8 // 6#4);
output1{test++} = -4#4 == (-4#8 %% 6#4);
output1{test++} = 0#4 == (-4#8 // 7#4);
output1{test++} = -4#4 == (-4#8 %% 7#4);
output1{test++} = 0#4 == (-3#8 // -8#4);
output1{test++} = -3#4 == (-3#8 %% -8#4);
output1{test++} = 0#4 == (-3#8 // -7#4);
output1{test++} = -3#4 == (-3#8 %% -7#4);
output1{test++} = 0#4 == (-3#8 // -6#4);
output1{test++} = -3#4 == (-3#8 %% -6#4);
output1{test++} = 0#4 == (-3#8 // -5#4);
output1{test++} = -3#4 == (-3#8 %% -5#4);
output1{test++} = 0#4 == (-3#8 // -4#4);
output1{test++} = -3#4 == (-3#8 %% -4#4);
output1{test++} = 1#4 == (-3#8 // -3#4);
output1{test++} = 0#4 == (-3#8 %% -3#4);
output1{test++} = 1#4 == (-3#8 // -2#4);
output1{test++} = -1#4 == (-3#8 %% -2#4);
output1{test++} = 3#4 == (-3#8 // -1#4);
output1{test++} = 0#4 == (-3#8 %% -1#4);
output1{test++} = -3#4 == (-3#8 // 1#4);
output1{test++} = 0#4 == (-3#8 %% 1#4);
output1{test++} = -1#4 == (-3#8 // 2#4);
output1{test++} = -1#4 == (-3#8 %% 2#4);
output1{test++} = -1#4 == (-3#8 // 3#4);
output1{test++} = 0#4 == (-3#8 %% 3#4);
output1{test++} = 0#4 == (-3#8 // 4#4);
output1{test++} = -3#4 == (-3#8 %% 4#4);
output1{test++} = 0#4 == (-3#8 // 5#4);
output1{test++} = -3#4 == (-3#8 %% 5#4);
output1{test++} = 0#4 == (-3#8 // 6#4);
output1{test++} = -3#4 == (-3#8 %% 6#4);
output1{test++} = 0#4 == (-3#8 // 7#4);
output1{test++} = -3#4 == (-3#8 %% 7#4);
output1{test++} = 0#4 == (-2#8 // -8#4);
output1{test++} = -2#4 == (-2#8 %% -8#4);
output1{test++} = 0#4 == (-2#8 // -7#4);
output1{test++} = -2#4 == (-2#8 %% -7#4);
output1{test++} = 0#4 == (-2#8 // -6#4);
output1{test++} = -2#4 == (-2#8 %% -6#4);
output1{test++} = 0#4 == (-2#8 // -5#4);
output1{test++} = -2#4 == (-2#8 %% -5#4);
output1{test++} = 0#4 == (-2#8 // -4#4);
output1{test++} = -2#4 == (-2#8 %% -4#4);
output1{test++} = 0#4 == (-2#8 // -3#4);
output1{test++} = -2#4 == (-2#8 %% -3#4);
output1{test++} = 1#4 == (-2#8 // -2#4);
output1{test++} = 0#4 == (-2#8 %% -2#4);
output1{test++} = 2#4 == (-2#8 // -1#4);
output1{test++} = 0#4 == (-2#8 %% -1#4);
output1{test++} = -2#4 == (-2#8 // 1#4);
output1{test++} = 0#4 == (-2#8 %% 1#4);
output1{test++} = -1#4 == (-2#8 // 2#4);
output1{test++} = 0#4 == (-2#8 %% 2#4);
output1{test++} = 0#4 == (-2#8 // 3#4);
output1{test++} = -2#4 == (-2#8 %% 3#4);
output1{test++} = 0#4 == (-2#8 // 4#4);
output1{test++} = -2#4 == (-2#8 %% 4#4);
output1{test++} = 0#4 == (-2#8 // 5#4);
output1{test++} = -2#4 == (-2#8 %% 5#4);
output1{test++} = 0#4 == (-2#8 // 6#4);
output1{test++} = -2#4 == (-2#8 %% 6#4);
output1{test++} = 0#4 == (-2#8 // 7#4);
output1{test++} = -2#4 == (-2#8 %% 7#4);
output1{test++} = 0#4 == (-1#8 // -8#4);
output1{test++} = -1#4 == (-1#8 %% -8#4);
output1{test++} = 0#4 == (-1#8 // -7#4);
output1{test++} = -1#4 == (-1#8 %% -7#4);
output1{test++} = 0#4 == (-1#8 // -6#4);
output1{test++} = -1#4 == (-1#8 %% -6#4);
output1{test++} = 0#4 == (-1#8 // -5#4);
output1{test++} = -1#4 == (-1#8 %% -5#4);
output1{test++} = 0#4 == (-1#8 // -4#4);
output1{test++} = -1#4 == (-1#8 %% -4#4);
output1{test++} = 0#4 == (-1#8 // -3#4);
output1{test++} = -1#4 == (-1#8 %% -3#4);
output1{test++} = 0#4 == (-1#8 // -2#4);
output1{test++} = -1#4 == (-1#8 %% -2#4);
output1{test++} = 1#4 == (-1#8 // -1#4);
output1{test++} = 0#4 == (-1#8 %% -1#4);
output1{test++} = -1#4 == (-1#8 // 1#4);
output1{test++} = 0#4 == (-1#8 %% 1#4);
output1{test++} = 0#4 == (-1#8 // 2#4);
output1{test++} = -1#4 == (-1#8 %% 2#4);
output1{test++} = 0#4 == (-1#8 // 3#4);
output1{test++} = -1#4 == (-1#8 %% 3#4);
output1{test++} = 0#4 == (-1#8 // 4#4);
output1{test++} = -1#4 == (-1#8 %% 4#4);
output1{test++} = 0#4 == (-1#8 // 5#4);
output1{test++} = -1#4 == (-1#8 %% 5#4);
output1{test++} = 0#4 == (-1#8 // 6#4);
output1{test++} = -1#4 == (-1#8 %% 6#4);
output1{test++} = 0#4 == (-1#8 // 7#4);
output1{test++} = -1#4 == (-1#8 %% 7#4);
output1{test++} = 0#4 == (0#8 // -8#4);
output1{test++} = 0#4 == (0#8 %% -8#4);
output1{test++} = 0#4 == (0#8 // -7#4);
output1{test++} = 0#4 == (0#8 %% -7#4);
output1{test++} = 0#4 == (0#8 // -6#4);
output1{test++} = 0#4 == (0#8 %% -6#4);
output1{test++} = 0#4 == (0#8 // -5#4);
output1{test++} = 0#4 == (0#8 %% -5#4);
output1{test++} = 0#4 == (0#8 // -4#4);
output1{test++} = 0#4 == (0#8 %% -4#4);
output1{test++} = 0#4 == (0#8 // -3#4);
output1{test++} = 0#4 == (0#8 %% -3#4);
output1{test++} = 0#4 == (0#8 // -2#4);
output1{test++} = 0#4 == (0#8 %% -2#4);
output1{test++} = 0#4 == (0#8 // -1#4);
output1{test++} = 0#4 == (0#8 %% -1#4);
output1{test++} = 0#4 == (0#8 // 1#4);
output1{test++} = 0#4 == (0#8 %% 1#4);
output1{test++} = 0#4 == (0#8 // 2#4);
output1{test++} = 0#4 == (0#8 %% 2#4);
output1{test++} = 0#4 == (0#8 // 3#4);
output1{test++} = 0#4 == (0#8 %% 3#4);
output1{test++} = 0#4 == (0#8 // 4#4);
output1{test++} = 0#4 == (0#8 %% 4#4);
output1{test++} = 0#4 == (0#8 // 5#4);
output1{test++} = 0#4 == (0#8 %% 5#4);
output1{test++} = 0#4 == (0#8 // 6#4);
output1{test++} = 0#4 == (0#8 %% 6#4);
output1{test++} = 0#4 == (0#8 // 7#4);
output1{test++} = 0#4 == (0#8 %% 7#4);
output1{test++} = 0#4 == (1#8 // -8#4);
output1{test++} = 1#4 == (1#8 %% -8#4);
output1{test++} = 0#4 == (1#8 // -7#4);
output1{test++} = 1#4 == (1#8 %% -7#4);
output1{test++} = 0#4 == (1#8 // -6#4);
output1{test++} = 1#4 == (1#8 %% -6#4);
output1{test++} = 0#4 == (1#8 // -5#4);
output1{test++} = 1#4 == (1#8 %% -5#4);
output1{test++} = 0#4 == (1#8 // -4#4);
output1{test++} = 1#4 == (1#8 %% -4#4);
output1{test++} = 0#4 == (1#8 // -3#4);
output1{test++} = 1#4 == (1#8 %% -3#4);
output1{test++} = 0#4 == (1#8 // -2#4);
output1{test++} = 1#4 == (1#8 %% -2#4);
output1{test++} = -1#4 == (1#8 // -1#4);
output1{test++} = 0#4 == (1#8 %% -1#4);
output1{test++} = 1#4 == (1#8 // 1#4);
output1{test++} = 0#4 == (1#8 %% 1#4);
output1{test++} = 0#4 == (1#8 // 2#4);
output1{test++} = 1#4 == (1#8 %% 2#4);
output1{test++} = 0#4 == (1#8 // 3#4);
output1{test++} = 1#4 == (1#8 %% 3#4);
output1{test++} = 0#4 == (1#8 // 4#4);
output1{test++} = 1#4 == (1#8 %% 4#4);
output1{test++} = 0#4 == (1#8 // 5#4);
output1{test++} = 1#4 == (1#8 %% 5#4);
output1{test++} = 0#4 == (1#8 // 6#4);
output1{test++} = 1#4 == (1#8 %% 6#4);
output1{test++} = 0#4 == (1#8 // 7#4);
output1{test++} = 1#4 == (1#8 %% 7#4);
output1{test++} = 0#4 == (2#8 // -8#4);
output1{test++} = 2#4 == (2#8 %% -8#4);
output1{test++} = 0#4 == (2#8 // -7#4);
output1{test++} = 2#4 == (2#8 %% -7#4);
output1{test++} = 0#4 == (2#8 // -6#4);
output1{test++} = 2#4 == (2#8 %% -6#4);
output1{test++} = 0#4 == (2#8 // -5#4);
output1{test++} = 2#4 == (2#8 %% -5#4);
output1{test++} = 0#4 == (2#8 // -4#4);
output1{test++} = 2#4 == (2#8 %% -4#4);
output1{test++} = 0#4 == (2#8 // -3#4);
output1{test++} = 2#4 == (2#8 %% -3#4);
output1{test++} = -1#4 == (2#8 // -2#4);
output1{test++} = 0#4 == (2#8 %% -2#4);
output1{test++} = -2#4 == (2#8 // -1#4);
output1{test++} = 0#4 == (2#8 %% -1#4);
output1{test++} = 2#4 == (2#8 // 1#4);
output1{test++} = 0#4 == (2#8 %% 1#4);
output1{test++} = 1#4 == (2#8 // 2#4);
output1{test++} = 0#4 == (2#8 %% 2#4);
output1{test++} = 0#4 == (2#8 // 3#4);
output1{test++} = 2#4 == (2#8 %% 3#4);
output1{test++} = 0#4 == (2#8 // 4#4);
output1{test++} = 2#4 == (2#8 %% 4#4);
output1{test++} = 0#4 == (2#8 // 5#4);
output1{test++} = 2#4 == (2#8 %% 5#4);
output1{test++} = 0#4 == (2#8 // 6#4);
output1{test++} = 2#4 == (2#8 %% 6#4);
output1{test++} = 0#4 == (2#8 // 7#4);
output1{test++} = 2#4 == (2#8 %% 7#4);
output1{test++} = 0#4 == (3#8 // -8#4);
output1{test++} = 3#4 == (3#8 %% -8#4);
output1{test++} = 0#4 == (3#8 // -7#4);
output1{test++} = 3#4 == (3#8 %% -7#4);
output1{test++} = 0#4 == (3#8 // -6#4);
output1{test++} = 3#4 == (3#8 %% -6#4);
output1{test++} = 0#4 == (3#8 // -5#4);
output1{test++} = 3#4 == (3#8 %% -5#4);
output1{test++} = 0#4 == (3#8 // -4#4);
output1{test++} = 3#4 == (3#8 %% -4#4);
output1{test++} = -1#4 == (3#8 // -3#4);
output1{test++} = 0#4 == (3#8 %% -3#4);
output1{test++} = -1#4 == (3#8 // -2#4);
output1{test++} = 1#4 == (3#8 %% -2#4);
output1{test++} = -3#4 == (3#8 // -1#4);
output1{test++} = 0#4 == (3#8 %% -1#4);
output1{test++} = 3#4 == (3#8 // 1#4);
output1{test++} = 0#4 == (3#8 %% 1#4);
output1{test++} = 1#4 == (3#8 // 2#4);
output1{test++} = 1#4 == (3#8 %% 2#4);
output1{test++} = 1#4 == (3#8 // 3#4);
output1{test++} = 0#4 == (3#8 %% 3#4);
output1{test++} = 0#4 == (3#8 // 4#4);
output1{test++} = 3#4 == (3#8 %% 4#4);
output1{test++} = 0#4 == (3#8 // 5#4);
output1{test++} = 3#4 == (3#8 %% 5#4);
output1{test++} = 0#4 == (3#8 // 6#4);
output1{test++} = 3#4 == (3#8 %% 6#4);
output1{test++} = 0#4 == (3#8 // 7#4);
output1{test++} = 3#4 == (3#8 %% 7#4);
output1{test++} = 0#4 == (4#8 // -8#4);
output1{test++} = 4#4 == (4#8 %% -8#4);
output1{test++} = 0#4 == (4#8 // -7#4);
output1{test++} = 4#4 == (4#8 %% -7#4);
output1{test++} = 0#4 == (4#8 // -6#4);
output1{test++} = 4#4 == (4#8 %% -6#4);
output1{test++} = 0#4 == (4#8 // -5#4);
output1{test++} = 4#4 == (4#8 %% -5#4);
output1{test++} = -1#4 == (4#8 // -4#4);
output1{test++} = 0#4 == (4#8 %% -4#4);
output1{test++} = -1#4 == (4#8 // -3#4);
output1{test++} = 1#4 == (4#8 %% -3#4);
output1{test++} = -2#4 == (4#8 // -2#4);
output1{test++} = 0#4 == (4#8 %% -2#4);
output1{test++} = -4#4 == (4#8 // -1#4);
output1{test++} = 0#4 == (4#8 %% -1#4);
output1{test++} = 4#4 == (4#8 // 1#4);
output1{test++} = 0#4 == (4#8 %% 1#4);
output1{test++} = 2#4 == (4#8 // 2#4);
output1{test++} = 0#4 == (4#8 %% 2#4);
output1{test++} = 1#4 == (4#8 // 3#4);
output1{test++} = 1#4 == (4#8 %% 3#4);
output1{test++} = 1#4 == (4#8 // 4#4);
output1{test++} = 0#4 == (4#8 %% 4#4);
output1{test++} = 0#4 == (4#8 // 5#4);
output1{test++} = 4#4 == (4#8 %% 5#4);
output1{test++} = 0#4 == (4#8 // 6#4);
output1{test++} = 4#4 == (4#8 %% 6#4);
output1{test++} = 0#4 == (4#8 // 7#4);
output1{test++} = 4#4 == (4#8 %% 7#4);
output1{test++} = 0#4 == (5#8 // -8#4);
output1{test++} = 5#4 == (5#8 %% -8#4);
output1{test++} = 0#4 == (5#8 // -7#4);
output1{test++} = 5#4 == (5#8 %% -7#4);
output1{test++} = 0#4 == (5#8 // -6#4);
output1{test++} = 5#4 == (5#8 %% -6#4);
output1{test++} = -1#4 == (5#8 // -5#4);
output1{test++} = 0#4 == (5#8 %% -5#4);
output1{test++} = -1#4 == (5#8 // -4#4);
output1{test++} = 1#4 == (5#8 %% -4#4);
output1{test++} = -1#4 == (5#8 // -3#4);
output1{test++} = 2#4 == (5#8 %% -3#4);
output1{test++} = -2#4 == (5#8 // -2#4);
output1{test++} = 1#4 == (5#8 %% -2#4);
output1{test++} = -5#4 == (5#8 // -1#4);
output1{test++} = 0#4 == (5#8 %% -1#4);
output1{test++} = 5#4 == (5#8 // 1#4);
output1{test++} = 0#4 == (5#8 %% 1#4);
output1{test++} = 2#4 == (5#8 // 2#4);
output1{test++} = 1#4 == (5#8 %% 2#4);
output1{test++} = 1#4 == (5#8 // 3#4);
output1{test++} = 2#4 == (5#8 %% 3#4);
output1{test++} = 1#4 == (5#8 // 4#4);
output1{test++} = 1#4 == (5#8 %% 4#4);
output1{test++} = 1#4 == (5#8 // 5#4);
output1{test++} = 0#4 == (5#8 %% 5#4);
output1{test++} = 0#4 == (5#8 // 6#4);
output1{test++} = 5#4 == (5#8 %% 6#4);
output1{test++} = 0#4 == (5#8 // 7#4);
output1{test++} = 5#4 == (5#8 %% 7#4);
output1{test++} = 0#4 == (6#8 // -8#4);
output1{test++} = 6#4 == (6#8 %% -8#4);
output1{test++} = 0#4 == (6#8 // -7#4);
output1{test++} = 6#4 == (6#8 %% -7#4);
output1{test++} = -1#4 == (6#8 // -6#4);
output1{test++} = 0#4 == (6#8 %% -6#4);
output1{test++} = -1#4 == (6#8 // -5#4);
output1{test++} = 1#4 == (6#8 %% -5#4);
output1{test++} = -1#4 == (6#8 // -4#4);
output1{test++} = 2#4 == (6#8 %% -4#4);
output1{test++} = -2#4 == (6#8 // -3#4);
output1{test++} = 0#4 == (6#8 %% -3#4);
output1{test++} = -3#4 == (6#8 // -2#4);
output1{test++} = 0#4 == (6#8 %% -2#4);
output1{test++} = -6#4 == (6#8 // -1#4);
output1{test++} = 0#4 == (6#8 %% -1#4);
output1{test++} = 6#4 == (6#8 // 1#4);
output1{test++} = 0#4 == (6#8 %% 1#4);
output1{test++} = 3#4 == (6#8 // 2#4);
output1{test++} = 0#4 == (6#8 %% 2#4);
output1{test++} = 2#4 == (6#8 // 3#4);
output1{test++} = 0#4 == (6#8 %% 3#4);
output1{test++} = 1#4 == (6#8 // 4#4);
output1{test++} = 2#4 == (6#8 %% 4#4);
output1{test++} = 1#4 == (6#8 // 5#4);
output1{test++} = 1#4 == (6#8 %% 5#4);
output1{test++} = 1#4 == (6#8 // 6#4);
output1{test++} = 0#4 == (6#8 %% 6#4);
output1{test++} = 0#4 == (6#8 // 7#4);
output1{test++} = 6#4 == (6#8 %% 7#4);
output1{test++} = 0#4 == (7#8 // -8#4);
output1{test++} = 7#4 == (7#8 %% -8#4);
output1{test++} = -1#4 == (7#8 // -7#4);
output1{test++} = 0#4 == (7#8 %% -7#4);
output1{test++} = -1#4 == (7#8 // -6#4);
output1{test++} = 1#4 == (7#8 %% -6#4);
output1{test++} = -1#4 == (7#8 // -5#4);
output1{test++} = 2#4 == (7#8 %% -5#4);
output1{test++} = -1#4 == (7#8 // -4#4);
output1{test++} = 3#4 == (7#8 %% -4#4);
output1{test++} = -2#4 == (7#8 // -3#4);
output1{test++} = 1#4 == (7#8 %% -3#4);
output1{test++} = -3#4 == (7#8 // -2#4);
output1{test++} = 1#4 == (7#8 %% -2#4);
output1{test++} = -7#4 == (7#8 // -1#4);
output1{test++} = 0#4 == (7#8 %% -1#4);
output1{test++} = 7#4 == (7#8 // 1#4);
output1{test++} = 0#4 == (7#8 %% 1#4);
output1{test++} = 3#4 == (7#8 // 2#4);
output1{test++} = 1#4 == (7#8 %% 2#4);
output1{test++} = 2#4 == (7#8 // 3#4);
output1{test++} = 1#4 == (7#8 %% 3#4);
output1{test++} = 1#4 == (7#8 // 4#4);
output1{test++} = 3#4 == (7#8 %% 4#4);
output1{test++} = 1#4 == (7#8 // 5#4);
output1{test++} = 2#4 == (7#8 %% 5#4);
output1{test++} = 1#4 == (7#8 // 6#4);
output1{test++} = 1#4 == (7#8 %% 6#4);
output1{test++} = 1#4 == (7#8 // 7#4);
output1{test++} = 0#4 == (7#8 %% 7#4);
output1{test++} = -1#4 == (8#8 // -8#4);
output1{test++} = 0#4 == (8#8 %% -8#4);
output1{test++} = -1#4 == (8#8 // -7#4);
output1{test++} = 1#4 == (8#8 %% -7#4);
output1{test++} = -1#4 == (8#8 // -6#4);
output1{test++} = 2#4 == (8#8 %% -6#4);
output1{test++} = -1#4 == (8#8 // -5#4);
output1{test++} = 3#4 == (8#8 %% -5#4);
output1{test++} = -2#4 == (8#8 // -4#4);
output1{test++} = 0#4 == (8#8 %% -4#4);
output1{test++} = -2#4 == (8#8 // -3#4);
output1{test++} = 2#4 == (8#8 %% -3#4);
output1{test++} = -4#4 == (8#8 // -2#4);
output1{test++} = 0#4 == (8#8 %% -2#4);
output1{test++} = -8#4 == (8#8 // -1#4);
output1{test++} = 0#4 == (8#8 %% -1#4);
output1{test++} = 4#4 == (8#8 // 2#4);
output1{test++} = 0#4 == (8#8 %% 2#4);
output1{test++} = 2#4 == (8#8 // 3#4);
output1{test++} = 2#4 == (8#8 %% 3#4);
output1{test++} = 2#4 == (8#8 // 4#4);
output1{test++} = 0#4 == (8#8 %% 4#4);
output1{test++} = 1#4 == (8#8 // 5#4);
output1{test++} = 3#4 == (8#8 %% 5#4);
output1{test++} = 1#4 == (8#8 // 6#4);
output1{test++} = 2#4 == (8#8 %% 6#4);
output1{test++} = 1#4 == (8#8 // 7#4);
output1{test++} = 1#4 == (8#8 %% 7#4);
output1{test++} = -1#4 == (9#8 // -8#4);
output1{test++} = 1#4 == (9#8 %% -8#4);
output1{test++} = -1#4 == (9#8 // -7#4);
output1{test++} = 2#4 == (9#8 %% -7#4);
output1{test++} = -1#4 == (9#8 // -6#4);
output1{test++} = 3#4 == (9#8 %% -6#4);
output1{test++} = -1#4 == (9#8 // -5#4);
output1{test++} = 4#4 == (9#8 %% -5#4);
output1{test++} = -2#4 == (9#8 // -4#4);
output1{test++} = 1#4 == (9#8 %% -4#4);
output1{test++} = -3#4 == (9#8 // -3#4);
output1{test++} = 0#4 == (9#8 %% -3#4);
output1{test++} = -4#4 == (9#8 // -2#4);
output1{test++} = 1#4 == (9#8 %% -2#4);
output1{test++} = 4#4 == (9#8 // 2#4);
output1{test++} = 1#4 == (9#8 %% 2#4);
output1{test++} = 3#4 == (9#8 // 3#4);
output1{test++} = 0#4 == (9#8 %% 3#4);
output1{test++} = 2#4 == (9#8 // 4#4);
output1{test++} = 1#4 == (9#8 %% 4#4);
output1{test++} = 1#4 == (9#8 // 5#4);
output1{test++} = 4#4 == (9#8 %% 5#4);
output1{test++} = 1#4 == (9#8 // 6#4);
output1{test++} = 3#4 == (9#8 %% 6#4);
output1{test++} = 1#4 == (9#8 // 7#4);
output1{test++} = 2#4 == (9#8 %% 7#4);
output1{test++} = -1#4 == (10#8 // -8#4);
output1{test++} = 2#4 == (10#8 %% -8#4);
output1{test++} = -1#4 == (10#8 // -7#4);
output1{test++} = 3#4 == (10#8 %% -7#4);
output1{test++} = -1#4 == (10#8 // -6#4);
output1{test++} = 4#4 == (10#8 %% -6#4);
output1{test++} = -2#4 == (10#8 // -5#4);
output1{test++} = 0#4 == (10#8 %% -5#4);
output1{test++} = -2#4 == (10#8 // -4#4);
output1{test++} = 2#4 == (10#8 %% -4#4);
output1{test++} = -3#4 == (10#8 // -3#4);
output1{test++} = 1#4 == (10#8 %% -3#4);
output1{test++} = -5#4 == (10#8 // -2#4);
output1{test++} = 0#4 == (10#8 %% -2#4);
output1{test++} = 5#4 == (10#8 // 2#4);
output1{test++} = 0#4 == (10#8 %% 2#4);
output1{test++} = 3#4 == (10#8 // 3#4);
output1{test++} = 1#4 == (10#8 %% 3#4);
output1{test++} = 2#4 == (10#8 // 4#4);
output1{test++} = 2#4 == (10#8 %% 4#4);
output1{test++} = 2#4 == (10#8 // 5#4);
output1{test++} = 0#4 == (10#8 %% 5#4);
output1{test++} = 1#4 == (10#8 // 6#4);
output1{test++} = 4#4 == (10#8 %% 6#4);
output1{test++} = 1#4 == (10#8 // 7#4);
output1{test++} = 3#4 == (10#8 %% 7#4);
output1{test++} = -1#4 == (11#8 // -8#4);
output1{test++} = 3#4 == (11#8 %% -8#4);
output1{test++} = -1#4 == (11#8 // -7#4);
output1{test++} = 4#4 == (11#8 %% -7#4);
output1{test++} = -1#4 == (11#8 // -6#4);
output1{test++} = 5#4 == (11#8 %% -6#4);
output1{test++} = -2#4 == (11#8 // -5#4);
output1{test++} = 1#4 == (11#8 %% -5#4);
output1{test++} = -2#4 == (11#8 // -4#4);
output1{test++} = 3#4 == (11#8 %% -4#4);
output1{test++} = -3#4 == (11#8 // -3#4);
output1{test++} = 2#4 == (11#8 %% -3#4);
output1{test++} = -5#4 == (11#8 // -2#4);
output1{test++} = 1#4 == (11#8 %% -2#4);
output1{test++} = 5#4 == (11#8 // 2#4);
output1{test++} = 1#4 == (11#8 %% 2#4);
output1{test++} = 3#4 == (11#8 // 3#4);
output1{test++} = 2#4 == (11#8 %% 3#4);
output1{test++} = 2#4 == (11#8 // 4#4);
output1{test++} = 3#4 == (11#8 %% 4#4);
output1{test++} = 2#4 == (11#8 // 5#4);
output1{test++} = 1#4 == (11#8 %% 5#4);
output1{test++} = 1#4 == (11#8 // 6#4);
output1{test++} = 5#4 == (11#8 %% 6#4);
output1{test++} = 1#4 == (11#8 // 7#4);
output1{test++} = 4#4 == (11#8 %% 7#4);
output1{test++} = -1#4 == (12#8 // -8#4);
output1{test++} = 4#4 == (12#8 %% -8#4);
output1{test++} = -1#4 == (12#8 // -7#4);
output1{test++} = 5#4 == (12#8 %% -7#4);
output1{test++} = -2#4 == (12#8 // -6#4);
output1{test++} = 0#4 == (12#8 %% -6#4);
output1{test++} = -2#4 == (12#8 // -5#4);
output1{test++} = 2#4 == (12#8 %% -5#4);
output1{test++} = -3#4 == (12#8 // -4#4);
output1{test++} = 0#4 == (12#8 %% -4#4);
output1{test++} = -4#4 == (12#8 // -3#4);
output1{test++} = 0#4 == (12#8 %% -3#4);
output1{test++} = -6#4 == (12#8 // -2#4);
output1{test++} = 0#4 == (12#8 %% -2#4);
output1{test++} = 6#4 == (12#8 // 2#4);
output1{test++} = 0#4 == (12#8 %% 2#4);
output1{test++} = 4#4 == (12#8 // 3#4);
output1{test++} = 0#4 == (12#8 %% 3#4);
output1{test++} = 3#4 == (12#8 // 4#4);
output1{test++} = 0#4 == (12#8 %% 4#4);
output1{test++} = 2#4 == (12#8 // 5#4);
output1{test++} = 2#4 == (12#8 %% 5#4);
output1{test++} = 2#4 == (12#8 // 6#4);
output1{test++} = 0#4 == (12#8 %% 6#4);
output1{test++} = 1#4 == (12#8 // 7#4);
output1{test++} = 5#4 == (12#8 %% 7#4);
output1{test++} = -1#4 == (13#8 // -8#4);
output1{test++} = 5#4 == (13#8 %% -8#4);
output1{test++} = -1#4 == (13#8 // -7#4);
output1{test++} = 6#4 == (13#8 %% -7#4);
output1{test++} = -2#4 == (13#8 // -6#4);
output1{test++} = 1#4 == (13#8 %% -6#4);
output1{test++} = -2#4 == (13#8 // -5#4);
output1{test++} = 3#4 == (13#8 %% -5#4);
output1{test++} = -3#4 == (13#8 // -4#4);
output1{test++} = 1#4 == (13#8 %% -4#4);
output1{test++} = -4#4 == (13#8 // -3#4);
output1{test++} = 1#4 == (13#8 %% -3#4);
output1{test++} = -6#4 == (13#8 // -2#4);
output1{test++} = 1#4 == (13#8 %% -2#4);
output1{test++} = 6#4 == (13#8 // 2#4);
output1{test++} = 1#4 == (13#8 %% 2#4);
output1{test++} = 4#4 == (13#8 // 3#4);
output1{test++} = 1#4 == (13#8 %% 3#4);
output1{test++} = 3#4 == (13#8 // 4#4);
output1{test++} = 1#4 == (13#8 %% 4#4);
output1{test++} = 2#4 == (13#8 // 5#4);
output1{test++} = 3#4 == (13#8 %% 5#4);
output1{test++} = 2#4 == (13#8 // 6#4);
output1{test++} = 1#4 == (13#8 %% 6#4);
output1{test++} = 1#4 == (13#8 // 7#4);
output1{test++} = 6#4 == (13#8 %% 7#4);
output1{test++} = -1#4 == (14#8 // -8#4);
output1{test++} = 6#4 == (14#8 %% -8#4);
output1{test++} = -2#4 == (14#8 // -7#4);
output1{test++} = 0#4 == (14#8 %% -7#4);
output1{test++} = -2#4 == (14#8 // -6#4);
output1{test++} = 2#4 == (14#8 %% -6#4);
output1{test++} = -2#4 == (14#8 // -5#4);
output1{test++} = 4#4 == (14#8 %% -5#4);
output1{test++} = -3#4 == (14#8 // -4#4);
output1{test++} = 2#4 == (14#8 %% -4#4);
output1{test++} = -4#4 == (14#8 // -3#4);
output1{test++} = 2#4 == (14#8 %% -3#4);
output1{test++} = -7#4 == (14#8 // -2#4);
output1{test++} = 0#4 == (14#8 %% -2#4);
output1{test++} = 7#4 == (14#8 // 2#4);
output1{test++} = 0#4 == (14#8 %% 2#4);
output1{test++} = 4#4 == (14#8 // 3#4);
output1{test++} = 2#4 == (14#8 %% 3#4);
output1{test++} = 3#4 == (14#8 // 4#4);
output1{test++} = 2#4 == (14#8 %% 4#4);
output1{test++} = 2#4 == (14#8 // 5#4);
output1{test++} = 4#4 == (14#8 %% 5#4);
output1{test++} = 2#4 == (14#8 // 6#4);
output1{test++} = 2#4 == (14#8 %% 6#4);
output1{test++} = 2#4 == (14#8 // 7#4);
output1{test++} = 0#4 == (14#8 %% 7#4);
output1{test++} = -1#4 == (15#8 // -8#4);
output1{test++} = 7#4 == (15#8 %% -8#4);
output1{test++} = -2#4 == (15#8 // -7#4);
output1{test++} = 1#4 == (15#8 %% -7#4);
output1{test++} = -2#4 == (15#8 // -6#4);
output1{test++} = 3#4 == (15#8 %% -6#4);
output1{test++} = -3#4 == (15#8 // -5#4);
output1{test++} = 0#4 == (15#8 %% -5#4);
output1{test++} = -3#4 == (15#8 // -4#4);
output1{test++} = 3#4 == (15#8 %% -4#4);
output1{test++} = -5#4 == (15#8 // -3#4);
output1{test++} = 0#4 == (15#8 %% -3#4);
output1{test++} = -7#4 == (15#8 // -2#4);
output1{test++} = 1#4 == (15#8 %% -2#4);
output1{test++} = 7#4 == (15#8 // 2#4);
output1{test++} = 1#4 == (15#8 %% 2#4);
output1{test++} = 5#4 == (15#8 // 3#4);
output1{test++} = 0#4 == (15#8 %% 3#4);
output1{test++} = 3#4 == (15#8 // 4#4);
output1{test++} = 3#4 == (15#8 %% 4#4);
output1{test++} = 3#4 == (15#8 // 5#4);
output1{test++} = 0#4 == (15#8 %% 5#4);
output1{test++} = 2#4 == (15#8 // 6#4);
output1{test++} = 3#4 == (15#8 %% 6#4);
output1{test++} = 2#4 == (15#8 // 7#4);
output1{test++} = 1#4 == (15#8 %% 7#4);
output1{test++} = -2#4 == (16#8 // -8#4);
output1{test++} = 0#4 == (16#8 %% -8#4);
output1{test++} = -2#4 == (16#8 // -7#4);
output1{test++} = 2#4 == (16#8 %% -7#4);
output1{test++} = -2#4 == (16#8 // -6#4);
output1{test++} = 4#4 == (16#8 %% -6#4);
output1{test++} = -3#4 == (16#8 // -5#4);
output1{test++} = 1#4 == (16#8 %% -5#4);
output1{test++} = -4#4 == (16#8 // -4#4);
output1{test++} = 0#4 == (16#8 %% -4#4);
output1{test++} = -5#4 == (16#8 // -3#4);
output1{test++} = 1#4 == (16#8 %% -3#4);
output1{test++} = -8#4 == (16#8 // -2#4);
output1{test++} = 0#4 == (16#8 %% -2#4);
output1{test++} = 5#4 == (16#8 // 3#4);
output1{test++} = 1#4 == (16#8 %% 3#4);
output1{test++} = 4#4 == (16#8 // 4#4);
output1{test++} = 0#4 == (16#8 %% 4#4);
output1{test++} = 3#4 == (16#8 // 5#4);
output1{test++} = 1#4 == (16#8 %% 5#4);
output1{test++} = 2#4 == (16#8 // 6#4);
output1{test++} = 4#4 == (16#8 %% 6#4);
output1{test++} = 2#4 == (16#8 // 7#4);
output1{test++} = 2#4 == (16#8 %% 7#4);
output1{test++} = -2#4 == (17#8 // -8#4);
output1{test++} = 1#4 == (17#8 %% -8#4);
output1{test++} = -2#4 == (17#8 // -7#4);
output1{test++} = 3#4 == (17#8 %% -7#4);
output1{test++} = -2#4 == (17#8 // -6#4);
output1{test++} = 5#4 == (17#8 %% -6#4);
output1{test++} = -3#4 == (17#8 // -5#4);
output1{test++} = 2#4 == (17#8 %% -5#4);
output1{test++} = -4#4 == (17#8 // -4#4);
output1{test++} = 1#4 == (17#8 %% -4#4);
output1{test++} = -5#4 == (17#8 // -3#4);
output1{test++} = 2#4 == (17#8 %% -3#4);
output1{test++} = -8#4 == (17#8 // -2#4);
output1{test++} = 1#4 == (17#8 %% -2#4);
output1{test++} = 5#4 == (17#8 // 3#4);
output1{test++} = 2#4 == (17#8 %% 3#4);
output1{test++} = 4#4 == (17#8 // 4#4);
output1{test++} = 1#4 == (17#8 %% 4#4);
output1{test++} = 3#4 == (17#8 // 5#4);
output1{test++} = 2#4 == (17#8 %% 5#4);
output1{test++} = 2#4 == (17#8 // 6#4);
output1{test++} = 5#4 == (17#8 %% 6#4);
output1{test++} = 2#4 == (17#8 // 7#4);
output1{test++} = 3#4 == (17#8 %% 7#4);
output1{test++} = -2#4 == (18#8 // -8#4);
output1{test++} = 2#4 == (18#8 %% -8#4);
output1{test++} = -2#4 == (18#8 // -7#4);
output1{test++} = 4#4 == (18#8 %% -7#4);
output1{test++} = -3#4 == (18#8 // -6#4);
output1{test++} = 0#4 == (18#8 %% -6#4);
output1{test++} = -3#4 == (18#8 // -5#4);
output1{test++} = 3#4 == (18#8 %% -5#4);
output1{test++} = -4#4 == (18#8 // -4#4);
output1{test++} = 2#4 == (18#8 %% -4#4);
output1{test++} = -6#4 == (18#8 // -3#4);
output1{test++} = 0#4 == (18#8 %% -3#4);
output1{test++} = 6#4 == (18#8 // 3#4);
output1{test++} = 0#4 == (18#8 %% 3#4);
output1{test++} = 4#4 == (18#8 // 4#4);
output1{test++} = 2#4 == (18#8 %% 4#4);
output1{test++} = 3#4 == (18#8 // 5#4);
output1{test++} = 3#4 == (18#8 %% 5#4);
output1{test++} = 3#4 == (18#8 // 6#4);
output1{test++} = 0#4 == (18#8 %% 6#4);
output1{test++} = 2#4 == (18#8 // 7#4);
output1{test++} = 4#4 == (18#8 %% 7#4);
output1{test++} = -2#4 == (19#8 // -8#4);
output1{test++} = 3#4 == (19#8 %% -8#4);
output1{test++} = -2#4 == (19#8 // -7#4);
output1{test++} = 5#4 == (19#8 %% -7#4);
output1{test++} = -3#4 == (19#8 // -6#4);
output1{test++} = 1#4 == (19#8 %% -6#4);
output1{test++} = -3#4 == (19#8 // -5#4);
output1{test++} = 4#4 == (19#8 %% -5#4);
output1{test++} = -4#4 == (19#8 // -4#4);
output1{test++} = 3#4 == (19#8 %% -4#4);
output1{test++} = -6#4 == (19#8 // -3#4);
output1{test++} = 1#4 == (19#8 %% -3#4);
output1{test++} = 6#4 == (19#8 // 3#4);
output1{test++} = 1#4 == (19#8 %% 3#4);
output1{test++} = 4#4 == (19#8 // 4#4);
output1{test++} = 3#4 == (19#8 %% 4#4);
output1{test++} = 3#4 == (19#8 // 5#4);
output1{test++} = 4#4 == (19#8 %% 5#4);
output1{test++} = 3#4 == (19#8 // 6#4);
output1{test++} = 1#4 == (19#8 %% 6#4);
output1{test++} = 2#4 == (19#8 // 7#4);
output1{test++} = 5#4 == (19#8 %% 7#4);
output1{test++} = -2#4 == (20#8 // -8#4);
output1{test++} = 4#4 == (20#8 %% -8#4);
output1{test++} = -2#4 == (20#8 // -7#4);
output1{test++} = 6#4 == (20#8 %% -7#4);
output1{test++} = -3#4 == (20#8 // -6#4);
output1{test++} = 2#4 == (20#8 %% -6#4);
output1{test++} = -4#4 == (20#8 // -5#4);
output1{test++} = 0#4 == (20#8 %% -5#4);
output1{test++} = -5#4 == (20#8 // -4#4);
output1{test++} = 0#4 == (20#8 %% -4#4);
output1{test++} = -6#4 == (20#8 // -3#4);
output1{test++} = 2#4 == (20#8 %% -3#4);
output1{test++} = 6#4 == (20#8 // 3#4);
output1{test++} = 2#4 == (20#8 %% 3#4);
output1{test++} = 5#4 == (20#8 // 4#4);
output1{test++} = 0#4 == (20#8 %% 4#4);
output1{test++} = 4#4 == (20#8 // 5#4);
output1{test++} = 0#4 == (20#8 %% 5#4);
output1{test++} = 3#4 == (20#8 // 6#4);
output1{test++} = 2#4 == (20#8 %% 6#4);
output1{test++} = 2#4 == (20#8 // 7#4);
output1{test++} = 6#4 == (20#8 %% 7#4);
output1{test++} = -2#4 == (21#8 // -8#4);
output1{test++} = 5#4 == (21#8 %% -8#4);
output1{test++} = -3#4 == (21#8 // -7#4);
output1{test++} = 0#4 == (21#8 %% -7#4);
output1{test++} = -3#4 == (21#8 // -6#4);
output1{test++} = 3#4 == (21#8 %% -6#4);
output1{test++} = -4#4 == (21#8 // -5#4);
output1{test++} = 1#4 == (21#8 %% -5#4);
output1{test++} = -5#4 == (21#8 // -4#4);
output1{test++} = 1#4 == (21#8 %% -4#4);
output1{test++} = -7#4 == (21#8 // -3#4);
output1{test++} = 0#4 == (21#8 %% -3#4);
output1{test++} = 7#4 == (21#8 // 3#4);
output1{test++} = 0#4 == (21#8 %% 3#4);
output1{test++} = 5#4 == (21#8 // 4#4);
output1{test++} = 1#4 == (21#8 %% 4#4);
output1{test++} = 4#4 == (21#8 // 5#4);
output1{test++} = 1#4 == (21#8 %% 5#4);
output1{test++} = 3#4 == (21#8 // 6#4);
output1{test++} = 3#4 == (21#8 %% 6#4);
output1{test++} = 3#4 == (21#8 // 7#4);
output1{test++} = 0#4 == (21#8 %% 7#4);
output1{test++} = -2#4 == (22#8 // -8#4);
output1{test++} = 6#4 == (22#8 %% -8#4);
output1{test++} = -3#4 == (22#8 // -7#4);
output1{test++} = 1#4 == (22#8 %% -7#4);
output1{test++} = -3#4 == (22#8 // -6#4);
output1{test++} = 4#4 == (22#8 %% -6#4);
output1{test++} = -4#4 == (22#8 // -5#4);
output1{test++} = 2#4 == (22#8 %% -5#4);
output1{test++} = -5#4 == (22#8 // -4#4);
output1{test++} = 2#4 == (22#8 %% -4#4);
output1{test++} = -7#4 == (22#8 // -3#4);
output1{test++} = 1#4 == (22#8 %% -3#4);
output1{test++} = 7#4 == (22#8 // 3#4);
output1{test++} = 1#4 == (22#8 %% 3#4);
output1{test++} = 5#4 == (22#8 // 4#4);
output1{test++} = 2#4 == (22#8 %% 4#4);
output1{test++} = 4#4 == (22#8 // 5#4);
output1{test++} = 2#4 == (22#8 %% 5#4);
output1{test++} = 3#4 == (22#8 // 6#4);
output1{test++} = 4#4 == (22#8 %% 6#4);
output1{test++} = 3#4 == (22#8 // 7#4);
output1{test++} = 1#4 == (22#8 %% 7#4);
output1{test++} = -2#4 == (23#8 // -8#4);
output1{test++} = 7#4 == (23#8 %% -8#4);
output1{test++} = -3#4 == (23#8 // -7#4);
output1{test++} = 2#4 == (23#8 %% -7#4);
output1{test++} = -3#4 == (23#8 // -6#4);
output1{test++} = 5#4 == (23#8 %% -6#4);
output1{test++} = -4#4 == (23#8 // -5#4);
output1{test++} = 3#4 == (23#8 %% -5#4);
output1{test++} = -5#4 == (23#8 // -4#4);
output1{test++} = 3#4 == (23#8 %% -4#4);
output1{test++} = -7#4 == (23#8 // -3#4);
output1{test++} = 2#4 == (23#8 %% -3#4);
output1{test++} = 7#4 == (23#8 // 3#4);
output1{test++} = 2#4 == (23#8 %% 3#4);
output1{test++} = 5#4 == (23#8 // 4#4);
output1{test++} = 3#4 == (23#8 %% 4#4);
output1{test++} = 4#4 == (23#8 // 5#4);
output1{test++} = 3#4 == (23#8 %% 5#4);
output1{test++} = 3#4 == (23#8 // 6#4);
output1{test++} = 5#4 == (23#8 %% 6#4);
output1{test++} = 3#4 == (23#8 // 7#4);
output1{test++} = 2#4 == (23#8 %% 7#4);
output1{test++} = -3#4 == (24#8 // -8#4);
output1{test++} = 0#4 == (24#8 %% -8#4);
output1{test++} = -3#4 == (24#8 // -7#4);
output1{test++} = 3#4 == (24#8 %% -7#4);
output1{test++} = -4#4 == (24#8 // -6#4);
output1{test++} = 0#4 == (24#8 %% -6#4);
output1{test++} = -4#4 == (24#8 // -5#4);
output1{test++} = 4#4 == (24#8 %% -5#4);
output1{test++} = -6#4 == (24#8 // -4#4);
output1{test++} = 0#4 == (24#8 %% -4#4);
output1{test++} = -8#4 == (24#8 // -3#4);
output1{test++} = 0#4 == (24#8 %% -3#4);
output1{test++} = 6#4 == (24#8 // 4#4);
output1{test++} = 0#4 == (24#8 %% 4#4);
output1{test++} = 4#4 == (24#8 // 5#4);
output1{test++} = 4#4 == (24#8 %% 5#4);
output1{test++} = 4#4 == (24#8 // 6#4);
output1{test++} = 0#4 == (24#8 %% 6#4);
output1{test++} = 3#4 == (24#8 // 7#4);
output1{test++} = 3#4 == (24#8 %% 7#4);
output1{test++} = -3#4 == (25#8 // -8#4);
output1{test++} = 1#4 == (25#8 %% -8#4);
output1{test++} = -3#4 == (25#8 // -7#4);
output1{test++} = 4#4 == (25#8 %% -7#4);
output1{test++} = -4#4 == (25#8 // -6#4);
output1{test++} = 1#4 == (25#8 %% -6#4);
output1{test++} = -5#4 == (25#8 // -5#4);
output1{test++} = 0#4 == (25#8 %% -5#4);
output1{test++} = -6#4 == (25#8 // -4#4);
output1{test++} = 1#4 == (25#8 %% -4#4);
output1{test++} = -8#4 == (25#8 // -3#4);
output1{test++} = 1#4 == (25#8 %% -3#4);
output1{test++} = 6#4 == (25#8 // 4#4);
output1{test++} = 1#4 == (25#8 %% 4#4);
output1{test++} = 5#4 == (25#8 // 5#4);
output1{test++} = 0#4 == (25#8 %% 5#4);
output1{test++} = 4#4 == (25#8 // 6#4);
output1{test++} = 1#4 == (25#8 %% 6#4);
output1{test++} = 3#4 == (25#8 // 7#4);
output1{test++} = 4#4 == (25#8 %% 7#4);
output1{test++} = -3#4 == (26#8 // -8#4);
output1{test++} = 2#4 == (26#8 %% -8#4);
output1{test++} = -3#4 == (26#8 // -7#4);
output1{test++} = 5#4 == (26#8 %% -7#4);
output1{test++} = -4#4 == (26#8 // -6#4);
output1{test++} = 2#4 == (26#8 %% -6#4);
output1{test++} = -5#4 == (26#8 // -5#4);
output1{test++} = 1#4 == (26#8 %% -5#4);
output1{test++} = -6#4 == (26#8 // -4#4);
output1{test++} = 2#4 == (26#8 %% -4#4);
output1{test++} = -8#4 == (26#8 // -3#4);
output1{test++} = 2#4 == (26#8 %% -3#4);
output1{test++} = 6#4 == (26#8 // 4#4);
output1{test++} = 2#4 == (26#8 %% 4#4);
output1{test++} = 5#4 == (26#8 // 5#4);
output1{test++} = 1#4 == (26#8 %% 5#4);
output1{test++} = 4#4 == (26#8 // 6#4);
output1{test++} = 2#4 == (26#8 %% 6#4);
output1{test++} = 3#4 == (26#8 // 7#4);
output1{test++} = 5#4 == (26#8 %% 7#4);
output1{test++} = -3#4 == (27#8 // -8#4);
output1{test++} = 3#4 == (27#8 %% -8#4);
output1{test++} = -3#4 == (27#8 // -7#4);
output1{test++} = 6#4 == (27#8 %% -7#4);
output1{test++} = -4#4 == (27#8 // -6#4);
output1{test++} = 3#4 == (27#8 %% -6#4);
output1{test++} = -5#4 == (27#8 // -5#4);
output1{test++} = 2#4 == (27#8 %% -5#4);
output1{test++} = -6#4 == (27#8 // -4#4);
output1{test++} = 3#4 == (27#8 %% -4#4);
output1{test++} = 6#4 == (27#8 // 4#4);
output1{test++} = 3#4 == (27#8 %% 4#4);
output1{test++} = 5#4 == (27#8 // 5#4);
output1{test++} = 2#4 == (27#8 %% 5#4);
output1{test++} = 4#4 == (27#8 // 6#4);
output1{test++} = 3#4 == (27#8 %% 6#4);
output1{test++} = 3#4 == (27#8 // 7#4);
output1{test++} = 6#4 == (27#8 %% 7#4);
output1{test++} = -3#4 == (28#8 // -8#4);
output1{test++} = 4#4 == (28#8 %% -8#4);
output1{test++} = -4#4 == (28#8 // -7#4);
output1{test++} = 0#4 == (28#8 %% -7#4);
output1{test++} = -4#4 == (28#8 // -6#4);
output1{test++} = 4#4 == (28#8 %% -6#4);
output1{test++} = -5#4 == (28#8 // -5#4);
output1{test++} = 3#4 == (28#8 %% -5#4);
output1{test++} = -7#4 == (28#8 // -4#4);
output1{test++} = 0#4 == (28#8 %% -4#4);
output1{test++} = 7#4 == (28#8 // 4#4);
output1{test++} = 0#4 == (28#8 %% 4#4);
output1{test++} = 5#4 == (28#8 // 5#4);
output1{test++} = 3#4 == (28#8 %% 5#4);
output1{test++} = 4#4 == (28#8 // 6#4);
output1{test++} = 4#4 == (28#8 %% 6#4);
output1{test++} = 4#4 == (28#8 // 7#4);
output1{test++} = 0#4 == (28#8 %% 7#4);
output1{test++} = -3#4 == (29#8 // -8#4);
output1{test++} = 5#4 == (29#8 %% -8#4);
output1{test++} = -4#4 == (29#8 // -7#4);
output1{test++} = 1#4 == (29#8 %% -7#4);
output1{test++} = -4#4 == (29#8 // -6#4);
output1{test++} = 5#4 == (29#8 %% -6#4);
output1{test++} = -5#4 == (29#8 // -5#4);
output1{test++} = 4#4 == (29#8 %% -5#4);
output1{test++} = -7#4 == (29#8 // -4#4);
output1{test++} = 1#4 == (29#8 %% -4#4);
output1{test++} = 7#4 == (29#8 // 4#4);
output1{test++} = 1#4 == (29#8 %% 4#4);
output1{test++} = 5#4 == (29#8 // 5#4);
output1{test++} = 4#4 == (29#8 %% 5#4);
output1{test++} = 4#4 == (29#8 // 6#4);
output1{test++} = 5#4 == (29#8 %% 6#4);
output1{test++} = 4#4 == (29#8 // 7#4);
output1{test++} = 1#4 == (29#8 %% 7#4);
output1{test++} = -3#4 == (30#8 // -8#4);
output1{test++} = 6#4 == (30#8 %% -8#4);
output1{test++} = -4#4 == (30#8 // -7#4);
output1{test++} = 2#4 == (30#8 %% -7#4);
output1{test++} = -5#4 == (30#8 // -6#4);
output1{test++} = 0#4 == (30#8 %% -6#4);
output1{test++} = -6#4 == (30#8 // -5#4);
output1{test++} = 0#4 == (30#8 %% -5#4);
output1{test++} = -7#4 == (30#8 // -4#4);
output1{test++} = 2#4 == (30#8 %% -4#4);
output1{test++} = 7#4 == (30#8 // 4#4);
output1{test++} = 2#4 == (30#8 %% 4#4);
output1{test++} = 6#4 == (30#8 // 5#4);
output1{test++} = 0#4 == (30#8 %% 5#4);
output1{test++} = 5#4 == (30#8 // 6#4);
output1{test++} = 0#4 == (30#8 %% 6#4);
output1{test++} = 4#4 == (30#8 // 7#4);
output1{test++} = 2#4 == (30#8 %% 7#4);
output1{test++} = -3#4 == (31#8 // -8#4);
output1{test++} = 7#4 == (31#8 %% -8#4);
output1{test++} = -4#4 == (31#8 // -7#4);
output1{test++} = 3#4 == (31#8 %% -7#4);
output1{test++} = -5#4 == (31#8 // -6#4);
output1{test++} = 1#4 == (31#8 %% -6#4);
output1{test++} = -6#4 == (31#8 // -5#4);
output1{test++} = 1#4 == (31#8 %% -5#4);
output1{test++} = -7#4 == (31#8 // -4#4);
output1{test++} = 3#4 == (31#8 %% -4#4);
output1{test++} = 7#4 == (31#8 // 4#4);
output1{test++} = 3#4 == (31#8 %% 4#4);
output1{test++} = 6#4 == (31#8 // 5#4);
output1{test++} = 1#4 == (31#8 %% 5#4);
output1{test++} = 5#4 == (31#8 // 6#4);
output1{test++} = 1#4 == (31#8 %% 6#4);
output1{test++} = 4#4 == (31#8 // 7#4);
output1{test++} = 3#4 == (31#8 %% 7#4);
output1{test++} = -4#4 == (32#8 // -8#4);
output1{test++} = 0#4 == (32#8 %% -8#4);
output1{test++} = -4#4 == (32#8 // -7#4);
output1{test++} = 4#4 == (32#8 %% -7#4);
output1{test++} = -5#4 == (32#8 // -6#4);
output1{test++} = 2#4 == (32#8 %% -6#4);
output1{test++} = -6#4 == (32#8 // -5#4);
output1{test++} = 2#4 == (32#8 %% -5#4);
output1{test++} = -8#4 == (32#8 // -4#4);
output1{test++} = 0#4 == (32#8 %% -4#4);
output1{test++} = 6#4 == (32#8 // 5#4);
output1{test++} = 2#4 == (32#8 %% 5#4);
output1{test++} = 5#4 == (32#8 // 6#4);
output1{test++} = 2#4 == (32#8 %% 6#4);
output1{test++} = 4#4 == (32#8 // 7#4);
output1{test++} = 4#4 == (32#8 %% 7#4);
output1{test++} = -4#4 == (33#8 // -8#4);
output1{test++} = 1#4 == (33#8 %% -8#4);
output1{test++} = -4#4 == (33#8 // -7#4);
output1{test++} = 5#4 == (33#8 %% -7#4);
output1{test++} = -5#4 == (33#8 // -6#4);
output1{test++} = 3#4 == (33#8 %% -6#4);
output1{test++} = -6#4 == (33#8 // -5#4);
output1{test++} = 3#4 == (33#8 %% -5#4);
output1{test++} = -8#4 == (33#8 // -4#4);
output1{test++} = 1#4 == (33#8 %% -4#4);
output1{test++} = 6#4 == (33#8 // 5#4);
output1{test++} = 3#4 == (33#8 %% 5#4);
output1{test++} = 5#4 == (33#8 // 6#4);
output1{test++} = 3#4 == (33#8 %% 6#4);
output1{test++} = 4#4 == (33#8 // 7#4);
output1{test++} = 5#4 == (33#8 %% 7#4);
output1{test++} = -4#4 == (34#8 // -8#4);
output1{test++} = 2#4 == (34#8 %% -8#4);
output1{test++} = -4#4 == (34#8 // -7#4);
output1{test++} = 6#4 == (34#8 %% -7#4);
output1{test++} = -5#4 == (34#8 // -6#4);
output1{test++} = 4#4 == (34#8 %% -6#4);
output1{test++} = -6#4 == (34#8 // -5#4);
output1{test++} = 4#4 == (34#8 %% -5#4);
output1{test++} = -8#4 == (34#8 // -4#4);
output1{test++} = 2#4 == (34#8 %% -4#4);
output1{test++} = 6#4 == (34#8 // 5#4);
output1{test++} = 4#4 == (34#8 %% 5#4);
output1{test++} = 5#4 == (34#8 // 6#4);
output1{test++} = 4#4 == (34#8 %% 6#4);
output1{test++} = 4#4 == (34#8 // 7#4);
output1{test++} = 6#4 == (34#8 %% 7#4);
output1{test++} = -4#4 == (35#8 // -8#4);
output1{test++} = 3#4 == (35#8 %% -8#4);
output1{test++} = -5#4 == (35#8 // -7#4);
output1{test++} = 0#4 == (35#8 %% -7#4);
output1{test++} = -5#4 == (35#8 // -6#4);
output1{test++} = 5#4 == (35#8 %% -6#4);
output1{test++} = -7#4 == (35#8 // -5#4);
output1{test++} = 0#4 == (35#8 %% -5#4);
output1{test++} = -8#4 == (35#8 // -4#4);
output1{test++} = 3#4 == (35#8 %% -4#4);
output1{test++} = 7#4 == (35#8 // 5#4);
output1{test++} = 0#4 == (35#8 %% 5#4);
output1{test++} = 5#4 == (35#8 // 6#4);
output1{test++} = 5#4 == (35#8 %% 6#4);
output1{test++} = 5#4 == (35#8 // 7#4);
output1{test++} = 0#4 == (35#8 %% 7#4);
output1{test++} = -4#4 == (36#8 // -8#4);
output1{test++} = 4#4 == (36#8 %% -8#4);
output1{test++} = -5#4 == (36#8 // -7#4);
output1{test++} = 1#4 == (36#8 %% -7#4);
output1{test++} = -6#4 == (36#8 // -6#4);
output1{test++} = 0#4 == (36#8 %% -6#4);
output1{test++} = -7#4 == (36#8 // -5#4);
output1{test++} = 1#4 == (36#8 %% -5#4);
output1{test++} = 7#4 == (36#8 // 5#4);
output1{test++} = 1#4 == (36#8 %% 5#4);
output1{test++} = 6#4 == (36#8 // 6#4);
output1{test++} = 0#4 == (36#8 %% 6#4);
output1{test++} = 5#4 == (36#8 // 7#4);
output1{test++} = 1#4 == (36#8 %% 7#4);
output1{test++} = -4#4 == (37#8 // -8#4);
output1{test++} = 5#4 == (37#8 %% -8#4);
output1{test++} = -5#4 == (37#8 // -7#4);
output1{test++} = 2#4 == (37#8 %% -7#4);
output1{test++} = -6#4 == (37#8 // -6#4);
output1{test++} = 1#4 == (37#8 %% -6#4);
output1{test++} = -7#4 == (37#8 // -5#4);
output1{test++} = 2#4 == (37#8 %% -5#4);
output1{test++} = 7#4 == (37#8 // 5#4);
output1{test++} = 2#4 == (37#8 %% 5#4);
output1{test++} = 6#4 == (37#8 // 6#4);
output1{test++} = 1#4 == (37#8 %% 6#4);
output1{test++} = 5#4 == (37#8 // 7#4);
output1{test++} = 2#4 == (37#8 %% 7#4);
output1{test++} = -4#4 == (38#8 // -8#4);
output1{test++} = 6#4 == (38#8 %% -8#4);
output1{test++} = -5#4 == (38#8 // -7#4);
output1{test++} = 3#4 == (38#8 %% -7#4);
output1{test++} = -6#4 == (38#8 // -6#4);
output1{test++} = 2#4 == (38#8 %% -6#4);
output1{test++} = -7#4 == (38#8 // -5#4);
output1{test++} = 3#4 == (38#8 %% -5#4);
output1{test++} = 7#4 == (38#8 // 5#4);
output1{test++} = 3#4 == (38#8 %% 5#4);
output1{test++} = 6#4 == (38#8 // 6#4);
output1{test++} = 2#4 == (38#8 %% 6#4);
output1{test++} = 5#4 == (38#8 // 7#4);
output1{test++} = 3#4 == (38#8 %% 7#4);
output1{test++} = -4#4 == (39#8 // -8#4);
output1{test++} = 7#4 == (39#8 %% -8#4);
output1{test++} = -5#4 == (39#8 // -7#4);
output1{test++} = 4#4 == (39#8 %% -7#4);
output1{test++} = -6#4 == (39#8 // -6#4);
output1{test++} = 3#4 == (39#8 %% -6#4);
output1{test++} = -7#4 == (39#8 // -5#4);
output1{test++} = 4#4 == (39#8 %% -5#4);
output1{test++} = 7#4 == (39#8 // 5#4);
output1{test++} = 4#4 == (39#8 %% 5#4);
output1{test++} = 6#4 == (39#8 // 6#4);
output1{test++} = 3#4 == (39#8 %% 6#4);
output1{test++} = 5#4 == (39#8 // 7#4);
output1{test++} = 4#4 == (39#8 %% 7#4);
output1{test++} = -5#4 == (40#8 // -8#4);
output1{test++} = 0#4 == (40#8 %% -8#4);
output1{test++} = -5#4 == (40#8 // -7#4);
output1{test++} = 5#4 == (40#8 %% -7#4);
output1{test++} = -6#4 == (40#8 // -6#4);
output1{test++} = 4#4 == (40#8 %% -6#4);
output1{test++} = -8#4 == (40#8 // -5#4);
output1{test++} = 0#4 == (40#8 %% -5#4);
output1{test++} = 6#4 == (40#8 // 6#4);
output1{test++} = 4#4 == (40#8 %% 6#4);
output1{test++} = 5#4 == (40#8 // 7#4);
output1{test++} = 5#4 == (40#8 %% 7#4);
output1{test++} = -5#4 == (41#8 // -8#4);
output1{test++} = 1#4 == (41#8 %% -8#4);
output1{test++} = -5#4 == (41#8 // -7#4);
output1{test++} = 6#4 == (41#8 %% -7#4);
output1{test++} = -6#4 == (41#8 // -6#4);
output1{test++} = 5#4 == (41#8 %% -6#4);
output1{test++} = -8#4 == (41#8 // -5#4);
output1{test++} = 1#4 == (41#8 %% -5#4);
output1{test++} = 6#4 == (41#8 // 6#4);
output1{test++} = 5#4 == (41#8 %% 6#4);
output1{test++} = 5#4 == (41#8 // 7#4);
output1{test++} = 6#4 == (41#8 %% 7#4);
output1{test++} = -5#4 == (42#8 // -8#4);
output1{test++} = 2#4 == (42#8 %% -8#4);
output1{test++} = -6#4 == (42#8 // -7#4);
output1{test++} = 0#4 == (42#8 %% -7#4);
output1{test++} = -7#4 == (42#8 // -6#4);
output1{test++} = 0#4 == (42#8 %% -6#4);
output1{test++} = -8#4 == (42#8 // -5#4);
output1{test++} = 2#4 == (42#8 %% -5#4);
output1{test++} = 7#4 == (42#8 // 6#4);
output1{test++} = 0#4 == (42#8 %% 6#4);
output1{test++} = 6#4 == (42#8 // 7#4);
output1{test++} = 0#4 == (42#8 %% 7#4);
output1{test++} = -5#4 == (43#8 // -8#4);
output1{test++} = 3#4 == (43#8 %% -8#4);
output1{test++} = -6#4 == (43#8 // -7#4);
output1{test++} = 1#4 == (43#8 %% -7#4);
output1{test++} = -7#4 == (43#8 // -6#4);
output1{test++} = 1#4 == (43#8 %% -6#4);
output1{test++} = -8#4 == (43#8 // -5#4);
output1{test++} = 3#4 == (43#8 %% -5#4);
output1{test++} = 7#4 == (43#8 // 6#4);
output1{test++} = 1#4 == (43#8 %% 6#4);
output1{test++} = 6#4 == (43#8 // 7#4);
output1{test++} = 1#4 == (43#8 %% 7#4);
output1{test++} = -5#4 == (44#8 // -8#4);
output1{test++} = 4#4 == (44#8 %% -8#4);
output1{test++} = -6#4 == (44#8 // -7#4);
output1{test++} = 2#4 == (44#8 %% -7#4);
output1{test++} = -7#4 == (44#8 // -6#4);
output1{test++} = 2#4 == (44#8 %% -6#4);
output1{test++} = -8#4 == (44#8 // -5#4);
output1{test++} = 4#4 == (44#8 %% -5#4);
output1{test++} = 7#4 == (44#8 // 6#4);
output1{test++} = 2#4 == (44#8 %% 6#4);
output1{test++} = 6#4 == (44#8 // 7#4);
output1{test++} = 2#4 == (44#8 %% 7#4);
output1{test++} = -5#4 == (45#8 // -8#4);
output1{test++} = 5#4 == (45#8 %% -8#4);
output1{test++} = -6#4 == (45#8 // -7#4);
output1{test++} = 3#4 == (45#8 %% -7#4);
output1{test++} = -7#4 == (45#8 // -6#4);
output1{test++} = 3#4 == (45#8 %% -6#4);
output1{test++} = 7#4 == (45#8 // 6#4);
output1{test++} = 3#4 == (45#8 %% 6#4);
output1{test++} = 6#4 == (45#8 // 7#4);
output1{test++} = 3#4 == (45#8 %% 7#4);
output1{test++} = -5#4 == (46#8 // -8#4);
output1{test++} = 6#4 == (46#8 %% -8#4);
output1{test++} = -6#4 == (46#8 // -7#4);
output1{test++} = 4#4 == (46#8 %% -7#4);
output1{test++} = -7#4 == (46#8 // -6#4);
output1{test++} = 4#4 == (46#8 %% -6#4);
output1{test++} = 7#4 == (46#8 // 6#4);
output1{test++} = 4#4 == (46#8 %% 6#4);
output1{test++} = 6#4 == (46#8 // 7#4);
output1{test++} = 4#4 == (46#8 %% 7#4);
output1{test++} = -5#4 == (47#8 // -8#4);
output1{test++} = 7#4 == (47#8 %% -8#4);
output1{test++} = -6#4 == (47#8 // -7#4);
output1{test++} = 5#4 == (47#8 %% -7#4);
output1{test++} = -7#4 == (47#8 // -6#4);
output1{test++} = 5#4 == (47#8 %% -6#4);
output1{test++} = 7#4 == (47#8 // 6#4);
output1{test++} = 5#4 == (47#8 %% 6#4);
output1{test++} = 6#4 == (47#8 // 7#4);
output1{test++} = 5#4 == (47#8 %% 7#4);
output1{test++} = -6#4 == (48#8 // -8#4);
output1{test++} = 0#4 == (48#8 %% -8#4);
output1{test++} = -6#4 == (48#8 // -7#4);
output1{test++} = 6#4 == (48#8 %% -7#4);
output1{test++} = -8#4 == (48#8 // -6#4);
output1{test++} = 0#4 == (48#8 %% -6#4);
output1{test++} = 6#4 == (48#8 // 7#4);
output1{test++} = 6#4 == (48#8 %% 7#4);
output1{test++} = -6#4 == (49#8 // -8#4);
output1{test++} = 1#4 == (49#8 %% -8#4);
output1{test++} = -7#4 == (49#8 // -7#4);
output1{test++} = 0#4 == (49#8 %% -7#4);
output1{test++} = -8#4 == (49#8 // -6#4);
output1{test++} = 1#4 == (49#8 %% -6#4);
output1{test++} = 7#4 == (49#8 // 7#4);
output1{test++} = 0#4 == (49#8 %% 7#4);
output1{test++} = -6#4 == (50#8 // -8#4);
output1{test++} = 2#4 == (50#8 %% -8#4);
output1{test++} = -7#4 == (50#8 // -7#4);
output1{test++} = 1#4 == (50#8 %% -7#4);
output1{test++} = -8#4 == (50#8 // -6#4);
output1{test++} = 2#4 == (50#8 %% -6#4);
output1{test++} = 7#4 == (50#8 // 7#4);
output1{test++} = 1#4 == (50#8 %% 7#4);
output1{test++} = -6#4 == (51#8 // -8#4);
output1{test++} = 3#4 == (51#8 %% -8#4);
output1{test++} = -7#4 == (51#8 // -7#4);
output1{test++} = 2#4 == (51#8 %% -7#4);
output1{test++} = -8#4 == (51#8 // -6#4);
output1{test++} = 3#4 == (51#8 %% -6#4);
output1{test++} = 7#4 == (51#8 // 7#4);
output1{test++} = 2#4 == (51#8 %% 7#4);
output1{test++} = -6#4 == (52#8 // -8#4);
output1{test++} = 4#4 == (52#8 %% -8#4);
output1{test++} = -7#4 == (52#8 // -7#4);
output1{test++} = 3#4 == (52#8 %% -7#4);
output1{test++} = -8#4 == (52#8 // -6#4);
output1{test++} = 4#4 == (52#8 %% -6#4);
output1{test++} = 7#4 == (52#8 // 7#4);
output1{test++} = 3#4 == (52#8 %% 7#4);
output1{test++} = -6#4 == (53#8 // -8#4);
output1{test++} = 5#4 == (53#8 %% -8#4);
output1{test++} = -7#4 == (53#8 // -7#4);
output1{test++} = 4#4 == (53#8 %% -7#4);
output1{test++} = -8#4 == (53#8 // -6#4);
output1{test++} = 5#4 == (53#8 %% -6#4);
output1{test++} = 7#4 == (53#8 // 7#4);
output1{test++} = 4#4 == (53#8 %% 7#4);
output1{test++} = -6#4 == (54#8 // -8#4);
output1{test++} = 6#4 == (54#8 %% -8#4);
output1{test++} = -7#4 == (54#8 // -7#4);
output1{test++} = 5#4 == (54#8 %% -7#4);
output1{test++} = 7#4 == (54#8 // 7#4);
output1{test++} = 5#4 == (54#8 %% 7#4);
output1{test++} = -6#4 == (55#8 // -8#4);
output1{test++} = 7#4 == (55#8 %% -8#4);
output1{test++} = -7#4 == (55#8 // -7#4);
output1{test++} = 6#4 == (55#8 %% -7#4);
output1{test++} = 7#4 == (55#8 // 7#4);
output1{test++} = 6#4 == (55#8 %% 7#4);
output1{test++} = -7#4 == (56#8 // -8#4);
output1{test++} = 0#4 == (56#8 %% -8#4);
output1{test++} = -8#4 == (56#8 // -7#4);
output1{test++} = 0#4 == (56#8 %% -7#4);
output1{test++} = -7#4 == (57#8 // -8#4);
output1{test++} = 1#4 == (57#8 %% -8#4);
output1{test++} = -8#4 == (57#8 // -7#4);
output1{test++} = 1#4 == (57#8 %% -7#4);
output1{test++} = -7#4 == (58#8 // -8#4);
output1{test++} = 2#4 == (58#8 %% -8#4);
output1{test++} = -8#4 == (58#8 // -7#4);
output1{test++} = 2#4 == (58#8 %% -7#4);
output1{test++} = -7#4 == (59#8 // -8#4);
output1{test++} = 3#4 == (59#8 %% -8#4);
output1{test++} = -8#4 == (59#8 // -7#4);
output1{test++} = 3#4 == (59#8 %% -7#4);
output1{test++} = -7#4 == (60#8 // -8#4);
output1{test++} = 4#4 == (60#8 %% -8#4);
output1{test++} = -8#4 == (60#8 // -7#4);
output1{test++} = 4#4 == (60#8 %% -7#4);
output1{test++} = -7#4 == (61#8 // -8#4);
output1{test++} = 5#4 == (61#8 %% -8#4);
output1{test++} = -8#4 == (61#8 // -7#4);
output1{test++} = 5#4 == (61#8 %% -7#4);
output1{test++} = -7#4 == (62#8 // -8#4);
output1{test++} = 6#4 == (62#8 %% -8#4);
output1{test++} = -8#4 == (62#8 // -7#4);
output1{test++} = 6#4 == (62#8 %% -7#4);
output1{test++} = -7#4 == (63#8 // -8#4);
output1{test++} = 7#4 == (63#8 %% -8#4);
output1{test++} = -8#4 == (64#8 // -8#4);
output1{test++} = 0#4 == (64#8 %% -8#4);
output1{test++} = -8#4 == (65#8 // -8#4);
output1{test++} = 1#4 == (65#8 %% -8#4);
output1{test++} = -8#4 == (66#8 // -8#4);
output1{test++} = 2#4 == (66#8 %% -8#4);
output1{test++} = -8#4 == (67#8 // -8#4);
output1{test++} = 3#4 == (67#8 %% -8#4);
output1{test++} = -8#4 == (68#8 // -8#4);
output1{test++} = 4#4 == (68#8 %% -8#4);
output1{test++} = -8#4 == (69#8 // -8#4);
output1{test++} = 5#4 == (69#8 %% -8#4);
output1{test++} = -8#4 == (70#8 // -8#4);
output1{test++} = 6#4 == (70#8 %% -8#4);
output1{test++} = -8#4 == (71#8 // -8#4);
output1{test++} = 7#4 == (71#8 %% -8#4);


output1{test++} = 0##4 == (0##8 // 1##4);
output1{test++} = 0##4 == (0##8 %% 1##4);
output1{test++} = 0##4 == (0##8 // 2##4);
output1{test++} = 0##4 == (0##8 %% 2##4);
output1{test++} = 0##4 == (0##8 // 3##4);
output1{test++} = 0##4 == (0##8 %% 3##4);
output1{test++} = 0##4 == (0##8 // 4##4);
output1{test++} = 0##4 == (0##8 %% 4##4);
output1{test++} = 0##4 == (0##8 // 5##4);
output1{test++} = 0##4 == (0##8 %% 5##4);
output1{test++} = 0##4 == (0##8 // 6##4);
output1{test++} = 0##4 == (0##8 %% 6##4);
output1{test++} = 0##4 == (0##8 // 7##4);
output1{test++} = 0##4 == (0##8 %% 7##4);
output1{test++} = 0##4 == (0##8 // 8##4);
output1{test++} = 0##4 == (0##8 %% 8##4);
output1{test++} = 0##4 == (0##8 // 9##4);
output1{test++} = 0##4 == (0##8 %% 9##4);
output1{test++} = 0##4 == (0##8 // 10##4);
output1{test++} = 0##4 == (0##8 %% 10##4);
output1{test++} = 0##4 == (0##8 // 11##4);
output1{test++} = 0##4 == (0##8 %% 11##4);
output1{test++} = 0##4 == (0##8 // 12##4);
output1{test++} = 0##4 == (0##8 %% 12##4);
output1{test++} = 0##4 == (0##8 // 13##4);
output1{test++} = 0##4 == (0##8 %% 13##4);
output1{test++} = 0##4 == (0##8 // 14##4);
output1{test++} = 0##4 == (0##8 %% 14##4);
output1{test++} = 0##4 == (0##8 // 15##4);
output1{test++} = 0##4 == (0##8 %% 15##4);
output1{test++} = 1##4 == (1##8 // 1##4);
output1{test++} = 0##4 == (1##8 %% 1##4);
output1{test++} = 0##4 == (1##8 // 2##4);
output1{test++} = 1##4 == (1##8 %% 2##4);
output1{test++} = 0##4 == (1##8 // 3##4);
output1{test++} = 1##4 == (1##8 %% 3##4);
output1{test++} = 0##4 == (1##8 // 4##4);
output1{test++} = 1##4 == (1##8 %% 4##4);
output1{test++} = 0##4 == (1##8 // 5##4);
output1{test++} = 1##4 == (1##8 %% 5##4);
output1{test++} = 0##4 == (1##8 // 6##4);
output1{test++} = 1##4 == (1##8 %% 6##4);
output1{test++} = 0##4 == (1##8 // 7##4);
output1{test++} = 1##4 == (1##8 %% 7##4);
output1{test++} = 0##4 == (1##8 // 8##4);
output1{test++} = 1##4 == (1##8 %% 8##4);
output1{test++} = 0##4 == (1##8 // 9##4);
output1{test++} = 1##4 == (1##8 %% 9##4);
output1{test++} = 0##4 == (1##8 // 10##4);
output1{test++} = 1##4 == (1##8 %% 10##4);
output1{test++} = 0##4 == (1##8 // 11##4);
output1{test++} = 1##4 == (1##8 %% 11##4);
output1{test++} = 0##4 == (1##8 // 12##4);
output1{test++} = 1##4 == (1##8 %% 12##4);
output1{test++} = 0##4 == (1##8 // 13##4);
output1{test++} = 1##4 == (1##8 %% 13##4);
output1{test++} = 0##4 == (1##8 // 14##4);
output1{test++} = 1##4 == (1##8 %% 14##4);
output1{test++} = 0##4 == (1##8 // 15##4);
output1{test++} = 1##4 == (1##8 %% 15##4);
output1{test++} = 2##4 == (2##8 // 1##4);
output1{test++} = 0##4 == (2##8 %% 1##4);
output1{test++} = 1##4 == (2##8 // 2##4);
output1{test++} = 0##4 == (2##8 %% 2##4);
output1{test++} = 0##4 == (2##8 // 3##4);
output1{test++} = 2##4 == (2##8 %% 3##4);
output1{test++} = 0##4 == (2##8 // 4##4);
output1{test++} = 2##4 == (2##8 %% 4##4);
output1{test++} = 0##4 == (2##8 // 5##4);
output1{test++} = 2##4 == (2##8 %% 5##4);
output1{test++} = 0##4 == (2##8 // 6##4);
output1{test++} = 2##4 == (2##8 %% 6##4);
output1{test++} = 0##4 == (2##8 // 7##4);
output1{test++} = 2##4 == (2##8 %% 7##4);
output1{test++} = 0##4 == (2##8 // 8##4);
output1{test++} = 2##4 == (2##8 %% 8##4);
output1{test++} = 0##4 == (2##8 // 9##4);
output1{test++} = 2##4 == (2##8 %% 9##4);
output1{test++} = 0##4 == (2##8 // 10##4);
output1{test++} = 2##4 == (2##8 %% 10##4);
output1{test++} = 0##4 == (2##8 // 11##4);
output1{test++} = 2##4 == (2##8 %% 11##4);
output1{test++} = 0##4 == (2##8 // 12##4);
output1{test++} = 2##4 == (2##8 %% 12##4);
output1{test++} = 0##4 == (2##8 // 13##4);
output1{test++} = 2##4 == (2##8 %% 13##4);
output1{test++} = 0##4 == (2##8 // 14##4);
output1{test++} = 2##4 == (2##8 %% 14##4);
output1{test++} = 0##4 == (2##8 // 15##4);
output1{test++} = 2##4 == (2##8 %% 15##4);
output1{test++} = 3##4 == (3##8 // 1##4);
output1{test++} = 0##4 == (3##8 %% 1##4);
output1{test++} = 1##4 == (3##8 // 2##4);
output1{test++} = 1##4 == (3##8 %% 2##4);
output1{test++} = 1##4 == (3##8 // 3##4);
output1{test++} = 0##4 == (3##8 %% 3##4);
output1{test++} = 0##4 == (3##8 // 4##4);
output1{test++} = 3##4 == (3##8 %% 4##4);
output1{test++} = 0##4 == (3##8 // 5##4);
output1{test++} = 3##4 == (3##8 %% 5##4);
output1{test++} = 0##4 == (3##8 // 6##4);
output1{test++} = 3##4 == (3##8 %% 6##4);
output1{test++} = 0##4 == (3##8 // 7##4);
output1{test++} = 3##4 == (3##8 %% 7##4);
output1{test++} = 0##4 == (3##8 // 8##4);
output1{test++} = 3##4 == (3##8 %% 8##4);
output1{test++} = 0##4 == (3##8 // 9##4);
output1{test++} = 3##4 == (3##8 %% 9##4);
output1{test++} = 0##4 == (3##8 // 10##4);
output1{test++} = 3##4 == (3##8 %% 10##4);
output1{test++} = 0##4 == (3##8 // 11##4);
output1{test++} = 3##4 == (3##8 %% 11##4);
output1{test++} = 0##4 == (3##8 // 12##4);
output1{test++} = 3##4 == (3##8 %% 12##4);
output1{test++} = 0##4 == (3##8 // 13##4);
output1{test++} = 3##4 == (3##8 %% 13##4);
output1{test++} = 0##4 == (3##8 // 14##4);
output1{test++} = 3##4 == (3##8 %% 14##4);
output1{test++} = 0##4 == (3##8 // 15##4);
output1{test++} = 3##4 == (3##8 %% 15##4);
output1{test++} = 4##4 == (4##8 // 1##4);
output1{test++} = 0##4 == (4##8 %% 1##4);
output1{test++} = 2##4 == (4##8 // 2##4);
output1{test++} = 0##4 == (4##8 %% 2##4);
output1{test++} = 1##4 == (4##8 // 3##4);
output1{test++} = 1##4 == (4##8 %% 3##4);
output1{test++} = 1##4 == (4##8 // 4##4);
output1{test++} = 0##4 == (4##8 %% 4##4);
output1{test++} = 0##4 == (4##8 // 5##4);
output1{test++} = 4##4 == (4##8 %% 5##4);
output1{test++} = 0##4 == (4##8 // 6##4);
output1{test++} = 4##4 == (4##8 %% 6##4);
output1{test++} = 0##4 == (4##8 // 7##4);
output1{test++} = 4##4 == (4##8 %% 7##4);
output1{test++} = 0##4 == (4##8 // 8##4);
output1{test++} = 4##4 == (4##8 %% 8##4);
output1{test++} = 0##4 == (4##8 // 9##4);
output1{test++} = 4##4 == (4##8 %% 9##4);
output1{test++} = 0##4 == (4##8 // 10##4);
output1{test++} = 4##4 == (4##8 %% 10##4);
output1{test++} = 0##4 == (4##8 // 11##4);
output1{test++} = 4##4 == (4##8 %% 11##4);
output1{test++} = 0##4 == (4##8 // 12##4);
output1{test++} = 4##4 == (4##8 %% 12##4);
output1{test++} = 0##4 == (4##8 // 13##4);
output1{test++} = 4##4 == (4##8 %% 13##4);
output1{test++} = 0##4 == (4##8 // 14##4);
output1{test++} = 4##4 == (4##8 %% 14##4);
output1{test++} = 0##4 == (4##8 // 15##4);
output1{test++} = 4##4 == (4##8 %% 15##4);
output1{test++} = 5##4 == (5##8 // 1##4);
output1{test++} = 0##4 == (5##8 %% 1##4);
output1{test++} = 2##4 == (5##8 // 2##4);
output1{test++} = 1##4 == (5##8 %% 2##4);
output1{test++} = 1##4 == (5##8 // 3##4);
output1{test++} = 2##4 == (5##8 %% 3##4);
output1{test++} = 1##4 == (5##8 // 4##4);
output1{test++} = 1##4 == (5##8 %% 4##4);
output1{test++} = 1##4 == (5##8 // 5##4);
output1{test++} = 0##4 == (5##8 %% 5##4);
output1{test++} = 0##4 == (5##8 // 6##4);
output1{test++} = 5##4 == (5##8 %% 6##4);
output1{test++} = 0##4 == (5##8 // 7##4);
output1{test++} = 5##4 == (5##8 %% 7##4);
output1{test++} = 0##4 == (5##8 // 8##4);
output1{test++} = 5##4 == (5##8 %% 8##4);
output1{test++} = 0##4 == (5##8 // 9##4);
output1{test++} = 5##4 == (5##8 %% 9##4);
output1{test++} = 0##4 == (5##8 // 10##4);
output1{test++} = 5##4 == (5##8 %% 10##4);
output1{test++} = 0##4 == (5##8 // 11##4);
output1{test++} = 5##4 == (5##8 %% 11##4);
output1{test++} = 0##4 == (5##8 // 12##4);
output1{test++} = 5##4 == (5##8 %% 12##4);
output1{test++} = 0##4 == (5##8 // 13##4);
output1{test++} = 5##4 == (5##8 %% 13##4);
output1{test++} = 0##4 == (5##8 // 14##4);
output1{test++} = 5##4 == (5##8 %% 14##4);
output1{test++} = 0##4 == (5##8 // 15##4);
output1{test++} = 5##4 == (5##8 %% 15##4);
output1{test++} = 6##4 == (6##8 // 1##4);
output1{test++} = 0##4 == (6##8 %% 1##4);
output1{test++} = 3##4 == (6##8 // 2##4);
output1{test++} = 0##4 == (6##8 %% 2##4);
output1{test++} = 2##4 == (6##8 // 3##4);
output1{test++} = 0##4 == (6##8 %% 3##4);
output1{test++} = 1##4 == (6##8 // 4##4);
output1{test++} = 2##4 == (6##8 %% 4##4);
output1{test++} = 1##4 == (6##8 // 5##4);
output1{test++} = 1##4 == (6##8 %% 5##4);
output1{test++} = 1##4 == (6##8 // 6##4);
output1{test++} = 0##4 == (6##8 %% 6##4);
output1{test++} = 0##4 == (6##8 // 7##4);
output1{test++} = 6##4 == (6##8 %% 7##4);
output1{test++} = 0##4 == (6##8 // 8##4);
output1{test++} = 6##4 == (6##8 %% 8##4);
output1{test++} = 0##4 == (6##8 // 9##4);
output1{test++} = 6##4 == (6##8 %% 9##4);
output1{test++} = 0##4 == (6##8 // 10##4);
output1{test++} = 6##4 == (6##8 %% 10##4);
output1{test++} = 0##4 == (6##8 // 11##4);
output1{test++} = 6##4 == (6##8 %% 11##4);
output1{test++} = 0##4 == (6##8 // 12##4);
output1{test++} = 6##4 == (6##8 %% 12##4);
output1{test++} = 0##4 == (6##8 // 13##4);
output1{test++} = 6##4 == (6##8 %% 13##4);
output1{test++} = 0##4 == (6##8 // 14##4);
output1{test++} = 6##4 == (6##8 %% 14##4);
output1{test++} = 0##4 == (6##8 // 15##4);
output1{test++} = 6##4 == (6##8 %% 15##4);
output1{test++} = 7##4 == (7##8 // 1##4);
output1{test++} = 0##4 == (7##8 %% 1##4);
output1{test++} = 3##4 == (7##8 // 2##4);
output1{test++} = 1##4 == (7##8 %% 2##4);
output1{test++} = 2##4 == (7##8 // 3##4);
output1{test++} = 1##4 == (7##8 %% 3##4);
output1{test++} = 1##4 == (7##8 // 4##4);
output1{test++} = 3##4 == (7##8 %% 4##4);
output1{test++} = 1##4 == (7##8 // 5##4);
output1{test++} = 2##4 == (7##8 %% 5##4);
output1{test++} = 1##4 == (7##8 // 6##4);
output1{test++} = 1##4 == (7##8 %% 6##4);
output1{test++} = 1##4 == (7##8 // 7##4);
output1{test++} = 0##4 == (7##8 %% 7##4);
output1{test++} = 0##4 == (7##8 // 8##4);
output1{test++} = 7##4 == (7##8 %% 8##4);
output1{test++} = 0##4 == (7##8 // 9##4);
output1{test++} = 7##4 == (7##8 %% 9##4);
output1{test++} = 0##4 == (7##8 // 10##4);
output1{test++} = 7##4 == (7##8 %% 10##4);
output1{test++} = 0##4 == (7##8 // 11##4);
output1{test++} = 7##4 == (7##8 %% 11##4);
output1{test++} = 0##4 == (7##8 // 12##4);
output1{test++} = 7##4 == (7##8 %% 12##4);
output1{test++} = 0##4 == (7##8 // 13##4);
output1{test++} = 7##4 == (7##8 %% 13##4);
output1{test++} = 0##4 == (7##8 // 14##4);
output1{test++} = 7##4 == (7##8 %% 14##4);
output1{test++} = 0##4 == (7##8 // 15##4);
output1{test++} = 7##4 == (7##8 %% 15##4);
output1{test++} = 8##4 == (8##8 // 1##4);
output1{test++} = 0##4 == (8##8 %% 1##4);
output1{test++} = 4##4 == (8##8 // 2##4);
output1{test++} = 0##4 == (8##8 %% 2##4);
output1{test++} = 2##4 == (8##8 // 3##4);
output1{test++} = 2##4 == (8##8 %% 3##4);
output1{test++} = 2##4 == (8##8 // 4##4);
output1{test++} = 0##4 == (8##8 %% 4##4);
output1{test++} = 1##4 == (8##8 // 5##4);
output1{test++} = 3##4 == (8##8 %% 5##4);
output1{test++} = 1##4 == (8##8 // 6##4);
output1{test++} = 2##4 == (8##8 %% 6##4);
output1{test++} = 1##4 == (8##8 // 7##4);
output1{test++} = 1##4 == (8##8 %% 7##4);
output1{test++} = 1##4 == (8##8 // 8##4);
output1{test++} = 0##4 == (8##8 %% 8##4);
output1{test++} = 0##4 == (8##8 // 9##4);
output1{test++} = 8##4 == (8##8 %% 9##4);
output1{test++} = 0##4 == (8##8 // 10##4);
output1{test++} = 8##4 == (8##8 %% 10##4);
output1{test++} = 0##4 == (8##8 // 11##4);
output1{test++} = 8##4 == (8##8 %% 11##4);
output1{test++} = 0##4 == (8##8 // 12##4);
output1{test++} = 8##4 == (8##8 %% 12##4);
output1{test++} = 0##4 == (8##8 // 13##4);
output1{test++} = 8##4 == (8##8 %% 13##4);
output1{test++} = 0##4 == (8##8 // 14##4);
output1{test++} = 8##4 == (8##8 %% 14##4);
output1{test++} = 0##4 == (8##8 // 15##4);
output1{test++} = 8##4 == (8##8 %% 15##4);
output1{test++} = 9##4 == (9##8 // 1##4);
output1{test++} = 0##4 == (9##8 %% 1##4);
output1{test++} = 4##4 == (9##8 // 2##4);
output1{test++} = 1##4 == (9##8 %% 2##4);
output1{test++} = 3##4 == (9##8 // 3##4);
output1{test++} = 0##4 == (9##8 %% 3##4);
output1{test++} = 2##4 == (9##8 // 4##4);
output1{test++} = 1##4 == (9##8 %% 4##4);
output1{test++} = 1##4 == (9##8 // 5##4);
output1{test++} = 4##4 == (9##8 %% 5##4);
output1{test++} = 1##4 == (9##8 // 6##4);
output1{test++} = 3##4 == (9##8 %% 6##4);
output1{test++} = 1##4 == (9##8 // 7##4);
output1{test++} = 2##4 == (9##8 %% 7##4);
output1{test++} = 1##4 == (9##8 // 8##4);
output1{test++} = 1##4 == (9##8 %% 8##4);
output1{test++} = 1##4 == (9##8 // 9##4);
output1{test++} = 0##4 == (9##8 %% 9##4);
output1{test++} = 0##4 == (9##8 // 10##4);
output1{test++} = 9##4 == (9##8 %% 10##4);
output1{test++} = 0##4 == (9##8 // 11##4);
output1{test++} = 9##4 == (9##8 %% 11##4);
output1{test++} = 0##4 == (9##8 // 12##4);
output1{test++} = 9##4 == (9##8 %% 12##4);
output1{test++} = 0##4 == (9##8 // 13##4);
output1{test++} = 9##4 == (9##8 %% 13##4);
output1{test++} = 0##4 == (9##8 // 14##4);
output1{test++} = 9##4 == (9##8 %% 14##4);
output1{test++} = 0##4 == (9##8 // 15##4);
output1{test++} = 9##4 == (9##8 %% 15##4);
output1{test++} = 10##4 == (10##8 // 1##4);
output1{test++} = 0##4 == (10##8 %% 1##4);
output1{test++} = 5##4 == (10##8 // 2##4);
output1{test++} = 0##4 == (10##8 %% 2##4);
output1{test++} = 3##4 == (10##8 // 3##4);
output1{test++} = 1##4 == (10##8 %% 3##4);
output1{test++} = 2##4 == (10##8 // 4##4);
output1{test++} = 2##4 == (10##8 %% 4##4);
output1{test++} = 2##4 == (10##8 // 5##4);
output1{test++} = 0##4 == (10##8 %% 5##4);
output1{test++} = 1##4 == (10##8 // 6##4);
output1{test++} = 4##4 == (10##8 %% 6##4);
output1{test++} = 1##4 == (10##8 // 7##4);
output1{test++} = 3##4 == (10##8 %% 7##4);
output1{test++} = 1##4 == (10##8 // 8##4);
output1{test++} = 2##4 == (10##8 %% 8##4);
output1{test++} = 1##4 == (10##8 // 9##4);
output1{test++} = 1##4 == (10##8 %% 9##4);
output1{test++} = 1##4 == (10##8 // 10##4);
output1{test++} = 0##4 == (10##8 %% 10##4);
output1{test++} = 0##4 == (10##8 // 11##4);
output1{test++} = 10##4 == (10##8 %% 11##4);
output1{test++} = 0##4 == (10##8 // 12##4);
output1{test++} = 10##4 == (10##8 %% 12##4);
output1{test++} = 0##4 == (10##8 // 13##4);
output1{test++} = 10##4 == (10##8 %% 13##4);
output1{test++} = 0##4 == (10##8 // 14##4);
output1{test++} = 10##4 == (10##8 %% 14##4);
output1{test++} = 0##4 == (10##8 // 15##4);
output1{test++} = 10##4 == (10##8 %% 15##4);
output1{test++} = 11##4 == (11##8 // 1##4);
output1{test++} = 0##4 == (11##8 %% 1##4);
output1{test++} = 5##4 == (11##8 // 2##4);
output1{test++} = 1##4 == (11##8 %% 2##4);
output1{test++} = 3##4 == (11##8 // 3##4);
output1{test++} = 2##4 == (11##8 %% 3##4);
output1{test++} = 2##4 == (11##8 // 4##4);
output1{test++} = 3##4 == (11##8 %% 4##4);
output1{test++} = 2##4 == (11##8 // 5##4);
output1{test++} = 1##4 == (11##8 %% 5##4);
output1{test++} = 1##4 == (11##8 // 6##4);
output1{test++} = 5##4 == (11##8 %% 6##4);
output1{test++} = 1##4 == (11##8 // 7##4);
output1{test++} = 4##4 == (11##8 %% 7##4);
output1{test++} = 1##4 == (11##8 // 8##4);
output1{test++} = 3##4 == (11##8 %% 8##4);
output1{test++} = 1##4 == (11##8 // 9##4);
output1{test++} = 2##4 == (11##8 %% 9##4);
output1{test++} = 1##4 == (11##8 // 10##4);
output1{test++} = 1##4 == (11##8 %% 10##4);
output1{test++} = 1##4 == (11##8 // 11##4);
output1{test++} = 0##4 == (11##8 %% 11##4);
output1{test++} = 0##4 == (11##8 // 12##4);
output1{test++} = 11##4 == (11##8 %% 12##4);
output1{test++} = 0##4 == (11##8 // 13##4);
output1{test++} = 11##4 == (11##8 %% 13##4);
output1{test++} = 0##4 == (11##8 // 14##4);
output1{test++} = 11##4 == (11##8 %% 14##4);
output1{test++} = 0##4 == (11##8 // 15##4);
output1{test++} = 11##4 == (11##8 %% 15##4);
output1{test++} = 12##4 == (12##8 // 1##4);
output1{test++} = 0##4 == (12##8 %% 1##4);
output1{test++} = 6##4 == (12##8 // 2##4);
output1{test++} = 0##4 == (12##8 %% 2##4);
output1{test++} = 4##4 == (12##8 // 3##4);
output1{test++} = 0##4 == (12##8 %% 3##4);
output1{test++} = 3##4 == (12##8 // 4##4);
output1{test++} = 0##4 == (12##8 %% 4##4);
output1{test++} = 2##4 == (12##8 // 5##4);
output1{test++} = 2##4 == (12##8 %% 5##4);
output1{test++} = 2##4 == (12##8 // 6##4);
output1{test++} = 0##4 == (12##8 %% 6##4);
output1{test++} = 1##4 == (12##8 // 7##4);
output1{test++} = 5##4 == (12##8 %% 7##4);
output1{test++} = 1##4 == (12##8 // 8##4);
output1{test++} = 4##4 == (12##8 %% 8##4);
output1{test++} = 1##4 == (12##8 // 9##4);
output1{test++} = 3##4 == (12##8 %% 9##4);
output1{test++} = 1##4 == (12##8 // 10##4);
output1{test++} = 2##4 == (12##8 %% 10##4);
output1{test++} = 1##4 == (12##8 // 11##4);
output1{test++} = 1##4 == (12##8 %% 11##4);
output1{test++} = 1##4 == (12##8 // 12##4);
output1{test++} = 0##4 == (12##8 %% 12##4);
output1{test++} = 0##4 == (12##8 // 13##4);
output1{test++} = 12##4 == (12##8 %% 13##4);
output1{test++} = 0##4 == (12##8 // 14##4);
output1{test++} = 12##4 == (12##8 %% 14##4);
output1{test++} = 0##4 == (12##8 // 15##4);
output1{test++} = 12##4 == (12##8 %% 15##4);
output1{test++} = 13##4 == (13##8 // 1##4);
output1{test++} = 0##4 == (13##8 %% 1##4);
output1{test++} = 6##4 == (13##8 // 2##4);
output1{test++} = 1##4 == (13##8 %% 2##4);
output1{test++} = 4##4 == (13##8 // 3##4);
output1{test++} = 1##4 == (13##8 %% 3##4);
output1{test++} = 3##4 == (13##8 // 4##4);
output1{test++} = 1##4 == (13##8 %% 4##4);
output1{test++} = 2##4 == (13##8 // 5##4);
output1{test++} = 3##4 == (13##8 %% 5##4);
output1{test++} = 2##4 == (13##8 // 6##4);
output1{test++} = 1##4 == (13##8 %% 6##4);
output1{test++} = 1##4 == (13##8 // 7##4);
output1{test++} = 6##4 == (13##8 %% 7##4);
output1{test++} = 1##4 == (13##8 // 8##4);
output1{test++} = 5##4 == (13##8 %% 8##4);
output1{test++} = 1##4 == (13##8 // 9##4);
output1{test++} = 4##4 == (13##8 %% 9##4);
output1{test++} = 1##4 == (13##8 // 10##4);
output1{test++} = 3##4 == (13##8 %% 10##4);
output1{test++} = 1##4 == (13##8 // 11##4);
output1{test++} = 2##4 == (13##8 %% 11##4);
output1{test++} = 1##4 == (13##8 // 12##4);
output1{test++} = 1##4 == (13##8 %% 12##4);
output1{test++} = 1##4 == (13##8 // 13##4);
output1{test++} = 0##4 == (13##8 %% 13##4);
output1{test++} = 0##4 == (13##8 // 14##4);
output1{test++} = 13##4 == (13##8 %% 14##4);
output1{test++} = 0##4 == (13##8 // 15##4);
output1{test++} = 13##4 == (13##8 %% 15##4);
output1{test++} = 14##4 == (14##8 // 1##4);
output1{test++} = 0##4 == (14##8 %% 1##4);
output1{test++} = 7##4 == (14##8 // 2##4);
output1{test++} = 0##4 == (14##8 %% 2##4);
output1{test++} = 4##4 == (14##8 // 3##4);
output1{test++} = 2##4 == (14##8 %% 3##4);
output1{test++} = 3##4 == (14##8 // 4##4);
output1{test++} = 2##4 == (14##8 %% 4##4);
output1{test++} = 2##4 == (14##8 // 5##4);
output1{test++} = 4##4 == (14##8 %% 5##4);
output1{test++} = 2##4 == (14##8 // 6##4);
output1{test++} = 2##4 == (14##8 %% 6##4);
output1{test++} = 2##4 == (14##8 // 7##4);
output1{test++} = 0##4 == (14##8 %% 7##4);
output1{test++} = 1##4 == (14##8 // 8##4);
output1{test++} = 6##4 == (14##8 %% 8##4);
output1{test++} = 1##4 == (14##8 // 9##4);
output1{test++} = 5##4 == (14##8 %% 9##4);
output1{test++} = 1##4 == (14##8 // 10##4);
output1{test++} = 4##4 == (14##8 %% 10##4);
output1{test++} = 1##4 == (14##8 // 11##4);
output1{test++} = 3##4 == (14##8 %% 11##4);
output1{test++} = 1##4 == (14##8 // 12##4);
output1{test++} = 2##4 == (14##8 %% 12##4);
output1{test++} = 1##4 == (14##8 // 13##4);
output1{test++} = 1##4 == (14##8 %% 13##4);
output1{test++} = 1##4 == (14##8 // 14##4);
output1{test++} = 0##4 == (14##8 %% 14##4);
output1{test++} = 0##4 == (14##8 // 15##4);
output1{test++} = 14##4 == (14##8 %% 15##4);
output1{test++} = 15##4 == (15##8 // 1##4);
output1{test++} = 0##4 == (15##8 %% 1##4);
output1{test++} = 7##4 == (15##8 // 2##4);
output1{test++} = 1##4 == (15##8 %% 2##4);
output1{test++} = 5##4 == (15##8 // 3##4);
output1{test++} = 0##4 == (15##8 %% 3##4);
output1{test++} = 3##4 == (15##8 // 4##4);
output1{test++} = 3##4 == (15##8 %% 4##4);
output1{test++} = 3##4 == (15##8 // 5##4);
output1{test++} = 0##4 == (15##8 %% 5##4);
output1{test++} = 2##4 == (15##8 // 6##4);
output1{test++} = 3##4 == (15##8 %% 6##4);
output1{test++} = 2##4 == (15##8 // 7##4);
output1{test++} = 1##4 == (15##8 %% 7##4);
output1{test++} = 1##4 == (15##8 // 8##4);
output1{test++} = 7##4 == (15##8 %% 8##4);
output1{test++} = 1##4 == (15##8 // 9##4);
output1{test++} = 6##4 == (15##8 %% 9##4);
output1{test++} = 1##4 == (15##8 // 10##4);
output1{test++} = 5##4 == (15##8 %% 10##4);
output1{test++} = 1##4 == (15##8 // 11##4);
output1{test++} = 4##4 == (15##8 %% 11##4);
output1{test++} = 1##4 == (15##8 // 12##4);
output1{test++} = 3##4 == (15##8 %% 12##4);
output1{test++} = 1##4 == (15##8 // 13##4);
output1{test++} = 2##4 == (15##8 %% 13##4);
output1{test++} = 1##4 == (15##8 // 14##4);
output1{test++} = 1##4 == (15##8 %% 14##4);
output1{test++} = 1##4 == (15##8 // 15##4);
output1{test++} = 0##4 == (15##8 %% 15##4);
output1{test++} = 8##4 == (16##8 // 2##4);
output1{test++} = 0##4 == (16##8 %% 2##4);
output1{test++} = 5##4 == (16##8 // 3##4);
output1{test++} = 1##4 == (16##8 %% 3##4);
output1{test++} = 4##4 == (16##8 // 4##4);
output1{test++} = 0##4 == (16##8 %% 4##4);
output1{test++} = 3##4 == (16##8 // 5##4);
output1{test++} = 1##4 == (16##8 %% 5##4);
output1{test++} = 2##4 == (16##8 // 6##4);
output1{test++} = 4##4 == (16##8 %% 6##4);
output1{test++} = 2##4 == (16##8 // 7##4);
output1{test++} = 2##4 == (16##8 %% 7##4);
output1{test++} = 2##4 == (16##8 // 8##4);
output1{test++} = 0##4 == (16##8 %% 8##4);
output1{test++} = 1##4 == (16##8 // 9##4);
output1{test++} = 7##4 == (16##8 %% 9##4);
output1{test++} = 1##4 == (16##8 // 10##4);
output1{test++} = 6##4 == (16##8 %% 10##4);
output1{test++} = 1##4 == (16##8 // 11##4);
output1{test++} = 5##4 == (16##8 %% 11##4);
output1{test++} = 1##4 == (16##8 // 12##4);
output1{test++} = 4##4 == (16##8 %% 12##4);
output1{test++} = 1##4 == (16##8 // 13##4);
output1{test++} = 3##4 == (16##8 %% 13##4);
output1{test++} = 1##4 == (16##8 // 14##4);
output1{test++} = 2##4 == (16##8 %% 14##4);
output1{test++} = 1##4 == (16##8 // 15##4);
output1{test++} = 1##4 == (16##8 %% 15##4);
output1{test++} = 8##4 == (17##8 // 2##4);
output1{test++} = 1##4 == (17##8 %% 2##4);
output1{test++} = 5##4 == (17##8 // 3##4);
output1{test++} = 2##4 == (17##8 %% 3##4);
output1{test++} = 4##4 == (17##8 // 4##4);
output1{test++} = 1##4 == (17##8 %% 4##4);
output1{test++} = 3##4 == (17##8 // 5##4);
output1{test++} = 2##4 == (17##8 %% 5##4);
output1{test++} = 2##4 == (17##8 // 6##4);
output1{test++} = 5##4 == (17##8 %% 6##4);
output1{test++} = 2##4 == (17##8 // 7##4);
output1{test++} = 3##4 == (17##8 %% 7##4);
output1{test++} = 2##4 == (17##8 // 8##4);
output1{test++} = 1##4 == (17##8 %% 8##4);
output1{test++} = 1##4 == (17##8 // 9##4);
output1{test++} = 8##4 == (17##8 %% 9##4);
output1{test++} = 1##4 == (17##8 // 10##4);
output1{test++} = 7##4 == (17##8 %% 10##4);
output1{test++} = 1##4 == (17##8 // 11##4);
output1{test++} = 6##4 == (17##8 %% 11##4);
output1{test++} = 1##4 == (17##8 // 12##4);
output1{test++} = 5##4 == (17##8 %% 12##4);
output1{test++} = 1##4 == (17##8 // 13##4);
output1{test++} = 4##4 == (17##8 %% 13##4);
output1{test++} = 1##4 == (17##8 // 14##4);
output1{test++} = 3##4 == (17##8 %% 14##4);
output1{test++} = 1##4 == (17##8 // 15##4);
output1{test++} = 2##4 == (17##8 %% 15##4);
output1{test++} = 9##4 == (18##8 // 2##4);
output1{test++} = 0##4 == (18##8 %% 2##4);
output1{test++} = 6##4 == (18##8 // 3##4);
output1{test++} = 0##4 == (18##8 %% 3##4);
output1{test++} = 4##4 == (18##8 // 4##4);
output1{test++} = 2##4 == (18##8 %% 4##4);
output1{test++} = 3##4 == (18##8 // 5##4);
output1{test++} = 3##4 == (18##8 %% 5##4);
output1{test++} = 3##4 == (18##8 // 6##4);
output1{test++} = 0##4 == (18##8 %% 6##4);
output1{test++} = 2##4 == (18##8 // 7##4);
output1{test++} = 4##4 == (18##8 %% 7##4);
output1{test++} = 2##4 == (18##8 // 8##4);
output1{test++} = 2##4 == (18##8 %% 8##4);
output1{test++} = 2##4 == (18##8 // 9##4);
output1{test++} = 0##4 == (18##8 %% 9##4);
output1{test++} = 1##4 == (18##8 // 10##4);
output1{test++} = 8##4 == (18##8 %% 10##4);
output1{test++} = 1##4 == (18##8 // 11##4);
output1{test++} = 7##4 == (18##8 %% 11##4);
output1{test++} = 1##4 == (18##8 // 12##4);
output1{test++} = 6##4 == (18##8 %% 12##4);
output1{test++} = 1##4 == (18##8 // 13##4);
output1{test++} = 5##4 == (18##8 %% 13##4);
output1{test++} = 1##4 == (18##8 // 14##4);
output1{test++} = 4##4 == (18##8 %% 14##4);
output1{test++} = 1##4 == (18##8 // 15##4);
output1{test++} = 3##4 == (18##8 %% 15##4);
output1{test++} = 9##4 == (19##8 // 2##4);
output1{test++} = 1##4 == (19##8 %% 2##4);
output1{test++} = 6##4 == (19##8 // 3##4);
output1{test++} = 1##4 == (19##8 %% 3##4);
output1{test++} = 4##4 == (19##8 // 4##4);
output1{test++} = 3##4 == (19##8 %% 4##4);
output1{test++} = 3##4 == (19##8 // 5##4);
output1{test++} = 4##4 == (19##8 %% 5##4);
output1{test++} = 3##4 == (19##8 // 6##4);
output1{test++} = 1##4 == (19##8 %% 6##4);
output1{test++} = 2##4 == (19##8 // 7##4);
output1{test++} = 5##4 == (19##8 %% 7##4);
output1{test++} = 2##4 == (19##8 // 8##4);
output1{test++} = 3##4 == (19##8 %% 8##4);
output1{test++} = 2##4 == (19##8 // 9##4);
output1{test++} = 1##4 == (19##8 %% 9##4);
output1{test++} = 1##4 == (19##8 // 10##4);
output1{test++} = 9##4 == (19##8 %% 10##4);
output1{test++} = 1##4 == (19##8 // 11##4);
output1{test++} = 8##4 == (19##8 %% 11##4);
output1{test++} = 1##4 == (19##8 // 12##4);
output1{test++} = 7##4 == (19##8 %% 12##4);
output1{test++} = 1##4 == (19##8 // 13##4);
output1{test++} = 6##4 == (19##8 %% 13##4);
output1{test++} = 1##4 == (19##8 // 14##4);
output1{test++} = 5##4 == (19##8 %% 14##4);
output1{test++} = 1##4 == (19##8 // 15##4);
output1{test++} = 4##4 == (19##8 %% 15##4);
output1{test++} = 10##4 == (20##8 // 2##4);
output1{test++} = 0##4 == (20##8 %% 2##4);
output1{test++} = 6##4 == (20##8 // 3##4);
output1{test++} = 2##4 == (20##8 %% 3##4);
output1{test++} = 5##4 == (20##8 // 4##4);
output1{test++} = 0##4 == (20##8 %% 4##4);
output1{test++} = 4##4 == (20##8 // 5##4);
output1{test++} = 0##4 == (20##8 %% 5##4);
output1{test++} = 3##4 == (20##8 // 6##4);
output1{test++} = 2##4 == (20##8 %% 6##4);
output1{test++} = 2##4 == (20##8 // 7##4);
output1{test++} = 6##4 == (20##8 %% 7##4);
output1{test++} = 2##4 == (20##8 // 8##4);
output1{test++} = 4##4 == (20##8 %% 8##4);
output1{test++} = 2##4 == (20##8 // 9##4);
output1{test++} = 2##4 == (20##8 %% 9##4);
output1{test++} = 2##4 == (20##8 // 10##4);
output1{test++} = 0##4 == (20##8 %% 10##4);
output1{test++} = 1##4 == (20##8 // 11##4);
output1{test++} = 9##4 == (20##8 %% 11##4);
output1{test++} = 1##4 == (20##8 // 12##4);
output1{test++} = 8##4 == (20##8 %% 12##4);
output1{test++} = 1##4 == (20##8 // 13##4);
output1{test++} = 7##4 == (20##8 %% 13##4);
output1{test++} = 1##4 == (20##8 // 14##4);
output1{test++} = 6##4 == (20##8 %% 14##4);
output1{test++} = 1##4 == (20##8 // 15##4);
output1{test++} = 5##4 == (20##8 %% 15##4);
output1{test++} = 10##4 == (21##8 // 2##4);
output1{test++} = 1##4 == (21##8 %% 2##4);
output1{test++} = 7##4 == (21##8 // 3##4);
output1{test++} = 0##4 == (21##8 %% 3##4);
output1{test++} = 5##4 == (21##8 // 4##4);
output1{test++} = 1##4 == (21##8 %% 4##4);
output1{test++} = 4##4 == (21##8 // 5##4);
output1{test++} = 1##4 == (21##8 %% 5##4);
output1{test++} = 3##4 == (21##8 // 6##4);
output1{test++} = 3##4 == (21##8 %% 6##4);
output1{test++} = 3##4 == (21##8 // 7##4);
output1{test++} = 0##4 == (21##8 %% 7##4);
output1{test++} = 2##4 == (21##8 // 8##4);
output1{test++} = 5##4 == (21##8 %% 8##4);
output1{test++} = 2##4 == (21##8 // 9##4);
output1{test++} = 3##4 == (21##8 %% 9##4);
output1{test++} = 2##4 == (21##8 // 10##4);
output1{test++} = 1##4 == (21##8 %% 10##4);
output1{test++} = 1##4 == (21##8 // 11##4);
output1{test++} = 10##4 == (21##8 %% 11##4);
output1{test++} = 1##4 == (21##8 // 12##4);
output1{test++} = 9##4 == (21##8 %% 12##4);
output1{test++} = 1##4 == (21##8 // 13##4);
output1{test++} = 8##4 == (21##8 %% 13##4);
output1{test++} = 1##4 == (21##8 // 14##4);
output1{test++} = 7##4 == (21##8 %% 14##4);
output1{test++} = 1##4 == (21##8 // 15##4);
output1{test++} = 6##4 == (21##8 %% 15##4);
output1{test++} = 11##4 == (22##8 // 2##4);
output1{test++} = 0##4 == (22##8 %% 2##4);
output1{test++} = 7##4 == (22##8 // 3##4);
output1{test++} = 1##4 == (22##8 %% 3##4);
output1{test++} = 5##4 == (22##8 // 4##4);
output1{test++} = 2##4 == (22##8 %% 4##4);
output1{test++} = 4##4 == (22##8 // 5##4);
output1{test++} = 2##4 == (22##8 %% 5##4);
output1{test++} = 3##4 == (22##8 // 6##4);
output1{test++} = 4##4 == (22##8 %% 6##4);
output1{test++} = 3##4 == (22##8 // 7##4);
output1{test++} = 1##4 == (22##8 %% 7##4);
output1{test++} = 2##4 == (22##8 // 8##4);
output1{test++} = 6##4 == (22##8 %% 8##4);
output1{test++} = 2##4 == (22##8 // 9##4);
output1{test++} = 4##4 == (22##8 %% 9##4);
output1{test++} = 2##4 == (22##8 // 10##4);
output1{test++} = 2##4 == (22##8 %% 10##4);
output1{test++} = 2##4 == (22##8 // 11##4);
output1{test++} = 0##4 == (22##8 %% 11##4);
output1{test++} = 1##4 == (22##8 // 12##4);
output1{test++} = 10##4 == (22##8 %% 12##4);
output1{test++} = 1##4 == (22##8 // 13##4);
output1{test++} = 9##4 == (22##8 %% 13##4);
output1{test++} = 1##4 == (22##8 // 14##4);
output1{test++} = 8##4 == (22##8 %% 14##4);
output1{test++} = 1##4 == (22##8 // 15##4);
output1{test++} = 7##4 == (22##8 %% 15##4);
output1{test++} = 11##4 == (23##8 // 2##4);
output1{test++} = 1##4 == (23##8 %% 2##4);
output1{test++} = 7##4 == (23##8 // 3##4);
output1{test++} = 2##4 == (23##8 %% 3##4);
output1{test++} = 5##4 == (23##8 // 4##4);
output1{test++} = 3##4 == (23##8 %% 4##4);
output1{test++} = 4##4 == (23##8 // 5##4);
output1{test++} = 3##4 == (23##8 %% 5##4);
output1{test++} = 3##4 == (23##8 // 6##4);
output1{test++} = 5##4 == (23##8 %% 6##4);
output1{test++} = 3##4 == (23##8 // 7##4);
output1{test++} = 2##4 == (23##8 %% 7##4);
output1{test++} = 2##4 == (23##8 // 8##4);
output1{test++} = 7##4 == (23##8 %% 8##4);
output1{test++} = 2##4 == (23##8 // 9##4);
output1{test++} = 5##4 == (23##8 %% 9##4);
output1{test++} = 2##4 == (23##8 // 10##4);
output1{test++} = 3##4 == (23##8 %% 10##4);
output1{test++} = 2##4 == (23##8 // 11##4);
output1{test++} = 1##4 == (23##8 %% 11##4);
output1{test++} = 1##4 == (23##8 // 12##4);
output1{test++} = 11##4 == (23##8 %% 12##4);
output1{test++} = 1##4 == (23##8 // 13##4);
output1{test++} = 10##4 == (23##8 %% 13##4);
output1{test++} = 1##4 == (23##8 // 14##4);
output1{test++} = 9##4 == (23##8 %% 14##4);
output1{test++} = 1##4 == (23##8 // 15##4);
output1{test++} = 8##4 == (23##8 %% 15##4);
output1{test++} = 12##4 == (24##8 // 2##4);
output1{test++} = 0##4 == (24##8 %% 2##4);
output1{test++} = 8##4 == (24##8 // 3##4);
output1{test++} = 0##4 == (24##8 %% 3##4);
output1{test++} = 6##4 == (24##8 // 4##4);
output1{test++} = 0##4 == (24##8 %% 4##4);
output1{test++} = 4##4 == (24##8 // 5##4);
output1{test++} = 4##4 == (24##8 %% 5##4);
output1{test++} = 4##4 == (24##8 // 6##4);
output1{test++} = 0##4 == (24##8 %% 6##4);
output1{test++} = 3##4 == (24##8 // 7##4);
output1{test++} = 3##4 == (24##8 %% 7##4);
output1{test++} = 3##4 == (24##8 // 8##4);
output1{test++} = 0##4 == (24##8 %% 8##4);
output1{test++} = 2##4 == (24##8 // 9##4);
output1{test++} = 6##4 == (24##8 %% 9##4);
output1{test++} = 2##4 == (24##8 // 10##4);
output1{test++} = 4##4 == (24##8 %% 10##4);
output1{test++} = 2##4 == (24##8 // 11##4);
output1{test++} = 2##4 == (24##8 %% 11##4);
output1{test++} = 2##4 == (24##8 // 12##4);
output1{test++} = 0##4 == (24##8 %% 12##4);
output1{test++} = 1##4 == (24##8 // 13##4);
output1{test++} = 11##4 == (24##8 %% 13##4);
output1{test++} = 1##4 == (24##8 // 14##4);
output1{test++} = 10##4 == (24##8 %% 14##4);
output1{test++} = 1##4 == (24##8 // 15##4);
output1{test++} = 9##4 == (24##8 %% 15##4);
output1{test++} = 12##4 == (25##8 // 2##4);
output1{test++} = 1##4 == (25##8 %% 2##4);
output1{test++} = 8##4 == (25##8 // 3##4);
output1{test++} = 1##4 == (25##8 %% 3##4);
output1{test++} = 6##4 == (25##8 // 4##4);
output1{test++} = 1##4 == (25##8 %% 4##4);
output1{test++} = 5##4 == (25##8 // 5##4);
output1{test++} = 0##4 == (25##8 %% 5##4);
output1{test++} = 4##4 == (25##8 // 6##4);
output1{test++} = 1##4 == (25##8 %% 6##4);
output1{test++} = 3##4 == (25##8 // 7##4);
output1{test++} = 4##4 == (25##8 %% 7##4);
output1{test++} = 3##4 == (25##8 // 8##4);
output1{test++} = 1##4 == (25##8 %% 8##4);
output1{test++} = 2##4 == (25##8 // 9##4);
output1{test++} = 7##4 == (25##8 %% 9##4);
output1{test++} = 2##4 == (25##8 // 10##4);
output1{test++} = 5##4 == (25##8 %% 10##4);
output1{test++} = 2##4 == (25##8 // 11##4);
output1{test++} = 3##4 == (25##8 %% 11##4);
output1{test++} = 2##4 == (25##8 // 12##4);
output1{test++} = 1##4 == (25##8 %% 12##4);
output1{test++} = 1##4 == (25##8 // 13##4);
output1{test++} = 12##4 == (25##8 %% 13##4);
output1{test++} = 1##4 == (25##8 // 14##4);
output1{test++} = 11##4 == (25##8 %% 14##4);
output1{test++} = 1##4 == (25##8 // 15##4);
output1{test++} = 10##4 == (25##8 %% 15##4);
output1{test++} = 13##4 == (26##8 // 2##4);
output1{test++} = 0##4 == (26##8 %% 2##4);
output1{test++} = 8##4 == (26##8 // 3##4);
output1{test++} = 2##4 == (26##8 %% 3##4);
output1{test++} = 6##4 == (26##8 // 4##4);
output1{test++} = 2##4 == (26##8 %% 4##4);
output1{test++} = 5##4 == (26##8 // 5##4);
output1{test++} = 1##4 == (26##8 %% 5##4);
output1{test++} = 4##4 == (26##8 // 6##4);
output1{test++} = 2##4 == (26##8 %% 6##4);
output1{test++} = 3##4 == (26##8 // 7##4);
output1{test++} = 5##4 == (26##8 %% 7##4);
output1{test++} = 3##4 == (26##8 // 8##4);
output1{test++} = 2##4 == (26##8 %% 8##4);
output1{test++} = 2##4 == (26##8 // 9##4);
output1{test++} = 8##4 == (26##8 %% 9##4);
output1{test++} = 2##4 == (26##8 // 10##4);
output1{test++} = 6##4 == (26##8 %% 10##4);
output1{test++} = 2##4 == (26##8 // 11##4);
output1{test++} = 4##4 == (26##8 %% 11##4);
output1{test++} = 2##4 == (26##8 // 12##4);
output1{test++} = 2##4 == (26##8 %% 12##4);
output1{test++} = 2##4 == (26##8 // 13##4);
output1{test++} = 0##4 == (26##8 %% 13##4);
output1{test++} = 1##4 == (26##8 // 14##4);
output1{test++} = 12##4 == (26##8 %% 14##4);
output1{test++} = 1##4 == (26##8 // 15##4);
output1{test++} = 11##4 == (26##8 %% 15##4);
output1{test++} = 13##4 == (27##8 // 2##4);
output1{test++} = 1##4 == (27##8 %% 2##4);
output1{test++} = 9##4 == (27##8 // 3##4);
output1{test++} = 0##4 == (27##8 %% 3##4);
output1{test++} = 6##4 == (27##8 // 4##4);
output1{test++} = 3##4 == (27##8 %% 4##4);
output1{test++} = 5##4 == (27##8 // 5##4);
output1{test++} = 2##4 == (27##8 %% 5##4);
output1{test++} = 4##4 == (27##8 // 6##4);
output1{test++} = 3##4 == (27##8 %% 6##4);
output1{test++} = 3##4 == (27##8 // 7##4);
output1{test++} = 6##4 == (27##8 %% 7##4);
output1{test++} = 3##4 == (27##8 // 8##4);
output1{test++} = 3##4 == (27##8 %% 8##4);
output1{test++} = 3##4 == (27##8 // 9##4);
output1{test++} = 0##4 == (27##8 %% 9##4);
output1{test++} = 2##4 == (27##8 // 10##4);
output1{test++} = 7##4 == (27##8 %% 10##4);
output1{test++} = 2##4 == (27##8 // 11##4);
output1{test++} = 5##4 == (27##8 %% 11##4);
output1{test++} = 2##4 == (27##8 // 12##4);
output1{test++} = 3##4 == (27##8 %% 12##4);
output1{test++} = 2##4 == (27##8 // 13##4);
output1{test++} = 1##4 == (27##8 %% 13##4);
output1{test++} = 1##4 == (27##8 // 14##4);
output1{test++} = 13##4 == (27##8 %% 14##4);
output1{test++} = 1##4 == (27##8 // 15##4);
output1{test++} = 12##4 == (27##8 %% 15##4);
output1{test++} = 14##4 == (28##8 // 2##4);
output1{test++} = 0##4 == (28##8 %% 2##4);
output1{test++} = 9##4 == (28##8 // 3##4);
output1{test++} = 1##4 == (28##8 %% 3##4);
output1{test++} = 7##4 == (28##8 // 4##4);
output1{test++} = 0##4 == (28##8 %% 4##4);
output1{test++} = 5##4 == (28##8 // 5##4);
output1{test++} = 3##4 == (28##8 %% 5##4);
output1{test++} = 4##4 == (28##8 // 6##4);
output1{test++} = 4##4 == (28##8 %% 6##4);
output1{test++} = 4##4 == (28##8 // 7##4);
output1{test++} = 0##4 == (28##8 %% 7##4);
output1{test++} = 3##4 == (28##8 // 8##4);
output1{test++} = 4##4 == (28##8 %% 8##4);
output1{test++} = 3##4 == (28##8 // 9##4);
output1{test++} = 1##4 == (28##8 %% 9##4);
output1{test++} = 2##4 == (28##8 // 10##4);
output1{test++} = 8##4 == (28##8 %% 10##4);
output1{test++} = 2##4 == (28##8 // 11##4);
output1{test++} = 6##4 == (28##8 %% 11##4);
output1{test++} = 2##4 == (28##8 // 12##4);
output1{test++} = 4##4 == (28##8 %% 12##4);
output1{test++} = 2##4 == (28##8 // 13##4);
output1{test++} = 2##4 == (28##8 %% 13##4);
output1{test++} = 2##4 == (28##8 // 14##4);
output1{test++} = 0##4 == (28##8 %% 14##4);
output1{test++} = 1##4 == (28##8 // 15##4);
output1{test++} = 13##4 == (28##8 %% 15##4);
output1{test++} = 14##4 == (29##8 // 2##4);
output1{test++} = 1##4 == (29##8 %% 2##4);
output1{test++} = 9##4 == (29##8 // 3##4);
output1{test++} = 2##4 == (29##8 %% 3##4);
output1{test++} = 7##4 == (29##8 // 4##4);
output1{test++} = 1##4 == (29##8 %% 4##4);
output1{test++} = 5##4 == (29##8 // 5##4);
output1{test++} = 4##4 == (29##8 %% 5##4);
output1{test++} = 4##4 == (29##8 // 6##4);
output1{test++} = 5##4 == (29##8 %% 6##4);
output1{test++} = 4##4 == (29##8 // 7##4);
output1{test++} = 1##4 == (29##8 %% 7##4);
output1{test++} = 3##4 == (29##8 // 8##4);
output1{test++} = 5##4 == (29##8 %% 8##4);
output1{test++} = 3##4 == (29##8 // 9##4);
output1{test++} = 2##4 == (29##8 %% 9##4);
output1{test++} = 2##4 == (29##8 // 10##4);
output1{test++} = 9##4 == (29##8 %% 10##4);
output1{test++} = 2##4 == (29##8 // 11##4);
output1{test++} = 7##4 == (29##8 %% 11##4);
output1{test++} = 2##4 == (29##8 // 12##4);
output1{test++} = 5##4 == (29##8 %% 12##4);
output1{test++} = 2##4 == (29##8 // 13##4);
output1{test++} = 3##4 == (29##8 %% 13##4);
output1{test++} = 2##4 == (29##8 // 14##4);
output1{test++} = 1##4 == (29##8 %% 14##4);
output1{test++} = 1##4 == (29##8 // 15##4);
output1{test++} = 14##4 == (29##8 %% 15##4);
output1{test++} = 15##4 == (30##8 // 2##4);
output1{test++} = 0##4 == (30##8 %% 2##4);
output1{test++} = 10##4 == (30##8 // 3##4);
output1{test++} = 0##4 == (30##8 %% 3##4);
output1{test++} = 7##4 == (30##8 // 4##4);
output1{test++} = 2##4 == (30##8 %% 4##4);
output1{test++} = 6##4 == (30##8 // 5##4);
output1{test++} = 0##4 == (30##8 %% 5##4);
output1{test++} = 5##4 == (30##8 // 6##4);
output1{test++} = 0##4 == (30##8 %% 6##4);
output1{test++} = 4##4 == (30##8 // 7##4);
output1{test++} = 2##4 == (30##8 %% 7##4);
output1{test++} = 3##4 == (30##8 // 8##4);
output1{test++} = 6##4 == (30##8 %% 8##4);
output1{test++} = 3##4 == (30##8 // 9##4);
output1{test++} = 3##4 == (30##8 %% 9##4);
output1{test++} = 3##4 == (30##8 // 10##4);
output1{test++} = 0##4 == (30##8 %% 10##4);
output1{test++} = 2##4 == (30##8 // 11##4);
output1{test++} = 8##4 == (30##8 %% 11##4);
output1{test++} = 2##4 == (30##8 // 12##4);
output1{test++} = 6##4 == (30##8 %% 12##4);
output1{test++} = 2##4 == (30##8 // 13##4);
output1{test++} = 4##4 == (30##8 %% 13##4);
output1{test++} = 2##4 == (30##8 // 14##4);
output1{test++} = 2##4 == (30##8 %% 14##4);
output1{test++} = 2##4 == (30##8 // 15##4);
output1{test++} = 0##4 == (30##8 %% 15##4);
output1{test++} = 15##4 == (31##8 // 2##4);
output1{test++} = 1##4 == (31##8 %% 2##4);
output1{test++} = 10##4 == (31##8 // 3##4);
output1{test++} = 1##4 == (31##8 %% 3##4);
output1{test++} = 7##4 == (31##8 // 4##4);
output1{test++} = 3##4 == (31##8 %% 4##4);
output1{test++} = 6##4 == (31##8 // 5##4);
output1{test++} = 1##4 == (31##8 %% 5##4);
output1{test++} = 5##4 == (31##8 // 6##4);
output1{test++} = 1##4 == (31##8 %% 6##4);
output1{test++} = 4##4 == (31##8 // 7##4);
output1{test++} = 3##4 == (31##8 %% 7##4);
output1{test++} = 3##4 == (31##8 // 8##4);
output1{test++} = 7##4 == (31##8 %% 8##4);
output1{test++} = 3##4 == (31##8 // 9##4);
output1{test++} = 4##4 == (31##8 %% 9##4);
output1{test++} = 3##4 == (31##8 // 10##4);
output1{test++} = 1##4 == (31##8 %% 10##4);
output1{test++} = 2##4 == (31##8 // 11##4);
output1{test++} = 9##4 == (31##8 %% 11##4);
output1{test++} = 2##4 == (31##8 // 12##4);
output1{test++} = 7##4 == (31##8 %% 12##4);
output1{test++} = 2##4 == (31##8 // 13##4);
output1{test++} = 5##4 == (31##8 %% 13##4);
output1{test++} = 2##4 == (31##8 // 14##4);
output1{test++} = 3##4 == (31##8 %% 14##4);
output1{test++} = 2##4 == (31##8 // 15##4);
output1{test++} = 1##4 == (31##8 %% 15##4);
output1{test++} = 10##4 == (32##8 // 3##4);
output1{test++} = 2##4 == (32##8 %% 3##4);
output1{test++} = 8##4 == (32##8 // 4##4);
output1{test++} = 0##4 == (32##8 %% 4##4);
output1{test++} = 6##4 == (32##8 // 5##4);
output1{test++} = 2##4 == (32##8 %% 5##4);
output1{test++} = 5##4 == (32##8 // 6##4);
output1{test++} = 2##4 == (32##8 %% 6##4);
output1{test++} = 4##4 == (32##8 // 7##4);
output1{test++} = 4##4 == (32##8 %% 7##4);
output1{test++} = 4##4 == (32##8 // 8##4);
output1{test++} = 0##4 == (32##8 %% 8##4);
output1{test++} = 3##4 == (32##8 // 9##4);
output1{test++} = 5##4 == (32##8 %% 9##4);
output1{test++} = 3##4 == (32##8 // 10##4);
output1{test++} = 2##4 == (32##8 %% 10##4);
output1{test++} = 2##4 == (32##8 // 11##4);
output1{test++} = 10##4 == (32##8 %% 11##4);
output1{test++} = 2##4 == (32##8 // 12##4);
output1{test++} = 8##4 == (32##8 %% 12##4);
output1{test++} = 2##4 == (32##8 // 13##4);
output1{test++} = 6##4 == (32##8 %% 13##4);
output1{test++} = 2##4 == (32##8 // 14##4);
output1{test++} = 4##4 == (32##8 %% 14##4);
output1{test++} = 2##4 == (32##8 // 15##4);
output1{test++} = 2##4 == (32##8 %% 15##4);
output1{test++} = 11##4 == (33##8 // 3##4);
output1{test++} = 0##4 == (33##8 %% 3##4);
output1{test++} = 8##4 == (33##8 // 4##4);
output1{test++} = 1##4 == (33##8 %% 4##4);
output1{test++} = 6##4 == (33##8 // 5##4);
output1{test++} = 3##4 == (33##8 %% 5##4);
output1{test++} = 5##4 == (33##8 // 6##4);
output1{test++} = 3##4 == (33##8 %% 6##4);
output1{test++} = 4##4 == (33##8 // 7##4);
output1{test++} = 5##4 == (33##8 %% 7##4);
output1{test++} = 4##4 == (33##8 // 8##4);
output1{test++} = 1##4 == (33##8 %% 8##4);
output1{test++} = 3##4 == (33##8 // 9##4);
output1{test++} = 6##4 == (33##8 %% 9##4);
output1{test++} = 3##4 == (33##8 // 10##4);
output1{test++} = 3##4 == (33##8 %% 10##4);
output1{test++} = 3##4 == (33##8 // 11##4);
output1{test++} = 0##4 == (33##8 %% 11##4);
output1{test++} = 2##4 == (33##8 // 12##4);
output1{test++} = 9##4 == (33##8 %% 12##4);
output1{test++} = 2##4 == (33##8 // 13##4);
output1{test++} = 7##4 == (33##8 %% 13##4);
output1{test++} = 2##4 == (33##8 // 14##4);
output1{test++} = 5##4 == (33##8 %% 14##4);
output1{test++} = 2##4 == (33##8 // 15##4);
output1{test++} = 3##4 == (33##8 %% 15##4);
output1{test++} = 11##4 == (34##8 // 3##4);
output1{test++} = 1##4 == (34##8 %% 3##4);
output1{test++} = 8##4 == (34##8 // 4##4);
output1{test++} = 2##4 == (34##8 %% 4##4);
output1{test++} = 6##4 == (34##8 // 5##4);
output1{test++} = 4##4 == (34##8 %% 5##4);
output1{test++} = 5##4 == (34##8 // 6##4);
output1{test++} = 4##4 == (34##8 %% 6##4);
output1{test++} = 4##4 == (34##8 // 7##4);
output1{test++} = 6##4 == (34##8 %% 7##4);
output1{test++} = 4##4 == (34##8 // 8##4);
output1{test++} = 2##4 == (34##8 %% 8##4);
output1{test++} = 3##4 == (34##8 // 9##4);
output1{test++} = 7##4 == (34##8 %% 9##4);
output1{test++} = 3##4 == (34##8 // 10##4);
output1{test++} = 4##4 == (34##8 %% 10##4);
output1{test++} = 3##4 == (34##8 // 11##4);
output1{test++} = 1##4 == (34##8 %% 11##4);
output1{test++} = 2##4 == (34##8 // 12##4);
output1{test++} = 10##4 == (34##8 %% 12##4);
output1{test++} = 2##4 == (34##8 // 13##4);
output1{test++} = 8##4 == (34##8 %% 13##4);
output1{test++} = 2##4 == (34##8 // 14##4);
output1{test++} = 6##4 == (34##8 %% 14##4);
output1{test++} = 2##4 == (34##8 // 15##4);
output1{test++} = 4##4 == (34##8 %% 15##4);
output1{test++} = 11##4 == (35##8 // 3##4);
output1{test++} = 2##4 == (35##8 %% 3##4);
output1{test++} = 8##4 == (35##8 // 4##4);
output1{test++} = 3##4 == (35##8 %% 4##4);
output1{test++} = 7##4 == (35##8 // 5##4);
output1{test++} = 0##4 == (35##8 %% 5##4);
output1{test++} = 5##4 == (35##8 // 6##4);
output1{test++} = 5##4 == (35##8 %% 6##4);
output1{test++} = 5##4 == (35##8 // 7##4);
output1{test++} = 0##4 == (35##8 %% 7##4);
output1{test++} = 4##4 == (35##8 // 8##4);
output1{test++} = 3##4 == (35##8 %% 8##4);
output1{test++} = 3##4 == (35##8 // 9##4);
output1{test++} = 8##4 == (35##8 %% 9##4);
output1{test++} = 3##4 == (35##8 // 10##4);
output1{test++} = 5##4 == (35##8 %% 10##4);
output1{test++} = 3##4 == (35##8 // 11##4);
output1{test++} = 2##4 == (35##8 %% 11##4);
output1{test++} = 2##4 == (35##8 // 12##4);
output1{test++} = 11##4 == (35##8 %% 12##4);
output1{test++} = 2##4 == (35##8 // 13##4);
output1{test++} = 9##4 == (35##8 %% 13##4);
output1{test++} = 2##4 == (35##8 // 14##4);
output1{test++} = 7##4 == (35##8 %% 14##4);
output1{test++} = 2##4 == (35##8 // 15##4);
output1{test++} = 5##4 == (35##8 %% 15##4);
output1{test++} = 12##4 == (36##8 // 3##4);
output1{test++} = 0##4 == (36##8 %% 3##4);
output1{test++} = 9##4 == (36##8 // 4##4);
output1{test++} = 0##4 == (36##8 %% 4##4);
output1{test++} = 7##4 == (36##8 // 5##4);
output1{test++} = 1##4 == (36##8 %% 5##4);
output1{test++} = 6##4 == (36##8 // 6##4);
output1{test++} = 0##4 == (36##8 %% 6##4);
output1{test++} = 5##4 == (36##8 // 7##4);
output1{test++} = 1##4 == (36##8 %% 7##4);
output1{test++} = 4##4 == (36##8 // 8##4);
output1{test++} = 4##4 == (36##8 %% 8##4);
output1{test++} = 4##4 == (36##8 // 9##4);
output1{test++} = 0##4 == (36##8 %% 9##4);
output1{test++} = 3##4 == (36##8 // 10##4);
output1{test++} = 6##4 == (36##8 %% 10##4);
output1{test++} = 3##4 == (36##8 // 11##4);
output1{test++} = 3##4 == (36##8 %% 11##4);
output1{test++} = 3##4 == (36##8 // 12##4);
output1{test++} = 0##4 == (36##8 %% 12##4);
output1{test++} = 2##4 == (36##8 // 13##4);
output1{test++} = 10##4 == (36##8 %% 13##4);
output1{test++} = 2##4 == (36##8 // 14##4);
output1{test++} = 8##4 == (36##8 %% 14##4);
output1{test++} = 2##4 == (36##8 // 15##4);
output1{test++} = 6##4 == (36##8 %% 15##4);
output1{test++} = 12##4 == (37##8 // 3##4);
output1{test++} = 1##4 == (37##8 %% 3##4);
output1{test++} = 9##4 == (37##8 // 4##4);
output1{test++} = 1##4 == (37##8 %% 4##4);
output1{test++} = 7##4 == (37##8 // 5##4);
output1{test++} = 2##4 == (37##8 %% 5##4);
output1{test++} = 6##4 == (37##8 // 6##4);
output1{test++} = 1##4 == (37##8 %% 6##4);
output1{test++} = 5##4 == (37##8 // 7##4);
output1{test++} = 2##4 == (37##8 %% 7##4);
output1{test++} = 4##4 == (37##8 // 8##4);
output1{test++} = 5##4 == (37##8 %% 8##4);
output1{test++} = 4##4 == (37##8 // 9##4);
output1{test++} = 1##4 == (37##8 %% 9##4);
output1{test++} = 3##4 == (37##8 // 10##4);
output1{test++} = 7##4 == (37##8 %% 10##4);
output1{test++} = 3##4 == (37##8 // 11##4);
output1{test++} = 4##4 == (37##8 %% 11##4);
output1{test++} = 3##4 == (37##8 // 12##4);
output1{test++} = 1##4 == (37##8 %% 12##4);
output1{test++} = 2##4 == (37##8 // 13##4);
output1{test++} = 11##4 == (37##8 %% 13##4);
output1{test++} = 2##4 == (37##8 // 14##4);
output1{test++} = 9##4 == (37##8 %% 14##4);
output1{test++} = 2##4 == (37##8 // 15##4);
output1{test++} = 7##4 == (37##8 %% 15##4);
output1{test++} = 12##4 == (38##8 // 3##4);
output1{test++} = 2##4 == (38##8 %% 3##4);
output1{test++} = 9##4 == (38##8 // 4##4);
output1{test++} = 2##4 == (38##8 %% 4##4);
output1{test++} = 7##4 == (38##8 // 5##4);
output1{test++} = 3##4 == (38##8 %% 5##4);
output1{test++} = 6##4 == (38##8 // 6##4);
output1{test++} = 2##4 == (38##8 %% 6##4);
output1{test++} = 5##4 == (38##8 // 7##4);
output1{test++} = 3##4 == (38##8 %% 7##4);
output1{test++} = 4##4 == (38##8 // 8##4);
output1{test++} = 6##4 == (38##8 %% 8##4);
output1{test++} = 4##4 == (38##8 // 9##4);
output1{test++} = 2##4 == (38##8 %% 9##4);
output1{test++} = 3##4 == (38##8 // 10##4);
output1{test++} = 8##4 == (38##8 %% 10##4);
output1{test++} = 3##4 == (38##8 // 11##4);
output1{test++} = 5##4 == (38##8 %% 11##4);
output1{test++} = 3##4 == (38##8 // 12##4);
output1{test++} = 2##4 == (38##8 %% 12##4);
output1{test++} = 2##4 == (38##8 // 13##4);
output1{test++} = 12##4 == (38##8 %% 13##4);
output1{test++} = 2##4 == (38##8 // 14##4);
output1{test++} = 10##4 == (38##8 %% 14##4);
output1{test++} = 2##4 == (38##8 // 15##4);
output1{test++} = 8##4 == (38##8 %% 15##4);
output1{test++} = 13##4 == (39##8 // 3##4);
output1{test++} = 0##4 == (39##8 %% 3##4);
output1{test++} = 9##4 == (39##8 // 4##4);
output1{test++} = 3##4 == (39##8 %% 4##4);
output1{test++} = 7##4 == (39##8 // 5##4);
output1{test++} = 4##4 == (39##8 %% 5##4);
output1{test++} = 6##4 == (39##8 // 6##4);
output1{test++} = 3##4 == (39##8 %% 6##4);
output1{test++} = 5##4 == (39##8 // 7##4);
output1{test++} = 4##4 == (39##8 %% 7##4);
output1{test++} = 4##4 == (39##8 // 8##4);
output1{test++} = 7##4 == (39##8 %% 8##4);
output1{test++} = 4##4 == (39##8 // 9##4);
output1{test++} = 3##4 == (39##8 %% 9##4);
output1{test++} = 3##4 == (39##8 // 10##4);
output1{test++} = 9##4 == (39##8 %% 10##4);
output1{test++} = 3##4 == (39##8 // 11##4);
output1{test++} = 6##4 == (39##8 %% 11##4);
output1{test++} = 3##4 == (39##8 // 12##4);
output1{test++} = 3##4 == (39##8 %% 12##4);
output1{test++} = 3##4 == (39##8 // 13##4);
output1{test++} = 0##4 == (39##8 %% 13##4);
output1{test++} = 2##4 == (39##8 // 14##4);
output1{test++} = 11##4 == (39##8 %% 14##4);
output1{test++} = 2##4 == (39##8 // 15##4);
output1{test++} = 9##4 == (39##8 %% 15##4);
output1{test++} = 13##4 == (40##8 // 3##4);
output1{test++} = 1##4 == (40##8 %% 3##4);
output1{test++} = 10##4 == (40##8 // 4##4);
output1{test++} = 0##4 == (40##8 %% 4##4);
output1{test++} = 8##4 == (40##8 // 5##4);
output1{test++} = 0##4 == (40##8 %% 5##4);
output1{test++} = 6##4 == (40##8 // 6##4);
output1{test++} = 4##4 == (40##8 %% 6##4);
output1{test++} = 5##4 == (40##8 // 7##4);
output1{test++} = 5##4 == (40##8 %% 7##4);
output1{test++} = 5##4 == (40##8 // 8##4);
output1{test++} = 0##4 == (40##8 %% 8##4);
output1{test++} = 4##4 == (40##8 // 9##4);
output1{test++} = 4##4 == (40##8 %% 9##4);
output1{test++} = 4##4 == (40##8 // 10##4);
output1{test++} = 0##4 == (40##8 %% 10##4);
output1{test++} = 3##4 == (40##8 // 11##4);
output1{test++} = 7##4 == (40##8 %% 11##4);
output1{test++} = 3##4 == (40##8 // 12##4);
output1{test++} = 4##4 == (40##8 %% 12##4);
output1{test++} = 3##4 == (40##8 // 13##4);
output1{test++} = 1##4 == (40##8 %% 13##4);
output1{test++} = 2##4 == (40##8 // 14##4);
output1{test++} = 12##4 == (40##8 %% 14##4);
output1{test++} = 2##4 == (40##8 // 15##4);
output1{test++} = 10##4 == (40##8 %% 15##4);
output1{test++} = 13##4 == (41##8 // 3##4);
output1{test++} = 2##4 == (41##8 %% 3##4);
output1{test++} = 10##4 == (41##8 // 4##4);
output1{test++} = 1##4 == (41##8 %% 4##4);
output1{test++} = 8##4 == (41##8 // 5##4);
output1{test++} = 1##4 == (41##8 %% 5##4);
output1{test++} = 6##4 == (41##8 // 6##4);
output1{test++} = 5##4 == (41##8 %% 6##4);
output1{test++} = 5##4 == (41##8 // 7##4);
output1{test++} = 6##4 == (41##8 %% 7##4);
output1{test++} = 5##4 == (41##8 // 8##4);
output1{test++} = 1##4 == (41##8 %% 8##4);
output1{test++} = 4##4 == (41##8 // 9##4);
output1{test++} = 5##4 == (41##8 %% 9##4);
output1{test++} = 4##4 == (41##8 // 10##4);
output1{test++} = 1##4 == (41##8 %% 10##4);
output1{test++} = 3##4 == (41##8 // 11##4);
output1{test++} = 8##4 == (41##8 %% 11##4);
output1{test++} = 3##4 == (41##8 // 12##4);
output1{test++} = 5##4 == (41##8 %% 12##4);
output1{test++} = 3##4 == (41##8 // 13##4);
output1{test++} = 2##4 == (41##8 %% 13##4);
output1{test++} = 2##4 == (41##8 // 14##4);
output1{test++} = 13##4 == (41##8 %% 14##4);
output1{test++} = 2##4 == (41##8 // 15##4);
output1{test++} = 11##4 == (41##8 %% 15##4);
output1{test++} = 14##4 == (42##8 // 3##4);
output1{test++} = 0##4 == (42##8 %% 3##4);
output1{test++} = 10##4 == (42##8 // 4##4);
output1{test++} = 2##4 == (42##8 %% 4##4);
output1{test++} = 8##4 == (42##8 // 5##4);
output1{test++} = 2##4 == (42##8 %% 5##4);
output1{test++} = 7##4 == (42##8 // 6##4);
output1{test++} = 0##4 == (42##8 %% 6##4);
output1{test++} = 6##4 == (42##8 // 7##4);
output1{test++} = 0##4 == (42##8 %% 7##4);
output1{test++} = 5##4 == (42##8 // 8##4);
output1{test++} = 2##4 == (42##8 %% 8##4);
output1{test++} = 4##4 == (42##8 // 9##4);
output1{test++} = 6##4 == (42##8 %% 9##4);
output1{test++} = 4##4 == (42##8 // 10##4);
output1{test++} = 2##4 == (42##8 %% 10##4);
output1{test++} = 3##4 == (42##8 // 11##4);
output1{test++} = 9##4 == (42##8 %% 11##4);
output1{test++} = 3##4 == (42##8 // 12##4);
output1{test++} = 6##4 == (42##8 %% 12##4);
output1{test++} = 3##4 == (42##8 // 13##4);
output1{test++} = 3##4 == (42##8 %% 13##4);
output1{test++} = 3##4 == (42##8 // 14##4);
output1{test++} = 0##4 == (42##8 %% 14##4);
output1{test++} = 2##4 == (42##8 // 15##4);
output1{test++} = 12##4 == (42##8 %% 15##4);
output1{test++} = 14##4 == (43##8 // 3##4);
output1{test++} = 1##4 == (43##8 %% 3##4);
output1{test++} = 10##4 == (43##8 // 4##4);
output1{test++} = 3##4 == (43##8 %% 4##4);
output1{test++} = 8##4 == (43##8 // 5##4);
output1{test++} = 3##4 == (43##8 %% 5##4);
output1{test++} = 7##4 == (43##8 // 6##4);
output1{test++} = 1##4 == (43##8 %% 6##4);
output1{test++} = 6##4 == (43##8 // 7##4);
output1{test++} = 1##4 == (43##8 %% 7##4);
output1{test++} = 5##4 == (43##8 // 8##4);
output1{test++} = 3##4 == (43##8 %% 8##4);
output1{test++} = 4##4 == (43##8 // 9##4);
output1{test++} = 7##4 == (43##8 %% 9##4);
output1{test++} = 4##4 == (43##8 // 10##4);
output1{test++} = 3##4 == (43##8 %% 10##4);
output1{test++} = 3##4 == (43##8 // 11##4);
output1{test++} = 10##4 == (43##8 %% 11##4);
output1{test++} = 3##4 == (43##8 // 12##4);
output1{test++} = 7##4 == (43##8 %% 12##4);
output1{test++} = 3##4 == (43##8 // 13##4);
output1{test++} = 4##4 == (43##8 %% 13##4);
output1{test++} = 3##4 == (43##8 // 14##4);
output1{test++} = 1##4 == (43##8 %% 14##4);
output1{test++} = 2##4 == (43##8 // 15##4);
output1{test++} = 13##4 == (43##8 %% 15##4);
output1{test++} = 14##4 == (44##8 // 3##4);
output1{test++} = 2##4 == (44##8 %% 3##4);
output1{test++} = 11##4 == (44##8 // 4##4);
output1{test++} = 0##4 == (44##8 %% 4##4);
output1{test++} = 8##4 == (44##8 // 5##4);
output1{test++} = 4##4 == (44##8 %% 5##4);
output1{test++} = 7##4 == (44##8 // 6##4);
output1{test++} = 2##4 == (44##8 %% 6##4);
output1{test++} = 6##4 == (44##8 // 7##4);
output1{test++} = 2##4 == (44##8 %% 7##4);
output1{test++} = 5##4 == (44##8 // 8##4);
output1{test++} = 4##4 == (44##8 %% 8##4);
output1{test++} = 4##4 == (44##8 // 9##4);
output1{test++} = 8##4 == (44##8 %% 9##4);
output1{test++} = 4##4 == (44##8 // 10##4);
output1{test++} = 4##4 == (44##8 %% 10##4);
output1{test++} = 4##4 == (44##8 // 11##4);
output1{test++} = 0##4 == (44##8 %% 11##4);
output1{test++} = 3##4 == (44##8 // 12##4);
output1{test++} = 8##4 == (44##8 %% 12##4);
output1{test++} = 3##4 == (44##8 // 13##4);
output1{test++} = 5##4 == (44##8 %% 13##4);
output1{test++} = 3##4 == (44##8 // 14##4);
output1{test++} = 2##4 == (44##8 %% 14##4);
output1{test++} = 2##4 == (44##8 // 15##4);
output1{test++} = 14##4 == (44##8 %% 15##4);
output1{test++} = 15##4 == (45##8 // 3##4);
output1{test++} = 0##4 == (45##8 %% 3##4);
output1{test++} = 11##4 == (45##8 // 4##4);
output1{test++} = 1##4 == (45##8 %% 4##4);
output1{test++} = 9##4 == (45##8 // 5##4);
output1{test++} = 0##4 == (45##8 %% 5##4);
output1{test++} = 7##4 == (45##8 // 6##4);
output1{test++} = 3##4 == (45##8 %% 6##4);
output1{test++} = 6##4 == (45##8 // 7##4);
output1{test++} = 3##4 == (45##8 %% 7##4);
output1{test++} = 5##4 == (45##8 // 8##4);
output1{test++} = 5##4 == (45##8 %% 8##4);
output1{test++} = 5##4 == (45##8 // 9##4);
output1{test++} = 0##4 == (45##8 %% 9##4);
output1{test++} = 4##4 == (45##8 // 10##4);
output1{test++} = 5##4 == (45##8 %% 10##4);
output1{test++} = 4##4 == (45##8 // 11##4);
output1{test++} = 1##4 == (45##8 %% 11##4);
output1{test++} = 3##4 == (45##8 // 12##4);
output1{test++} = 9##4 == (45##8 %% 12##4);
output1{test++} = 3##4 == (45##8 // 13##4);
output1{test++} = 6##4 == (45##8 %% 13##4);
output1{test++} = 3##4 == (45##8 // 14##4);
output1{test++} = 3##4 == (45##8 %% 14##4);
output1{test++} = 3##4 == (45##8 // 15##4);
output1{test++} = 0##4 == (45##8 %% 15##4);
output1{test++} = 15##4 == (46##8 // 3##4);
output1{test++} = 1##4 == (46##8 %% 3##4);
output1{test++} = 11##4 == (46##8 // 4##4);
output1{test++} = 2##4 == (46##8 %% 4##4);
output1{test++} = 9##4 == (46##8 // 5##4);
output1{test++} = 1##4 == (46##8 %% 5##4);
output1{test++} = 7##4 == (46##8 // 6##4);
output1{test++} = 4##4 == (46##8 %% 6##4);
output1{test++} = 6##4 == (46##8 // 7##4);
output1{test++} = 4##4 == (46##8 %% 7##4);
output1{test++} = 5##4 == (46##8 // 8##4);
output1{test++} = 6##4 == (46##8 %% 8##4);
output1{test++} = 5##4 == (46##8 // 9##4);
output1{test++} = 1##4 == (46##8 %% 9##4);
output1{test++} = 4##4 == (46##8 // 10##4);
output1{test++} = 6##4 == (46##8 %% 10##4);
output1{test++} = 4##4 == (46##8 // 11##4);
output1{test++} = 2##4 == (46##8 %% 11##4);
output1{test++} = 3##4 == (46##8 // 12##4);
output1{test++} = 10##4 == (46##8 %% 12##4);
output1{test++} = 3##4 == (46##8 // 13##4);
output1{test++} = 7##4 == (46##8 %% 13##4);
output1{test++} = 3##4 == (46##8 // 14##4);
output1{test++} = 4##4 == (46##8 %% 14##4);
output1{test++} = 3##4 == (46##8 // 15##4);
output1{test++} = 1##4 == (46##8 %% 15##4);
output1{test++} = 15##4 == (47##8 // 3##4);
output1{test++} = 2##4 == (47##8 %% 3##4);
output1{test++} = 11##4 == (47##8 // 4##4);
output1{test++} = 3##4 == (47##8 %% 4##4);
output1{test++} = 9##4 == (47##8 // 5##4);
output1{test++} = 2##4 == (47##8 %% 5##4);
output1{test++} = 7##4 == (47##8 // 6##4);
output1{test++} = 5##4 == (47##8 %% 6##4);
output1{test++} = 6##4 == (47##8 // 7##4);
output1{test++} = 5##4 == (47##8 %% 7##4);
output1{test++} = 5##4 == (47##8 // 8##4);
output1{test++} = 7##4 == (47##8 %% 8##4);
output1{test++} = 5##4 == (47##8 // 9##4);
output1{test++} = 2##4 == (47##8 %% 9##4);
output1{test++} = 4##4 == (47##8 // 10##4);
output1{test++} = 7##4 == (47##8 %% 10##4);
output1{test++} = 4##4 == (47##8 // 11##4);
output1{test++} = 3##4 == (47##8 %% 11##4);
output1{test++} = 3##4 == (47##8 // 12##4);
output1{test++} = 11##4 == (47##8 %% 12##4);
output1{test++} = 3##4 == (47##8 // 13##4);
output1{test++} = 8##4 == (47##8 %% 13##4);
output1{test++} = 3##4 == (47##8 // 14##4);
output1{test++} = 5##4 == (47##8 %% 14##4);
output1{test++} = 3##4 == (47##8 // 15##4);
output1{test++} = 2##4 == (47##8 %% 15##4);
output1{test++} = 12##4 == (48##8 // 4##4);
output1{test++} = 0##4 == (48##8 %% 4##4);
output1{test++} = 9##4 == (48##8 // 5##4);
output1{test++} = 3##4 == (48##8 %% 5##4);
output1{test++} = 8##4 == (48##8 // 6##4);
output1{test++} = 0##4 == (48##8 %% 6##4);
output1{test++} = 6##4 == (48##8 // 7##4);
output1{test++} = 6##4 == (48##8 %% 7##4);
output1{test++} = 6##4 == (48##8 // 8##4);
output1{test++} = 0##4 == (48##8 %% 8##4);
output1{test++} = 5##4 == (48##8 // 9##4);
output1{test++} = 3##4 == (48##8 %% 9##4);
output1{test++} = 4##4 == (48##8 // 10##4);
output1{test++} = 8##4 == (48##8 %% 10##4);
output1{test++} = 4##4 == (48##8 // 11##4);
output1{test++} = 4##4 == (48##8 %% 11##4);
output1{test++} = 4##4 == (48##8 // 12##4);
output1{test++} = 0##4 == (48##8 %% 12##4);
output1{test++} = 3##4 == (48##8 // 13##4);
output1{test++} = 9##4 == (48##8 %% 13##4);
output1{test++} = 3##4 == (48##8 // 14##4);
output1{test++} = 6##4 == (48##8 %% 14##4);
output1{test++} = 3##4 == (48##8 // 15##4);
output1{test++} = 3##4 == (48##8 %% 15##4);
output1{test++} = 12##4 == (49##8 // 4##4);
output1{test++} = 1##4 == (49##8 %% 4##4);
output1{test++} = 9##4 == (49##8 // 5##4);
output1{test++} = 4##4 == (49##8 %% 5##4);
output1{test++} = 8##4 == (49##8 // 6##4);
output1{test++} = 1##4 == (49##8 %% 6##4);
output1{test++} = 7##4 == (49##8 // 7##4);
output1{test++} = 0##4 == (49##8 %% 7##4);
output1{test++} = 6##4 == (49##8 // 8##4);
output1{test++} = 1##4 == (49##8 %% 8##4);
output1{test++} = 5##4 == (49##8 // 9##4);
output1{test++} = 4##4 == (49##8 %% 9##4);
output1{test++} = 4##4 == (49##8 // 10##4);
output1{test++} = 9##4 == (49##8 %% 10##4);
output1{test++} = 4##4 == (49##8 // 11##4);
output1{test++} = 5##4 == (49##8 %% 11##4);
output1{test++} = 4##4 == (49##8 // 12##4);
output1{test++} = 1##4 == (49##8 %% 12##4);
output1{test++} = 3##4 == (49##8 // 13##4);
output1{test++} = 10##4 == (49##8 %% 13##4);
output1{test++} = 3##4 == (49##8 // 14##4);
output1{test++} = 7##4 == (49##8 %% 14##4);
output1{test++} = 3##4 == (49##8 // 15##4);
output1{test++} = 4##4 == (49##8 %% 15##4);
output1{test++} = 12##4 == (50##8 // 4##4);
output1{test++} = 2##4 == (50##8 %% 4##4);
output1{test++} = 10##4 == (50##8 // 5##4);
output1{test++} = 0##4 == (50##8 %% 5##4);
output1{test++} = 8##4 == (50##8 // 6##4);
output1{test++} = 2##4 == (50##8 %% 6##4);
output1{test++} = 7##4 == (50##8 // 7##4);
output1{test++} = 1##4 == (50##8 %% 7##4);
output1{test++} = 6##4 == (50##8 // 8##4);
output1{test++} = 2##4 == (50##8 %% 8##4);
output1{test++} = 5##4 == (50##8 // 9##4);
output1{test++} = 5##4 == (50##8 %% 9##4);
output1{test++} = 5##4 == (50##8 // 10##4);
output1{test++} = 0##4 == (50##8 %% 10##4);
output1{test++} = 4##4 == (50##8 // 11##4);
output1{test++} = 6##4 == (50##8 %% 11##4);
output1{test++} = 4##4 == (50##8 // 12##4);
output1{test++} = 2##4 == (50##8 %% 12##4);
output1{test++} = 3##4 == (50##8 // 13##4);
output1{test++} = 11##4 == (50##8 %% 13##4);
output1{test++} = 3##4 == (50##8 // 14##4);
output1{test++} = 8##4 == (50##8 %% 14##4);
output1{test++} = 3##4 == (50##8 // 15##4);
output1{test++} = 5##4 == (50##8 %% 15##4);
output1{test++} = 12##4 == (51##8 // 4##4);
output1{test++} = 3##4 == (51##8 %% 4##4);
output1{test++} = 10##4 == (51##8 // 5##4);
output1{test++} = 1##4 == (51##8 %% 5##4);
output1{test++} = 8##4 == (51##8 // 6##4);
output1{test++} = 3##4 == (51##8 %% 6##4);
output1{test++} = 7##4 == (51##8 // 7##4);
output1{test++} = 2##4 == (51##8 %% 7##4);
output1{test++} = 6##4 == (51##8 // 8##4);
output1{test++} = 3##4 == (51##8 %% 8##4);
output1{test++} = 5##4 == (51##8 // 9##4);
output1{test++} = 6##4 == (51##8 %% 9##4);
output1{test++} = 5##4 == (51##8 // 10##4);
output1{test++} = 1##4 == (51##8 %% 10##4);
output1{test++} = 4##4 == (51##8 // 11##4);
output1{test++} = 7##4 == (51##8 %% 11##4);
output1{test++} = 4##4 == (51##8 // 12##4);
output1{test++} = 3##4 == (51##8 %% 12##4);
output1{test++} = 3##4 == (51##8 // 13##4);
output1{test++} = 12##4 == (51##8 %% 13##4);
output1{test++} = 3##4 == (51##8 // 14##4);
output1{test++} = 9##4 == (51##8 %% 14##4);
output1{test++} = 3##4 == (51##8 // 15##4);
output1{test++} = 6##4 == (51##8 %% 15##4);
output1{test++} = 13##4 == (52##8 // 4##4);
output1{test++} = 0##4 == (52##8 %% 4##4);
output1{test++} = 10##4 == (52##8 // 5##4);
output1{test++} = 2##4 == (52##8 %% 5##4);
output1{test++} = 8##4 == (52##8 // 6##4);
output1{test++} = 4##4 == (52##8 %% 6##4);
output1{test++} = 7##4 == (52##8 // 7##4);
output1{test++} = 3##4 == (52##8 %% 7##4);
output1{test++} = 6##4 == (52##8 // 8##4);
output1{test++} = 4##4 == (52##8 %% 8##4);
output1{test++} = 5##4 == (52##8 // 9##4);
output1{test++} = 7##4 == (52##8 %% 9##4);
output1{test++} = 5##4 == (52##8 // 10##4);
output1{test++} = 2##4 == (52##8 %% 10##4);
output1{test++} = 4##4 == (52##8 // 11##4);
output1{test++} = 8##4 == (52##8 %% 11##4);
output1{test++} = 4##4 == (52##8 // 12##4);
output1{test++} = 4##4 == (52##8 %% 12##4);
output1{test++} = 4##4 == (52##8 // 13##4);
output1{test++} = 0##4 == (52##8 %% 13##4);
output1{test++} = 3##4 == (52##8 // 14##4);
output1{test++} = 10##4 == (52##8 %% 14##4);
output1{test++} = 3##4 == (52##8 // 15##4);
output1{test++} = 7##4 == (52##8 %% 15##4);
output1{test++} = 13##4 == (53##8 // 4##4);
output1{test++} = 1##4 == (53##8 %% 4##4);
output1{test++} = 10##4 == (53##8 // 5##4);
output1{test++} = 3##4 == (53##8 %% 5##4);
output1{test++} = 8##4 == (53##8 // 6##4);
output1{test++} = 5##4 == (53##8 %% 6##4);
output1{test++} = 7##4 == (53##8 // 7##4);
output1{test++} = 4##4 == (53##8 %% 7##4);
output1{test++} = 6##4 == (53##8 // 8##4);
output1{test++} = 5##4 == (53##8 %% 8##4);
output1{test++} = 5##4 == (53##8 // 9##4);
output1{test++} = 8##4 == (53##8 %% 9##4);
output1{test++} = 5##4 == (53##8 // 10##4);
output1{test++} = 3##4 == (53##8 %% 10##4);
output1{test++} = 4##4 == (53##8 // 11##4);
output1{test++} = 9##4 == (53##8 %% 11##4);
output1{test++} = 4##4 == (53##8 // 12##4);
output1{test++} = 5##4 == (53##8 %% 12##4);
output1{test++} = 4##4 == (53##8 // 13##4);
output1{test++} = 1##4 == (53##8 %% 13##4);
output1{test++} = 3##4 == (53##8 // 14##4);
output1{test++} = 11##4 == (53##8 %% 14##4);
output1{test++} = 3##4 == (53##8 // 15##4);
output1{test++} = 8##4 == (53##8 %% 15##4);
output1{test++} = 13##4 == (54##8 // 4##4);
output1{test++} = 2##4 == (54##8 %% 4##4);
output1{test++} = 10##4 == (54##8 // 5##4);
output1{test++} = 4##4 == (54##8 %% 5##4);
output1{test++} = 9##4 == (54##8 // 6##4);
output1{test++} = 0##4 == (54##8 %% 6##4);
output1{test++} = 7##4 == (54##8 // 7##4);
output1{test++} = 5##4 == (54##8 %% 7##4);
output1{test++} = 6##4 == (54##8 // 8##4);
output1{test++} = 6##4 == (54##8 %% 8##4);
output1{test++} = 6##4 == (54##8 // 9##4);
output1{test++} = 0##4 == (54##8 %% 9##4);
output1{test++} = 5##4 == (54##8 // 10##4);
output1{test++} = 4##4 == (54##8 %% 10##4);
output1{test++} = 4##4 == (54##8 // 11##4);
output1{test++} = 10##4 == (54##8 %% 11##4);
output1{test++} = 4##4 == (54##8 // 12##4);
output1{test++} = 6##4 == (54##8 %% 12##4);
output1{test++} = 4##4 == (54##8 // 13##4);
output1{test++} = 2##4 == (54##8 %% 13##4);
output1{test++} = 3##4 == (54##8 // 14##4);
output1{test++} = 12##4 == (54##8 %% 14##4);
output1{test++} = 3##4 == (54##8 // 15##4);
output1{test++} = 9##4 == (54##8 %% 15##4);
output1{test++} = 13##4 == (55##8 // 4##4);
output1{test++} = 3##4 == (55##8 %% 4##4);
output1{test++} = 11##4 == (55##8 // 5##4);
output1{test++} = 0##4 == (55##8 %% 5##4);
output1{test++} = 9##4 == (55##8 // 6##4);
output1{test++} = 1##4 == (55##8 %% 6##4);
output1{test++} = 7##4 == (55##8 // 7##4);
output1{test++} = 6##4 == (55##8 %% 7##4);
output1{test++} = 6##4 == (55##8 // 8##4);
output1{test++} = 7##4 == (55##8 %% 8##4);
output1{test++} = 6##4 == (55##8 // 9##4);
output1{test++} = 1##4 == (55##8 %% 9##4);
output1{test++} = 5##4 == (55##8 // 10##4);
output1{test++} = 5##4 == (55##8 %% 10##4);
output1{test++} = 5##4 == (55##8 // 11##4);
output1{test++} = 0##4 == (55##8 %% 11##4);
output1{test++} = 4##4 == (55##8 // 12##4);
output1{test++} = 7##4 == (55##8 %% 12##4);
output1{test++} = 4##4 == (55##8 // 13##4);
output1{test++} = 3##4 == (55##8 %% 13##4);
output1{test++} = 3##4 == (55##8 // 14##4);
output1{test++} = 13##4 == (55##8 %% 14##4);
output1{test++} = 3##4 == (55##8 // 15##4);
output1{test++} = 10##4 == (55##8 %% 15##4);
output1{test++} = 14##4 == (56##8 // 4##4);
output1{test++} = 0##4 == (56##8 %% 4##4);
output1{test++} = 11##4 == (56##8 // 5##4);
output1{test++} = 1##4 == (56##8 %% 5##4);
output1{test++} = 9##4 == (56##8 // 6##4);
output1{test++} = 2##4 == (56##8 %% 6##4);
output1{test++} = 8##4 == (56##8 // 7##4);
output1{test++} = 0##4 == (56##8 %% 7##4);
output1{test++} = 7##4 == (56##8 // 8##4);
output1{test++} = 0##4 == (56##8 %% 8##4);
output1{test++} = 6##4 == (56##8 // 9##4);
output1{test++} = 2##4 == (56##8 %% 9##4);
output1{test++} = 5##4 == (56##8 // 10##4);
output1{test++} = 6##4 == (56##8 %% 10##4);
output1{test++} = 5##4 == (56##8 // 11##4);
output1{test++} = 1##4 == (56##8 %% 11##4);
output1{test++} = 4##4 == (56##8 // 12##4);
output1{test++} = 8##4 == (56##8 %% 12##4);
output1{test++} = 4##4 == (56##8 // 13##4);
output1{test++} = 4##4 == (56##8 %% 13##4);
output1{test++} = 4##4 == (56##8 // 14##4);
output1{test++} = 0##4 == (56##8 %% 14##4);
output1{test++} = 3##4 == (56##8 // 15##4);
output1{test++} = 11##4 == (56##8 %% 15##4);
output1{test++} = 14##4 == (57##8 // 4##4);
output1{test++} = 1##4 == (57##8 %% 4##4);
output1{test++} = 11##4 == (57##8 // 5##4);
output1{test++} = 2##4 == (57##8 %% 5##4);
output1{test++} = 9##4 == (57##8 // 6##4);
output1{test++} = 3##4 == (57##8 %% 6##4);
output1{test++} = 8##4 == (57##8 // 7##4);
output1{test++} = 1##4 == (57##8 %% 7##4);
output1{test++} = 7##4 == (57##8 // 8##4);
output1{test++} = 1##4 == (57##8 %% 8##4);
output1{test++} = 6##4 == (57##8 // 9##4);
output1{test++} = 3##4 == (57##8 %% 9##4);
output1{test++} = 5##4 == (57##8 // 10##4);
output1{test++} = 7##4 == (57##8 %% 10##4);
output1{test++} = 5##4 == (57##8 // 11##4);
output1{test++} = 2##4 == (57##8 %% 11##4);
output1{test++} = 4##4 == (57##8 // 12##4);
output1{test++} = 9##4 == (57##8 %% 12##4);
output1{test++} = 4##4 == (57##8 // 13##4);
output1{test++} = 5##4 == (57##8 %% 13##4);
output1{test++} = 4##4 == (57##8 // 14##4);
output1{test++} = 1##4 == (57##8 %% 14##4);
output1{test++} = 3##4 == (57##8 // 15##4);
output1{test++} = 12##4 == (57##8 %% 15##4);
output1{test++} = 14##4 == (58##8 // 4##4);
output1{test++} = 2##4 == (58##8 %% 4##4);
output1{test++} = 11##4 == (58##8 // 5##4);
output1{test++} = 3##4 == (58##8 %% 5##4);
output1{test++} = 9##4 == (58##8 // 6##4);
output1{test++} = 4##4 == (58##8 %% 6##4);
output1{test++} = 8##4 == (58##8 // 7##4);
output1{test++} = 2##4 == (58##8 %% 7##4);
output1{test++} = 7##4 == (58##8 // 8##4);
output1{test++} = 2##4 == (58##8 %% 8##4);
output1{test++} = 6##4 == (58##8 // 9##4);
output1{test++} = 4##4 == (58##8 %% 9##4);
output1{test++} = 5##4 == (58##8 // 10##4);
output1{test++} = 8##4 == (58##8 %% 10##4);
output1{test++} = 5##4 == (58##8 // 11##4);
output1{test++} = 3##4 == (58##8 %% 11##4);
output1{test++} = 4##4 == (58##8 // 12##4);
output1{test++} = 10##4 == (58##8 %% 12##4);
output1{test++} = 4##4 == (58##8 // 13##4);
output1{test++} = 6##4 == (58##8 %% 13##4);
output1{test++} = 4##4 == (58##8 // 14##4);
output1{test++} = 2##4 == (58##8 %% 14##4);
output1{test++} = 3##4 == (58##8 // 15##4);
output1{test++} = 13##4 == (58##8 %% 15##4);
output1{test++} = 14##4 == (59##8 // 4##4);
output1{test++} = 3##4 == (59##8 %% 4##4);
output1{test++} = 11##4 == (59##8 // 5##4);
output1{test++} = 4##4 == (59##8 %% 5##4);
output1{test++} = 9##4 == (59##8 // 6##4);
output1{test++} = 5##4 == (59##8 %% 6##4);
output1{test++} = 8##4 == (59##8 // 7##4);
output1{test++} = 3##4 == (59##8 %% 7##4);
output1{test++} = 7##4 == (59##8 // 8##4);
output1{test++} = 3##4 == (59##8 %% 8##4);
output1{test++} = 6##4 == (59##8 // 9##4);
output1{test++} = 5##4 == (59##8 %% 9##4);
output1{test++} = 5##4 == (59##8 // 10##4);
output1{test++} = 9##4 == (59##8 %% 10##4);
output1{test++} = 5##4 == (59##8 // 11##4);
output1{test++} = 4##4 == (59##8 %% 11##4);
output1{test++} = 4##4 == (59##8 // 12##4);
output1{test++} = 11##4 == (59##8 %% 12##4);
output1{test++} = 4##4 == (59##8 // 13##4);
output1{test++} = 7##4 == (59##8 %% 13##4);
output1{test++} = 4##4 == (59##8 // 14##4);
output1{test++} = 3##4 == (59##8 %% 14##4);
output1{test++} = 3##4 == (59##8 // 15##4);
output1{test++} = 14##4 == (59##8 %% 15##4);
output1{test++} = 15##4 == (60##8 // 4##4);
output1{test++} = 0##4 == (60##8 %% 4##4);
output1{test++} = 12##4 == (60##8 // 5##4);
output1{test++} = 0##4 == (60##8 %% 5##4);
output1{test++} = 10##4 == (60##8 // 6##4);
output1{test++} = 0##4 == (60##8 %% 6##4);
output1{test++} = 8##4 == (60##8 // 7##4);
output1{test++} = 4##4 == (60##8 %% 7##4);
output1{test++} = 7##4 == (60##8 // 8##4);
output1{test++} = 4##4 == (60##8 %% 8##4);
output1{test++} = 6##4 == (60##8 // 9##4);
output1{test++} = 6##4 == (60##8 %% 9##4);
output1{test++} = 6##4 == (60##8 // 10##4);
output1{test++} = 0##4 == (60##8 %% 10##4);
output1{test++} = 5##4 == (60##8 // 11##4);
output1{test++} = 5##4 == (60##8 %% 11##4);
output1{test++} = 5##4 == (60##8 // 12##4);
output1{test++} = 0##4 == (60##8 %% 12##4);
output1{test++} = 4##4 == (60##8 // 13##4);
output1{test++} = 8##4 == (60##8 %% 13##4);
output1{test++} = 4##4 == (60##8 // 14##4);
output1{test++} = 4##4 == (60##8 %% 14##4);
output1{test++} = 4##4 == (60##8 // 15##4);
output1{test++} = 0##4 == (60##8 %% 15##4);
output1{test++} = 15##4 == (61##8 // 4##4);
output1{test++} = 1##4 == (61##8 %% 4##4);
output1{test++} = 12##4 == (61##8 // 5##4);
output1{test++} = 1##4 == (61##8 %% 5##4);
output1{test++} = 10##4 == (61##8 // 6##4);
output1{test++} = 1##4 == (61##8 %% 6##4);
output1{test++} = 8##4 == (61##8 // 7##4);
output1{test++} = 5##4 == (61##8 %% 7##4);
output1{test++} = 7##4 == (61##8 // 8##4);
output1{test++} = 5##4 == (61##8 %% 8##4);
output1{test++} = 6##4 == (61##8 // 9##4);
output1{test++} = 7##4 == (61##8 %% 9##4);
output1{test++} = 6##4 == (61##8 // 10##4);
output1{test++} = 1##4 == (61##8 %% 10##4);
output1{test++} = 5##4 == (61##8 // 11##4);
output1{test++} = 6##4 == (61##8 %% 11##4);
output1{test++} = 5##4 == (61##8 // 12##4);
output1{test++} = 1##4 == (61##8 %% 12##4);
output1{test++} = 4##4 == (61##8 // 13##4);
output1{test++} = 9##4 == (61##8 %% 13##4);
output1{test++} = 4##4 == (61##8 // 14##4);
output1{test++} = 5##4 == (61##8 %% 14##4);
output1{test++} = 4##4 == (61##8 // 15##4);
output1{test++} = 1##4 == (61##8 %% 15##4);
output1{test++} = 15##4 == (62##8 // 4##4);
output1{test++} = 2##4 == (62##8 %% 4##4);
output1{test++} = 12##4 == (62##8 // 5##4);
output1{test++} = 2##4 == (62##8 %% 5##4);
output1{test++} = 10##4 == (62##8 // 6##4);
output1{test++} = 2##4 == (62##8 %% 6##4);
output1{test++} = 8##4 == (62##8 // 7##4);
output1{test++} = 6##4 == (62##8 %% 7##4);
output1{test++} = 7##4 == (62##8 // 8##4);
output1{test++} = 6##4 == (62##8 %% 8##4);
output1{test++} = 6##4 == (62##8 // 9##4);
output1{test++} = 8##4 == (62##8 %% 9##4);
output1{test++} = 6##4 == (62##8 // 10##4);
output1{test++} = 2##4 == (62##8 %% 10##4);
output1{test++} = 5##4 == (62##8 // 11##4);
output1{test++} = 7##4 == (62##8 %% 11##4);
output1{test++} = 5##4 == (62##8 // 12##4);
output1{test++} = 2##4 == (62##8 %% 12##4);
output1{test++} = 4##4 == (62##8 // 13##4);
output1{test++} = 10##4 == (62##8 %% 13##4);
output1{test++} = 4##4 == (62##8 // 14##4);
output1{test++} = 6##4 == (62##8 %% 14##4);
output1{test++} = 4##4 == (62##8 // 15##4);
output1{test++} = 2##4 == (62##8 %% 15##4);
output1{test++} = 15##4 == (63##8 // 4##4);
output1{test++} = 3##4 == (63##8 %% 4##4);
output1{test++} = 12##4 == (63##8 // 5##4);
output1{test++} = 3##4 == (63##8 %% 5##4);
output1{test++} = 10##4 == (63##8 // 6##4);
output1{test++} = 3##4 == (63##8 %% 6##4);
output1{test++} = 9##4 == (63##8 // 7##4);
output1{test++} = 0##4 == (63##8 %% 7##4);
output1{test++} = 7##4 == (63##8 // 8##4);
output1{test++} = 7##4 == (63##8 %% 8##4);
output1{test++} = 7##4 == (63##8 // 9##4);
output1{test++} = 0##4 == (63##8 %% 9##4);
output1{test++} = 6##4 == (63##8 // 10##4);
output1{test++} = 3##4 == (63##8 %% 10##4);
output1{test++} = 5##4 == (63##8 // 11##4);
output1{test++} = 8##4 == (63##8 %% 11##4);
output1{test++} = 5##4 == (63##8 // 12##4);
output1{test++} = 3##4 == (63##8 %% 12##4);
output1{test++} = 4##4 == (63##8 // 13##4);
output1{test++} = 11##4 == (63##8 %% 13##4);
output1{test++} = 4##4 == (63##8 // 14##4);
output1{test++} = 7##4 == (63##8 %% 14##4);
output1{test++} = 4##4 == (63##8 // 15##4);
output1{test++} = 3##4 == (63##8 %% 15##4);
output1{test++} = 12##4 == (64##8 // 5##4);
output1{test++} = 4##4 == (64##8 %% 5##4);
output1{test++} = 10##4 == (64##8 // 6##4);
output1{test++} = 4##4 == (64##8 %% 6##4);
output1{test++} = 9##4 == (64##8 // 7##4);
output1{test++} = 1##4 == (64##8 %% 7##4);
output1{test++} = 8##4 == (64##8 // 8##4);
output1{test++} = 0##4 == (64##8 %% 8##4);
output1{test++} = 7##4 == (64##8 // 9##4);
output1{test++} = 1##4 == (64##8 %% 9##4);
output1{test++} = 6##4 == (64##8 // 10##4);
output1{test++} = 4##4 == (64##8 %% 10##4);
output1{test++} = 5##4 == (64##8 // 11##4);
output1{test++} = 9##4 == (64##8 %% 11##4);
output1{test++} = 5##4 == (64##8 // 12##4);
output1{test++} = 4##4 == (64##8 %% 12##4);
output1{test++} = 4##4 == (64##8 // 13##4);
output1{test++} = 12##4 == (64##8 %% 13##4);
output1{test++} = 4##4 == (64##8 // 14##4);
output1{test++} = 8##4 == (64##8 %% 14##4);
output1{test++} = 4##4 == (64##8 // 15##4);
output1{test++} = 4##4 == (64##8 %% 15##4);
output1{test++} = 13##4 == (65##8 // 5##4);
output1{test++} = 0##4 == (65##8 %% 5##4);
output1{test++} = 10##4 == (65##8 // 6##4);
output1{test++} = 5##4 == (65##8 %% 6##4);
output1{test++} = 9##4 == (65##8 // 7##4);
output1{test++} = 2##4 == (65##8 %% 7##4);
output1{test++} = 8##4 == (65##8 // 8##4);
output1{test++} = 1##4 == (65##8 %% 8##4);
output1{test++} = 7##4 == (65##8 // 9##4);
output1{test++} = 2##4 == (65##8 %% 9##4);
output1{test++} = 6##4 == (65##8 // 10##4);
output1{test++} = 5##4 == (65##8 %% 10##4);
output1{test++} = 5##4 == (65##8 // 11##4);
output1{test++} = 10##4 == (65##8 %% 11##4);
output1{test++} = 5##4 == (65##8 // 12##4);
output1{test++} = 5##4 == (65##8 %% 12##4);
output1{test++} = 5##4 == (65##8 // 13##4);
output1{test++} = 0##4 == (65##8 %% 13##4);
output1{test++} = 4##4 == (65##8 // 14##4);
output1{test++} = 9##4 == (65##8 %% 14##4);
output1{test++} = 4##4 == (65##8 // 15##4);
output1{test++} = 5##4 == (65##8 %% 15##4);
output1{test++} = 13##4 == (66##8 // 5##4);
output1{test++} = 1##4 == (66##8 %% 5##4);
output1{test++} = 11##4 == (66##8 // 6##4);
output1{test++} = 0##4 == (66##8 %% 6##4);
output1{test++} = 9##4 == (66##8 // 7##4);
output1{test++} = 3##4 == (66##8 %% 7##4);
output1{test++} = 8##4 == (66##8 // 8##4);
output1{test++} = 2##4 == (66##8 %% 8##4);
output1{test++} = 7##4 == (66##8 // 9##4);
output1{test++} = 3##4 == (66##8 %% 9##4);
output1{test++} = 6##4 == (66##8 // 10##4);
output1{test++} = 6##4 == (66##8 %% 10##4);
output1{test++} = 6##4 == (66##8 // 11##4);
output1{test++} = 0##4 == (66##8 %% 11##4);
output1{test++} = 5##4 == (66##8 // 12##4);
output1{test++} = 6##4 == (66##8 %% 12##4);
output1{test++} = 5##4 == (66##8 // 13##4);
output1{test++} = 1##4 == (66##8 %% 13##4);
output1{test++} = 4##4 == (66##8 // 14##4);
output1{test++} = 10##4 == (66##8 %% 14##4);
output1{test++} = 4##4 == (66##8 // 15##4);
output1{test++} = 6##4 == (66##8 %% 15##4);
output1{test++} = 13##4 == (67##8 // 5##4);
output1{test++} = 2##4 == (67##8 %% 5##4);
output1{test++} = 11##4 == (67##8 // 6##4);
output1{test++} = 1##4 == (67##8 %% 6##4);
output1{test++} = 9##4 == (67##8 // 7##4);
output1{test++} = 4##4 == (67##8 %% 7##4);
output1{test++} = 8##4 == (67##8 // 8##4);
output1{test++} = 3##4 == (67##8 %% 8##4);
output1{test++} = 7##4 == (67##8 // 9##4);
output1{test++} = 4##4 == (67##8 %% 9##4);
output1{test++} = 6##4 == (67##8 // 10##4);
output1{test++} = 7##4 == (67##8 %% 10##4);
output1{test++} = 6##4 == (67##8 // 11##4);
output1{test++} = 1##4 == (67##8 %% 11##4);
output1{test++} = 5##4 == (67##8 // 12##4);
output1{test++} = 7##4 == (67##8 %% 12##4);
output1{test++} = 5##4 == (67##8 // 13##4);
output1{test++} = 2##4 == (67##8 %% 13##4);
output1{test++} = 4##4 == (67##8 // 14##4);
output1{test++} = 11##4 == (67##8 %% 14##4);
output1{test++} = 4##4 == (67##8 // 15##4);
output1{test++} = 7##4 == (67##8 %% 15##4);
output1{test++} = 13##4 == (68##8 // 5##4);
output1{test++} = 3##4 == (68##8 %% 5##4);
output1{test++} = 11##4 == (68##8 // 6##4);
output1{test++} = 2##4 == (68##8 %% 6##4);
output1{test++} = 9##4 == (68##8 // 7##4);
output1{test++} = 5##4 == (68##8 %% 7##4);
output1{test++} = 8##4 == (68##8 // 8##4);
output1{test++} = 4##4 == (68##8 %% 8##4);
output1{test++} = 7##4 == (68##8 // 9##4);
output1{test++} = 5##4 == (68##8 %% 9##4);
output1{test++} = 6##4 == (68##8 // 10##4);
output1{test++} = 8##4 == (68##8 %% 10##4);
output1{test++} = 6##4 == (68##8 // 11##4);
output1{test++} = 2##4 == (68##8 %% 11##4);
output1{test++} = 5##4 == (68##8 // 12##4);
output1{test++} = 8##4 == (68##8 %% 12##4);
output1{test++} = 5##4 == (68##8 // 13##4);
output1{test++} = 3##4 == (68##8 %% 13##4);
output1{test++} = 4##4 == (68##8 // 14##4);
output1{test++} = 12##4 == (68##8 %% 14##4);
output1{test++} = 4##4 == (68##8 // 15##4);
output1{test++} = 8##4 == (68##8 %% 15##4);
output1{test++} = 13##4 == (69##8 // 5##4);
output1{test++} = 4##4 == (69##8 %% 5##4);
output1{test++} = 11##4 == (69##8 // 6##4);
output1{test++} = 3##4 == (69##8 %% 6##4);
output1{test++} = 9##4 == (69##8 // 7##4);
output1{test++} = 6##4 == (69##8 %% 7##4);
output1{test++} = 8##4 == (69##8 // 8##4);
output1{test++} = 5##4 == (69##8 %% 8##4);
output1{test++} = 7##4 == (69##8 // 9##4);
output1{test++} = 6##4 == (69##8 %% 9##4);
output1{test++} = 6##4 == (69##8 // 10##4);
output1{test++} = 9##4 == (69##8 %% 10##4);
output1{test++} = 6##4 == (69##8 // 11##4);
output1{test++} = 3##4 == (69##8 %% 11##4);
output1{test++} = 5##4 == (69##8 // 12##4);
output1{test++} = 9##4 == (69##8 %% 12##4);
output1{test++} = 5##4 == (69##8 // 13##4);
output1{test++} = 4##4 == (69##8 %% 13##4);
output1{test++} = 4##4 == (69##8 // 14##4);
output1{test++} = 13##4 == (69##8 %% 14##4);
output1{test++} = 4##4 == (69##8 // 15##4);
output1{test++} = 9##4 == (69##8 %% 15##4);
output1{test++} = 14##4 == (70##8 // 5##4);
output1{test++} = 0##4 == (70##8 %% 5##4);
output1{test++} = 11##4 == (70##8 // 6##4);
output1{test++} = 4##4 == (70##8 %% 6##4);
output1{test++} = 10##4 == (70##8 // 7##4);
output1{test++} = 0##4 == (70##8 %% 7##4);
output1{test++} = 8##4 == (70##8 // 8##4);
output1{test++} = 6##4 == (70##8 %% 8##4);
output1{test++} = 7##4 == (70##8 // 9##4);
output1{test++} = 7##4 == (70##8 %% 9##4);
output1{test++} = 7##4 == (70##8 // 10##4);
output1{test++} = 0##4 == (70##8 %% 10##4);
output1{test++} = 6##4 == (70##8 // 11##4);
output1{test++} = 4##4 == (70##8 %% 11##4);
output1{test++} = 5##4 == (70##8 // 12##4);
output1{test++} = 10##4 == (70##8 %% 12##4);
output1{test++} = 5##4 == (70##8 // 13##4);
output1{test++} = 5##4 == (70##8 %% 13##4);
output1{test++} = 5##4 == (70##8 // 14##4);
output1{test++} = 0##4 == (70##8 %% 14##4);
output1{test++} = 4##4 == (70##8 // 15##4);
output1{test++} = 10##4 == (70##8 %% 15##4);
output1{test++} = 14##4 == (71##8 // 5##4);
output1{test++} = 1##4 == (71##8 %% 5##4);
output1{test++} = 11##4 == (71##8 // 6##4);
output1{test++} = 5##4 == (71##8 %% 6##4);
output1{test++} = 10##4 == (71##8 // 7##4);
output1{test++} = 1##4 == (71##8 %% 7##4);
output1{test++} = 8##4 == (71##8 // 8##4);
output1{test++} = 7##4 == (71##8 %% 8##4);
output1{test++} = 7##4 == (71##8 // 9##4);
output1{test++} = 8##4 == (71##8 %% 9##4);
output1{test++} = 7##4 == (71##8 // 10##4);
output1{test++} = 1##4 == (71##8 %% 10##4);
output1{test++} = 6##4 == (71##8 // 11##4);
output1{test++} = 5##4 == (71##8 %% 11##4);
output1{test++} = 5##4 == (71##8 // 12##4);
output1{test++} = 11##4 == (71##8 %% 12##4);
output1{test++} = 5##4 == (71##8 // 13##4);
output1{test++} = 6##4 == (71##8 %% 13##4);
output1{test++} = 5##4 == (71##8 // 14##4);
output1{test++} = 1##4 == (71##8 %% 14##4);
output1{test++} = 4##4 == (71##8 // 15##4);
output1{test++} = 11##4 == (71##8 %% 15##4);
output1{test++} = 14##4 == (72##8 // 5##4);
output1{test++} = 2##4 == (72##8 %% 5##4);
output1{test++} = 12##4 == (72##8 // 6##4);
output1{test++} = 0##4 == (72##8 %% 6##4);
output1{test++} = 10##4 == (72##8 // 7##4);
output1{test++} = 2##4 == (72##8 %% 7##4);
output1{test++} = 9##4 == (72##8 // 8##4);
output1{test++} = 0##4 == (72##8 %% 8##4);
output1{test++} = 8##4 == (72##8 // 9##4);
output1{test++} = 0##4 == (72##8 %% 9##4);
output1{test++} = 7##4 == (72##8 // 10##4);
output1{test++} = 2##4 == (72##8 %% 10##4);
output1{test++} = 6##4 == (72##8 // 11##4);
output1{test++} = 6##4 == (72##8 %% 11##4);
output1{test++} = 6##4 == (72##8 // 12##4);
output1{test++} = 0##4 == (72##8 %% 12##4);
output1{test++} = 5##4 == (72##8 // 13##4);
output1{test++} = 7##4 == (72##8 %% 13##4);
output1{test++} = 5##4 == (72##8 // 14##4);
output1{test++} = 2##4 == (72##8 %% 14##4);
output1{test++} = 4##4 == (72##8 // 15##4);
output1{test++} = 12##4 == (72##8 %% 15##4);
output1{test++} = 14##4 == (73##8 // 5##4);
output1{test++} = 3##4 == (73##8 %% 5##4);
output1{test++} = 12##4 == (73##8 // 6##4);
output1{test++} = 1##4 == (73##8 %% 6##4);
output1{test++} = 10##4 == (73##8 // 7##4);
output1{test++} = 3##4 == (73##8 %% 7##4);
output1{test++} = 9##4 == (73##8 // 8##4);
output1{test++} = 1##4 == (73##8 %% 8##4);
output1{test++} = 8##4 == (73##8 // 9##4);
output1{test++} = 1##4 == (73##8 %% 9##4);
output1{test++} = 7##4 == (73##8 // 10##4);
output1{test++} = 3##4 == (73##8 %% 10##4);
output1{test++} = 6##4 == (73##8 // 11##4);
output1{test++} = 7##4 == (73##8 %% 11##4);
output1{test++} = 6##4 == (73##8 // 12##4);
output1{test++} = 1##4 == (73##8 %% 12##4);
output1{test++} = 5##4 == (73##8 // 13##4);
output1{test++} = 8##4 == (73##8 %% 13##4);
output1{test++} = 5##4 == (73##8 // 14##4);
output1{test++} = 3##4 == (73##8 %% 14##4);
output1{test++} = 4##4 == (73##8 // 15##4);
output1{test++} = 13##4 == (73##8 %% 15##4);
output1{test++} = 14##4 == (74##8 // 5##4);
output1{test++} = 4##4 == (74##8 %% 5##4);
output1{test++} = 12##4 == (74##8 // 6##4);
output1{test++} = 2##4 == (74##8 %% 6##4);
output1{test++} = 10##4 == (74##8 // 7##4);
output1{test++} = 4##4 == (74##8 %% 7##4);
output1{test++} = 9##4 == (74##8 // 8##4);
output1{test++} = 2##4 == (74##8 %% 8##4);
output1{test++} = 8##4 == (74##8 // 9##4);
output1{test++} = 2##4 == (74##8 %% 9##4);
output1{test++} = 7##4 == (74##8 // 10##4);
output1{test++} = 4##4 == (74##8 %% 10##4);
output1{test++} = 6##4 == (74##8 // 11##4);
output1{test++} = 8##4 == (74##8 %% 11##4);
output1{test++} = 6##4 == (74##8 // 12##4);
output1{test++} = 2##4 == (74##8 %% 12##4);
output1{test++} = 5##4 == (74##8 // 13##4);
output1{test++} = 9##4 == (74##8 %% 13##4);
output1{test++} = 5##4 == (74##8 // 14##4);
output1{test++} = 4##4 == (74##8 %% 14##4);
output1{test++} = 4##4 == (74##8 // 15##4);
output1{test++} = 14##4 == (74##8 %% 15##4);
output1{test++} = 15##4 == (75##8 // 5##4);
output1{test++} = 0##4 == (75##8 %% 5##4);
output1{test++} = 12##4 == (75##8 // 6##4);
output1{test++} = 3##4 == (75##8 %% 6##4);
output1{test++} = 10##4 == (75##8 // 7##4);
output1{test++} = 5##4 == (75##8 %% 7##4);
output1{test++} = 9##4 == (75##8 // 8##4);
output1{test++} = 3##4 == (75##8 %% 8##4);
output1{test++} = 8##4 == (75##8 // 9##4);
output1{test++} = 3##4 == (75##8 %% 9##4);
output1{test++} = 7##4 == (75##8 // 10##4);
output1{test++} = 5##4 == (75##8 %% 10##4);
output1{test++} = 6##4 == (75##8 // 11##4);
output1{test++} = 9##4 == (75##8 %% 11##4);
output1{test++} = 6##4 == (75##8 // 12##4);
output1{test++} = 3##4 == (75##8 %% 12##4);
output1{test++} = 5##4 == (75##8 // 13##4);
output1{test++} = 10##4 == (75##8 %% 13##4);
output1{test++} = 5##4 == (75##8 // 14##4);
output1{test++} = 5##4 == (75##8 %% 14##4);
output1{test++} = 5##4 == (75##8 // 15##4);
output1{test++} = 0##4 == (75##8 %% 15##4);
output1{test++} = 15##4 == (76##8 // 5##4);
output1{test++} = 1##4 == (76##8 %% 5##4);
output1{test++} = 12##4 == (76##8 // 6##4);
output1{test++} = 4##4 == (76##8 %% 6##4);
output1{test++} = 10##4 == (76##8 // 7##4);
output1{test++} = 6##4 == (76##8 %% 7##4);
output1{test++} = 9##4 == (76##8 // 8##4);
output1{test++} = 4##4 == (76##8 %% 8##4);
output1{test++} = 8##4 == (76##8 // 9##4);
output1{test++} = 4##4 == (76##8 %% 9##4);
output1{test++} = 7##4 == (76##8 // 10##4);
output1{test++} = 6##4 == (76##8 %% 10##4);
output1{test++} = 6##4 == (76##8 // 11##4);
output1{test++} = 10##4 == (76##8 %% 11##4);
output1{test++} = 6##4 == (76##8 // 12##4);
output1{test++} = 4##4 == (76##8 %% 12##4);
output1{test++} = 5##4 == (76##8 // 13##4);
output1{test++} = 11##4 == (76##8 %% 13##4);
output1{test++} = 5##4 == (76##8 // 14##4);
output1{test++} = 6##4 == (76##8 %% 14##4);
output1{test++} = 5##4 == (76##8 // 15##4);
output1{test++} = 1##4 == (76##8 %% 15##4);
output1{test++} = 15##4 == (77##8 // 5##4);
output1{test++} = 2##4 == (77##8 %% 5##4);
output1{test++} = 12##4 == (77##8 // 6##4);
output1{test++} = 5##4 == (77##8 %% 6##4);
output1{test++} = 11##4 == (77##8 // 7##4);
output1{test++} = 0##4 == (77##8 %% 7##4);
output1{test++} = 9##4 == (77##8 // 8##4);
output1{test++} = 5##4 == (77##8 %% 8##4);
output1{test++} = 8##4 == (77##8 // 9##4);
output1{test++} = 5##4 == (77##8 %% 9##4);
output1{test++} = 7##4 == (77##8 // 10##4);
output1{test++} = 7##4 == (77##8 %% 10##4);
output1{test++} = 7##4 == (77##8 // 11##4);
output1{test++} = 0##4 == (77##8 %% 11##4);
output1{test++} = 6##4 == (77##8 // 12##4);
output1{test++} = 5##4 == (77##8 %% 12##4);
output1{test++} = 5##4 == (77##8 // 13##4);
output1{test++} = 12##4 == (77##8 %% 13##4);
output1{test++} = 5##4 == (77##8 // 14##4);
output1{test++} = 7##4 == (77##8 %% 14##4);
output1{test++} = 5##4 == (77##8 // 15##4);
output1{test++} = 2##4 == (77##8 %% 15##4);
output1{test++} = 15##4 == (78##8 // 5##4);
output1{test++} = 3##4 == (78##8 %% 5##4);
output1{test++} = 13##4 == (78##8 // 6##4);
output1{test++} = 0##4 == (78##8 %% 6##4);
output1{test++} = 11##4 == (78##8 // 7##4);
output1{test++} = 1##4 == (78##8 %% 7##4);
output1{test++} = 9##4 == (78##8 // 8##4);
output1{test++} = 6##4 == (78##8 %% 8##4);
output1{test++} = 8##4 == (78##8 // 9##4);
output1{test++} = 6##4 == (78##8 %% 9##4);
output1{test++} = 7##4 == (78##8 // 10##4);
output1{test++} = 8##4 == (78##8 %% 10##4);
output1{test++} = 7##4 == (78##8 // 11##4);
output1{test++} = 1##4 == (78##8 %% 11##4);
output1{test++} = 6##4 == (78##8 // 12##4);
output1{test++} = 6##4 == (78##8 %% 12##4);
output1{test++} = 6##4 == (78##8 // 13##4);
output1{test++} = 0##4 == (78##8 %% 13##4);
output1{test++} = 5##4 == (78##8 // 14##4);
output1{test++} = 8##4 == (78##8 %% 14##4);
output1{test++} = 5##4 == (78##8 // 15##4);
output1{test++} = 3##4 == (78##8 %% 15##4);
output1{test++} = 15##4 == (79##8 // 5##4);
output1{test++} = 4##4 == (79##8 %% 5##4);
output1{test++} = 13##4 == (79##8 // 6##4);
output1{test++} = 1##4 == (79##8 %% 6##4);
output1{test++} = 11##4 == (79##8 // 7##4);
output1{test++} = 2##4 == (79##8 %% 7##4);
output1{test++} = 9##4 == (79##8 // 8##4);
output1{test++} = 7##4 == (79##8 %% 8##4);
output1{test++} = 8##4 == (79##8 // 9##4);
output1{test++} = 7##4 == (79##8 %% 9##4);
output1{test++} = 7##4 == (79##8 // 10##4);
output1{test++} = 9##4 == (79##8 %% 10##4);
output1{test++} = 7##4 == (79##8 // 11##4);
output1{test++} = 2##4 == (79##8 %% 11##4);
output1{test++} = 6##4 == (79##8 // 12##4);
output1{test++} = 7##4 == (79##8 %% 12##4);
output1{test++} = 6##4 == (79##8 // 13##4);
output1{test++} = 1##4 == (79##8 %% 13##4);
output1{test++} = 5##4 == (79##8 // 14##4);
output1{test++} = 9##4 == (79##8 %% 14##4);
output1{test++} = 5##4 == (79##8 // 15##4);
output1{test++} = 4##4 == (79##8 %% 15##4);
output1{test++} = 13##4 == (80##8 // 6##4);
output1{test++} = 2##4 == (80##8 %% 6##4);
output1{test++} = 11##4 == (80##8 // 7##4);
output1{test++} = 3##4 == (80##8 %% 7##4);
output1{test++} = 10##4 == (80##8 // 8##4);
output1{test++} = 0##4 == (80##8 %% 8##4);
output1{test++} = 8##4 == (80##8 // 9##4);
output1{test++} = 8##4 == (80##8 %% 9##4);
output1{test++} = 8##4 == (80##8 // 10##4);
output1{test++} = 0##4 == (80##8 %% 10##4);
output1{test++} = 7##4 == (80##8 // 11##4);
output1{test++} = 3##4 == (80##8 %% 11##4);
output1{test++} = 6##4 == (80##8 // 12##4);
output1{test++} = 8##4 == (80##8 %% 12##4);
output1{test++} = 6##4 == (80##8 // 13##4);
output1{test++} = 2##4 == (80##8 %% 13##4);
output1{test++} = 5##4 == (80##8 // 14##4);
output1{test++} = 10##4 == (80##8 %% 14##4);
output1{test++} = 5##4 == (80##8 // 15##4);
output1{test++} = 5##4 == (80##8 %% 15##4);
output1{test++} = 13##4 == (81##8 // 6##4);
output1{test++} = 3##4 == (81##8 %% 6##4);
output1{test++} = 11##4 == (81##8 // 7##4);
output1{test++} = 4##4 == (81##8 %% 7##4);
output1{test++} = 10##4 == (81##8 // 8##4);
output1{test++} = 1##4 == (81##8 %% 8##4);
output1{test++} = 9##4 == (81##8 // 9##4);
output1{test++} = 0##4 == (81##8 %% 9##4);
output1{test++} = 8##4 == (81##8 // 10##4);
output1{test++} = 1##4 == (81##8 %% 10##4);
output1{test++} = 7##4 == (81##8 // 11##4);
output1{test++} = 4##4 == (81##8 %% 11##4);
output1{test++} = 6##4 == (81##8 // 12##4);
output1{test++} = 9##4 == (81##8 %% 12##4);
output1{test++} = 6##4 == (81##8 // 13##4);
output1{test++} = 3##4 == (81##8 %% 13##4);
output1{test++} = 5##4 == (81##8 // 14##4);
output1{test++} = 11##4 == (81##8 %% 14##4);
output1{test++} = 5##4 == (81##8 // 15##4);
output1{test++} = 6##4 == (81##8 %% 15##4);
output1{test++} = 13##4 == (82##8 // 6##4);
output1{test++} = 4##4 == (82##8 %% 6##4);
output1{test++} = 11##4 == (82##8 // 7##4);
output1{test++} = 5##4 == (82##8 %% 7##4);
output1{test++} = 10##4 == (82##8 // 8##4);
output1{test++} = 2##4 == (82##8 %% 8##4);
output1{test++} = 9##4 == (82##8 // 9##4);
output1{test++} = 1##4 == (82##8 %% 9##4);
output1{test++} = 8##4 == (82##8 // 10##4);
output1{test++} = 2##4 == (82##8 %% 10##4);
output1{test++} = 7##4 == (82##8 // 11##4);
output1{test++} = 5##4 == (82##8 %% 11##4);
output1{test++} = 6##4 == (82##8 // 12##4);
output1{test++} = 10##4 == (82##8 %% 12##4);
output1{test++} = 6##4 == (82##8 // 13##4);
output1{test++} = 4##4 == (82##8 %% 13##4);
output1{test++} = 5##4 == (82##8 // 14##4);
output1{test++} = 12##4 == (82##8 %% 14##4);
output1{test++} = 5##4 == (82##8 // 15##4);
output1{test++} = 7##4 == (82##8 %% 15##4);
output1{test++} = 13##4 == (83##8 // 6##4);
output1{test++} = 5##4 == (83##8 %% 6##4);
output1{test++} = 11##4 == (83##8 // 7##4);
output1{test++} = 6##4 == (83##8 %% 7##4);
output1{test++} = 10##4 == (83##8 // 8##4);
output1{test++} = 3##4 == (83##8 %% 8##4);
output1{test++} = 9##4 == (83##8 // 9##4);
output1{test++} = 2##4 == (83##8 %% 9##4);
output1{test++} = 8##4 == (83##8 // 10##4);
output1{test++} = 3##4 == (83##8 %% 10##4);
output1{test++} = 7##4 == (83##8 // 11##4);
output1{test++} = 6##4 == (83##8 %% 11##4);
output1{test++} = 6##4 == (83##8 // 12##4);
output1{test++} = 11##4 == (83##8 %% 12##4);
output1{test++} = 6##4 == (83##8 // 13##4);
output1{test++} = 5##4 == (83##8 %% 13##4);
output1{test++} = 5##4 == (83##8 // 14##4);
output1{test++} = 13##4 == (83##8 %% 14##4);
output1{test++} = 5##4 == (83##8 // 15##4);
output1{test++} = 8##4 == (83##8 %% 15##4);
output1{test++} = 14##4 == (84##8 // 6##4);
output1{test++} = 0##4 == (84##8 %% 6##4);
output1{test++} = 12##4 == (84##8 // 7##4);
output1{test++} = 0##4 == (84##8 %% 7##4);
output1{test++} = 10##4 == (84##8 // 8##4);
output1{test++} = 4##4 == (84##8 %% 8##4);
output1{test++} = 9##4 == (84##8 // 9##4);
output1{test++} = 3##4 == (84##8 %% 9##4);
output1{test++} = 8##4 == (84##8 // 10##4);
output1{test++} = 4##4 == (84##8 %% 10##4);
output1{test++} = 7##4 == (84##8 // 11##4);
output1{test++} = 7##4 == (84##8 %% 11##4);
output1{test++} = 7##4 == (84##8 // 12##4);
output1{test++} = 0##4 == (84##8 %% 12##4);
output1{test++} = 6##4 == (84##8 // 13##4);
output1{test++} = 6##4 == (84##8 %% 13##4);
output1{test++} = 6##4 == (84##8 // 14##4);
output1{test++} = 0##4 == (84##8 %% 14##4);
output1{test++} = 5##4 == (84##8 // 15##4);
output1{test++} = 9##4 == (84##8 %% 15##4);
output1{test++} = 14##4 == (85##8 // 6##4);
output1{test++} = 1##4 == (85##8 %% 6##4);
output1{test++} = 12##4 == (85##8 // 7##4);
output1{test++} = 1##4 == (85##8 %% 7##4);
output1{test++} = 10##4 == (85##8 // 8##4);
output1{test++} = 5##4 == (85##8 %% 8##4);
output1{test++} = 9##4 == (85##8 // 9##4);
output1{test++} = 4##4 == (85##8 %% 9##4);
output1{test++} = 8##4 == (85##8 // 10##4);
output1{test++} = 5##4 == (85##8 %% 10##4);
output1{test++} = 7##4 == (85##8 // 11##4);
output1{test++} = 8##4 == (85##8 %% 11##4);
output1{test++} = 7##4 == (85##8 // 12##4);
output1{test++} = 1##4 == (85##8 %% 12##4);
output1{test++} = 6##4 == (85##8 // 13##4);
output1{test++} = 7##4 == (85##8 %% 13##4);
output1{test++} = 6##4 == (85##8 // 14##4);
output1{test++} = 1##4 == (85##8 %% 14##4);
output1{test++} = 5##4 == (85##8 // 15##4);
output1{test++} = 10##4 == (85##8 %% 15##4);
output1{test++} = 14##4 == (86##8 // 6##4);
output1{test++} = 2##4 == (86##8 %% 6##4);
output1{test++} = 12##4 == (86##8 // 7##4);
output1{test++} = 2##4 == (86##8 %% 7##4);
output1{test++} = 10##4 == (86##8 // 8##4);
output1{test++} = 6##4 == (86##8 %% 8##4);
output1{test++} = 9##4 == (86##8 // 9##4);
output1{test++} = 5##4 == (86##8 %% 9##4);
output1{test++} = 8##4 == (86##8 // 10##4);
output1{test++} = 6##4 == (86##8 %% 10##4);
output1{test++} = 7##4 == (86##8 // 11##4);
output1{test++} = 9##4 == (86##8 %% 11##4);
output1{test++} = 7##4 == (86##8 // 12##4);
output1{test++} = 2##4 == (86##8 %% 12##4);
output1{test++} = 6##4 == (86##8 // 13##4);
output1{test++} = 8##4 == (86##8 %% 13##4);
output1{test++} = 6##4 == (86##8 // 14##4);
output1{test++} = 2##4 == (86##8 %% 14##4);
output1{test++} = 5##4 == (86##8 // 15##4);
output1{test++} = 11##4 == (86##8 %% 15##4);
output1{test++} = 14##4 == (87##8 // 6##4);
output1{test++} = 3##4 == (87##8 %% 6##4);
output1{test++} = 12##4 == (87##8 // 7##4);
output1{test++} = 3##4 == (87##8 %% 7##4);
output1{test++} = 10##4 == (87##8 // 8##4);
output1{test++} = 7##4 == (87##8 %% 8##4);
output1{test++} = 9##4 == (87##8 // 9##4);
output1{test++} = 6##4 == (87##8 %% 9##4);
output1{test++} = 8##4 == (87##8 // 10##4);
output1{test++} = 7##4 == (87##8 %% 10##4);
output1{test++} = 7##4 == (87##8 // 11##4);
output1{test++} = 10##4 == (87##8 %% 11##4);
output1{test++} = 7##4 == (87##8 // 12##4);
output1{test++} = 3##4 == (87##8 %% 12##4);
output1{test++} = 6##4 == (87##8 // 13##4);
output1{test++} = 9##4 == (87##8 %% 13##4);
output1{test++} = 6##4 == (87##8 // 14##4);
output1{test++} = 3##4 == (87##8 %% 14##4);
output1{test++} = 5##4 == (87##8 // 15##4);
output1{test++} = 12##4 == (87##8 %% 15##4);
output1{test++} = 14##4 == (88##8 // 6##4);
output1{test++} = 4##4 == (88##8 %% 6##4);
output1{test++} = 12##4 == (88##8 // 7##4);
output1{test++} = 4##4 == (88##8 %% 7##4);
output1{test++} = 11##4 == (88##8 // 8##4);
output1{test++} = 0##4 == (88##8 %% 8##4);
output1{test++} = 9##4 == (88##8 // 9##4);
output1{test++} = 7##4 == (88##8 %% 9##4);
output1{test++} = 8##4 == (88##8 // 10##4);
output1{test++} = 8##4 == (88##8 %% 10##4);
output1{test++} = 8##4 == (88##8 // 11##4);
output1{test++} = 0##4 == (88##8 %% 11##4);
output1{test++} = 7##4 == (88##8 // 12##4);
output1{test++} = 4##4 == (88##8 %% 12##4);
output1{test++} = 6##4 == (88##8 // 13##4);
output1{test++} = 10##4 == (88##8 %% 13##4);
output1{test++} = 6##4 == (88##8 // 14##4);
output1{test++} = 4##4 == (88##8 %% 14##4);
output1{test++} = 5##4 == (88##8 // 15##4);
output1{test++} = 13##4 == (88##8 %% 15##4);
output1{test++} = 14##4 == (89##8 // 6##4);
output1{test++} = 5##4 == (89##8 %% 6##4);
output1{test++} = 12##4 == (89##8 // 7##4);
output1{test++} = 5##4 == (89##8 %% 7##4);
output1{test++} = 11##4 == (89##8 // 8##4);
output1{test++} = 1##4 == (89##8 %% 8##4);
output1{test++} = 9##4 == (89##8 // 9##4);
output1{test++} = 8##4 == (89##8 %% 9##4);
output1{test++} = 8##4 == (89##8 // 10##4);
output1{test++} = 9##4 == (89##8 %% 10##4);
output1{test++} = 8##4 == (89##8 // 11##4);
output1{test++} = 1##4 == (89##8 %% 11##4);
output1{test++} = 7##4 == (89##8 // 12##4);
output1{test++} = 5##4 == (89##8 %% 12##4);
output1{test++} = 6##4 == (89##8 // 13##4);
output1{test++} = 11##4 == (89##8 %% 13##4);
output1{test++} = 6##4 == (89##8 // 14##4);
output1{test++} = 5##4 == (89##8 %% 14##4);
output1{test++} = 5##4 == (89##8 // 15##4);
output1{test++} = 14##4 == (89##8 %% 15##4);
output1{test++} = 15##4 == (90##8 // 6##4);
output1{test++} = 0##4 == (90##8 %% 6##4);
output1{test++} = 12##4 == (90##8 // 7##4);
output1{test++} = 6##4 == (90##8 %% 7##4);
output1{test++} = 11##4 == (90##8 // 8##4);
output1{test++} = 2##4 == (90##8 %% 8##4);
output1{test++} = 10##4 == (90##8 // 9##4);
output1{test++} = 0##4 == (90##8 %% 9##4);
output1{test++} = 9##4 == (90##8 // 10##4);
output1{test++} = 0##4 == (90##8 %% 10##4);
output1{test++} = 8##4 == (90##8 // 11##4);
output1{test++} = 2##4 == (90##8 %% 11##4);
output1{test++} = 7##4 == (90##8 // 12##4);
output1{test++} = 6##4 == (90##8 %% 12##4);
output1{test++} = 6##4 == (90##8 // 13##4);
output1{test++} = 12##4 == (90##8 %% 13##4);
output1{test++} = 6##4 == (90##8 // 14##4);
output1{test++} = 6##4 == (90##8 %% 14##4);
output1{test++} = 6##4 == (90##8 // 15##4);
output1{test++} = 0##4 == (90##8 %% 15##4);
output1{test++} = 15##4 == (91##8 // 6##4);
output1{test++} = 1##4 == (91##8 %% 6##4);
output1{test++} = 13##4 == (91##8 // 7##4);
output1{test++} = 0##4 == (91##8 %% 7##4);
output1{test++} = 11##4 == (91##8 // 8##4);
output1{test++} = 3##4 == (91##8 %% 8##4);
output1{test++} = 10##4 == (91##8 // 9##4);
output1{test++} = 1##4 == (91##8 %% 9##4);
output1{test++} = 9##4 == (91##8 // 10##4);
output1{test++} = 1##4 == (91##8 %% 10##4);
output1{test++} = 8##4 == (91##8 // 11##4);
output1{test++} = 3##4 == (91##8 %% 11##4);
output1{test++} = 7##4 == (91##8 // 12##4);
output1{test++} = 7##4 == (91##8 %% 12##4);
output1{test++} = 7##4 == (91##8 // 13##4);
output1{test++} = 0##4 == (91##8 %% 13##4);
output1{test++} = 6##4 == (91##8 // 14##4);
output1{test++} = 7##4 == (91##8 %% 14##4);
output1{test++} = 6##4 == (91##8 // 15##4);
output1{test++} = 1##4 == (91##8 %% 15##4);
output1{test++} = 15##4 == (92##8 // 6##4);
output1{test++} = 2##4 == (92##8 %% 6##4);
output1{test++} = 13##4 == (92##8 // 7##4);
output1{test++} = 1##4 == (92##8 %% 7##4);
output1{test++} = 11##4 == (92##8 // 8##4);
output1{test++} = 4##4 == (92##8 %% 8##4);
output1{test++} = 10##4 == (92##8 // 9##4);
output1{test++} = 2##4 == (92##8 %% 9##4);
output1{test++} = 9##4 == (92##8 // 10##4);
output1{test++} = 2##4 == (92##8 %% 10##4);
output1{test++} = 8##4 == (92##8 // 11##4);
output1{test++} = 4##4 == (92##8 %% 11##4);
output1{test++} = 7##4 == (92##8 // 12##4);
output1{test++} = 8##4 == (92##8 %% 12##4);
output1{test++} = 7##4 == (92##8 // 13##4);
output1{test++} = 1##4 == (92##8 %% 13##4);
output1{test++} = 6##4 == (92##8 // 14##4);
output1{test++} = 8##4 == (92##8 %% 14##4);
output1{test++} = 6##4 == (92##8 // 15##4);
output1{test++} = 2##4 == (92##8 %% 15##4);
output1{test++} = 15##4 == (93##8 // 6##4);
output1{test++} = 3##4 == (93##8 %% 6##4);
output1{test++} = 13##4 == (93##8 // 7##4);
output1{test++} = 2##4 == (93##8 %% 7##4);
output1{test++} = 11##4 == (93##8 // 8##4);
output1{test++} = 5##4 == (93##8 %% 8##4);
output1{test++} = 10##4 == (93##8 // 9##4);
output1{test++} = 3##4 == (93##8 %% 9##4);
output1{test++} = 9##4 == (93##8 // 10##4);
output1{test++} = 3##4 == (93##8 %% 10##4);
output1{test++} = 8##4 == (93##8 // 11##4);
output1{test++} = 5##4 == (93##8 %% 11##4);
output1{test++} = 7##4 == (93##8 // 12##4);
output1{test++} = 9##4 == (93##8 %% 12##4);
output1{test++} = 7##4 == (93##8 // 13##4);
output1{test++} = 2##4 == (93##8 %% 13##4);
output1{test++} = 6##4 == (93##8 // 14##4);
output1{test++} = 9##4 == (93##8 %% 14##4);
output1{test++} = 6##4 == (93##8 // 15##4);
output1{test++} = 3##4 == (93##8 %% 15##4);
output1{test++} = 15##4 == (94##8 // 6##4);
output1{test++} = 4##4 == (94##8 %% 6##4);
output1{test++} = 13##4 == (94##8 // 7##4);
output1{test++} = 3##4 == (94##8 %% 7##4);
output1{test++} = 11##4 == (94##8 // 8##4);
output1{test++} = 6##4 == (94##8 %% 8##4);
output1{test++} = 10##4 == (94##8 // 9##4);
output1{test++} = 4##4 == (94##8 %% 9##4);
output1{test++} = 9##4 == (94##8 // 10##4);
output1{test++} = 4##4 == (94##8 %% 10##4);
output1{test++} = 8##4 == (94##8 // 11##4);
output1{test++} = 6##4 == (94##8 %% 11##4);
output1{test++} = 7##4 == (94##8 // 12##4);
output1{test++} = 10##4 == (94##8 %% 12##4);
output1{test++} = 7##4 == (94##8 // 13##4);
output1{test++} = 3##4 == (94##8 %% 13##4);
output1{test++} = 6##4 == (94##8 // 14##4);
output1{test++} = 10##4 == (94##8 %% 14##4);
output1{test++} = 6##4 == (94##8 // 15##4);
output1{test++} = 4##4 == (94##8 %% 15##4);
output1{test++} = 15##4 == (95##8 // 6##4);
output1{test++} = 5##4 == (95##8 %% 6##4);
output1{test++} = 13##4 == (95##8 // 7##4);
output1{test++} = 4##4 == (95##8 %% 7##4);
output1{test++} = 11##4 == (95##8 // 8##4);
output1{test++} = 7##4 == (95##8 %% 8##4);
output1{test++} = 10##4 == (95##8 // 9##4);
output1{test++} = 5##4 == (95##8 %% 9##4);
output1{test++} = 9##4 == (95##8 // 10##4);
output1{test++} = 5##4 == (95##8 %% 10##4);
output1{test++} = 8##4 == (95##8 // 11##4);
output1{test++} = 7##4 == (95##8 %% 11##4);
output1{test++} = 7##4 == (95##8 // 12##4);
output1{test++} = 11##4 == (95##8 %% 12##4);
output1{test++} = 7##4 == (95##8 // 13##4);
output1{test++} = 4##4 == (95##8 %% 13##4);
output1{test++} = 6##4 == (95##8 // 14##4);
output1{test++} = 11##4 == (95##8 %% 14##4);
output1{test++} = 6##4 == (95##8 // 15##4);
output1{test++} = 5##4 == (95##8 %% 15##4);
output1{test++} = 13##4 == (96##8 // 7##4);
output1{test++} = 5##4 == (96##8 %% 7##4);
output1{test++} = 12##4 == (96##8 // 8##4);
output1{test++} = 0##4 == (96##8 %% 8##4);
output1{test++} = 10##4 == (96##8 // 9##4);
output1{test++} = 6##4 == (96##8 %% 9##4);
output1{test++} = 9##4 == (96##8 // 10##4);
output1{test++} = 6##4 == (96##8 %% 10##4);
output1{test++} = 8##4 == (96##8 // 11##4);
output1{test++} = 8##4 == (96##8 %% 11##4);
output1{test++} = 8##4 == (96##8 // 12##4);
output1{test++} = 0##4 == (96##8 %% 12##4);
output1{test++} = 7##4 == (96##8 // 13##4);
output1{test++} = 5##4 == (96##8 %% 13##4);
output1{test++} = 6##4 == (96##8 // 14##4);
output1{test++} = 12##4 == (96##8 %% 14##4);
output1{test++} = 6##4 == (96##8 // 15##4);
output1{test++} = 6##4 == (96##8 %% 15##4);
output1{test++} = 13##4 == (97##8 // 7##4);
output1{test++} = 6##4 == (97##8 %% 7##4);
output1{test++} = 12##4 == (97##8 // 8##4);
output1{test++} = 1##4 == (97##8 %% 8##4);
output1{test++} = 10##4 == (97##8 // 9##4);
output1{test++} = 7##4 == (97##8 %% 9##4);
output1{test++} = 9##4 == (97##8 // 10##4);
output1{test++} = 7##4 == (97##8 %% 10##4);
output1{test++} = 8##4 == (97##8 // 11##4);
output1{test++} = 9##4 == (97##8 %% 11##4);
output1{test++} = 8##4 == (97##8 // 12##4);
output1{test++} = 1##4 == (97##8 %% 12##4);
output1{test++} = 7##4 == (97##8 // 13##4);
output1{test++} = 6##4 == (97##8 %% 13##4);
output1{test++} = 6##4 == (97##8 // 14##4);
output1{test++} = 13##4 == (97##8 %% 14##4);
output1{test++} = 6##4 == (97##8 // 15##4);
output1{test++} = 7##4 == (97##8 %% 15##4);
output1{test++} = 14##4 == (98##8 // 7##4);
output1{test++} = 0##4 == (98##8 %% 7##4);
output1{test++} = 12##4 == (98##8 // 8##4);
output1{test++} = 2##4 == (98##8 %% 8##4);
output1{test++} = 10##4 == (98##8 // 9##4);
output1{test++} = 8##4 == (98##8 %% 9##4);
output1{test++} = 9##4 == (98##8 // 10##4);
output1{test++} = 8##4 == (98##8 %% 10##4);
output1{test++} = 8##4 == (98##8 // 11##4);
output1{test++} = 10##4 == (98##8 %% 11##4);
output1{test++} = 8##4 == (98##8 // 12##4);
output1{test++} = 2##4 == (98##8 %% 12##4);
output1{test++} = 7##4 == (98##8 // 13##4);
output1{test++} = 7##4 == (98##8 %% 13##4);
output1{test++} = 7##4 == (98##8 // 14##4);
output1{test++} = 0##4 == (98##8 %% 14##4);
output1{test++} = 6##4 == (98##8 // 15##4);
output1{test++} = 8##4 == (98##8 %% 15##4);
output1{test++} = 14##4 == (99##8 // 7##4);
output1{test++} = 1##4 == (99##8 %% 7##4);
output1{test++} = 12##4 == (99##8 // 8##4);
output1{test++} = 3##4 == (99##8 %% 8##4);
output1{test++} = 11##4 == (99##8 // 9##4);
output1{test++} = 0##4 == (99##8 %% 9##4);
output1{test++} = 9##4 == (99##8 // 10##4);
output1{test++} = 9##4 == (99##8 %% 10##4);
output1{test++} = 9##4 == (99##8 // 11##4);
output1{test++} = 0##4 == (99##8 %% 11##4);
output1{test++} = 8##4 == (99##8 // 12##4);
output1{test++} = 3##4 == (99##8 %% 12##4);
output1{test++} = 7##4 == (99##8 // 13##4);
output1{test++} = 8##4 == (99##8 %% 13##4);
output1{test++} = 7##4 == (99##8 // 14##4);
output1{test++} = 1##4 == (99##8 %% 14##4);
output1{test++} = 6##4 == (99##8 // 15##4);
output1{test++} = 9##4 == (99##8 %% 15##4);
output1{test++} = 14##4 == (100##8 // 7##4);
output1{test++} = 2##4 == (100##8 %% 7##4);
output1{test++} = 12##4 == (100##8 // 8##4);
output1{test++} = 4##4 == (100##8 %% 8##4);
output1{test++} = 11##4 == (100##8 // 9##4);
output1{test++} = 1##4 == (100##8 %% 9##4);
output1{test++} = 10##4 == (100##8 // 10##4);
output1{test++} = 0##4 == (100##8 %% 10##4);
output1{test++} = 9##4 == (100##8 // 11##4);
output1{test++} = 1##4 == (100##8 %% 11##4);
output1{test++} = 8##4 == (100##8 // 12##4);
output1{test++} = 4##4 == (100##8 %% 12##4);
output1{test++} = 7##4 == (100##8 // 13##4);
output1{test++} = 9##4 == (100##8 %% 13##4);
output1{test++} = 7##4 == (100##8 // 14##4);
output1{test++} = 2##4 == (100##8 %% 14##4);
output1{test++} = 6##4 == (100##8 // 15##4);
output1{test++} = 10##4 == (100##8 %% 15##4);
output1{test++} = 14##4 == (101##8 // 7##4);
output1{test++} = 3##4 == (101##8 %% 7##4);
output1{test++} = 12##4 == (101##8 // 8##4);
output1{test++} = 5##4 == (101##8 %% 8##4);
output1{test++} = 11##4 == (101##8 // 9##4);
output1{test++} = 2##4 == (101##8 %% 9##4);
output1{test++} = 10##4 == (101##8 // 10##4);
output1{test++} = 1##4 == (101##8 %% 10##4);
output1{test++} = 9##4 == (101##8 // 11##4);
output1{test++} = 2##4 == (101##8 %% 11##4);
output1{test++} = 8##4 == (101##8 // 12##4);
output1{test++} = 5##4 == (101##8 %% 12##4);
output1{test++} = 7##4 == (101##8 // 13##4);
output1{test++} = 10##4 == (101##8 %% 13##4);
output1{test++} = 7##4 == (101##8 // 14##4);
output1{test++} = 3##4 == (101##8 %% 14##4);
output1{test++} = 6##4 == (101##8 // 15##4);
output1{test++} = 11##4 == (101##8 %% 15##4);
output1{test++} = 14##4 == (102##8 // 7##4);
output1{test++} = 4##4 == (102##8 %% 7##4);
output1{test++} = 12##4 == (102##8 // 8##4);
output1{test++} = 6##4 == (102##8 %% 8##4);
output1{test++} = 11##4 == (102##8 // 9##4);
output1{test++} = 3##4 == (102##8 %% 9##4);
output1{test++} = 10##4 == (102##8 // 10##4);
output1{test++} = 2##4 == (102##8 %% 10##4);
output1{test++} = 9##4 == (102##8 // 11##4);
output1{test++} = 3##4 == (102##8 %% 11##4);
output1{test++} = 8##4 == (102##8 // 12##4);
output1{test++} = 6##4 == (102##8 %% 12##4);
output1{test++} = 7##4 == (102##8 // 13##4);
output1{test++} = 11##4 == (102##8 %% 13##4);
output1{test++} = 7##4 == (102##8 // 14##4);
output1{test++} = 4##4 == (102##8 %% 14##4);
output1{test++} = 6##4 == (102##8 // 15##4);
output1{test++} = 12##4 == (102##8 %% 15##4);
output1{test++} = 14##4 == (103##8 // 7##4);
output1{test++} = 5##4 == (103##8 %% 7##4);
output1{test++} = 12##4 == (103##8 // 8##4);
output1{test++} = 7##4 == (103##8 %% 8##4);
output1{test++} = 11##4 == (103##8 // 9##4);
output1{test++} = 4##4 == (103##8 %% 9##4);
output1{test++} = 10##4 == (103##8 // 10##4);
output1{test++} = 3##4 == (103##8 %% 10##4);
output1{test++} = 9##4 == (103##8 // 11##4);
output1{test++} = 4##4 == (103##8 %% 11##4);
output1{test++} = 8##4 == (103##8 // 12##4);
output1{test++} = 7##4 == (103##8 %% 12##4);
output1{test++} = 7##4 == (103##8 // 13##4);
output1{test++} = 12##4 == (103##8 %% 13##4);
output1{test++} = 7##4 == (103##8 // 14##4);
output1{test++} = 5##4 == (103##8 %% 14##4);
output1{test++} = 6##4 == (103##8 // 15##4);
output1{test++} = 13##4 == (103##8 %% 15##4);
output1{test++} = 14##4 == (104##8 // 7##4);
output1{test++} = 6##4 == (104##8 %% 7##4);
output1{test++} = 13##4 == (104##8 // 8##4);
output1{test++} = 0##4 == (104##8 %% 8##4);
output1{test++} = 11##4 == (104##8 // 9##4);
output1{test++} = 5##4 == (104##8 %% 9##4);
output1{test++} = 10##4 == (104##8 // 10##4);
output1{test++} = 4##4 == (104##8 %% 10##4);
output1{test++} = 9##4 == (104##8 // 11##4);
output1{test++} = 5##4 == (104##8 %% 11##4);
output1{test++} = 8##4 == (104##8 // 12##4);
output1{test++} = 8##4 == (104##8 %% 12##4);
output1{test++} = 8##4 == (104##8 // 13##4);
output1{test++} = 0##4 == (104##8 %% 13##4);
output1{test++} = 7##4 == (104##8 // 14##4);
output1{test++} = 6##4 == (104##8 %% 14##4);
output1{test++} = 6##4 == (104##8 // 15##4);
output1{test++} = 14##4 == (104##8 %% 15##4);
output1{test++} = 15##4 == (105##8 // 7##4);
output1{test++} = 0##4 == (105##8 %% 7##4);
output1{test++} = 13##4 == (105##8 // 8##4);
output1{test++} = 1##4 == (105##8 %% 8##4);
output1{test++} = 11##4 == (105##8 // 9##4);
output1{test++} = 6##4 == (105##8 %% 9##4);
output1{test++} = 10##4 == (105##8 // 10##4);
output1{test++} = 5##4 == (105##8 %% 10##4);
output1{test++} = 9##4 == (105##8 // 11##4);
output1{test++} = 6##4 == (105##8 %% 11##4);
output1{test++} = 8##4 == (105##8 // 12##4);
output1{test++} = 9##4 == (105##8 %% 12##4);
output1{test++} = 8##4 == (105##8 // 13##4);
output1{test++} = 1##4 == (105##8 %% 13##4);
output1{test++} = 7##4 == (105##8 // 14##4);
output1{test++} = 7##4 == (105##8 %% 14##4);
output1{test++} = 7##4 == (105##8 // 15##4);
output1{test++} = 0##4 == (105##8 %% 15##4);
output1{test++} = 15##4 == (106##8 // 7##4);
output1{test++} = 1##4 == (106##8 %% 7##4);
output1{test++} = 13##4 == (106##8 // 8##4);
output1{test++} = 2##4 == (106##8 %% 8##4);
output1{test++} = 11##4 == (106##8 // 9##4);
output1{test++} = 7##4 == (106##8 %% 9##4);
output1{test++} = 10##4 == (106##8 // 10##4);
output1{test++} = 6##4 == (106##8 %% 10##4);
output1{test++} = 9##4 == (106##8 // 11##4);
output1{test++} = 7##4 == (106##8 %% 11##4);
output1{test++} = 8##4 == (106##8 // 12##4);
output1{test++} = 10##4 == (106##8 %% 12##4);
output1{test++} = 8##4 == (106##8 // 13##4);
output1{test++} = 2##4 == (106##8 %% 13##4);
output1{test++} = 7##4 == (106##8 // 14##4);
output1{test++} = 8##4 == (106##8 %% 14##4);
output1{test++} = 7##4 == (106##8 // 15##4);
output1{test++} = 1##4 == (106##8 %% 15##4);
output1{test++} = 15##4 == (107##8 // 7##4);
output1{test++} = 2##4 == (107##8 %% 7##4);
output1{test++} = 13##4 == (107##8 // 8##4);
output1{test++} = 3##4 == (107##8 %% 8##4);
output1{test++} = 11##4 == (107##8 // 9##4);
output1{test++} = 8##4 == (107##8 %% 9##4);
output1{test++} = 10##4 == (107##8 // 10##4);
output1{test++} = 7##4 == (107##8 %% 10##4);
output1{test++} = 9##4 == (107##8 // 11##4);
output1{test++} = 8##4 == (107##8 %% 11##4);
output1{test++} = 8##4 == (107##8 // 12##4);
output1{test++} = 11##4 == (107##8 %% 12##4);
output1{test++} = 8##4 == (107##8 // 13##4);
output1{test++} = 3##4 == (107##8 %% 13##4);
output1{test++} = 7##4 == (107##8 // 14##4);
output1{test++} = 9##4 == (107##8 %% 14##4);
output1{test++} = 7##4 == (107##8 // 15##4);
output1{test++} = 2##4 == (107##8 %% 15##4);
output1{test++} = 15##4 == (108##8 // 7##4);
output1{test++} = 3##4 == (108##8 %% 7##4);
output1{test++} = 13##4 == (108##8 // 8##4);
output1{test++} = 4##4 == (108##8 %% 8##4);
output1{test++} = 12##4 == (108##8 // 9##4);
output1{test++} = 0##4 == (108##8 %% 9##4);
output1{test++} = 10##4 == (108##8 // 10##4);
output1{test++} = 8##4 == (108##8 %% 10##4);
output1{test++} = 9##4 == (108##8 // 11##4);
output1{test++} = 9##4 == (108##8 %% 11##4);
output1{test++} = 9##4 == (108##8 // 12##4);
output1{test++} = 0##4 == (108##8 %% 12##4);
output1{test++} = 8##4 == (108##8 // 13##4);
output1{test++} = 4##4 == (108##8 %% 13##4);
output1{test++} = 7##4 == (108##8 // 14##4);
output1{test++} = 10##4 == (108##8 %% 14##4);
output1{test++} = 7##4 == (108##8 // 15##4);
output1{test++} = 3##4 == (108##8 %% 15##4);
output1{test++} = 15##4 == (109##8 // 7##4);
output1{test++} = 4##4 == (109##8 %% 7##4);
output1{test++} = 13##4 == (109##8 // 8##4);
output1{test++} = 5##4 == (109##8 %% 8##4);
output1{test++} = 12##4 == (109##8 // 9##4);
output1{test++} = 1##4 == (109##8 %% 9##4);
output1{test++} = 10##4 == (109##8 // 10##4);
output1{test++} = 9##4 == (109##8 %% 10##4);
output1{test++} = 9##4 == (109##8 // 11##4);
output1{test++} = 10##4 == (109##8 %% 11##4);
output1{test++} = 9##4 == (109##8 // 12##4);
output1{test++} = 1##4 == (109##8 %% 12##4);
output1{test++} = 8##4 == (109##8 // 13##4);
output1{test++} = 5##4 == (109##8 %% 13##4);
output1{test++} = 7##4 == (109##8 // 14##4);
output1{test++} = 11##4 == (109##8 %% 14##4);
output1{test++} = 7##4 == (109##8 // 15##4);
output1{test++} = 4##4 == (109##8 %% 15##4);
output1{test++} = 15##4 == (110##8 // 7##4);
output1{test++} = 5##4 == (110##8 %% 7##4);
output1{test++} = 13##4 == (110##8 // 8##4);
output1{test++} = 6##4 == (110##8 %% 8##4);
output1{test++} = 12##4 == (110##8 // 9##4);
output1{test++} = 2##4 == (110##8 %% 9##4);
output1{test++} = 11##4 == (110##8 // 10##4);
output1{test++} = 0##4 == (110##8 %% 10##4);
output1{test++} = 10##4 == (110##8 // 11##4);
output1{test++} = 0##4 == (110##8 %% 11##4);
output1{test++} = 9##4 == (110##8 // 12##4);
output1{test++} = 2##4 == (110##8 %% 12##4);
output1{test++} = 8##4 == (110##8 // 13##4);
output1{test++} = 6##4 == (110##8 %% 13##4);
output1{test++} = 7##4 == (110##8 // 14##4);
output1{test++} = 12##4 == (110##8 %% 14##4);
output1{test++} = 7##4 == (110##8 // 15##4);
output1{test++} = 5##4 == (110##8 %% 15##4);
output1{test++} = 15##4 == (111##8 // 7##4);
output1{test++} = 6##4 == (111##8 %% 7##4);
output1{test++} = 13##4 == (111##8 // 8##4);
output1{test++} = 7##4 == (111##8 %% 8##4);
output1{test++} = 12##4 == (111##8 // 9##4);
output1{test++} = 3##4 == (111##8 %% 9##4);
output1{test++} = 11##4 == (111##8 // 10##4);
output1{test++} = 1##4 == (111##8 %% 10##4);
output1{test++} = 10##4 == (111##8 // 11##4);
output1{test++} = 1##4 == (111##8 %% 11##4);
output1{test++} = 9##4 == (111##8 // 12##4);
output1{test++} = 3##4 == (111##8 %% 12##4);
output1{test++} = 8##4 == (111##8 // 13##4);
output1{test++} = 7##4 == (111##8 %% 13##4);
output1{test++} = 7##4 == (111##8 // 14##4);
output1{test++} = 13##4 == (111##8 %% 14##4);
output1{test++} = 7##4 == (111##8 // 15##4);
output1{test++} = 6##4 == (111##8 %% 15##4);
output1{test++} = 14##4 == (112##8 // 8##4);
output1{test++} = 0##4 == (112##8 %% 8##4);
output1{test++} = 12##4 == (112##8 // 9##4);
output1{test++} = 4##4 == (112##8 %% 9##4);
output1{test++} = 11##4 == (112##8 // 10##4);
output1{test++} = 2##4 == (112##8 %% 10##4);
output1{test++} = 10##4 == (112##8 // 11##4);
output1{test++} = 2##4 == (112##8 %% 11##4);
output1{test++} = 9##4 == (112##8 // 12##4);
output1{test++} = 4##4 == (112##8 %% 12##4);
output1{test++} = 8##4 == (112##8 // 13##4);
output1{test++} = 8##4 == (112##8 %% 13##4);
output1{test++} = 8##4 == (112##8 // 14##4);
output1{test++} = 0##4 == (112##8 %% 14##4);
output1{test++} = 7##4 == (112##8 // 15##4);
output1{test++} = 7##4 == (112##8 %% 15##4);
output1{test++} = 14##4 == (113##8 // 8##4);
output1{test++} = 1##4 == (113##8 %% 8##4);
output1{test++} = 12##4 == (113##8 // 9##4);
output1{test++} = 5##4 == (113##8 %% 9##4);
output1{test++} = 11##4 == (113##8 // 10##4);
output1{test++} = 3##4 == (113##8 %% 10##4);
output1{test++} = 10##4 == (113##8 // 11##4);
output1{test++} = 3##4 == (113##8 %% 11##4);
output1{test++} = 9##4 == (113##8 // 12##4);
output1{test++} = 5##4 == (113##8 %% 12##4);
output1{test++} = 8##4 == (113##8 // 13##4);
output1{test++} = 9##4 == (113##8 %% 13##4);
output1{test++} = 8##4 == (113##8 // 14##4);
output1{test++} = 1##4 == (113##8 %% 14##4);
output1{test++} = 7##4 == (113##8 // 15##4);
output1{test++} = 8##4 == (113##8 %% 15##4);
output1{test++} = 14##4 == (114##8 // 8##4);
output1{test++} = 2##4 == (114##8 %% 8##4);
output1{test++} = 12##4 == (114##8 // 9##4);
output1{test++} = 6##4 == (114##8 %% 9##4);
output1{test++} = 11##4 == (114##8 // 10##4);
output1{test++} = 4##4 == (114##8 %% 10##4);
output1{test++} = 10##4 == (114##8 // 11##4);
output1{test++} = 4##4 == (114##8 %% 11##4);
output1{test++} = 9##4 == (114##8 // 12##4);
output1{test++} = 6##4 == (114##8 %% 12##4);
output1{test++} = 8##4 == (114##8 // 13##4);
output1{test++} = 10##4 == (114##8 %% 13##4);
output1{test++} = 8##4 == (114##8 // 14##4);
output1{test++} = 2##4 == (114##8 %% 14##4);
output1{test++} = 7##4 == (114##8 // 15##4);
output1{test++} = 9##4 == (114##8 %% 15##4);
output1{test++} = 14##4 == (115##8 // 8##4);
output1{test++} = 3##4 == (115##8 %% 8##4);
output1{test++} = 12##4 == (115##8 // 9##4);
output1{test++} = 7##4 == (115##8 %% 9##4);
output1{test++} = 11##4 == (115##8 // 10##4);
output1{test++} = 5##4 == (115##8 %% 10##4);
output1{test++} = 10##4 == (115##8 // 11##4);
output1{test++} = 5##4 == (115##8 %% 11##4);
output1{test++} = 9##4 == (115##8 // 12##4);
output1{test++} = 7##4 == (115##8 %% 12##4);
output1{test++} = 8##4 == (115##8 // 13##4);
output1{test++} = 11##4 == (115##8 %% 13##4);
output1{test++} = 8##4 == (115##8 // 14##4);
output1{test++} = 3##4 == (115##8 %% 14##4);
output1{test++} = 7##4 == (115##8 // 15##4);
output1{test++} = 10##4 == (115##8 %% 15##4);
output1{test++} = 14##4 == (116##8 // 8##4);
output1{test++} = 4##4 == (116##8 %% 8##4);
output1{test++} = 12##4 == (116##8 // 9##4);
output1{test++} = 8##4 == (116##8 %% 9##4);
output1{test++} = 11##4 == (116##8 // 10##4);
output1{test++} = 6##4 == (116##8 %% 10##4);
output1{test++} = 10##4 == (116##8 // 11##4);
output1{test++} = 6##4 == (116##8 %% 11##4);
output1{test++} = 9##4 == (116##8 // 12##4);
output1{test++} = 8##4 == (116##8 %% 12##4);
output1{test++} = 8##4 == (116##8 // 13##4);
output1{test++} = 12##4 == (116##8 %% 13##4);
output1{test++} = 8##4 == (116##8 // 14##4);
output1{test++} = 4##4 == (116##8 %% 14##4);
output1{test++} = 7##4 == (116##8 // 15##4);
output1{test++} = 11##4 == (116##8 %% 15##4);
output1{test++} = 14##4 == (117##8 // 8##4);
output1{test++} = 5##4 == (117##8 %% 8##4);
output1{test++} = 13##4 == (117##8 // 9##4);
output1{test++} = 0##4 == (117##8 %% 9##4);
output1{test++} = 11##4 == (117##8 // 10##4);
output1{test++} = 7##4 == (117##8 %% 10##4);
output1{test++} = 10##4 == (117##8 // 11##4);
output1{test++} = 7##4 == (117##8 %% 11##4);
output1{test++} = 9##4 == (117##8 // 12##4);
output1{test++} = 9##4 == (117##8 %% 12##4);
output1{test++} = 9##4 == (117##8 // 13##4);
output1{test++} = 0##4 == (117##8 %% 13##4);
output1{test++} = 8##4 == (117##8 // 14##4);
output1{test++} = 5##4 == (117##8 %% 14##4);
output1{test++} = 7##4 == (117##8 // 15##4);
output1{test++} = 12##4 == (117##8 %% 15##4);
output1{test++} = 14##4 == (118##8 // 8##4);
output1{test++} = 6##4 == (118##8 %% 8##4);
output1{test++} = 13##4 == (118##8 // 9##4);
output1{test++} = 1##4 == (118##8 %% 9##4);
output1{test++} = 11##4 == (118##8 // 10##4);
output1{test++} = 8##4 == (118##8 %% 10##4);
output1{test++} = 10##4 == (118##8 // 11##4);
output1{test++} = 8##4 == (118##8 %% 11##4);
output1{test++} = 9##4 == (118##8 // 12##4);
output1{test++} = 10##4 == (118##8 %% 12##4);
output1{test++} = 9##4 == (118##8 // 13##4);
output1{test++} = 1##4 == (118##8 %% 13##4);
output1{test++} = 8##4 == (118##8 // 14##4);
output1{test++} = 6##4 == (118##8 %% 14##4);
output1{test++} = 7##4 == (118##8 // 15##4);
output1{test++} = 13##4 == (118##8 %% 15##4);
output1{test++} = 14##4 == (119##8 // 8##4);
output1{test++} = 7##4 == (119##8 %% 8##4);
output1{test++} = 13##4 == (119##8 // 9##4);
output1{test++} = 2##4 == (119##8 %% 9##4);
output1{test++} = 11##4 == (119##8 // 10##4);
output1{test++} = 9##4 == (119##8 %% 10##4);
output1{test++} = 10##4 == (119##8 // 11##4);
output1{test++} = 9##4 == (119##8 %% 11##4);
output1{test++} = 9##4 == (119##8 // 12##4);
output1{test++} = 11##4 == (119##8 %% 12##4);
output1{test++} = 9##4 == (119##8 // 13##4);
output1{test++} = 2##4 == (119##8 %% 13##4);
output1{test++} = 8##4 == (119##8 // 14##4);
output1{test++} = 7##4 == (119##8 %% 14##4);
output1{test++} = 7##4 == (119##8 // 15##4);
output1{test++} = 14##4 == (119##8 %% 15##4);
output1{test++} = 15##4 == (120##8 // 8##4);
output1{test++} = 0##4 == (120##8 %% 8##4);
output1{test++} = 13##4 == (120##8 // 9##4);
output1{test++} = 3##4 == (120##8 %% 9##4);
output1{test++} = 12##4 == (120##8 // 10##4);
output1{test++} = 0##4 == (120##8 %% 10##4);
output1{test++} = 10##4 == (120##8 // 11##4);
output1{test++} = 10##4 == (120##8 %% 11##4);
output1{test++} = 10##4 == (120##8 // 12##4);
output1{test++} = 0##4 == (120##8 %% 12##4);
output1{test++} = 9##4 == (120##8 // 13##4);
output1{test++} = 3##4 == (120##8 %% 13##4);
output1{test++} = 8##4 == (120##8 // 14##4);
output1{test++} = 8##4 == (120##8 %% 14##4);
output1{test++} = 8##4 == (120##8 // 15##4);
output1{test++} = 0##4 == (120##8 %% 15##4);
output1{test++} = 15##4 == (121##8 // 8##4);
output1{test++} = 1##4 == (121##8 %% 8##4);
output1{test++} = 13##4 == (121##8 // 9##4);
output1{test++} = 4##4 == (121##8 %% 9##4);
output1{test++} = 12##4 == (121##8 // 10##4);
output1{test++} = 1##4 == (121##8 %% 10##4);
output1{test++} = 11##4 == (121##8 // 11##4);
output1{test++} = 0##4 == (121##8 %% 11##4);
output1{test++} = 10##4 == (121##8 // 12##4);
output1{test++} = 1##4 == (121##8 %% 12##4);
output1{test++} = 9##4 == (121##8 // 13##4);
output1{test++} = 4##4 == (121##8 %% 13##4);
output1{test++} = 8##4 == (121##8 // 14##4);
output1{test++} = 9##4 == (121##8 %% 14##4);
output1{test++} = 8##4 == (121##8 // 15##4);
output1{test++} = 1##4 == (121##8 %% 15##4);
output1{test++} = 15##4 == (122##8 // 8##4);
output1{test++} = 2##4 == (122##8 %% 8##4);
output1{test++} = 13##4 == (122##8 // 9##4);
output1{test++} = 5##4 == (122##8 %% 9##4);
output1{test++} = 12##4 == (122##8 // 10##4);
output1{test++} = 2##4 == (122##8 %% 10##4);
output1{test++} = 11##4 == (122##8 // 11##4);
output1{test++} = 1##4 == (122##8 %% 11##4);
output1{test++} = 10##4 == (122##8 // 12##4);
output1{test++} = 2##4 == (122##8 %% 12##4);
output1{test++} = 9##4 == (122##8 // 13##4);
output1{test++} = 5##4 == (122##8 %% 13##4);
output1{test++} = 8##4 == (122##8 // 14##4);
output1{test++} = 10##4 == (122##8 %% 14##4);
output1{test++} = 8##4 == (122##8 // 15##4);
output1{test++} = 2##4 == (122##8 %% 15##4);
output1{test++} = 15##4 == (123##8 // 8##4);
output1{test++} = 3##4 == (123##8 %% 8##4);
output1{test++} = 13##4 == (123##8 // 9##4);
output1{test++} = 6##4 == (123##8 %% 9##4);
output1{test++} = 12##4 == (123##8 // 10##4);
output1{test++} = 3##4 == (123##8 %% 10##4);
output1{test++} = 11##4 == (123##8 // 11##4);
output1{test++} = 2##4 == (123##8 %% 11##4);
output1{test++} = 10##4 == (123##8 // 12##4);
output1{test++} = 3##4 == (123##8 %% 12##4);
output1{test++} = 9##4 == (123##8 // 13##4);
output1{test++} = 6##4 == (123##8 %% 13##4);
output1{test++} = 8##4 == (123##8 // 14##4);
output1{test++} = 11##4 == (123##8 %% 14##4);
output1{test++} = 8##4 == (123##8 // 15##4);
output1{test++} = 3##4 == (123##8 %% 15##4);
output1{test++} = 15##4 == (124##8 // 8##4);
output1{test++} = 4##4 == (124##8 %% 8##4);
output1{test++} = 13##4 == (124##8 // 9##4);
output1{test++} = 7##4 == (124##8 %% 9##4);
output1{test++} = 12##4 == (124##8 // 10##4);
output1{test++} = 4##4 == (124##8 %% 10##4);
output1{test++} = 11##4 == (124##8 // 11##4);
output1{test++} = 3##4 == (124##8 %% 11##4);
output1{test++} = 10##4 == (124##8 // 12##4);
output1{test++} = 4##4 == (124##8 %% 12##4);
output1{test++} = 9##4 == (124##8 // 13##4);
output1{test++} = 7##4 == (124##8 %% 13##4);
output1{test++} = 8##4 == (124##8 // 14##4);
output1{test++} = 12##4 == (124##8 %% 14##4);
output1{test++} = 8##4 == (124##8 // 15##4);
output1{test++} = 4##4 == (124##8 %% 15##4);
output1{test++} = 15##4 == (125##8 // 8##4);
output1{test++} = 5##4 == (125##8 %% 8##4);
output1{test++} = 13##4 == (125##8 // 9##4);
output1{test++} = 8##4 == (125##8 %% 9##4);
output1{test++} = 12##4 == (125##8 // 10##4);
output1{test++} = 5##4 == (125##8 %% 10##4);
output1{test++} = 11##4 == (125##8 // 11##4);
output1{test++} = 4##4 == (125##8 %% 11##4);
output1{test++} = 10##4 == (125##8 // 12##4);
output1{test++} = 5##4 == (125##8 %% 12##4);
output1{test++} = 9##4 == (125##8 // 13##4);
output1{test++} = 8##4 == (125##8 %% 13##4);
output1{test++} = 8##4 == (125##8 // 14##4);
output1{test++} = 13##4 == (125##8 %% 14##4);
output1{test++} = 8##4 == (125##8 // 15##4);
output1{test++} = 5##4 == (125##8 %% 15##4);
output1{test++} = 15##4 == (126##8 // 8##4);
output1{test++} = 6##4 == (126##8 %% 8##4);
output1{test++} = 14##4 == (126##8 // 9##4);
output1{test++} = 0##4 == (126##8 %% 9##4);
output1{test++} = 12##4 == (126##8 // 10##4);
output1{test++} = 6##4 == (126##8 %% 10##4);
output1{test++} = 11##4 == (126##8 // 11##4);
output1{test++} = 5##4 == (126##8 %% 11##4);
output1{test++} = 10##4 == (126##8 // 12##4);
output1{test++} = 6##4 == (126##8 %% 12##4);
output1{test++} = 9##4 == (126##8 // 13##4);
output1{test++} = 9##4 == (126##8 %% 13##4);
output1{test++} = 9##4 == (126##8 // 14##4);
output1{test++} = 0##4 == (126##8 %% 14##4);
output1{test++} = 8##4 == (126##8 // 15##4);
output1{test++} = 6##4 == (126##8 %% 15##4);
output1{test++} = 15##4 == (127##8 // 8##4);
output1{test++} = 7##4 == (127##8 %% 8##4);
output1{test++} = 14##4 == (127##8 // 9##4);
output1{test++} = 1##4 == (127##8 %% 9##4);
output1{test++} = 12##4 == (127##8 // 10##4);
output1{test++} = 7##4 == (127##8 %% 10##4);
output1{test++} = 11##4 == (127##8 // 11##4);
output1{test++} = 6##4 == (127##8 %% 11##4);
output1{test++} = 10##4 == (127##8 // 12##4);
output1{test++} = 7##4 == (127##8 %% 12##4);
output1{test++} = 9##4 == (127##8 // 13##4);
output1{test++} = 10##4 == (127##8 %% 13##4);
output1{test++} = 9##4 == (127##8 // 14##4);
output1{test++} = 1##4 == (127##8 %% 14##4);
output1{test++} = 8##4 == (127##8 // 15##4);
output1{test++} = 7##4 == (127##8 %% 15##4);
output1{test++} = 14##4 == (128##8 // 9##4);
output1{test++} = 2##4 == (128##8 %% 9##4);
output1{test++} = 12##4 == (128##8 // 10##4);
output1{test++} = 8##4 == (128##8 %% 10##4);
output1{test++} = 11##4 == (128##8 // 11##4);
output1{test++} = 7##4 == (128##8 %% 11##4);
output1{test++} = 10##4 == (128##8 // 12##4);
output1{test++} = 8##4 == (128##8 %% 12##4);
output1{test++} = 9##4 == (128##8 // 13##4);
output1{test++} = 11##4 == (128##8 %% 13##4);
output1{test++} = 9##4 == (128##8 // 14##4);
output1{test++} = 2##4 == (128##8 %% 14##4);
output1{test++} = 8##4 == (128##8 // 15##4);
output1{test++} = 8##4 == (128##8 %% 15##4);
output1{test++} = 14##4 == (129##8 // 9##4);
output1{test++} = 3##4 == (129##8 %% 9##4);
output1{test++} = 12##4 == (129##8 // 10##4);
output1{test++} = 9##4 == (129##8 %% 10##4);
output1{test++} = 11##4 == (129##8 // 11##4);
output1{test++} = 8##4 == (129##8 %% 11##4);
output1{test++} = 10##4 == (129##8 // 12##4);
output1{test++} = 9##4 == (129##8 %% 12##4);
output1{test++} = 9##4 == (129##8 // 13##4);
output1{test++} = 12##4 == (129##8 %% 13##4);
output1{test++} = 9##4 == (129##8 // 14##4);
output1{test++} = 3##4 == (129##8 %% 14##4);
output1{test++} = 8##4 == (129##8 // 15##4);
output1{test++} = 9##4 == (129##8 %% 15##4);
output1{test++} = 14##4 == (130##8 // 9##4);
output1{test++} = 4##4 == (130##8 %% 9##4);
output1{test++} = 13##4 == (130##8 // 10##4);
output1{test++} = 0##4 == (130##8 %% 10##4);
output1{test++} = 11##4 == (130##8 // 11##4);
output1{test++} = 9##4 == (130##8 %% 11##4);
output1{test++} = 10##4 == (130##8 // 12##4);
output1{test++} = 10##4 == (130##8 %% 12##4);
output1{test++} = 10##4 == (130##8 // 13##4);
output1{test++} = 0##4 == (130##8 %% 13##4);
output1{test++} = 9##4 == (130##8 // 14##4);
output1{test++} = 4##4 == (130##8 %% 14##4);
output1{test++} = 8##4 == (130##8 // 15##4);
output1{test++} = 10##4 == (130##8 %% 15##4);
output1{test++} = 14##4 == (131##8 // 9##4);
output1{test++} = 5##4 == (131##8 %% 9##4);
output1{test++} = 13##4 == (131##8 // 10##4);
output1{test++} = 1##4 == (131##8 %% 10##4);
output1{test++} = 11##4 == (131##8 // 11##4);
output1{test++} = 10##4 == (131##8 %% 11##4);
output1{test++} = 10##4 == (131##8 // 12##4);
output1{test++} = 11##4 == (131##8 %% 12##4);
output1{test++} = 10##4 == (131##8 // 13##4);
output1{test++} = 1##4 == (131##8 %% 13##4);
output1{test++} = 9##4 == (131##8 // 14##4);
output1{test++} = 5##4 == (131##8 %% 14##4);
output1{test++} = 8##4 == (131##8 // 15##4);
output1{test++} = 11##4 == (131##8 %% 15##4);
output1{test++} = 14##4 == (132##8 // 9##4);
output1{test++} = 6##4 == (132##8 %% 9##4);
output1{test++} = 13##4 == (132##8 // 10##4);
output1{test++} = 2##4 == (132##8 %% 10##4);
output1{test++} = 12##4 == (132##8 // 11##4);
output1{test++} = 0##4 == (132##8 %% 11##4);
output1{test++} = 11##4 == (132##8 // 12##4);
output1{test++} = 0##4 == (132##8 %% 12##4);
output1{test++} = 10##4 == (132##8 // 13##4);
output1{test++} = 2##4 == (132##8 %% 13##4);
output1{test++} = 9##4 == (132##8 // 14##4);
output1{test++} = 6##4 == (132##8 %% 14##4);
output1{test++} = 8##4 == (132##8 // 15##4);
output1{test++} = 12##4 == (132##8 %% 15##4);
output1{test++} = 14##4 == (133##8 // 9##4);
output1{test++} = 7##4 == (133##8 %% 9##4);
output1{test++} = 13##4 == (133##8 // 10##4);
output1{test++} = 3##4 == (133##8 %% 10##4);
output1{test++} = 12##4 == (133##8 // 11##4);
output1{test++} = 1##4 == (133##8 %% 11##4);
output1{test++} = 11##4 == (133##8 // 12##4);
output1{test++} = 1##4 == (133##8 %% 12##4);
output1{test++} = 10##4 == (133##8 // 13##4);
output1{test++} = 3##4 == (133##8 %% 13##4);
output1{test++} = 9##4 == (133##8 // 14##4);
output1{test++} = 7##4 == (133##8 %% 14##4);
output1{test++} = 8##4 == (133##8 // 15##4);
output1{test++} = 13##4 == (133##8 %% 15##4);
output1{test++} = 14##4 == (134##8 // 9##4);
output1{test++} = 8##4 == (134##8 %% 9##4);
output1{test++} = 13##4 == (134##8 // 10##4);
output1{test++} = 4##4 == (134##8 %% 10##4);
output1{test++} = 12##4 == (134##8 // 11##4);
output1{test++} = 2##4 == (134##8 %% 11##4);
output1{test++} = 11##4 == (134##8 // 12##4);
output1{test++} = 2##4 == (134##8 %% 12##4);
output1{test++} = 10##4 == (134##8 // 13##4);
output1{test++} = 4##4 == (134##8 %% 13##4);
output1{test++} = 9##4 == (134##8 // 14##4);
output1{test++} = 8##4 == (134##8 %% 14##4);
output1{test++} = 8##4 == (134##8 // 15##4);
output1{test++} = 14##4 == (134##8 %% 15##4);
output1{test++} = 15##4 == (135##8 // 9##4);
output1{test++} = 0##4 == (135##8 %% 9##4);
output1{test++} = 13##4 == (135##8 // 10##4);
output1{test++} = 5##4 == (135##8 %% 10##4);
output1{test++} = 12##4 == (135##8 // 11##4);
output1{test++} = 3##4 == (135##8 %% 11##4);
output1{test++} = 11##4 == (135##8 // 12##4);
output1{test++} = 3##4 == (135##8 %% 12##4);
output1{test++} = 10##4 == (135##8 // 13##4);
output1{test++} = 5##4 == (135##8 %% 13##4);
output1{test++} = 9##4 == (135##8 // 14##4);
output1{test++} = 9##4 == (135##8 %% 14##4);
output1{test++} = 9##4 == (135##8 // 15##4);
output1{test++} = 0##4 == (135##8 %% 15##4);
output1{test++} = 15##4 == (136##8 // 9##4);
output1{test++} = 1##4 == (136##8 %% 9##4);
output1{test++} = 13##4 == (136##8 // 10##4);
output1{test++} = 6##4 == (136##8 %% 10##4);
output1{test++} = 12##4 == (136##8 // 11##4);
output1{test++} = 4##4 == (136##8 %% 11##4);
output1{test++} = 11##4 == (136##8 // 12##4);
output1{test++} = 4##4 == (136##8 %% 12##4);
output1{test++} = 10##4 == (136##8 // 13##4);
output1{test++} = 6##4 == (136##8 %% 13##4);
output1{test++} = 9##4 == (136##8 // 14##4);
output1{test++} = 10##4 == (136##8 %% 14##4);
output1{test++} = 9##4 == (136##8 // 15##4);
output1{test++} = 1##4 == (136##8 %% 15##4);
output1{test++} = 15##4 == (137##8 // 9##4);
output1{test++} = 2##4 == (137##8 %% 9##4);
output1{test++} = 13##4 == (137##8 // 10##4);
output1{test++} = 7##4 == (137##8 %% 10##4);
output1{test++} = 12##4 == (137##8 // 11##4);
output1{test++} = 5##4 == (137##8 %% 11##4);
output1{test++} = 11##4 == (137##8 // 12##4);
output1{test++} = 5##4 == (137##8 %% 12##4);
output1{test++} = 10##4 == (137##8 // 13##4);
output1{test++} = 7##4 == (137##8 %% 13##4);
output1{test++} = 9##4 == (137##8 // 14##4);
output1{test++} = 11##4 == (137##8 %% 14##4);
output1{test++} = 9##4 == (137##8 // 15##4);
output1{test++} = 2##4 == (137##8 %% 15##4);
output1{test++} = 15##4 == (138##8 // 9##4);
output1{test++} = 3##4 == (138##8 %% 9##4);
output1{test++} = 13##4 == (138##8 // 10##4);
output1{test++} = 8##4 == (138##8 %% 10##4);
output1{test++} = 12##4 == (138##8 // 11##4);
output1{test++} = 6##4 == (138##8 %% 11##4);
output1{test++} = 11##4 == (138##8 // 12##4);
output1{test++} = 6##4 == (138##8 %% 12##4);
output1{test++} = 10##4 == (138##8 // 13##4);
output1{test++} = 8##4 == (138##8 %% 13##4);
output1{test++} = 9##4 == (138##8 // 14##4);
output1{test++} = 12##4 == (138##8 %% 14##4);
output1{test++} = 9##4 == (138##8 // 15##4);
output1{test++} = 3##4 == (138##8 %% 15##4);
output1{test++} = 15##4 == (139##8 // 9##4);
output1{test++} = 4##4 == (139##8 %% 9##4);
output1{test++} = 13##4 == (139##8 // 10##4);
output1{test++} = 9##4 == (139##8 %% 10##4);
output1{test++} = 12##4 == (139##8 // 11##4);
output1{test++} = 7##4 == (139##8 %% 11##4);
output1{test++} = 11##4 == (139##8 // 12##4);
output1{test++} = 7##4 == (139##8 %% 12##4);
output1{test++} = 10##4 == (139##8 // 13##4);
output1{test++} = 9##4 == (139##8 %% 13##4);
output1{test++} = 9##4 == (139##8 // 14##4);
output1{test++} = 13##4 == (139##8 %% 14##4);
output1{test++} = 9##4 == (139##8 // 15##4);
output1{test++} = 4##4 == (139##8 %% 15##4);
output1{test++} = 15##4 == (140##8 // 9##4);
output1{test++} = 5##4 == (140##8 %% 9##4);
output1{test++} = 14##4 == (140##8 // 10##4);
output1{test++} = 0##4 == (140##8 %% 10##4);
output1{test++} = 12##4 == (140##8 // 11##4);
output1{test++} = 8##4 == (140##8 %% 11##4);
output1{test++} = 11##4 == (140##8 // 12##4);
output1{test++} = 8##4 == (140##8 %% 12##4);
output1{test++} = 10##4 == (140##8 // 13##4);
output1{test++} = 10##4 == (140##8 %% 13##4);
output1{test++} = 10##4 == (140##8 // 14##4);
output1{test++} = 0##4 == (140##8 %% 14##4);
output1{test++} = 9##4 == (140##8 // 15##4);
output1{test++} = 5##4 == (140##8 %% 15##4);
output1{test++} = 15##4 == (141##8 // 9##4);
output1{test++} = 6##4 == (141##8 %% 9##4);
output1{test++} = 14##4 == (141##8 // 10##4);
output1{test++} = 1##4 == (141##8 %% 10##4);
output1{test++} = 12##4 == (141##8 // 11##4);
output1{test++} = 9##4 == (141##8 %% 11##4);
output1{test++} = 11##4 == (141##8 // 12##4);
output1{test++} = 9##4 == (141##8 %% 12##4);
output1{test++} = 10##4 == (141##8 // 13##4);
output1{test++} = 11##4 == (141##8 %% 13##4);
output1{test++} = 10##4 == (141##8 // 14##4);
output1{test++} = 1##4 == (141##8 %% 14##4);
output1{test++} = 9##4 == (141##8 // 15##4);
output1{test++} = 6##4 == (141##8 %% 15##4);
output1{test++} = 15##4 == (142##8 // 9##4);
output1{test++} = 7##4 == (142##8 %% 9##4);
output1{test++} = 14##4 == (142##8 // 10##4);
output1{test++} = 2##4 == (142##8 %% 10##4);
output1{test++} = 12##4 == (142##8 // 11##4);
output1{test++} = 10##4 == (142##8 %% 11##4);
output1{test++} = 11##4 == (142##8 // 12##4);
output1{test++} = 10##4 == (142##8 %% 12##4);
output1{test++} = 10##4 == (142##8 // 13##4);
output1{test++} = 12##4 == (142##8 %% 13##4);
output1{test++} = 10##4 == (142##8 // 14##4);
output1{test++} = 2##4 == (142##8 %% 14##4);
output1{test++} = 9##4 == (142##8 // 15##4);
output1{test++} = 7##4 == (142##8 %% 15##4);
output1{test++} = 15##4 == (143##8 // 9##4);
output1{test++} = 8##4 == (143##8 %% 9##4);
output1{test++} = 14##4 == (143##8 // 10##4);
output1{test++} = 3##4 == (143##8 %% 10##4);
output1{test++} = 13##4 == (143##8 // 11##4);
output1{test++} = 0##4 == (143##8 %% 11##4);
output1{test++} = 11##4 == (143##8 // 12##4);
output1{test++} = 11##4 == (143##8 %% 12##4);
output1{test++} = 11##4 == (143##8 // 13##4);
output1{test++} = 0##4 == (143##8 %% 13##4);
output1{test++} = 10##4 == (143##8 // 14##4);
output1{test++} = 3##4 == (143##8 %% 14##4);
output1{test++} = 9##4 == (143##8 // 15##4);
output1{test++} = 8##4 == (143##8 %% 15##4);
output1{test++} = 14##4 == (144##8 // 10##4);
output1{test++} = 4##4 == (144##8 %% 10##4);
output1{test++} = 13##4 == (144##8 // 11##4);
output1{test++} = 1##4 == (144##8 %% 11##4);
output1{test++} = 12##4 == (144##8 // 12##4);
output1{test++} = 0##4 == (144##8 %% 12##4);
output1{test++} = 11##4 == (144##8 // 13##4);
output1{test++} = 1##4 == (144##8 %% 13##4);
output1{test++} = 10##4 == (144##8 // 14##4);
output1{test++} = 4##4 == (144##8 %% 14##4);
output1{test++} = 9##4 == (144##8 // 15##4);
output1{test++} = 9##4 == (144##8 %% 15##4);
output1{test++} = 14##4 == (145##8 // 10##4);
output1{test++} = 5##4 == (145##8 %% 10##4);
output1{test++} = 13##4 == (145##8 // 11##4);
output1{test++} = 2##4 == (145##8 %% 11##4);
output1{test++} = 12##4 == (145##8 // 12##4);
output1{test++} = 1##4 == (145##8 %% 12##4);
output1{test++} = 11##4 == (145##8 // 13##4);
output1{test++} = 2##4 == (145##8 %% 13##4);
output1{test++} = 10##4 == (145##8 // 14##4);
output1{test++} = 5##4 == (145##8 %% 14##4);
output1{test++} = 9##4 == (145##8 // 15##4);
output1{test++} = 10##4 == (145##8 %% 15##4);
output1{test++} = 14##4 == (146##8 // 10##4);
output1{test++} = 6##4 == (146##8 %% 10##4);
output1{test++} = 13##4 == (146##8 // 11##4);
output1{test++} = 3##4 == (146##8 %% 11##4);
output1{test++} = 12##4 == (146##8 // 12##4);
output1{test++} = 2##4 == (146##8 %% 12##4);
output1{test++} = 11##4 == (146##8 // 13##4);
output1{test++} = 3##4 == (146##8 %% 13##4);
output1{test++} = 10##4 == (146##8 // 14##4);
output1{test++} = 6##4 == (146##8 %% 14##4);
output1{test++} = 9##4 == (146##8 // 15##4);
output1{test++} = 11##4 == (146##8 %% 15##4);
output1{test++} = 14##4 == (147##8 // 10##4);
output1{test++} = 7##4 == (147##8 %% 10##4);
output1{test++} = 13##4 == (147##8 // 11##4);
output1{test++} = 4##4 == (147##8 %% 11##4);
output1{test++} = 12##4 == (147##8 // 12##4);
output1{test++} = 3##4 == (147##8 %% 12##4);
output1{test++} = 11##4 == (147##8 // 13##4);
output1{test++} = 4##4 == (147##8 %% 13##4);
output1{test++} = 10##4 == (147##8 // 14##4);
output1{test++} = 7##4 == (147##8 %% 14##4);
output1{test++} = 9##4 == (147##8 // 15##4);
output1{test++} = 12##4 == (147##8 %% 15##4);
output1{test++} = 14##4 == (148##8 // 10##4);
output1{test++} = 8##4 == (148##8 %% 10##4);
output1{test++} = 13##4 == (148##8 // 11##4);
output1{test++} = 5##4 == (148##8 %% 11##4);
output1{test++} = 12##4 == (148##8 // 12##4);
output1{test++} = 4##4 == (148##8 %% 12##4);
output1{test++} = 11##4 == (148##8 // 13##4);
output1{test++} = 5##4 == (148##8 %% 13##4);
output1{test++} = 10##4 == (148##8 // 14##4);
output1{test++} = 8##4 == (148##8 %% 14##4);
output1{test++} = 9##4 == (148##8 // 15##4);
output1{test++} = 13##4 == (148##8 %% 15##4);
output1{test++} = 14##4 == (149##8 // 10##4);
output1{test++} = 9##4 == (149##8 %% 10##4);
output1{test++} = 13##4 == (149##8 // 11##4);
output1{test++} = 6##4 == (149##8 %% 11##4);
output1{test++} = 12##4 == (149##8 // 12##4);
output1{test++} = 5##4 == (149##8 %% 12##4);
output1{test++} = 11##4 == (149##8 // 13##4);
output1{test++} = 6##4 == (149##8 %% 13##4);
output1{test++} = 10##4 == (149##8 // 14##4);
output1{test++} = 9##4 == (149##8 %% 14##4);
output1{test++} = 9##4 == (149##8 // 15##4);
output1{test++} = 14##4 == (149##8 %% 15##4);
output1{test++} = 15##4 == (150##8 // 10##4);
output1{test++} = 0##4 == (150##8 %% 10##4);
output1{test++} = 13##4 == (150##8 // 11##4);
output1{test++} = 7##4 == (150##8 %% 11##4);
output1{test++} = 12##4 == (150##8 // 12##4);
output1{test++} = 6##4 == (150##8 %% 12##4);
output1{test++} = 11##4 == (150##8 // 13##4);
output1{test++} = 7##4 == (150##8 %% 13##4);
output1{test++} = 10##4 == (150##8 // 14##4);
output1{test++} = 10##4 == (150##8 %% 14##4);
output1{test++} = 10##4 == (150##8 // 15##4);
output1{test++} = 0##4 == (150##8 %% 15##4);
output1{test++} = 15##4 == (151##8 // 10##4);
output1{test++} = 1##4 == (151##8 %% 10##4);
output1{test++} = 13##4 == (151##8 // 11##4);
output1{test++} = 8##4 == (151##8 %% 11##4);
output1{test++} = 12##4 == (151##8 // 12##4);
output1{test++} = 7##4 == (151##8 %% 12##4);
output1{test++} = 11##4 == (151##8 // 13##4);
output1{test++} = 8##4 == (151##8 %% 13##4);
output1{test++} = 10##4 == (151##8 // 14##4);
output1{test++} = 11##4 == (151##8 %% 14##4);
output1{test++} = 10##4 == (151##8 // 15##4);
output1{test++} = 1##4 == (151##8 %% 15##4);
output1{test++} = 15##4 == (152##8 // 10##4);
output1{test++} = 2##4 == (152##8 %% 10##4);
output1{test++} = 13##4 == (152##8 // 11##4);
output1{test++} = 9##4 == (152##8 %% 11##4);
output1{test++} = 12##4 == (152##8 // 12##4);
output1{test++} = 8##4 == (152##8 %% 12##4);
output1{test++} = 11##4 == (152##8 // 13##4);
output1{test++} = 9##4 == (152##8 %% 13##4);
output1{test++} = 10##4 == (152##8 // 14##4);
output1{test++} = 12##4 == (152##8 %% 14##4);
output1{test++} = 10##4 == (152##8 // 15##4);
output1{test++} = 2##4 == (152##8 %% 15##4);
output1{test++} = 15##4 == (153##8 // 10##4);
output1{test++} = 3##4 == (153##8 %% 10##4);
output1{test++} = 13##4 == (153##8 // 11##4);
output1{test++} = 10##4 == (153##8 %% 11##4);
output1{test++} = 12##4 == (153##8 // 12##4);
output1{test++} = 9##4 == (153##8 %% 12##4);
output1{test++} = 11##4 == (153##8 // 13##4);
output1{test++} = 10##4 == (153##8 %% 13##4);
output1{test++} = 10##4 == (153##8 // 14##4);
output1{test++} = 13##4 == (153##8 %% 14##4);
output1{test++} = 10##4 == (153##8 // 15##4);
output1{test++} = 3##4 == (153##8 %% 15##4);
output1{test++} = 15##4 == (154##8 // 10##4);
output1{test++} = 4##4 == (154##8 %% 10##4);
output1{test++} = 14##4 == (154##8 // 11##4);
output1{test++} = 0##4 == (154##8 %% 11##4);
output1{test++} = 12##4 == (154##8 // 12##4);
output1{test++} = 10##4 == (154##8 %% 12##4);
output1{test++} = 11##4 == (154##8 // 13##4);
output1{test++} = 11##4 == (154##8 %% 13##4);
output1{test++} = 11##4 == (154##8 // 14##4);
output1{test++} = 0##4 == (154##8 %% 14##4);
output1{test++} = 10##4 == (154##8 // 15##4);
output1{test++} = 4##4 == (154##8 %% 15##4);
output1{test++} = 15##4 == (155##8 // 10##4);
output1{test++} = 5##4 == (155##8 %% 10##4);
output1{test++} = 14##4 == (155##8 // 11##4);
output1{test++} = 1##4 == (155##8 %% 11##4);
output1{test++} = 12##4 == (155##8 // 12##4);
output1{test++} = 11##4 == (155##8 %% 12##4);
output1{test++} = 11##4 == (155##8 // 13##4);
output1{test++} = 12##4 == (155##8 %% 13##4);
output1{test++} = 11##4 == (155##8 // 14##4);
output1{test++} = 1##4 == (155##8 %% 14##4);
output1{test++} = 10##4 == (155##8 // 15##4);
output1{test++} = 5##4 == (155##8 %% 15##4);
output1{test++} = 15##4 == (156##8 // 10##4);
output1{test++} = 6##4 == (156##8 %% 10##4);
output1{test++} = 14##4 == (156##8 // 11##4);
output1{test++} = 2##4 == (156##8 %% 11##4);
output1{test++} = 13##4 == (156##8 // 12##4);
output1{test++} = 0##4 == (156##8 %% 12##4);
output1{test++} = 12##4 == (156##8 // 13##4);
output1{test++} = 0##4 == (156##8 %% 13##4);
output1{test++} = 11##4 == (156##8 // 14##4);
output1{test++} = 2##4 == (156##8 %% 14##4);
output1{test++} = 10##4 == (156##8 // 15##4);
output1{test++} = 6##4 == (156##8 %% 15##4);
output1{test++} = 15##4 == (157##8 // 10##4);
output1{test++} = 7##4 == (157##8 %% 10##4);
output1{test++} = 14##4 == (157##8 // 11##4);
output1{test++} = 3##4 == (157##8 %% 11##4);
output1{test++} = 13##4 == (157##8 // 12##4);
output1{test++} = 1##4 == (157##8 %% 12##4);
output1{test++} = 12##4 == (157##8 // 13##4);
output1{test++} = 1##4 == (157##8 %% 13##4);
output1{test++} = 11##4 == (157##8 // 14##4);
output1{test++} = 3##4 == (157##8 %% 14##4);
output1{test++} = 10##4 == (157##8 // 15##4);
output1{test++} = 7##4 == (157##8 %% 15##4);
output1{test++} = 15##4 == (158##8 // 10##4);
output1{test++} = 8##4 == (158##8 %% 10##4);
output1{test++} = 14##4 == (158##8 // 11##4);
output1{test++} = 4##4 == (158##8 %% 11##4);
output1{test++} = 13##4 == (158##8 // 12##4);
output1{test++} = 2##4 == (158##8 %% 12##4);
output1{test++} = 12##4 == (158##8 // 13##4);
output1{test++} = 2##4 == (158##8 %% 13##4);
output1{test++} = 11##4 == (158##8 // 14##4);
output1{test++} = 4##4 == (158##8 %% 14##4);
output1{test++} = 10##4 == (158##8 // 15##4);
output1{test++} = 8##4 == (158##8 %% 15##4);
output1{test++} = 15##4 == (159##8 // 10##4);
output1{test++} = 9##4 == (159##8 %% 10##4);
output1{test++} = 14##4 == (159##8 // 11##4);
output1{test++} = 5##4 == (159##8 %% 11##4);
output1{test++} = 13##4 == (159##8 // 12##4);
output1{test++} = 3##4 == (159##8 %% 12##4);
output1{test++} = 12##4 == (159##8 // 13##4);
output1{test++} = 3##4 == (159##8 %% 13##4);
output1{test++} = 11##4 == (159##8 // 14##4);
output1{test++} = 5##4 == (159##8 %% 14##4);
output1{test++} = 10##4 == (159##8 // 15##4);
output1{test++} = 9##4 == (159##8 %% 15##4);
output1{test++} = 14##4 == (160##8 // 11##4);
output1{test++} = 6##4 == (160##8 %% 11##4);
output1{test++} = 13##4 == (160##8 // 12##4);
output1{test++} = 4##4 == (160##8 %% 12##4);
output1{test++} = 12##4 == (160##8 // 13##4);
output1{test++} = 4##4 == (160##8 %% 13##4);
output1{test++} = 11##4 == (160##8 // 14##4);
output1{test++} = 6##4 == (160##8 %% 14##4);
output1{test++} = 10##4 == (160##8 // 15##4);
output1{test++} = 10##4 == (160##8 %% 15##4);
output1{test++} = 14##4 == (161##8 // 11##4);
output1{test++} = 7##4 == (161##8 %% 11##4);
output1{test++} = 13##4 == (161##8 // 12##4);
output1{test++} = 5##4 == (161##8 %% 12##4);
output1{test++} = 12##4 == (161##8 // 13##4);
output1{test++} = 5##4 == (161##8 %% 13##4);
output1{test++} = 11##4 == (161##8 // 14##4);
output1{test++} = 7##4 == (161##8 %% 14##4);
output1{test++} = 10##4 == (161##8 // 15##4);
output1{test++} = 11##4 == (161##8 %% 15##4);
output1{test++} = 14##4 == (162##8 // 11##4);
output1{test++} = 8##4 == (162##8 %% 11##4);
output1{test++} = 13##4 == (162##8 // 12##4);
output1{test++} = 6##4 == (162##8 %% 12##4);
output1{test++} = 12##4 == (162##8 // 13##4);
output1{test++} = 6##4 == (162##8 %% 13##4);
output1{test++} = 11##4 == (162##8 // 14##4);
output1{test++} = 8##4 == (162##8 %% 14##4);
output1{test++} = 10##4 == (162##8 // 15##4);
output1{test++} = 12##4 == (162##8 %% 15##4);
output1{test++} = 14##4 == (163##8 // 11##4);
output1{test++} = 9##4 == (163##8 %% 11##4);
output1{test++} = 13##4 == (163##8 // 12##4);
output1{test++} = 7##4 == (163##8 %% 12##4);
output1{test++} = 12##4 == (163##8 // 13##4);
output1{test++} = 7##4 == (163##8 %% 13##4);
output1{test++} = 11##4 == (163##8 // 14##4);
output1{test++} = 9##4 == (163##8 %% 14##4);
output1{test++} = 10##4 == (163##8 // 15##4);
output1{test++} = 13##4 == (163##8 %% 15##4);
output1{test++} = 14##4 == (164##8 // 11##4);
output1{test++} = 10##4 == (164##8 %% 11##4);
output1{test++} = 13##4 == (164##8 // 12##4);
output1{test++} = 8##4 == (164##8 %% 12##4);
output1{test++} = 12##4 == (164##8 // 13##4);
output1{test++} = 8##4 == (164##8 %% 13##4);
output1{test++} = 11##4 == (164##8 // 14##4);
output1{test++} = 10##4 == (164##8 %% 14##4);
output1{test++} = 10##4 == (164##8 // 15##4);
output1{test++} = 14##4 == (164##8 %% 15##4);
output1{test++} = 15##4 == (165##8 // 11##4);
output1{test++} = 0##4 == (165##8 %% 11##4);
output1{test++} = 13##4 == (165##8 // 12##4);
output1{test++} = 9##4 == (165##8 %% 12##4);
output1{test++} = 12##4 == (165##8 // 13##4);
output1{test++} = 9##4 == (165##8 %% 13##4);
output1{test++} = 11##4 == (165##8 // 14##4);
output1{test++} = 11##4 == (165##8 %% 14##4);
output1{test++} = 11##4 == (165##8 // 15##4);
output1{test++} = 0##4 == (165##8 %% 15##4);
output1{test++} = 15##4 == (166##8 // 11##4);
output1{test++} = 1##4 == (166##8 %% 11##4);
output1{test++} = 13##4 == (166##8 // 12##4);
output1{test++} = 10##4 == (166##8 %% 12##4);
output1{test++} = 12##4 == (166##8 // 13##4);
output1{test++} = 10##4 == (166##8 %% 13##4);
output1{test++} = 11##4 == (166##8 // 14##4);
output1{test++} = 12##4 == (166##8 %% 14##4);
output1{test++} = 11##4 == (166##8 // 15##4);
output1{test++} = 1##4 == (166##8 %% 15##4);
output1{test++} = 15##4 == (167##8 // 11##4);
output1{test++} = 2##4 == (167##8 %% 11##4);
output1{test++} = 13##4 == (167##8 // 12##4);
output1{test++} = 11##4 == (167##8 %% 12##4);
output1{test++} = 12##4 == (167##8 // 13##4);
output1{test++} = 11##4 == (167##8 %% 13##4);
output1{test++} = 11##4 == (167##8 // 14##4);
output1{test++} = 13##4 == (167##8 %% 14##4);
output1{test++} = 11##4 == (167##8 // 15##4);
output1{test++} = 2##4 == (167##8 %% 15##4);
output1{test++} = 15##4 == (168##8 // 11##4);
output1{test++} = 3##4 == (168##8 %% 11##4);
output1{test++} = 14##4 == (168##8 // 12##4);
output1{test++} = 0##4 == (168##8 %% 12##4);
output1{test++} = 12##4 == (168##8 // 13##4);
output1{test++} = 12##4 == (168##8 %% 13##4);
output1{test++} = 12##4 == (168##8 // 14##4);
output1{test++} = 0##4 == (168##8 %% 14##4);
output1{test++} = 11##4 == (168##8 // 15##4);
output1{test++} = 3##4 == (168##8 %% 15##4);
output1{test++} = 15##4 == (169##8 // 11##4);
output1{test++} = 4##4 == (169##8 %% 11##4);
output1{test++} = 14##4 == (169##8 // 12##4);
output1{test++} = 1##4 == (169##8 %% 12##4);
output1{test++} = 13##4 == (169##8 // 13##4);
output1{test++} = 0##4 == (169##8 %% 13##4);
output1{test++} = 12##4 == (169##8 // 14##4);
output1{test++} = 1##4 == (169##8 %% 14##4);
output1{test++} = 11##4 == (169##8 // 15##4);
output1{test++} = 4##4 == (169##8 %% 15##4);
output1{test++} = 15##4 == (170##8 // 11##4);
output1{test++} = 5##4 == (170##8 %% 11##4);
output1{test++} = 14##4 == (170##8 // 12##4);
output1{test++} = 2##4 == (170##8 %% 12##4);
output1{test++} = 13##4 == (170##8 // 13##4);
output1{test++} = 1##4 == (170##8 %% 13##4);
output1{test++} = 12##4 == (170##8 // 14##4);
output1{test++} = 2##4 == (170##8 %% 14##4);
output1{test++} = 11##4 == (170##8 // 15##4);
output1{test++} = 5##4 == (170##8 %% 15##4);
output1{test++} = 15##4 == (171##8 // 11##4);
output1{test++} = 6##4 == (171##8 %% 11##4);
output1{test++} = 14##4 == (171##8 // 12##4);
output1{test++} = 3##4 == (171##8 %% 12##4);
output1{test++} = 13##4 == (171##8 // 13##4);
output1{test++} = 2##4 == (171##8 %% 13##4);
output1{test++} = 12##4 == (171##8 // 14##4);
output1{test++} = 3##4 == (171##8 %% 14##4);
output1{test++} = 11##4 == (171##8 // 15##4);
output1{test++} = 6##4 == (171##8 %% 15##4);
output1{test++} = 15##4 == (172##8 // 11##4);
output1{test++} = 7##4 == (172##8 %% 11##4);
output1{test++} = 14##4 == (172##8 // 12##4);
output1{test++} = 4##4 == (172##8 %% 12##4);
output1{test++} = 13##4 == (172##8 // 13##4);
output1{test++} = 3##4 == (172##8 %% 13##4);
output1{test++} = 12##4 == (172##8 // 14##4);
output1{test++} = 4##4 == (172##8 %% 14##4);
output1{test++} = 11##4 == (172##8 // 15##4);
output1{test++} = 7##4 == (172##8 %% 15##4);
output1{test++} = 15##4 == (173##8 // 11##4);
output1{test++} = 8##4 == (173##8 %% 11##4);
output1{test++} = 14##4 == (173##8 // 12##4);
output1{test++} = 5##4 == (173##8 %% 12##4);
output1{test++} = 13##4 == (173##8 // 13##4);
output1{test++} = 4##4 == (173##8 %% 13##4);
output1{test++} = 12##4 == (173##8 // 14##4);
output1{test++} = 5##4 == (173##8 %% 14##4);
output1{test++} = 11##4 == (173##8 // 15##4);
output1{test++} = 8##4 == (173##8 %% 15##4);
output1{test++} = 15##4 == (174##8 // 11##4);
output1{test++} = 9##4 == (174##8 %% 11##4);
output1{test++} = 14##4 == (174##8 // 12##4);
output1{test++} = 6##4 == (174##8 %% 12##4);
output1{test++} = 13##4 == (174##8 // 13##4);
output1{test++} = 5##4 == (174##8 %% 13##4);
output1{test++} = 12##4 == (174##8 // 14##4);
output1{test++} = 6##4 == (174##8 %% 14##4);
output1{test++} = 11##4 == (174##8 // 15##4);
output1{test++} = 9##4 == (174##8 %% 15##4);
output1{test++} = 15##4 == (175##8 // 11##4);
output1{test++} = 10##4 == (175##8 %% 11##4);
output1{test++} = 14##4 == (175##8 // 12##4);
output1{test++} = 7##4 == (175##8 %% 12##4);
output1{test++} = 13##4 == (175##8 // 13##4);
output1{test++} = 6##4 == (175##8 %% 13##4);
output1{test++} = 12##4 == (175##8 // 14##4);
output1{test++} = 7##4 == (175##8 %% 14##4);
output1{test++} = 11##4 == (175##8 // 15##4);
output1{test++} = 10##4 == (175##8 %% 15##4);
output1{test++} = 14##4 == (176##8 // 12##4);
output1{test++} = 8##4 == (176##8 %% 12##4);
output1{test++} = 13##4 == (176##8 // 13##4);
output1{test++} = 7##4 == (176##8 %% 13##4);
output1{test++} = 12##4 == (176##8 // 14##4);
output1{test++} = 8##4 == (176##8 %% 14##4);
output1{test++} = 11##4 == (176##8 // 15##4);
output1{test++} = 11##4 == (176##8 %% 15##4);
output1{test++} = 14##4 == (177##8 // 12##4);
output1{test++} = 9##4 == (177##8 %% 12##4);
output1{test++} = 13##4 == (177##8 // 13##4);
output1{test++} = 8##4 == (177##8 %% 13##4);
output1{test++} = 12##4 == (177##8 // 14##4);
output1{test++} = 9##4 == (177##8 %% 14##4);
output1{test++} = 11##4 == (177##8 // 15##4);
output1{test++} = 12##4 == (177##8 %% 15##4);
output1{test++} = 14##4 == (178##8 // 12##4);
output1{test++} = 10##4 == (178##8 %% 12##4);
output1{test++} = 13##4 == (178##8 // 13##4);
output1{test++} = 9##4 == (178##8 %% 13##4);
output1{test++} = 12##4 == (178##8 // 14##4);
output1{test++} = 10##4 == (178##8 %% 14##4);
output1{test++} = 11##4 == (178##8 // 15##4);
output1{test++} = 13##4 == (178##8 %% 15##4);
output1{test++} = 14##4 == (179##8 // 12##4);
output1{test++} = 11##4 == (179##8 %% 12##4);
output1{test++} = 13##4 == (179##8 // 13##4);
output1{test++} = 10##4 == (179##8 %% 13##4);
output1{test++} = 12##4 == (179##8 // 14##4);
output1{test++} = 11##4 == (179##8 %% 14##4);
output1{test++} = 11##4 == (179##8 // 15##4);
output1{test++} = 14##4 == (179##8 %% 15##4);
output1{test++} = 15##4 == (180##8 // 12##4);
output1{test++} = 0##4 == (180##8 %% 12##4);
output1{test++} = 13##4 == (180##8 // 13##4);
output1{test++} = 11##4 == (180##8 %% 13##4);
output1{test++} = 12##4 == (180##8 // 14##4);
output1{test++} = 12##4 == (180##8 %% 14##4);
output1{test++} = 12##4 == (180##8 // 15##4);
output1{test++} = 0##4 == (180##8 %% 15##4);
output1{test++} = 15##4 == (181##8 // 12##4);
output1{test++} = 1##4 == (181##8 %% 12##4);
output1{test++} = 13##4 == (181##8 // 13##4);
output1{test++} = 12##4 == (181##8 %% 13##4);
output1{test++} = 12##4 == (181##8 // 14##4);
output1{test++} = 13##4 == (181##8 %% 14##4);
output1{test++} = 12##4 == (181##8 // 15##4);
output1{test++} = 1##4 == (181##8 %% 15##4);
output1{test++} = 15##4 == (182##8 // 12##4);
output1{test++} = 2##4 == (182##8 %% 12##4);
output1{test++} = 14##4 == (182##8 // 13##4);
output1{test++} = 0##4 == (182##8 %% 13##4);
output1{test++} = 13##4 == (182##8 // 14##4);
output1{test++} = 0##4 == (182##8 %% 14##4);
output1{test++} = 12##4 == (182##8 // 15##4);
output1{test++} = 2##4 == (182##8 %% 15##4);
output1{test++} = 15##4 == (183##8 // 12##4);
output1{test++} = 3##4 == (183##8 %% 12##4);
output1{test++} = 14##4 == (183##8 // 13##4);
output1{test++} = 1##4 == (183##8 %% 13##4);
output1{test++} = 13##4 == (183##8 // 14##4);
output1{test++} = 1##4 == (183##8 %% 14##4);
output1{test++} = 12##4 == (183##8 // 15##4);
output1{test++} = 3##4 == (183##8 %% 15##4);
output1{test++} = 15##4 == (184##8 // 12##4);
output1{test++} = 4##4 == (184##8 %% 12##4);
output1{test++} = 14##4 == (184##8 // 13##4);
output1{test++} = 2##4 == (184##8 %% 13##4);
output1{test++} = 13##4 == (184##8 // 14##4);
output1{test++} = 2##4 == (184##8 %% 14##4);
output1{test++} = 12##4 == (184##8 // 15##4);
output1{test++} = 4##4 == (184##8 %% 15##4);
output1{test++} = 15##4 == (185##8 // 12##4);
output1{test++} = 5##4 == (185##8 %% 12##4);
output1{test++} = 14##4 == (185##8 // 13##4);
output1{test++} = 3##4 == (185##8 %% 13##4);
output1{test++} = 13##4 == (185##8 // 14##4);
output1{test++} = 3##4 == (185##8 %% 14##4);
output1{test++} = 12##4 == (185##8 // 15##4);
output1{test++} = 5##4 == (185##8 %% 15##4);
output1{test++} = 15##4 == (186##8 // 12##4);
output1{test++} = 6##4 == (186##8 %% 12##4);
output1{test++} = 14##4 == (186##8 // 13##4);
output1{test++} = 4##4 == (186##8 %% 13##4);
output1{test++} = 13##4 == (186##8 // 14##4);
output1{test++} = 4##4 == (186##8 %% 14##4);
output1{test++} = 12##4 == (186##8 // 15##4);
output1{test++} = 6##4 == (186##8 %% 15##4);
output1{test++} = 15##4 == (187##8 // 12##4);
output1{test++} = 7##4 == (187##8 %% 12##4);
output1{test++} = 14##4 == (187##8 // 13##4);
output1{test++} = 5##4 == (187##8 %% 13##4);
output1{test++} = 13##4 == (187##8 // 14##4);
output1{test++} = 5##4 == (187##8 %% 14##4);
output1{test++} = 12##4 == (187##8 // 15##4);
output1{test++} = 7##4 == (187##8 %% 15##4);
output1{test++} = 15##4 == (188##8 // 12##4);
output1{test++} = 8##4 == (188##8 %% 12##4);
output1{test++} = 14##4 == (188##8 // 13##4);
output1{test++} = 6##4 == (188##8 %% 13##4);
output1{test++} = 13##4 == (188##8 // 14##4);
output1{test++} = 6##4 == (188##8 %% 14##4);
output1{test++} = 12##4 == (188##8 // 15##4);
output1{test++} = 8##4 == (188##8 %% 15##4);
output1{test++} = 15##4 == (189##8 // 12##4);
output1{test++} = 9##4 == (189##8 %% 12##4);
output1{test++} = 14##4 == (189##8 // 13##4);
output1{test++} = 7##4 == (189##8 %% 13##4);
output1{test++} = 13##4 == (189##8 // 14##4);
output1{test++} = 7##4 == (189##8 %% 14##4);
output1{test++} = 12##4 == (189##8 // 15##4);
output1{test++} = 9##4 == (189##8 %% 15##4);
output1{test++} = 15##4 == (190##8 // 12##4);
output1{test++} = 10##4 == (190##8 %% 12##4);
output1{test++} = 14##4 == (190##8 // 13##4);
output1{test++} = 8##4 == (190##8 %% 13##4);
output1{test++} = 13##4 == (190##8 // 14##4);
output1{test++} = 8##4 == (190##8 %% 14##4);
output1{test++} = 12##4 == (190##8 // 15##4);
output1{test++} = 10##4 == (190##8 %% 15##4);
output1{test++} = 15##4 == (191##8 // 12##4);
output1{test++} = 11##4 == (191##8 %% 12##4);
output1{test++} = 14##4 == (191##8 // 13##4);
output1{test++} = 9##4 == (191##8 %% 13##4);
output1{test++} = 13##4 == (191##8 // 14##4);
output1{test++} = 9##4 == (191##8 %% 14##4);
output1{test++} = 12##4 == (191##8 // 15##4);
output1{test++} = 11##4 == (191##8 %% 15##4);
output1{test++} = 14##4 == (192##8 // 13##4);
output1{test++} = 10##4 == (192##8 %% 13##4);
output1{test++} = 13##4 == (192##8 // 14##4);
output1{test++} = 10##4 == (192##8 %% 14##4);
output1{test++} = 12##4 == (192##8 // 15##4);
output1{test++} = 12##4 == (192##8 %% 15##4);
output1{test++} = 14##4 == (193##8 // 13##4);
output1{test++} = 11##4 == (193##8 %% 13##4);
output1{test++} = 13##4 == (193##8 // 14##4);
output1{test++} = 11##4 == (193##8 %% 14##4);
output1{test++} = 12##4 == (193##8 // 15##4);
output1{test++} = 13##4 == (193##8 %% 15##4);
output1{test++} = 14##4 == (194##8 // 13##4);
output1{test++} = 12##4 == (194##8 %% 13##4);
output1{test++} = 13##4 == (194##8 // 14##4);
output1{test++} = 12##4 == (194##8 %% 14##4);
output1{test++} = 12##4 == (194##8 // 15##4);
output1{test++} = 14##4 == (194##8 %% 15##4);
output1{test++} = 15##4 == (195##8 // 13##4);
output1{test++} = 0##4 == (195##8 %% 13##4);
output1{test++} = 13##4 == (195##8 // 14##4);
output1{test++} = 13##4 == (195##8 %% 14##4);
output1{test++} = 13##4 == (195##8 // 15##4);
output1{test++} = 0##4 == (195##8 %% 15##4);
output1{test++} = 15##4 == (196##8 // 13##4);
output1{test++} = 1##4 == (196##8 %% 13##4);
output1{test++} = 14##4 == (196##8 // 14##4);
output1{test++} = 0##4 == (196##8 %% 14##4);
output1{test++} = 13##4 == (196##8 // 15##4);
output1{test++} = 1##4 == (196##8 %% 15##4);
output1{test++} = 15##4 == (197##8 // 13##4);
output1{test++} = 2##4 == (197##8 %% 13##4);
output1{test++} = 14##4 == (197##8 // 14##4);
output1{test++} = 1##4 == (197##8 %% 14##4);
output1{test++} = 13##4 == (197##8 // 15##4);
output1{test++} = 2##4 == (197##8 %% 15##4);
output1{test++} = 15##4 == (198##8 // 13##4);
output1{test++} = 3##4 == (198##8 %% 13##4);
output1{test++} = 14##4 == (198##8 // 14##4);
output1{test++} = 2##4 == (198##8 %% 14##4);
output1{test++} = 13##4 == (198##8 // 15##4);
output1{test++} = 3##4 == (198##8 %% 15##4);
output1{test++} = 15##4 == (199##8 // 13##4);
output1{test++} = 4##4 == (199##8 %% 13##4);
output1{test++} = 14##4 == (199##8 // 14##4);
output1{test++} = 3##4 == (199##8 %% 14##4);
output1{test++} = 13##4 == (199##8 // 15##4);
output1{test++} = 4##4 == (199##8 %% 15##4);
output1{test++} = 15##4 == (200##8 // 13##4);
output1{test++} = 5##4 == (200##8 %% 13##4);
output1{test++} = 14##4 == (200##8 // 14##4);
output1{test++} = 4##4 == (200##8 %% 14##4);
output1{test++} = 13##4 == (200##8 // 15##4);
output1{test++} = 5##4 == (200##8 %% 15##4);
output1{test++} = 15##4 == (201##8 // 13##4);
output1{test++} = 6##4 == (201##8 %% 13##4);
output1{test++} = 14##4 == (201##8 // 14##4);
output1{test++} = 5##4 == (201##8 %% 14##4);
output1{test++} = 13##4 == (201##8 // 15##4);
output1{test++} = 6##4 == (201##8 %% 15##4);
output1{test++} = 15##4 == (202##8 // 13##4);
output1{test++} = 7##4 == (202##8 %% 13##4);
output1{test++} = 14##4 == (202##8 // 14##4);
output1{test++} = 6##4 == (202##8 %% 14##4);
output1{test++} = 13##4 == (202##8 // 15##4);
output1{test++} = 7##4 == (202##8 %% 15##4);
output1{test++} = 15##4 == (203##8 // 13##4);
output1{test++} = 8##4 == (203##8 %% 13##4);
output1{test++} = 14##4 == (203##8 // 14##4);
output1{test++} = 7##4 == (203##8 %% 14##4);
output1{test++} = 13##4 == (203##8 // 15##4);
output1{test++} = 8##4 == (203##8 %% 15##4);
output1{test++} = 15##4 == (204##8 // 13##4);
output1{test++} = 9##4 == (204##8 %% 13##4);
output1{test++} = 14##4 == (204##8 // 14##4);
output1{test++} = 8##4 == (204##8 %% 14##4);
output1{test++} = 13##4 == (204##8 // 15##4);
output1{test++} = 9##4 == (204##8 %% 15##4);
output1{test++} = 15##4 == (205##8 // 13##4);
output1{test++} = 10##4 == (205##8 %% 13##4);
output1{test++} = 14##4 == (205##8 // 14##4);
output1{test++} = 9##4 == (205##8 %% 14##4);
output1{test++} = 13##4 == (205##8 // 15##4);
output1{test++} = 10##4 == (205##8 %% 15##4);
output1{test++} = 15##4 == (206##8 // 13##4);
output1{test++} = 11##4 == (206##8 %% 13##4);
output1{test++} = 14##4 == (206##8 // 14##4);
output1{test++} = 10##4 == (206##8 %% 14##4);
output1{test++} = 13##4 == (206##8 // 15##4);
output1{test++} = 11##4 == (206##8 %% 15##4);
output1{test++} = 15##4 == (207##8 // 13##4);
output1{test++} = 12##4 == (207##8 %% 13##4);
output1{test++} = 14##4 == (207##8 // 14##4);
output1{test++} = 11##4 == (207##8 %% 14##4);
output1{test++} = 13##4 == (207##8 // 15##4);
output1{test++} = 12##4 == (207##8 %% 15##4);
output1{test++} = 14##4 == (208##8 // 14##4);
output1{test++} = 12##4 == (208##8 %% 14##4);
output1{test++} = 13##4 == (208##8 // 15##4);
output1{test++} = 13##4 == (208##8 %% 15##4);
output1{test++} = 14##4 == (209##8 // 14##4);
output1{test++} = 13##4 == (209##8 %% 14##4);
output1{test++} = 13##4 == (209##8 // 15##4);
output1{test++} = 14##4 == (209##8 %% 15##4);
output1{test++} = 15##4 == (210##8 // 14##4);
output1{test++} = 0##4 == (210##8 %% 14##4);
output1{test++} = 14##4 == (210##8 // 15##4);
output1{test++} = 0##4 == (210##8 %% 15##4);
output1{test++} = 15##4 == (211##8 // 14##4);
output1{test++} = 1##4 == (211##8 %% 14##4);
output1{test++} = 14##4 == (211##8 // 15##4);
output1{test++} = 1##4 == (211##8 %% 15##4);
output1{test++} = 15##4 == (212##8 // 14##4);
output1{test++} = 2##4 == (212##8 %% 14##4);
output1{test++} = 14##4 == (212##8 // 15##4);
output1{test++} = 2##4 == (212##8 %% 15##4);
output1{test++} = 15##4 == (213##8 // 14##4);
output1{test++} = 3##4 == (213##8 %% 14##4);
output1{test++} = 14##4 == (213##8 // 15##4);
output1{test++} = 3##4 == (213##8 %% 15##4);
output1{test++} = 15##4 == (214##8 // 14##4);
output1{test++} = 4##4 == (214##8 %% 14##4);
output1{test++} = 14##4 == (214##8 // 15##4);
output1{test++} = 4##4 == (214##8 %% 15##4);
output1{test++} = 15##4 == (215##8 // 14##4);
output1{test++} = 5##4 == (215##8 %% 14##4);
output1{test++} = 14##4 == (215##8 // 15##4);
output1{test++} = 5##4 == (215##8 %% 15##4);
output1{test++} = 15##4 == (216##8 // 14##4);
output1{test++} = 6##4 == (216##8 %% 14##4);
output1{test++} = 14##4 == (216##8 // 15##4);
output1{test++} = 6##4 == (216##8 %% 15##4);
output1{test++} = 15##4 == (217##8 // 14##4);
output1{test++} = 7##4 == (217##8 %% 14##4);
output1{test++} = 14##4 == (217##8 // 15##4);
output1{test++} = 7##4 == (217##8 %% 15##4);
output1{test++} = 15##4 == (218##8 // 14##4);
output1{test++} = 8##4 == (218##8 %% 14##4);
output1{test++} = 14##4 == (218##8 // 15##4);
output1{test++} = 8##4 == (218##8 %% 15##4);
output1{test++} = 15##4 == (219##8 // 14##4);
output1{test++} = 9##4 == (219##8 %% 14##4);
output1{test++} = 14##4 == (219##8 // 15##4);
output1{test++} = 9##4 == (219##8 %% 15##4);
output1{test++} = 15##4 == (220##8 // 14##4);
output1{test++} = 10##4 == (220##8 %% 14##4);
output1{test++} = 14##4 == (220##8 // 15##4);
output1{test++} = 10##4 == (220##8 %% 15##4);
output1{test++} = 15##4 == (221##8 // 14##4);
output1{test++} = 11##4 == (221##8 %% 14##4);
output1{test++} = 14##4 == (221##8 // 15##4);
output1{test++} = 11##4 == (221##8 %% 15##4);
output1{test++} = 15##4 == (222##8 // 14##4);
output1{test++} = 12##4 == (222##8 %% 14##4);
output1{test++} = 14##4 == (222##8 // 15##4);
output1{test++} = 12##4 == (222##8 %% 15##4);
output1{test++} = 15##4 == (223##8 // 14##4);
output1{test++} = 13##4 == (223##8 %% 14##4);
output1{test++} = 14##4 == (223##8 // 15##4);
output1{test++} = 13##4 == (223##8 %% 15##4);
output1{test++} = 14##4 == (224##8 // 15##4);
output1{test++} = 14##4 == (224##8 %% 15##4);
output1{test++} = 15##4 == (225##8 // 15##4);
output1{test++} = 0##4 == (225##8 %% 15##4);
output1{test++} = 15##4 == (226##8 // 15##4);
output1{test++} = 1##4 == (226##8 %% 15##4);
output1{test++} = 15##4 == (227##8 // 15##4);
output1{test++} = 2##4 == (227##8 %% 15##4);
output1{test++} = 15##4 == (228##8 // 15##4);
output1{test++} = 3##4 == (228##8 %% 15##4);
output1{test++} = 15##4 == (229##8 // 15##4);
output1{test++} = 4##4 == (229##8 %% 15##4);
output1{test++} = 15##4 == (230##8 // 15##4);
output1{test++} = 5##4 == (230##8 %% 15##4);
output1{test++} = 15##4 == (231##8 // 15##4);
output1{test++} = 6##4 == (231##8 %% 15##4);
output1{test++} = 15##4 == (232##8 // 15##4);
output1{test++} = 7##4 == (232##8 %% 15##4);
output1{test++} = 15##4 == (233##8 // 15##4);
output1{test++} = 8##4 == (233##8 %% 15##4);
output1{test++} = 15##4 == (234##8 // 15##4);
output1{test++} = 9##4 == (234##8 %% 15##4);
output1{test++} = 15##4 == (235##8 // 15##4);
output1{test++} = 10##4 == (235##8 %% 15##4);
output1{test++} = 15##4 == (236##8 // 15##4);
output1{test++} = 11##4 == (236##8 %% 15##4);
output1{test++} = 15##4 == (237##8 // 15##4);
output1{test++} = 12##4 == (237##8 %% 15##4);
output1{test++} = 15##4 == (238##8 // 15##4);
output1{test++} = 13##4 == (238##8 %% 15##4);
output1{test++} = 15##4 == (239##8 // 15##4);
output1{test++} = 14##4 == (239##8 %% 15##4);


int4 unsignedi, unsignedj; sint4 signedi, signedj;


unsignedi = MUI4(0##4);
signedi = MI4(-8#4);
output1{test++} = 15##4 == (~unsignedi);
output1{test++} = 7#4 == (~signedi);
unsignedj = MUI4(0##4);
output1{test++} = 0##4 == (unsignedi+unsignedj);
output1{test++} = 0##4 == (unsignedi -unsignedj);
output1{test++} = 0##4 == (unsignedi *unsignedj);
output1{test++} = 0##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi & unsignedj);
output1{test++} = 0##4 == (unsignedi | unsignedj);
output1{test++} = 0##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 1##1 == (unsignedi ==unsignedj);
output1{test++} = 0##1 == (unsignedi !=unsignedj);
signedj = MI4(-8#4);
output1{test++} = -16#4 == (signedi+signedj);
output1{test++} = 0#4 == (signedi -signedj);
output1{test++} = 64#4 == (signedi *signedj);
output1{test++} = 64#8 == (signedi **signedj);
output1{test++} = 1#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = 1#4 == ((MI8(-8#8)) // signedj);
output1{test++} = 0#4 == ((MI8(-8#8)) %%signedj);
output1{test++} = -8#4 == (signedi & signedj);
output1{test++} = -8#4 == (signedi | signedj);
output1{test++} = 0#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 1#1 == (signedi ==signedj);
output1{test++} = 0#1 == (signedi !=signedj);
unsignedj = MUI4(1##4);
output1{test++} = 1##4 == (unsignedi+unsignedj);
output1{test++} = -1##4 == (unsignedi -unsignedj);
output1{test++} = 0##4 == (unsignedi *unsignedj);
output1{test++} = 0##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 0##4 == (unsignedi %unsignedj);
output1{test++} = 0##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 0##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 0##4 == (unsignedi & unsignedj);
output1{test++} = 1##4 == (unsignedi | unsignedj);
output1{test++} = 1##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-7#4);
output1{test++} = -15#4 == (signedi+signedj);
output1{test++} = -1#4 == (signedi -signedj);
output1{test++} = 56#4 == (signedi *signedj);
output1{test++} = 56#8 == (signedi **signedj);
output1{test++} = 1#4 == (signedi /signedj);
output1{test++} = -1#4 == (signedi %signedj);
output1{test++} = 1#4 == ((MI8(-8#8)) // signedj);
output1{test++} = -1#4 == ((MI8(-8#8)) %%signedj);
output1{test++} = -8#4 == (signedi & signedj);
output1{test++} = -7#4 == (signedi | signedj);
output1{test++} = 1#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(2##4);
output1{test++} = 2##4 == (unsignedi+unsignedj);
output1{test++} = -2##4 == (unsignedi -unsignedj);
output1{test++} = 0##4 == (unsignedi *unsignedj);
output1{test++} = 0##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 0##4 == (unsignedi %unsignedj);
output1{test++} = 0##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 0##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 0##4 == (unsignedi & unsignedj);
output1{test++} = 2##4 == (unsignedi | unsignedj);
output1{test++} = 2##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-6#4);
output1{test++} = -14#4 == (signedi+signedj);
output1{test++} = -2#4 == (signedi -signedj);
output1{test++} = 48#4 == (signedi *signedj);
output1{test++} = 48#8 == (signedi **signedj);
output1{test++} = 1#4 == (signedi /signedj);
output1{test++} = -2#4 == (signedi %signedj);
output1{test++} = 1#4 == ((MI8(-8#8)) // signedj);
output1{test++} = -2#4 == ((MI8(-8#8)) %%signedj);
output1{test++} = -8#4 == (signedi & signedj);
output1{test++} = -6#4 == (signedi | signedj);
output1{test++} = 2#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(3##4);
output1{test++} = 3##4 == (unsignedi+unsignedj);
output1{test++} = -3##4 == (unsignedi -unsignedj);
output1{test++} = 0##4 == (unsignedi *unsignedj);
output1{test++} = 0##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 0##4 == (unsignedi %unsignedj);
output1{test++} = 0##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 0##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 0##4 == (unsignedi & unsignedj);
output1{test++} = 3##4 == (unsignedi | unsignedj);
output1{test++} = 3##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-5#4);
output1{test++} = -13#4 == (signedi+signedj);
output1{test++} = -3#4 == (signedi -signedj);
output1{test++} = 40#4 == (signedi *signedj);
output1{test++} = 40#8 == (signedi **signedj);
output1{test++} = 1#4 == (signedi /signedj);
output1{test++} = -3#4 == (signedi %signedj);
output1{test++} = 1#4 == ((MI8(-8#8)) // signedj);
output1{test++} = -3#4 == ((MI8(-8#8)) %%signedj);
output1{test++} = -8#4 == (signedi & signedj);
output1{test++} = -5#4 == (signedi | signedj);
output1{test++} = 3#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(4##4);
output1{test++} = 4##4 == (unsignedi+unsignedj);
output1{test++} = -4##4 == (unsignedi -unsignedj);
output1{test++} = 0##4 == (unsignedi *unsignedj);
output1{test++} = 0##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 0##4 == (unsignedi %unsignedj);
output1{test++} = 0##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 0##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 0##4 == (unsignedi & unsignedj);
output1{test++} = 4##4 == (unsignedi | unsignedj);
output1{test++} = 4##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-4#4);
output1{test++} = -12#4 == (signedi+signedj);
output1{test++} = -4#4 == (signedi -signedj);
output1{test++} = 32#4 == (signedi *signedj);
output1{test++} = 32#8 == (signedi **signedj);
output1{test++} = 2#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = 2#4 == ((MI8(-8#8)) // signedj);
output1{test++} = 0#4 == ((MI8(-8#8)) %%signedj);
output1{test++} = -8#4 == (signedi & signedj);
output1{test++} = -4#4 == (signedi | signedj);
output1{test++} = 4#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(5##4);
output1{test++} = 5##4 == (unsignedi+unsignedj);
output1{test++} = -5##4 == (unsignedi -unsignedj);
output1{test++} = 0##4 == (unsignedi *unsignedj);
output1{test++} = 0##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 0##4 == (unsignedi %unsignedj);
output1{test++} = 0##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 0##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 0##4 == (unsignedi & unsignedj);
output1{test++} = 5##4 == (unsignedi | unsignedj);
output1{test++} = 5##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-3#4);
output1{test++} = -11#4 == (signedi+signedj);
output1{test++} = -5#4 == (signedi -signedj);
output1{test++} = 24#4 == (signedi *signedj);
output1{test++} = 24#8 == (signedi **signedj);
output1{test++} = 2#4 == (signedi /signedj);
output1{test++} = -2#4 == (signedi %signedj);
output1{test++} = 2#4 == ((MI8(-8#8)) // signedj);
output1{test++} = -2#4 == ((MI8(-8#8)) %%signedj);
output1{test++} = -8#4 == (signedi & signedj);
output1{test++} = -3#4 == (signedi | signedj);
output1{test++} = 5#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(6##4);
output1{test++} = 6##4 == (unsignedi+unsignedj);
output1{test++} = -6##4 == (unsignedi -unsignedj);
output1{test++} = 0##4 == (unsignedi *unsignedj);
output1{test++} = 0##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 0##4 == (unsignedi %unsignedj);
output1{test++} = 0##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 0##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 0##4 == (unsignedi & unsignedj);
output1{test++} = 6##4 == (unsignedi | unsignedj);
output1{test++} = 6##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-2#4);
output1{test++} = -10#4 == (signedi+signedj);
output1{test++} = -6#4 == (signedi -signedj);
output1{test++} = 16#4 == (signedi *signedj);
output1{test++} = 16#8 == (signedi **signedj);
output1{test++} = 4#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = 4#4 == ((MI8(-8#8)) // signedj);
output1{test++} = 0#4 == ((MI8(-8#8)) %%signedj);
output1{test++} = -8#4 == (signedi & signedj);
output1{test++} = -2#4 == (signedi | signedj);
output1{test++} = 6#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(7##4);
output1{test++} = 7##4 == (unsignedi+unsignedj);
output1{test++} = -7##4 == (unsignedi -unsignedj);
output1{test++} = 0##4 == (unsignedi *unsignedj);
output1{test++} = 0##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 0##4 == (unsignedi %unsignedj);
output1{test++} = 0##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 0##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 0##4 == (unsignedi & unsignedj);
output1{test++} = 7##4 == (unsignedi | unsignedj);
output1{test++} = 7##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-1#4);
output1{test++} = -9#4 == (signedi+signedj);
output1{test++} = -7#4 == (signedi -signedj);
output1{test++} = 8#4 == (signedi *signedj);
output1{test++} = 8#8 == (signedi **signedj);
output1{test++} = 8#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = -8#4 == (signedi & signedj);
output1{test++} = -1#4 == (signedi | signedj);
output1{test++} = 7#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(8##4);
output1{test++} = 8##4 == (unsignedi+unsignedj);
output1{test++} = -8##4 == (unsignedi -unsignedj);
output1{test++} = 0##4 == (unsignedi *unsignedj);
output1{test++} = 0##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 0##4 == (unsignedi %unsignedj);
output1{test++} = 0##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 0##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 0##4 == (unsignedi & unsignedj);
output1{test++} = 8##4 == (unsignedi | unsignedj);
output1{test++} = 8##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(0#4);
output1{test++} = -8#4 == (signedi+signedj);
output1{test++} = -8#4 == (signedi -signedj);
output1{test++} = 0#4 == (signedi *signedj);
output1{test++} = 0#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi & signedj);
output1{test++} = -8#4 == (signedi | signedj);
output1{test++} = -8#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(9##4);
output1{test++} = 9##4 == (unsignedi+unsignedj);
output1{test++} = -9##4 == (unsignedi -unsignedj);
output1{test++} = 0##4 == (unsignedi *unsignedj);
output1{test++} = 0##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 0##4 == (unsignedi %unsignedj);
output1{test++} = 0##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 0##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 0##4 == (unsignedi & unsignedj);
output1{test++} = 9##4 == (unsignedi | unsignedj);
output1{test++} = 9##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(1#4);
output1{test++} = -7#4 == (signedi+signedj);
output1{test++} = -9#4 == (signedi -signedj);
output1{test++} = -8#4 == (signedi *signedj);
output1{test++} = -8#8 == (signedi **signedj);
output1{test++} = -8#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = -8#4 == ((MI8(-8#8)) // signedj);
output1{test++} = 0#4 == ((MI8(-8#8)) %%signedj);
output1{test++} = 0#4 == (signedi & signedj);
output1{test++} = -7#4 == (signedi | signedj);
output1{test++} = -7#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(10##4);
output1{test++} = 10##4 == (unsignedi+unsignedj);
output1{test++} = -10##4 == (unsignedi -unsignedj);
output1{test++} = 0##4 == (unsignedi *unsignedj);
output1{test++} = 0##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 0##4 == (unsignedi %unsignedj);
output1{test++} = 0##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 0##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 0##4 == (unsignedi & unsignedj);
output1{test++} = 10##4 == (unsignedi | unsignedj);
output1{test++} = 10##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(2#4);
output1{test++} = -6#4 == (signedi+signedj);
output1{test++} = -10#4 == (signedi -signedj);
output1{test++} = -16#4 == (signedi *signedj);
output1{test++} = -16#8 == (signedi **signedj);
output1{test++} = -4#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = -4#4 == ((MI8(-8#8)) // signedj);
output1{test++} = 0#4 == ((MI8(-8#8)) %%signedj);
output1{test++} = 0#4 == (signedi & signedj);
output1{test++} = -6#4 == (signedi | signedj);
output1{test++} = -6#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(11##4);
output1{test++} = 11##4 == (unsignedi+unsignedj);
output1{test++} = -11##4 == (unsignedi -unsignedj);
output1{test++} = 0##4 == (unsignedi *unsignedj);
output1{test++} = 0##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 0##4 == (unsignedi %unsignedj);
output1{test++} = 0##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 0##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 0##4 == (unsignedi & unsignedj);
output1{test++} = 11##4 == (unsignedi | unsignedj);
output1{test++} = 11##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(3#4);
output1{test++} = -5#4 == (signedi+signedj);
output1{test++} = -11#4 == (signedi -signedj);
output1{test++} = -24#4 == (signedi *signedj);
output1{test++} = -24#8 == (signedi **signedj);
output1{test++} = -2#4 == (signedi /signedj);
output1{test++} = -2#4 == (signedi %signedj);
output1{test++} = -2#4 == ((MI8(-8#8)) // signedj);
output1{test++} = -2#4 == ((MI8(-8#8)) %%signedj);
output1{test++} = 0#4 == (signedi & signedj);
output1{test++} = -5#4 == (signedi | signedj);
output1{test++} = -5#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(12##4);
output1{test++} = 12##4 == (unsignedi+unsignedj);
output1{test++} = -12##4 == (unsignedi -unsignedj);
output1{test++} = 0##4 == (unsignedi *unsignedj);
output1{test++} = 0##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 0##4 == (unsignedi %unsignedj);
output1{test++} = 0##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 0##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 0##4 == (unsignedi & unsignedj);
output1{test++} = 12##4 == (unsignedi | unsignedj);
output1{test++} = 12##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(4#4);
output1{test++} = -4#4 == (signedi+signedj);
output1{test++} = -12#4 == (signedi -signedj);
output1{test++} = -32#4 == (signedi *signedj);
output1{test++} = -32#8 == (signedi **signedj);
output1{test++} = -2#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = -2#4 == ((MI8(-8#8)) // signedj);
output1{test++} = 0#4 == ((MI8(-8#8)) %%signedj);
output1{test++} = 0#4 == (signedi & signedj);
output1{test++} = -4#4 == (signedi | signedj);
output1{test++} = -4#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(13##4);
output1{test++} = 13##4 == (unsignedi+unsignedj);
output1{test++} = -13##4 == (unsignedi -unsignedj);
output1{test++} = 0##4 == (unsignedi *unsignedj);
output1{test++} = 0##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 0##4 == (unsignedi %unsignedj);
output1{test++} = 0##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 0##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 0##4 == (unsignedi & unsignedj);
output1{test++} = 13##4 == (unsignedi | unsignedj);
output1{test++} = 13##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(5#4);
output1{test++} = -3#4 == (signedi+signedj);
output1{test++} = -13#4 == (signedi -signedj);
output1{test++} = -40#4 == (signedi *signedj);
output1{test++} = -40#8 == (signedi **signedj);
output1{test++} = -1#4 == (signedi /signedj);
output1{test++} = -3#4 == (signedi %signedj);
output1{test++} = -1#4 == ((MI8(-8#8)) // signedj);
output1{test++} = -3#4 == ((MI8(-8#8)) %%signedj);
output1{test++} = 0#4 == (signedi & signedj);
output1{test++} = -3#4 == (signedi | signedj);
output1{test++} = -3#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(14##4);
output1{test++} = 14##4 == (unsignedi+unsignedj);
output1{test++} = -14##4 == (unsignedi -unsignedj);
output1{test++} = 0##4 == (unsignedi *unsignedj);
output1{test++} = 0##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 0##4 == (unsignedi %unsignedj);
output1{test++} = 0##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 0##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 0##4 == (unsignedi & unsignedj);
output1{test++} = 14##4 == (unsignedi | unsignedj);
output1{test++} = 14##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(6#4);
output1{test++} = -2#4 == (signedi+signedj);
output1{test++} = -14#4 == (signedi -signedj);
output1{test++} = -48#4 == (signedi *signedj);
output1{test++} = -48#8 == (signedi **signedj);
output1{test++} = -1#4 == (signedi /signedj);
output1{test++} = -2#4 == (signedi %signedj);
output1{test++} = -1#4 == ((MI8(-8#8)) // signedj);
output1{test++} = -2#4 == ((MI8(-8#8)) %%signedj);
output1{test++} = 0#4 == (signedi & signedj);
output1{test++} = -2#4 == (signedi | signedj);
output1{test++} = -2#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(15##4);
output1{test++} = 15##4 == (unsignedi+unsignedj);
output1{test++} = -15##4 == (unsignedi -unsignedj);
output1{test++} = 0##4 == (unsignedi *unsignedj);
output1{test++} = 0##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 0##4 == (unsignedi %unsignedj);
output1{test++} = 0##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 0##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 0##4 == (unsignedi & unsignedj);
output1{test++} = 15##4 == (unsignedi | unsignedj);
output1{test++} = 15##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(7#4);
output1{test++} = -1#4 == (signedi+signedj);
output1{test++} = -15#4 == (signedi -signedj);
output1{test++} = -56#4 == (signedi *signedj);
output1{test++} = -56#8 == (signedi **signedj);
output1{test++} = -1#4 == (signedi /signedj);
output1{test++} = -1#4 == (signedi %signedj);
output1{test++} = -1#4 == ((MI8(-8#8)) // signedj);
output1{test++} = -1#4 == ((MI8(-8#8)) %%signedj);
output1{test++} = 0#4 == (signedi & signedj);
output1{test++} = -1#4 == (signedi | signedj);
output1{test++} = -1#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedi = MUI4(1##4);
signedi = MI4(-7#4);
output1{test++} = 14##4 == (~unsignedi);
output1{test++} = 6#4 == (~signedi);
unsignedj = MUI4(0##4);
output1{test++} = 1##4 == (unsignedi+unsignedj);
output1{test++} = 1##4 == (unsignedi -unsignedj);
output1{test++} = 0##4 == (unsignedi *unsignedj);
output1{test++} = 0##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi & unsignedj);
output1{test++} = 1##4 == (unsignedi | unsignedj);
output1{test++} = 1##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-8#4);
output1{test++} = -15#4 == (signedi+signedj);
output1{test++} = 1#4 == (signedi -signedj);
output1{test++} = 56#4 == (signedi *signedj);
output1{test++} = 56#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = -7#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(-7#8)) // signedj);
output1{test++} = -7#4 == ((MI8(-7#8)) %%signedj);
output1{test++} = -8#4 == (signedi & signedj);
output1{test++} = -7#4 == (signedi | signedj);
output1{test++} = 1#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(1##4);
output1{test++} = 2##4 == (unsignedi+unsignedj);
output1{test++} = 0##4 == (unsignedi -unsignedj);
output1{test++} = 1##4 == (unsignedi *unsignedj);
output1{test++} = 1##8 == (unsignedi **unsignedj);
output1{test++} = 1##4 == (unsignedi /unsignedj);
output1{test++} = 0##4 == (unsignedi %unsignedj);
output1{test++} = 8##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 0##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 1##4 == (unsignedi & unsignedj);
output1{test++} = 1##4 == (unsignedi | unsignedj);
output1{test++} = 0##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 1##1 == (unsignedi ==unsignedj);
output1{test++} = 0##1 == (unsignedi !=unsignedj);
signedj = MI4(-7#4);
output1{test++} = -14#4 == (signedi+signedj);
output1{test++} = 0#4 == (signedi -signedj);
output1{test++} = 49#4 == (signedi *signedj);
output1{test++} = 49#8 == (signedi **signedj);
output1{test++} = 1#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = 1#4 == ((MI8(-7#8)) // signedj);
output1{test++} = 0#4 == ((MI8(-7#8)) %%signedj);
output1{test++} = -7#4 == (signedi & signedj);
output1{test++} = -7#4 == (signedi | signedj);
output1{test++} = 0#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 1#1 == (signedi ==signedj);
output1{test++} = 0#1 == (signedi !=signedj);
unsignedj = MUI4(2##4);
output1{test++} = 3##4 == (unsignedi+unsignedj);
output1{test++} = -1##4 == (unsignedi -unsignedj);
output1{test++} = 2##4 == (unsignedi *unsignedj);
output1{test++} = 2##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 1##4 == (unsignedi %unsignedj);
output1{test++} = 4##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 0##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 0##4 == (unsignedi & unsignedj);
output1{test++} = 3##4 == (unsignedi | unsignedj);
output1{test++} = 3##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-6#4);
output1{test++} = -13#4 == (signedi+signedj);
output1{test++} = -1#4 == (signedi -signedj);
output1{test++} = 42#4 == (signedi *signedj);
output1{test++} = 42#8 == (signedi **signedj);
output1{test++} = 1#4 == (signedi /signedj);
output1{test++} = -1#4 == (signedi %signedj);
output1{test++} = 1#4 == ((MI8(-7#8)) // signedj);
output1{test++} = -1#4 == ((MI8(-7#8)) %%signedj);
output1{test++} = -8#4 == (signedi & signedj);
output1{test++} = -5#4 == (signedi | signedj);
output1{test++} = 3#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(3##4);
output1{test++} = 4##4 == (unsignedi+unsignedj);
output1{test++} = -2##4 == (unsignedi -unsignedj);
output1{test++} = 3##4 == (unsignedi *unsignedj);
output1{test++} = 3##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 1##4 == (unsignedi %unsignedj);
output1{test++} = 2##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 2##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 1##4 == (unsignedi & unsignedj);
output1{test++} = 3##4 == (unsignedi | unsignedj);
output1{test++} = 2##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-5#4);
output1{test++} = -12#4 == (signedi+signedj);
output1{test++} = -2#4 == (signedi -signedj);
output1{test++} = 35#4 == (signedi *signedj);
output1{test++} = 35#8 == (signedi **signedj);
output1{test++} = 1#4 == (signedi /signedj);
output1{test++} = -2#4 == (signedi %signedj);
output1{test++} = 1#4 == ((MI8(-7#8)) // signedj);
output1{test++} = -2#4 == ((MI8(-7#8)) %%signedj);
output1{test++} = -7#4 == (signedi & signedj);
output1{test++} = -5#4 == (signedi | signedj);
output1{test++} = 2#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(4##4);
output1{test++} = 5##4 == (unsignedi+unsignedj);
output1{test++} = -3##4 == (unsignedi -unsignedj);
output1{test++} = 4##4 == (unsignedi *unsignedj);
output1{test++} = 4##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 1##4 == (unsignedi %unsignedj);
output1{test++} = 2##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 0##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 0##4 == (unsignedi & unsignedj);
output1{test++} = 5##4 == (unsignedi | unsignedj);
output1{test++} = 5##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-4#4);
output1{test++} = -11#4 == (signedi+signedj);
output1{test++} = -3#4 == (signedi -signedj);
output1{test++} = 28#4 == (signedi *signedj);
output1{test++} = 28#8 == (signedi **signedj);
output1{test++} = 1#4 == (signedi /signedj);
output1{test++} = -3#4 == (signedi %signedj);
output1{test++} = 1#4 == ((MI8(-7#8)) // signedj);
output1{test++} = -3#4 == ((MI8(-7#8)) %%signedj);
output1{test++} = -8#4 == (signedi & signedj);
output1{test++} = -3#4 == (signedi | signedj);
output1{test++} = 5#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(5##4);
output1{test++} = 6##4 == (unsignedi+unsignedj);
output1{test++} = -4##4 == (unsignedi -unsignedj);
output1{test++} = 5##4 == (unsignedi *unsignedj);
output1{test++} = 5##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 1##4 == (unsignedi %unsignedj);
output1{test++} = 1##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 3##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 1##4 == (unsignedi & unsignedj);
output1{test++} = 5##4 == (unsignedi | unsignedj);
output1{test++} = 4##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-3#4);
output1{test++} = -10#4 == (signedi+signedj);
output1{test++} = -4#4 == (signedi -signedj);
output1{test++} = 21#4 == (signedi *signedj);
output1{test++} = 21#8 == (signedi **signedj);
output1{test++} = 2#4 == (signedi /signedj);
output1{test++} = -1#4 == (signedi %signedj);
output1{test++} = 2#4 == ((MI8(-7#8)) // signedj);
output1{test++} = -1#4 == ((MI8(-7#8)) %%signedj);
output1{test++} = -7#4 == (signedi & signedj);
output1{test++} = -3#4 == (signedi | signedj);
output1{test++} = 4#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(6##4);
output1{test++} = 7##4 == (unsignedi+unsignedj);
output1{test++} = -5##4 == (unsignedi -unsignedj);
output1{test++} = 6##4 == (unsignedi *unsignedj);
output1{test++} = 6##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 1##4 == (unsignedi %unsignedj);
output1{test++} = 1##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 2##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 0##4 == (unsignedi & unsignedj);
output1{test++} = 7##4 == (unsignedi | unsignedj);
output1{test++} = 7##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-2#4);
output1{test++} = -9#4 == (signedi+signedj);
output1{test++} = -5#4 == (signedi -signedj);
output1{test++} = 14#4 == (signedi *signedj);
output1{test++} = 14#8 == (signedi **signedj);
output1{test++} = 3#4 == (signedi /signedj);
output1{test++} = -1#4 == (signedi %signedj);
output1{test++} = 3#4 == ((MI8(-7#8)) // signedj);
output1{test++} = -1#4 == ((MI8(-7#8)) %%signedj);
output1{test++} = -8#4 == (signedi & signedj);
output1{test++} = -1#4 == (signedi | signedj);
output1{test++} = 7#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(7##4);
output1{test++} = 8##4 == (unsignedi+unsignedj);
output1{test++} = -6##4 == (unsignedi -unsignedj);
output1{test++} = 7##4 == (unsignedi *unsignedj);
output1{test++} = 7##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 1##4 == (unsignedi %unsignedj);
output1{test++} = 1##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 1##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 1##4 == (unsignedi & unsignedj);
output1{test++} = 7##4 == (unsignedi | unsignedj);
output1{test++} = 6##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-1#4);
output1{test++} = -8#4 == (signedi+signedj);
output1{test++} = -6#4 == (signedi -signedj);
output1{test++} = 7#4 == (signedi *signedj);
output1{test++} = 7#8 == (signedi **signedj);
output1{test++} = 7#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = 7#4 == ((MI8(-7#8)) // signedj);
output1{test++} = 0#4 == ((MI8(-7#8)) %%signedj);
output1{test++} = -7#4 == (signedi & signedj);
output1{test++} = -1#4 == (signedi | signedj);
output1{test++} = 6#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(8##4);
output1{test++} = 9##4 == (unsignedi+unsignedj);
output1{test++} = -7##4 == (unsignedi -unsignedj);
output1{test++} = 8##4 == (unsignedi *unsignedj);
output1{test++} = 8##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 1##4 == (unsignedi %unsignedj);
output1{test++} = 1##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 0##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 0##4 == (unsignedi & unsignedj);
output1{test++} = 9##4 == (unsignedi | unsignedj);
output1{test++} = 9##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(0#4);
output1{test++} = -7#4 == (signedi+signedj);
output1{test++} = -7#4 == (signedi -signedj);
output1{test++} = 0#4 == (signedi *signedj);
output1{test++} = 0#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi & signedj);
output1{test++} = -7#4 == (signedi | signedj);
output1{test++} = -7#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(9##4);
output1{test++} = 10##4 == (unsignedi+unsignedj);
output1{test++} = -8##4 == (unsignedi -unsignedj);
output1{test++} = 9##4 == (unsignedi *unsignedj);
output1{test++} = 9##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 1##4 == (unsignedi %unsignedj);
output1{test++} = 0##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 8##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 1##4 == (unsignedi & unsignedj);
output1{test++} = 9##4 == (unsignedi | unsignedj);
output1{test++} = 8##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(1#4);
output1{test++} = -6#4 == (signedi+signedj);
output1{test++} = -8#4 == (signedi -signedj);
output1{test++} = -7#4 == (signedi *signedj);
output1{test++} = -7#8 == (signedi **signedj);
output1{test++} = -7#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = -7#4 == ((MI8(-7#8)) // signedj);
output1{test++} = 0#4 == ((MI8(-7#8)) %%signedj);
output1{test++} = 1#4 == (signedi & signedj);
output1{test++} = -7#4 == (signedi | signedj);
output1{test++} = -8#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(10##4);
output1{test++} = 11##4 == (unsignedi+unsignedj);
output1{test++} = -9##4 == (unsignedi -unsignedj);
output1{test++} = 10##4 == (unsignedi *unsignedj);
output1{test++} = 10##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 1##4 == (unsignedi %unsignedj);
output1{test++} = 0##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 8##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 0##4 == (unsignedi & unsignedj);
output1{test++} = 11##4 == (unsignedi | unsignedj);
output1{test++} = 11##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(2#4);
output1{test++} = -5#4 == (signedi+signedj);
output1{test++} = -9#4 == (signedi -signedj);
output1{test++} = -14#4 == (signedi *signedj);
output1{test++} = -14#8 == (signedi **signedj);
output1{test++} = -3#4 == (signedi /signedj);
output1{test++} = -1#4 == (signedi %signedj);
output1{test++} = -3#4 == ((MI8(-7#8)) // signedj);
output1{test++} = -1#4 == ((MI8(-7#8)) %%signedj);
output1{test++} = 0#4 == (signedi & signedj);
output1{test++} = -5#4 == (signedi | signedj);
output1{test++} = -5#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(11##4);
output1{test++} = 12##4 == (unsignedi+unsignedj);
output1{test++} = -10##4 == (unsignedi -unsignedj);
output1{test++} = 11##4 == (unsignedi *unsignedj);
output1{test++} = 11##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 1##4 == (unsignedi %unsignedj);
output1{test++} = 0##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 8##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 1##4 == (unsignedi & unsignedj);
output1{test++} = 11##4 == (unsignedi | unsignedj);
output1{test++} = 10##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(3#4);
output1{test++} = -4#4 == (signedi+signedj);
output1{test++} = -10#4 == (signedi -signedj);
output1{test++} = -21#4 == (signedi *signedj);
output1{test++} = -21#8 == (signedi **signedj);
output1{test++} = -2#4 == (signedi /signedj);
output1{test++} = -1#4 == (signedi %signedj);
output1{test++} = -2#4 == ((MI8(-7#8)) // signedj);
output1{test++} = -1#4 == ((MI8(-7#8)) %%signedj);
output1{test++} = 1#4 == (signedi & signedj);
output1{test++} = -5#4 == (signedi | signedj);
output1{test++} = -6#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(12##4);
output1{test++} = 13##4 == (unsignedi+unsignedj);
output1{test++} = -11##4 == (unsignedi -unsignedj);
output1{test++} = 12##4 == (unsignedi *unsignedj);
output1{test++} = 12##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 1##4 == (unsignedi %unsignedj);
output1{test++} = 0##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 8##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 0##4 == (unsignedi & unsignedj);
output1{test++} = 13##4 == (unsignedi | unsignedj);
output1{test++} = 13##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(4#4);
output1{test++} = -3#4 == (signedi+signedj);
output1{test++} = -11#4 == (signedi -signedj);
output1{test++} = -28#4 == (signedi *signedj);
output1{test++} = -28#8 == (signedi **signedj);
output1{test++} = -1#4 == (signedi /signedj);
output1{test++} = -3#4 == (signedi %signedj);
output1{test++} = -1#4 == ((MI8(-7#8)) // signedj);
output1{test++} = -3#4 == ((MI8(-7#8)) %%signedj);
output1{test++} = 0#4 == (signedi & signedj);
output1{test++} = -3#4 == (signedi | signedj);
output1{test++} = -3#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(13##4);
output1{test++} = 14##4 == (unsignedi+unsignedj);
output1{test++} = -12##4 == (unsignedi -unsignedj);
output1{test++} = 13##4 == (unsignedi *unsignedj);
output1{test++} = 13##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 1##4 == (unsignedi %unsignedj);
output1{test++} = 0##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 8##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 1##4 == (unsignedi & unsignedj);
output1{test++} = 13##4 == (unsignedi | unsignedj);
output1{test++} = 12##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(5#4);
output1{test++} = -2#4 == (signedi+signedj);
output1{test++} = -12#4 == (signedi -signedj);
output1{test++} = -35#4 == (signedi *signedj);
output1{test++} = -35#8 == (signedi **signedj);
output1{test++} = -1#4 == (signedi /signedj);
output1{test++} = -2#4 == (signedi %signedj);
output1{test++} = -1#4 == ((MI8(-7#8)) // signedj);
output1{test++} = -2#4 == ((MI8(-7#8)) %%signedj);
output1{test++} = 1#4 == (signedi & signedj);
output1{test++} = -3#4 == (signedi | signedj);
output1{test++} = -4#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(14##4);
output1{test++} = 15##4 == (unsignedi+unsignedj);
output1{test++} = -13##4 == (unsignedi -unsignedj);
output1{test++} = 14##4 == (unsignedi *unsignedj);
output1{test++} = 14##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 1##4 == (unsignedi %unsignedj);
output1{test++} = 0##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 8##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 0##4 == (unsignedi & unsignedj);
output1{test++} = 15##4 == (unsignedi | unsignedj);
output1{test++} = 15##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(6#4);
output1{test++} = -1#4 == (signedi+signedj);
output1{test++} = -13#4 == (signedi -signedj);
output1{test++} = -42#4 == (signedi *signedj);
output1{test++} = -42#8 == (signedi **signedj);
output1{test++} = -1#4 == (signedi /signedj);
output1{test++} = -1#4 == (signedi %signedj);
output1{test++} = -1#4 == ((MI8(-7#8)) // signedj);
output1{test++} = -1#4 == ((MI8(-7#8)) %%signedj);
output1{test++} = 0#4 == (signedi & signedj);
output1{test++} = -1#4 == (signedi | signedj);
output1{test++} = -1#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(15##4);
output1{test++} = 16##4 == (unsignedi+unsignedj);
output1{test++} = -14##4 == (unsignedi -unsignedj);
output1{test++} = 15##4 == (unsignedi *unsignedj);
output1{test++} = 15##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 1##4 == (unsignedi %unsignedj);
output1{test++} = 0##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 8##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 1##4 == (unsignedi & unsignedj);
output1{test++} = 15##4 == (unsignedi | unsignedj);
output1{test++} = 14##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(7#4);
output1{test++} = 0#4 == (signedi+signedj);
output1{test++} = -14#4 == (signedi -signedj);
output1{test++} = -49#4 == (signedi *signedj);
output1{test++} = -49#8 == (signedi **signedj);
output1{test++} = -1#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = -1#4 == ((MI8(-7#8)) // signedj);
output1{test++} = 0#4 == ((MI8(-7#8)) %%signedj);
output1{test++} = 1#4 == (signedi & signedj);
output1{test++} = -1#4 == (signedi | signedj);
output1{test++} = -2#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedi = MUI4(2##4);
signedi = MI4(-6#4);
output1{test++} = 13##4 == (~unsignedi);
output1{test++} = 5#4 == (~signedi);
unsignedj = MUI4(0##4);
output1{test++} = 2##4 == (unsignedi+unsignedj);
output1{test++} = 2##4 == (unsignedi -unsignedj);
output1{test++} = 0##4 == (unsignedi *unsignedj);
output1{test++} = 0##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi & unsignedj);
output1{test++} = 2##4 == (unsignedi | unsignedj);
output1{test++} = 2##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-8#4);
output1{test++} = -14#4 == (signedi+signedj);
output1{test++} = 2#4 == (signedi -signedj);
output1{test++} = 48#4 == (signedi *signedj);
output1{test++} = 48#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = -6#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(-6#8)) // signedj);
output1{test++} = -6#4 == ((MI8(-6#8)) %%signedj);
output1{test++} = -8#4 == (signedi & signedj);
output1{test++} = -6#4 == (signedi | signedj);
output1{test++} = 2#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(1##4);
output1{test++} = 3##4 == (unsignedi+unsignedj);
output1{test++} = 1##4 == (unsignedi -unsignedj);
output1{test++} = 2##4 == (unsignedi *unsignedj);
output1{test++} = 2##8 == (unsignedi **unsignedj);
output1{test++} = 2##4 == (unsignedi /unsignedj);
output1{test++} = 0##4 == (unsignedi %unsignedj);
output1{test++} = 0##4 == (unsignedi & unsignedj);
output1{test++} = 3##4 == (unsignedi | unsignedj);
output1{test++} = 3##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-7#4);
output1{test++} = -13#4 == (signedi+signedj);
output1{test++} = 1#4 == (signedi -signedj);
output1{test++} = 42#4 == (signedi *signedj);
output1{test++} = 42#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = -6#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(-6#8)) // signedj);
output1{test++} = -6#4 == ((MI8(-6#8)) %%signedj);
output1{test++} = -8#4 == (signedi & signedj);
output1{test++} = -5#4 == (signedi | signedj);
output1{test++} = 3#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(2##4);
output1{test++} = 4##4 == (unsignedi+unsignedj);
output1{test++} = 0##4 == (unsignedi -unsignedj);
output1{test++} = 4##4 == (unsignedi *unsignedj);
output1{test++} = 4##8 == (unsignedi **unsignedj);
output1{test++} = 1##4 == (unsignedi /unsignedj);
output1{test++} = 0##4 == (unsignedi %unsignedj);
output1{test++} = 8##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 0##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 2##4 == (unsignedi & unsignedj);
output1{test++} = 2##4 == (unsignedi | unsignedj);
output1{test++} = 0##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 1##1 == (unsignedi ==unsignedj);
output1{test++} = 0##1 == (unsignedi !=unsignedj);
signedj = MI4(-6#4);
output1{test++} = -12#4 == (signedi+signedj);
output1{test++} = 0#4 == (signedi -signedj);
output1{test++} = 36#4 == (signedi *signedj);
output1{test++} = 36#8 == (signedi **signedj);
output1{test++} = 1#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = 1#4 == ((MI8(-6#8)) // signedj);
output1{test++} = 0#4 == ((MI8(-6#8)) %%signedj);
output1{test++} = -6#4 == (signedi & signedj);
output1{test++} = -6#4 == (signedi | signedj);
output1{test++} = 0#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 1#1 == (signedi ==signedj);
output1{test++} = 0#1 == (signedi !=signedj);
unsignedj = MUI4(3##4);
output1{test++} = 5##4 == (unsignedi+unsignedj);
output1{test++} = -1##4 == (unsignedi -unsignedj);
output1{test++} = 6##4 == (unsignedi *unsignedj);
output1{test++} = 6##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 2##4 == (unsignedi %unsignedj);
output1{test++} = 5##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 1##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 2##4 == (unsignedi & unsignedj);
output1{test++} = 3##4 == (unsignedi | unsignedj);
output1{test++} = 1##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-5#4);
output1{test++} = -11#4 == (signedi+signedj);
output1{test++} = -1#4 == (signedi -signedj);
output1{test++} = 30#4 == (signedi *signedj);
output1{test++} = 30#8 == (signedi **signedj);
output1{test++} = 1#4 == (signedi /signedj);
output1{test++} = -1#4 == (signedi %signedj);
output1{test++} = 1#4 == ((MI8(-6#8)) // signedj);
output1{test++} = -1#4 == ((MI8(-6#8)) %%signedj);
output1{test++} = -6#4 == (signedi & signedj);
output1{test++} = -5#4 == (signedi | signedj);
output1{test++} = 1#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(4##4);
output1{test++} = 6##4 == (unsignedi+unsignedj);
output1{test++} = -2##4 == (unsignedi -unsignedj);
output1{test++} = 8##4 == (unsignedi *unsignedj);
output1{test++} = 8##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 2##4 == (unsignedi %unsignedj);
output1{test++} = 4##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 0##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 0##4 == (unsignedi & unsignedj);
output1{test++} = 6##4 == (unsignedi | unsignedj);
output1{test++} = 6##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-4#4);
output1{test++} = -10#4 == (signedi+signedj);
output1{test++} = -2#4 == (signedi -signedj);
output1{test++} = 24#4 == (signedi *signedj);
output1{test++} = 24#8 == (signedi **signedj);
output1{test++} = 1#4 == (signedi /signedj);
output1{test++} = -2#4 == (signedi %signedj);
output1{test++} = 1#4 == ((MI8(-6#8)) // signedj);
output1{test++} = -2#4 == ((MI8(-6#8)) %%signedj);
output1{test++} = -8#4 == (signedi & signedj);
output1{test++} = -2#4 == (signedi | signedj);
output1{test++} = 6#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(5##4);
output1{test++} = 7##4 == (unsignedi+unsignedj);
output1{test++} = -3##4 == (unsignedi -unsignedj);
output1{test++} = 10##4 == (unsignedi *unsignedj);
output1{test++} = 10##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 2##4 == (unsignedi %unsignedj);
output1{test++} = 3##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 1##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 0##4 == (unsignedi & unsignedj);
output1{test++} = 7##4 == (unsignedi | unsignedj);
output1{test++} = 7##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-3#4);
output1{test++} = -9#4 == (signedi+signedj);
output1{test++} = -3#4 == (signedi -signedj);
output1{test++} = 18#4 == (signedi *signedj);
output1{test++} = 18#8 == (signedi **signedj);
output1{test++} = 2#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = 2#4 == ((MI8(-6#8)) // signedj);
output1{test++} = 0#4 == ((MI8(-6#8)) %%signedj);
output1{test++} = -8#4 == (signedi & signedj);
output1{test++} = -1#4 == (signedi | signedj);
output1{test++} = 7#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(6##4);
output1{test++} = 8##4 == (unsignedi+unsignedj);
output1{test++} = -4##4 == (unsignedi -unsignedj);
output1{test++} = 12##4 == (unsignedi *unsignedj);
output1{test++} = 12##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 2##4 == (unsignedi %unsignedj);
output1{test++} = 2##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 4##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 2##4 == (unsignedi & unsignedj);
output1{test++} = 6##4 == (unsignedi | unsignedj);
output1{test++} = 4##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-2#4);
output1{test++} = -8#4 == (signedi+signedj);
output1{test++} = -4#4 == (signedi -signedj);
output1{test++} = 12#4 == (signedi *signedj);
output1{test++} = 12#8 == (signedi **signedj);
output1{test++} = 3#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = 3#4 == ((MI8(-6#8)) // signedj);
output1{test++} = 0#4 == ((MI8(-6#8)) %%signedj);
output1{test++} = -6#4 == (signedi & signedj);
output1{test++} = -2#4 == (signedi | signedj);
output1{test++} = 4#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(7##4);
output1{test++} = 9##4 == (unsignedi+unsignedj);
output1{test++} = -5##4 == (unsignedi -unsignedj);
output1{test++} = 14##4 == (unsignedi *unsignedj);
output1{test++} = 14##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 2##4 == (unsignedi %unsignedj);
output1{test++} = 2##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 2##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 2##4 == (unsignedi & unsignedj);
output1{test++} = 7##4 == (unsignedi | unsignedj);
output1{test++} = 5##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-1#4);
output1{test++} = -7#4 == (signedi+signedj);
output1{test++} = -5#4 == (signedi -signedj);
output1{test++} = 6#4 == (signedi *signedj);
output1{test++} = 6#8 == (signedi **signedj);
output1{test++} = 6#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = 6#4 == ((MI8(-6#8)) // signedj);
output1{test++} = 0#4 == ((MI8(-6#8)) %%signedj);
output1{test++} = -6#4 == (signedi & signedj);
output1{test++} = -1#4 == (signedi | signedj);
output1{test++} = 5#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(8##4);
output1{test++} = 10##4 == (unsignedi+unsignedj);
output1{test++} = -6##4 == (unsignedi -unsignedj);
output1{test++} = 16##4 == (unsignedi *unsignedj);
output1{test++} = 16##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 2##4 == (unsignedi %unsignedj);
output1{test++} = 2##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 0##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 0##4 == (unsignedi & unsignedj);
output1{test++} = 10##4 == (unsignedi | unsignedj);
output1{test++} = 10##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(0#4);
output1{test++} = -6#4 == (signedi+signedj);
output1{test++} = -6#4 == (signedi -signedj);
output1{test++} = 0#4 == (signedi *signedj);
output1{test++} = 0#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi & signedj);
output1{test++} = -6#4 == (signedi | signedj);
output1{test++} = -6#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(9##4);
output1{test++} = 11##4 == (unsignedi+unsignedj);
output1{test++} = -7##4 == (unsignedi -unsignedj);
output1{test++} = 18##4 == (unsignedi *unsignedj);
output1{test++} = 18##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 2##4 == (unsignedi %unsignedj);
output1{test++} = 1##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 7##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 0##4 == (unsignedi & unsignedj);
output1{test++} = 11##4 == (unsignedi | unsignedj);
output1{test++} = 11##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(1#4);
output1{test++} = -5#4 == (signedi+signedj);
output1{test++} = -7#4 == (signedi -signedj);
output1{test++} = -6#4 == (signedi *signedj);
output1{test++} = -6#8 == (signedi **signedj);
output1{test++} = -6#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = -6#4 == ((MI8(-6#8)) // signedj);
output1{test++} = 0#4 == ((MI8(-6#8)) %%signedj);
output1{test++} = 0#4 == (signedi & signedj);
output1{test++} = -5#4 == (signedi | signedj);
output1{test++} = -5#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(10##4);
output1{test++} = 12##4 == (unsignedi+unsignedj);
output1{test++} = -8##4 == (unsignedi -unsignedj);
output1{test++} = 20##4 == (unsignedi *unsignedj);
output1{test++} = 20##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 2##4 == (unsignedi %unsignedj);
output1{test++} = 1##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 6##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 2##4 == (unsignedi & unsignedj);
output1{test++} = 10##4 == (unsignedi | unsignedj);
output1{test++} = 8##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(2#4);
output1{test++} = -4#4 == (signedi+signedj);
output1{test++} = -8#4 == (signedi -signedj);
output1{test++} = -12#4 == (signedi *signedj);
output1{test++} = -12#8 == (signedi **signedj);
output1{test++} = -3#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = -3#4 == ((MI8(-6#8)) // signedj);
output1{test++} = 0#4 == ((MI8(-6#8)) %%signedj);
output1{test++} = 2#4 == (signedi & signedj);
output1{test++} = -6#4 == (signedi | signedj);
output1{test++} = -8#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(11##4);
output1{test++} = 13##4 == (unsignedi+unsignedj);
output1{test++} = -9##4 == (unsignedi -unsignedj);
output1{test++} = 22##4 == (unsignedi *unsignedj);
output1{test++} = 22##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 2##4 == (unsignedi %unsignedj);
output1{test++} = 1##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 5##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 2##4 == (unsignedi & unsignedj);
output1{test++} = 11##4 == (unsignedi | unsignedj);
output1{test++} = 9##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(3#4);
output1{test++} = -3#4 == (signedi+signedj);
output1{test++} = -9#4 == (signedi -signedj);
output1{test++} = -18#4 == (signedi *signedj);
output1{test++} = -18#8 == (signedi **signedj);
output1{test++} = -2#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = -2#4 == ((MI8(-6#8)) // signedj);
output1{test++} = 0#4 == ((MI8(-6#8)) %%signedj);
output1{test++} = 2#4 == (signedi & signedj);
output1{test++} = -5#4 == (signedi | signedj);
output1{test++} = -7#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(12##4);
output1{test++} = 14##4 == (unsignedi+unsignedj);
output1{test++} = -10##4 == (unsignedi -unsignedj);
output1{test++} = 24##4 == (unsignedi *unsignedj);
output1{test++} = 24##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 2##4 == (unsignedi %unsignedj);
output1{test++} = 1##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 4##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 0##4 == (unsignedi & unsignedj);
output1{test++} = 14##4 == (unsignedi | unsignedj);
output1{test++} = 14##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(4#4);
output1{test++} = -2#4 == (signedi+signedj);
output1{test++} = -10#4 == (signedi -signedj);
output1{test++} = -24#4 == (signedi *signedj);
output1{test++} = -24#8 == (signedi **signedj);
output1{test++} = -1#4 == (signedi /signedj);
output1{test++} = -2#4 == (signedi %signedj);
output1{test++} = -1#4 == ((MI8(-6#8)) // signedj);
output1{test++} = -2#4 == ((MI8(-6#8)) %%signedj);
output1{test++} = 0#4 == (signedi & signedj);
output1{test++} = -2#4 == (signedi | signedj);
output1{test++} = -2#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(13##4);
output1{test++} = 15##4 == (unsignedi+unsignedj);
output1{test++} = -11##4 == (unsignedi -unsignedj);
output1{test++} = 26##4 == (unsignedi *unsignedj);
output1{test++} = 26##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 2##4 == (unsignedi %unsignedj);
output1{test++} = 1##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 3##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 0##4 == (unsignedi & unsignedj);
output1{test++} = 15##4 == (unsignedi | unsignedj);
output1{test++} = 15##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(5#4);
output1{test++} = -1#4 == (signedi+signedj);
output1{test++} = -11#4 == (signedi -signedj);
output1{test++} = -30#4 == (signedi *signedj);
output1{test++} = -30#8 == (signedi **signedj);
output1{test++} = -1#4 == (signedi /signedj);
output1{test++} = -1#4 == (signedi %signedj);
output1{test++} = -1#4 == ((MI8(-6#8)) // signedj);
output1{test++} = -1#4 == ((MI8(-6#8)) %%signedj);
output1{test++} = 0#4 == (signedi & signedj);
output1{test++} = -1#4 == (signedi | signedj);
output1{test++} = -1#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(14##4);
output1{test++} = 16##4 == (unsignedi+unsignedj);
output1{test++} = -12##4 == (unsignedi -unsignedj);
output1{test++} = 28##4 == (unsignedi *unsignedj);
output1{test++} = 28##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 2##4 == (unsignedi %unsignedj);
output1{test++} = 1##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 2##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 2##4 == (unsignedi & unsignedj);
output1{test++} = 14##4 == (unsignedi | unsignedj);
output1{test++} = 12##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(6#4);
output1{test++} = 0#4 == (signedi+signedj);
output1{test++} = -12#4 == (signedi -signedj);
output1{test++} = -36#4 == (signedi *signedj);
output1{test++} = -36#8 == (signedi **signedj);
output1{test++} = -1#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = -1#4 == ((MI8(-6#8)) // signedj);
output1{test++} = 0#4 == ((MI8(-6#8)) %%signedj);
output1{test++} = 2#4 == (signedi & signedj);
output1{test++} = -2#4 == (signedi | signedj);
output1{test++} = -4#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(15##4);
output1{test++} = 17##4 == (unsignedi+unsignedj);
output1{test++} = -13##4 == (unsignedi -unsignedj);
output1{test++} = 30##4 == (unsignedi *unsignedj);
output1{test++} = 30##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 2##4 == (unsignedi %unsignedj);
output1{test++} = 1##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 1##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 2##4 == (unsignedi & unsignedj);
output1{test++} = 15##4 == (unsignedi | unsignedj);
output1{test++} = 13##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(7#4);
output1{test++} = 1#4 == (signedi+signedj);
output1{test++} = -13#4 == (signedi -signedj);
output1{test++} = -42#4 == (signedi *signedj);
output1{test++} = -42#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = -6#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(-6#8)) // signedj);
output1{test++} = -6#4 == ((MI8(-6#8)) %%signedj);
output1{test++} = 2#4 == (signedi & signedj);
output1{test++} = -1#4 == (signedi | signedj);
output1{test++} = -3#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedi = MUI4(3##4);
signedi = MI4(-5#4);
output1{test++} = 12##4 == (~unsignedi);
output1{test++} = 4#4 == (~signedi);
unsignedj = MUI4(0##4);
output1{test++} = 3##4 == (unsignedi+unsignedj);
output1{test++} = 3##4 == (unsignedi -unsignedj);
output1{test++} = 0##4 == (unsignedi *unsignedj);
output1{test++} = 0##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi & unsignedj);
output1{test++} = 3##4 == (unsignedi | unsignedj);
output1{test++} = 3##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-8#4);
output1{test++} = -13#4 == (signedi+signedj);
output1{test++} = 3#4 == (signedi -signedj);
output1{test++} = 40#4 == (signedi *signedj);
output1{test++} = 40#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = -5#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(-5#8)) // signedj);
output1{test++} = -5#4 == ((MI8(-5#8)) %%signedj);
output1{test++} = -8#4 == (signedi & signedj);
output1{test++} = -5#4 == (signedi | signedj);
output1{test++} = 3#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(1##4);
output1{test++} = 4##4 == (unsignedi+unsignedj);
output1{test++} = 2##4 == (unsignedi -unsignedj);
output1{test++} = 3##4 == (unsignedi *unsignedj);
output1{test++} = 3##8 == (unsignedi **unsignedj);
output1{test++} = 3##4 == (unsignedi /unsignedj);
output1{test++} = 0##4 == (unsignedi %unsignedj);
output1{test++} = 1##4 == (unsignedi & unsignedj);
output1{test++} = 3##4 == (unsignedi | unsignedj);
output1{test++} = 2##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-7#4);
output1{test++} = -12#4 == (signedi+signedj);
output1{test++} = 2#4 == (signedi -signedj);
output1{test++} = 35#4 == (signedi *signedj);
output1{test++} = 35#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = -5#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(-5#8)) // signedj);
output1{test++} = -5#4 == ((MI8(-5#8)) %%signedj);
output1{test++} = -7#4 == (signedi & signedj);
output1{test++} = -5#4 == (signedi | signedj);
output1{test++} = 2#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(2##4);
output1{test++} = 5##4 == (unsignedi+unsignedj);
output1{test++} = 1##4 == (unsignedi -unsignedj);
output1{test++} = 6##4 == (unsignedi *unsignedj);
output1{test++} = 6##8 == (unsignedi **unsignedj);
output1{test++} = 1##4 == (unsignedi /unsignedj);
output1{test++} = 1##4 == (unsignedi %unsignedj);
output1{test++} = 12##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 0##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 2##4 == (unsignedi & unsignedj);
output1{test++} = 3##4 == (unsignedi | unsignedj);
output1{test++} = 1##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-6#4);
output1{test++} = -11#4 == (signedi+signedj);
output1{test++} = 1#4 == (signedi -signedj);
output1{test++} = 30#4 == (signedi *signedj);
output1{test++} = 30#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = -5#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(-5#8)) // signedj);
output1{test++} = -5#4 == ((MI8(-5#8)) %%signedj);
output1{test++} = -6#4 == (signedi & signedj);
output1{test++} = -5#4 == (signedi | signedj);
output1{test++} = 1#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(3##4);
output1{test++} = 6##4 == (unsignedi+unsignedj);
output1{test++} = 0##4 == (unsignedi -unsignedj);
output1{test++} = 9##4 == (unsignedi *unsignedj);
output1{test++} = 9##8 == (unsignedi **unsignedj);
output1{test++} = 1##4 == (unsignedi /unsignedj);
output1{test++} = 0##4 == (unsignedi %unsignedj);
output1{test++} = 8##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 0##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 3##4 == (unsignedi & unsignedj);
output1{test++} = 3##4 == (unsignedi | unsignedj);
output1{test++} = 0##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 1##1 == (unsignedi ==unsignedj);
output1{test++} = 0##1 == (unsignedi !=unsignedj);
signedj = MI4(-5#4);
output1{test++} = -10#4 == (signedi+signedj);
output1{test++} = 0#4 == (signedi -signedj);
output1{test++} = 25#4 == (signedi *signedj);
output1{test++} = 25#8 == (signedi **signedj);
output1{test++} = 1#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = 1#4 == ((MI8(-5#8)) // signedj);
output1{test++} = 0#4 == ((MI8(-5#8)) %%signedj);
output1{test++} = -5#4 == (signedi & signedj);
output1{test++} = -5#4 == (signedi | signedj);
output1{test++} = 0#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 1#1 == (signedi ==signedj);
output1{test++} = 0#1 == (signedi !=signedj);
unsignedj = MUI4(4##4);
output1{test++} = 7##4 == (unsignedi+unsignedj);
output1{test++} = -1##4 == (unsignedi -unsignedj);
output1{test++} = 12##4 == (unsignedi *unsignedj);
output1{test++} = 12##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 3##4 == (unsignedi %unsignedj);
output1{test++} = 6##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 0##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 0##4 == (unsignedi & unsignedj);
output1{test++} = 7##4 == (unsignedi | unsignedj);
output1{test++} = 7##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-4#4);
output1{test++} = -9#4 == (signedi+signedj);
output1{test++} = -1#4 == (signedi -signedj);
output1{test++} = 20#4 == (signedi *signedj);
output1{test++} = 20#8 == (signedi **signedj);
output1{test++} = 1#4 == (signedi /signedj);
output1{test++} = -1#4 == (signedi %signedj);
output1{test++} = 1#4 == ((MI8(-5#8)) // signedj);
output1{test++} = -1#4 == ((MI8(-5#8)) %%signedj);
output1{test++} = -8#4 == (signedi & signedj);
output1{test++} = -1#4 == (signedi | signedj);
output1{test++} = 7#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(5##4);
output1{test++} = 8##4 == (unsignedi+unsignedj);
output1{test++} = -2##4 == (unsignedi -unsignedj);
output1{test++} = 15##4 == (unsignedi *unsignedj);
output1{test++} = 15##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 3##4 == (unsignedi %unsignedj);
output1{test++} = 4##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 4##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 1##4 == (unsignedi & unsignedj);
output1{test++} = 7##4 == (unsignedi | unsignedj);
output1{test++} = 6##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-3#4);
output1{test++} = -8#4 == (signedi+signedj);
output1{test++} = -2#4 == (signedi -signedj);
output1{test++} = 15#4 == (signedi *signedj);
output1{test++} = 15#8 == (signedi **signedj);
output1{test++} = 1#4 == (signedi /signedj);
output1{test++} = -2#4 == (signedi %signedj);
output1{test++} = 1#4 == ((MI8(-5#8)) // signedj);
output1{test++} = -2#4 == ((MI8(-5#8)) %%signedj);
output1{test++} = -7#4 == (signedi & signedj);
output1{test++} = -1#4 == (signedi | signedj);
output1{test++} = 6#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(6##4);
output1{test++} = 9##4 == (unsignedi+unsignedj);
output1{test++} = -3##4 == (unsignedi -unsignedj);
output1{test++} = 18##4 == (unsignedi *unsignedj);
output1{test++} = 18##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 3##4 == (unsignedi %unsignedj);
output1{test++} = 4##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 0##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 2##4 == (unsignedi & unsignedj);
output1{test++} = 7##4 == (unsignedi | unsignedj);
output1{test++} = 5##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-2#4);
output1{test++} = -7#4 == (signedi+signedj);
output1{test++} = -3#4 == (signedi -signedj);
output1{test++} = 10#4 == (signedi *signedj);
output1{test++} = 10#8 == (signedi **signedj);
output1{test++} = 2#4 == (signedi /signedj);
output1{test++} = -1#4 == (signedi %signedj);
output1{test++} = 2#4 == ((MI8(-5#8)) // signedj);
output1{test++} = -1#4 == ((MI8(-5#8)) %%signedj);
output1{test++} = -6#4 == (signedi & signedj);
output1{test++} = -1#4 == (signedi | signedj);
output1{test++} = 5#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(7##4);
output1{test++} = 10##4 == (unsignedi+unsignedj);
output1{test++} = -4##4 == (unsignedi -unsignedj);
output1{test++} = 21##4 == (unsignedi *unsignedj);
output1{test++} = 21##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 3##4 == (unsignedi %unsignedj);
output1{test++} = 3##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 3##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 3##4 == (unsignedi & unsignedj);
output1{test++} = 7##4 == (unsignedi | unsignedj);
output1{test++} = 4##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-1#4);
output1{test++} = -6#4 == (signedi+signedj);
output1{test++} = -4#4 == (signedi -signedj);
output1{test++} = 5#4 == (signedi *signedj);
output1{test++} = 5#8 == (signedi **signedj);
output1{test++} = 5#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = 5#4 == ((MI8(-5#8)) // signedj);
output1{test++} = 0#4 == ((MI8(-5#8)) %%signedj);
output1{test++} = -5#4 == (signedi & signedj);
output1{test++} = -1#4 == (signedi | signedj);
output1{test++} = 4#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(8##4);
output1{test++} = 11##4 == (unsignedi+unsignedj);
output1{test++} = -5##4 == (unsignedi -unsignedj);
output1{test++} = 24##4 == (unsignedi *unsignedj);
output1{test++} = 24##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 3##4 == (unsignedi %unsignedj);
output1{test++} = 3##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 0##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 0##4 == (unsignedi & unsignedj);
output1{test++} = 11##4 == (unsignedi | unsignedj);
output1{test++} = 11##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(0#4);
output1{test++} = -5#4 == (signedi+signedj);
output1{test++} = -5#4 == (signedi -signedj);
output1{test++} = 0#4 == (signedi *signedj);
output1{test++} = 0#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi & signedj);
output1{test++} = -5#4 == (signedi | signedj);
output1{test++} = -5#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(9##4);
output1{test++} = 12##4 == (unsignedi+unsignedj);
output1{test++} = -6##4 == (unsignedi -unsignedj);
output1{test++} = 27##4 == (unsignedi *unsignedj);
output1{test++} = 27##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 3##4 == (unsignedi %unsignedj);
output1{test++} = 2##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 6##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 1##4 == (unsignedi & unsignedj);
output1{test++} = 11##4 == (unsignedi | unsignedj);
output1{test++} = 10##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(1#4);
output1{test++} = -4#4 == (signedi+signedj);
output1{test++} = -6#4 == (signedi -signedj);
output1{test++} = -5#4 == (signedi *signedj);
output1{test++} = -5#8 == (signedi **signedj);
output1{test++} = -5#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = -5#4 == ((MI8(-5#8)) // signedj);
output1{test++} = 0#4 == ((MI8(-5#8)) %%signedj);
output1{test++} = 1#4 == (signedi & signedj);
output1{test++} = -5#4 == (signedi | signedj);
output1{test++} = -6#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(10##4);
output1{test++} = 13##4 == (unsignedi+unsignedj);
output1{test++} = -7##4 == (unsignedi -unsignedj);
output1{test++} = 30##4 == (unsignedi *unsignedj);
output1{test++} = 30##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 3##4 == (unsignedi %unsignedj);
output1{test++} = 2##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 4##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 2##4 == (unsignedi & unsignedj);
output1{test++} = 11##4 == (unsignedi | unsignedj);
output1{test++} = 9##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(2#4);
output1{test++} = -3#4 == (signedi+signedj);
output1{test++} = -7#4 == (signedi -signedj);
output1{test++} = -10#4 == (signedi *signedj);
output1{test++} = -10#8 == (signedi **signedj);
output1{test++} = -2#4 == (signedi /signedj);
output1{test++} = -1#4 == (signedi %signedj);
output1{test++} = -2#4 == ((MI8(-5#8)) // signedj);
output1{test++} = -1#4 == ((MI8(-5#8)) %%signedj);
output1{test++} = 2#4 == (signedi & signedj);
output1{test++} = -5#4 == (signedi | signedj);
output1{test++} = -7#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(11##4);
output1{test++} = 14##4 == (unsignedi+unsignedj);
output1{test++} = -8##4 == (unsignedi -unsignedj);
output1{test++} = 33##4 == (unsignedi *unsignedj);
output1{test++} = 33##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 3##4 == (unsignedi %unsignedj);
output1{test++} = 2##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 2##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 3##4 == (unsignedi & unsignedj);
output1{test++} = 11##4 == (unsignedi | unsignedj);
output1{test++} = 8##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(3#4);
output1{test++} = -2#4 == (signedi+signedj);
output1{test++} = -8#4 == (signedi -signedj);
output1{test++} = -15#4 == (signedi *signedj);
output1{test++} = -15#8 == (signedi **signedj);
output1{test++} = -1#4 == (signedi /signedj);
output1{test++} = -2#4 == (signedi %signedj);
output1{test++} = -1#4 == ((MI8(-5#8)) // signedj);
output1{test++} = -2#4 == ((MI8(-5#8)) %%signedj);
output1{test++} = 3#4 == (signedi & signedj);
output1{test++} = -5#4 == (signedi | signedj);
output1{test++} = -8#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(12##4);
output1{test++} = 15##4 == (unsignedi+unsignedj);
output1{test++} = -9##4 == (unsignedi -unsignedj);
output1{test++} = 36##4 == (unsignedi *unsignedj);
output1{test++} = 36##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 3##4 == (unsignedi %unsignedj);
output1{test++} = 2##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 0##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 0##4 == (unsignedi & unsignedj);
output1{test++} = 15##4 == (unsignedi | unsignedj);
output1{test++} = 15##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(4#4);
output1{test++} = -1#4 == (signedi+signedj);
output1{test++} = -9#4 == (signedi -signedj);
output1{test++} = -20#4 == (signedi *signedj);
output1{test++} = -20#8 == (signedi **signedj);
output1{test++} = -1#4 == (signedi /signedj);
output1{test++} = -1#4 == (signedi %signedj);
output1{test++} = -1#4 == ((MI8(-5#8)) // signedj);
output1{test++} = -1#4 == ((MI8(-5#8)) %%signedj);
output1{test++} = 0#4 == (signedi & signedj);
output1{test++} = -1#4 == (signedi | signedj);
output1{test++} = -1#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(13##4);
output1{test++} = 16##4 == (unsignedi+unsignedj);
output1{test++} = -10##4 == (unsignedi -unsignedj);
output1{test++} = 39##4 == (unsignedi *unsignedj);
output1{test++} = 39##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 3##4 == (unsignedi %unsignedj);
output1{test++} = 1##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 11##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 1##4 == (unsignedi & unsignedj);
output1{test++} = 15##4 == (unsignedi | unsignedj);
output1{test++} = 14##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(5#4);
output1{test++} = 0#4 == (signedi+signedj);
output1{test++} = -10#4 == (signedi -signedj);
output1{test++} = -25#4 == (signedi *signedj);
output1{test++} = -25#8 == (signedi **signedj);
output1{test++} = -1#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = -1#4 == ((MI8(-5#8)) // signedj);
output1{test++} = 0#4 == ((MI8(-5#8)) %%signedj);
output1{test++} = 1#4 == (signedi & signedj);
output1{test++} = -1#4 == (signedi | signedj);
output1{test++} = -2#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(14##4);
output1{test++} = 17##4 == (unsignedi+unsignedj);
output1{test++} = -11##4 == (unsignedi -unsignedj);
output1{test++} = 42##4 == (unsignedi *unsignedj);
output1{test++} = 42##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 3##4 == (unsignedi %unsignedj);
output1{test++} = 1##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 10##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 2##4 == (unsignedi & unsignedj);
output1{test++} = 15##4 == (unsignedi | unsignedj);
output1{test++} = 13##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(6#4);
output1{test++} = 1#4 == (signedi+signedj);
output1{test++} = -11#4 == (signedi -signedj);
output1{test++} = -30#4 == (signedi *signedj);
output1{test++} = -30#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = -5#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(-5#8)) // signedj);
output1{test++} = -5#4 == ((MI8(-5#8)) %%signedj);
output1{test++} = 2#4 == (signedi & signedj);
output1{test++} = -1#4 == (signedi | signedj);
output1{test++} = -3#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(15##4);
output1{test++} = 18##4 == (unsignedi+unsignedj);
output1{test++} = -12##4 == (unsignedi -unsignedj);
output1{test++} = 45##4 == (unsignedi *unsignedj);
output1{test++} = 45##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 3##4 == (unsignedi %unsignedj);
output1{test++} = 1##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 9##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 3##4 == (unsignedi & unsignedj);
output1{test++} = 15##4 == (unsignedi | unsignedj);
output1{test++} = 12##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(7#4);
output1{test++} = 2#4 == (signedi+signedj);
output1{test++} = -12#4 == (signedi -signedj);
output1{test++} = -35#4 == (signedi *signedj);
output1{test++} = -35#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = -5#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(-5#8)) // signedj);
output1{test++} = -5#4 == ((MI8(-5#8)) %%signedj);
output1{test++} = 3#4 == (signedi & signedj);
output1{test++} = -1#4 == (signedi | signedj);
output1{test++} = -4#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedi = MUI4(4##4);
signedi = MI4(-4#4);
output1{test++} = 11##4 == (~unsignedi);
output1{test++} = 3#4 == (~signedi);
unsignedj = MUI4(0##4);
output1{test++} = 4##4 == (unsignedi+unsignedj);
output1{test++} = 4##4 == (unsignedi -unsignedj);
output1{test++} = 0##4 == (unsignedi *unsignedj);
output1{test++} = 0##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi & unsignedj);
output1{test++} = 4##4 == (unsignedi | unsignedj);
output1{test++} = 4##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-8#4);
output1{test++} = -12#4 == (signedi+signedj);
output1{test++} = 4#4 == (signedi -signedj);
output1{test++} = 32#4 == (signedi *signedj);
output1{test++} = 32#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = -4#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(-4#8)) // signedj);
output1{test++} = -4#4 == ((MI8(-4#8)) %%signedj);
output1{test++} = -8#4 == (signedi & signedj);
output1{test++} = -4#4 == (signedi | signedj);
output1{test++} = 4#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(1##4);
output1{test++} = 5##4 == (unsignedi+unsignedj);
output1{test++} = 3##4 == (unsignedi -unsignedj);
output1{test++} = 4##4 == (unsignedi *unsignedj);
output1{test++} = 4##8 == (unsignedi **unsignedj);
output1{test++} = 4##4 == (unsignedi /unsignedj);
output1{test++} = 0##4 == (unsignedi %unsignedj);
output1{test++} = 0##4 == (unsignedi & unsignedj);
output1{test++} = 5##4 == (unsignedi | unsignedj);
output1{test++} = 5##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-7#4);
output1{test++} = -11#4 == (signedi+signedj);
output1{test++} = 3#4 == (signedi -signedj);
output1{test++} = 28#4 == (signedi *signedj);
output1{test++} = 28#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = -4#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(-4#8)) // signedj);
output1{test++} = -4#4 == ((MI8(-4#8)) %%signedj);
output1{test++} = -8#4 == (signedi & signedj);
output1{test++} = -3#4 == (signedi | signedj);
output1{test++} = 5#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(2##4);
output1{test++} = 6##4 == (unsignedi+unsignedj);
output1{test++} = 2##4 == (unsignedi -unsignedj);
output1{test++} = 8##4 == (unsignedi *unsignedj);
output1{test++} = 8##8 == (unsignedi **unsignedj);
output1{test++} = 2##4 == (unsignedi /unsignedj);
output1{test++} = 0##4 == (unsignedi %unsignedj);
output1{test++} = 0##4 == (unsignedi & unsignedj);
output1{test++} = 6##4 == (unsignedi | unsignedj);
output1{test++} = 6##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-6#4);
output1{test++} = -10#4 == (signedi+signedj);
output1{test++} = 2#4 == (signedi -signedj);
output1{test++} = 24#4 == (signedi *signedj);
output1{test++} = 24#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = -4#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(-4#8)) // signedj);
output1{test++} = -4#4 == ((MI8(-4#8)) %%signedj);
output1{test++} = -8#4 == (signedi & signedj);
output1{test++} = -2#4 == (signedi | signedj);
output1{test++} = 6#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(3##4);
output1{test++} = 7##4 == (unsignedi+unsignedj);
output1{test++} = 1##4 == (unsignedi -unsignedj);
output1{test++} = 12##4 == (unsignedi *unsignedj);
output1{test++} = 12##8 == (unsignedi **unsignedj);
output1{test++} = 1##4 == (unsignedi /unsignedj);
output1{test++} = 1##4 == (unsignedi %unsignedj);
output1{test++} = 10##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 2##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 0##4 == (unsignedi & unsignedj);
output1{test++} = 7##4 == (unsignedi | unsignedj);
output1{test++} = 7##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-5#4);
output1{test++} = -9#4 == (signedi+signedj);
output1{test++} = 1#4 == (signedi -signedj);
output1{test++} = 20#4 == (signedi *signedj);
output1{test++} = 20#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = -4#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(-4#8)) // signedj);
output1{test++} = -4#4 == ((MI8(-4#8)) %%signedj);
output1{test++} = -8#4 == (signedi & signedj);
output1{test++} = -1#4 == (signedi | signedj);
output1{test++} = 7#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(4##4);
output1{test++} = 8##4 == (unsignedi+unsignedj);
output1{test++} = 0##4 == (unsignedi -unsignedj);
output1{test++} = 16##4 == (unsignedi *unsignedj);
output1{test++} = 16##8 == (unsignedi **unsignedj);
output1{test++} = 1##4 == (unsignedi /unsignedj);
output1{test++} = 0##4 == (unsignedi %unsignedj);
output1{test++} = 8##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 0##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 4##4 == (unsignedi & unsignedj);
output1{test++} = 4##4 == (unsignedi | unsignedj);
output1{test++} = 0##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 1##1 == (unsignedi ==unsignedj);
output1{test++} = 0##1 == (unsignedi !=unsignedj);
signedj = MI4(-4#4);
output1{test++} = -8#4 == (signedi+signedj);
output1{test++} = 0#4 == (signedi -signedj);
output1{test++} = 16#4 == (signedi *signedj);
output1{test++} = 16#8 == (signedi **signedj);
output1{test++} = 1#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = 1#4 == ((MI8(-4#8)) // signedj);
output1{test++} = 0#4 == ((MI8(-4#8)) %%signedj);
output1{test++} = -4#4 == (signedi & signedj);
output1{test++} = -4#4 == (signedi | signedj);
output1{test++} = 0#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 1#1 == (signedi ==signedj);
output1{test++} = 0#1 == (signedi !=signedj);
unsignedj = MUI4(5##4);
output1{test++} = 9##4 == (unsignedi+unsignedj);
output1{test++} = -1##4 == (unsignedi -unsignedj);
output1{test++} = 20##4 == (unsignedi *unsignedj);
output1{test++} = 20##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 4##4 == (unsignedi %unsignedj);
output1{test++} = 6##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 2##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 4##4 == (unsignedi & unsignedj);
output1{test++} = 5##4 == (unsignedi | unsignedj);
output1{test++} = 1##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-3#4);
output1{test++} = -7#4 == (signedi+signedj);
output1{test++} = -1#4 == (signedi -signedj);
output1{test++} = 12#4 == (signedi *signedj);
output1{test++} = 12#8 == (signedi **signedj);
output1{test++} = 1#4 == (signedi /signedj);
output1{test++} = -1#4 == (signedi %signedj);
output1{test++} = 1#4 == ((MI8(-4#8)) // signedj);
output1{test++} = -1#4 == ((MI8(-4#8)) %%signedj);
output1{test++} = -4#4 == (signedi & signedj);
output1{test++} = -3#4 == (signedi | signedj);
output1{test++} = 1#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(6##4);
output1{test++} = 10##4 == (unsignedi+unsignedj);
output1{test++} = -2##4 == (unsignedi -unsignedj);
output1{test++} = 24##4 == (unsignedi *unsignedj);
output1{test++} = 24##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 4##4 == (unsignedi %unsignedj);
output1{test++} = 5##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 2##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 4##4 == (unsignedi & unsignedj);
output1{test++} = 6##4 == (unsignedi | unsignedj);
output1{test++} = 2##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-2#4);
output1{test++} = -6#4 == (signedi+signedj);
output1{test++} = -2#4 == (signedi -signedj);
output1{test++} = 8#4 == (signedi *signedj);
output1{test++} = 8#8 == (signedi **signedj);
output1{test++} = 2#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = 2#4 == ((MI8(-4#8)) // signedj);
output1{test++} = 0#4 == ((MI8(-4#8)) %%signedj);
output1{test++} = -4#4 == (signedi & signedj);
output1{test++} = -2#4 == (signedi | signedj);
output1{test++} = 2#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(7##4);
output1{test++} = 11##4 == (unsignedi+unsignedj);
output1{test++} = -3##4 == (unsignedi -unsignedj);
output1{test++} = 28##4 == (unsignedi *unsignedj);
output1{test++} = 28##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 4##4 == (unsignedi %unsignedj);
output1{test++} = 4##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 4##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 4##4 == (unsignedi & unsignedj);
output1{test++} = 7##4 == (unsignedi | unsignedj);
output1{test++} = 3##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-1#4);
output1{test++} = -5#4 == (signedi+signedj);
output1{test++} = -3#4 == (signedi -signedj);
output1{test++} = 4#4 == (signedi *signedj);
output1{test++} = 4#8 == (signedi **signedj);
output1{test++} = 4#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = 4#4 == ((MI8(-4#8)) // signedj);
output1{test++} = 0#4 == ((MI8(-4#8)) %%signedj);
output1{test++} = -4#4 == (signedi & signedj);
output1{test++} = -1#4 == (signedi | signedj);
output1{test++} = 3#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(8##4);
output1{test++} = 12##4 == (unsignedi+unsignedj);
output1{test++} = -4##4 == (unsignedi -unsignedj);
output1{test++} = 32##4 == (unsignedi *unsignedj);
output1{test++} = 32##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 4##4 == (unsignedi %unsignedj);
output1{test++} = 4##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 0##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 0##4 == (unsignedi & unsignedj);
output1{test++} = 12##4 == (unsignedi | unsignedj);
output1{test++} = 12##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(0#4);
output1{test++} = -4#4 == (signedi+signedj);
output1{test++} = -4#4 == (signedi -signedj);
output1{test++} = 0#4 == (signedi *signedj);
output1{test++} = 0#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi & signedj);
output1{test++} = -4#4 == (signedi | signedj);
output1{test++} = -4#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(9##4);
output1{test++} = 13##4 == (unsignedi+unsignedj);
output1{test++} = -5##4 == (unsignedi -unsignedj);
output1{test++} = 36##4 == (unsignedi *unsignedj);
output1{test++} = 36##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 4##4 == (unsignedi %unsignedj);
output1{test++} = 3##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 5##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 0##4 == (unsignedi & unsignedj);
output1{test++} = 13##4 == (unsignedi | unsignedj);
output1{test++} = 13##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(1#4);
output1{test++} = -3#4 == (signedi+signedj);
output1{test++} = -5#4 == (signedi -signedj);
output1{test++} = -4#4 == (signedi *signedj);
output1{test++} = -4#8 == (signedi **signedj);
output1{test++} = -4#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = -4#4 == ((MI8(-4#8)) // signedj);
output1{test++} = 0#4 == ((MI8(-4#8)) %%signedj);
output1{test++} = 0#4 == (signedi & signedj);
output1{test++} = -3#4 == (signedi | signedj);
output1{test++} = -3#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(10##4);
output1{test++} = 14##4 == (unsignedi+unsignedj);
output1{test++} = -6##4 == (unsignedi -unsignedj);
output1{test++} = 40##4 == (unsignedi *unsignedj);
output1{test++} = 40##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 4##4 == (unsignedi %unsignedj);
output1{test++} = 3##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 2##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 0##4 == (unsignedi & unsignedj);
output1{test++} = 14##4 == (unsignedi | unsignedj);
output1{test++} = 14##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(2#4);
output1{test++} = -2#4 == (signedi+signedj);
output1{test++} = -6#4 == (signedi -signedj);
output1{test++} = -8#4 == (signedi *signedj);
output1{test++} = -8#8 == (signedi **signedj);
output1{test++} = -2#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = -2#4 == ((MI8(-4#8)) // signedj);
output1{test++} = 0#4 == ((MI8(-4#8)) %%signedj);
output1{test++} = 0#4 == (signedi & signedj);
output1{test++} = -2#4 == (signedi | signedj);
output1{test++} = -2#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(11##4);
output1{test++} = 15##4 == (unsignedi+unsignedj);
output1{test++} = -7##4 == (unsignedi -unsignedj);
output1{test++} = 44##4 == (unsignedi *unsignedj);
output1{test++} = 44##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 4##4 == (unsignedi %unsignedj);
output1{test++} = 2##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 10##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 0##4 == (unsignedi & unsignedj);
output1{test++} = 15##4 == (unsignedi | unsignedj);
output1{test++} = 15##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(3#4);
output1{test++} = -1#4 == (signedi+signedj);
output1{test++} = -7#4 == (signedi -signedj);
output1{test++} = -12#4 == (signedi *signedj);
output1{test++} = -12#8 == (signedi **signedj);
output1{test++} = -1#4 == (signedi /signedj);
output1{test++} = -1#4 == (signedi %signedj);
output1{test++} = -1#4 == ((MI8(-4#8)) // signedj);
output1{test++} = -1#4 == ((MI8(-4#8)) %%signedj);
output1{test++} = 0#4 == (signedi & signedj);
output1{test++} = -1#4 == (signedi | signedj);
output1{test++} = -1#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(12##4);
output1{test++} = 16##4 == (unsignedi+unsignedj);
output1{test++} = -8##4 == (unsignedi -unsignedj);
output1{test++} = 48##4 == (unsignedi *unsignedj);
output1{test++} = 48##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 4##4 == (unsignedi %unsignedj);
output1{test++} = 2##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 8##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 4##4 == (unsignedi & unsignedj);
output1{test++} = 12##4 == (unsignedi | unsignedj);
output1{test++} = 8##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(4#4);
output1{test++} = 0#4 == (signedi+signedj);
output1{test++} = -8#4 == (signedi -signedj);
output1{test++} = -16#4 == (signedi *signedj);
output1{test++} = -16#8 == (signedi **signedj);
output1{test++} = -1#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = -1#4 == ((MI8(-4#8)) // signedj);
output1{test++} = 0#4 == ((MI8(-4#8)) %%signedj);
output1{test++} = 4#4 == (signedi & signedj);
output1{test++} = -4#4 == (signedi | signedj);
output1{test++} = -8#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(13##4);
output1{test++} = 17##4 == (unsignedi+unsignedj);
output1{test++} = -9##4 == (unsignedi -unsignedj);
output1{test++} = 52##4 == (unsignedi *unsignedj);
output1{test++} = 52##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 4##4 == (unsignedi %unsignedj);
output1{test++} = 2##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 6##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 4##4 == (unsignedi & unsignedj);
output1{test++} = 13##4 == (unsignedi | unsignedj);
output1{test++} = 9##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(5#4);
output1{test++} = 1#4 == (signedi+signedj);
output1{test++} = -9#4 == (signedi -signedj);
output1{test++} = -20#4 == (signedi *signedj);
output1{test++} = -20#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = -4#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(-4#8)) // signedj);
output1{test++} = -4#4 == ((MI8(-4#8)) %%signedj);
output1{test++} = 4#4 == (signedi & signedj);
output1{test++} = -3#4 == (signedi | signedj);
output1{test++} = -7#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(14##4);
output1{test++} = 18##4 == (unsignedi+unsignedj);
output1{test++} = -10##4 == (unsignedi -unsignedj);
output1{test++} = 56##4 == (unsignedi *unsignedj);
output1{test++} = 56##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 4##4 == (unsignedi %unsignedj);
output1{test++} = 2##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 4##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 4##4 == (unsignedi & unsignedj);
output1{test++} = 14##4 == (unsignedi | unsignedj);
output1{test++} = 10##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(6#4);
output1{test++} = 2#4 == (signedi+signedj);
output1{test++} = -10#4 == (signedi -signedj);
output1{test++} = -24#4 == (signedi *signedj);
output1{test++} = -24#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = -4#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(-4#8)) // signedj);
output1{test++} = -4#4 == ((MI8(-4#8)) %%signedj);
output1{test++} = 4#4 == (signedi & signedj);
output1{test++} = -2#4 == (signedi | signedj);
output1{test++} = -6#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(15##4);
output1{test++} = 19##4 == (unsignedi+unsignedj);
output1{test++} = -11##4 == (unsignedi -unsignedj);
output1{test++} = 60##4 == (unsignedi *unsignedj);
output1{test++} = 60##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 4##4 == (unsignedi %unsignedj);
output1{test++} = 2##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 2##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 4##4 == (unsignedi & unsignedj);
output1{test++} = 15##4 == (unsignedi | unsignedj);
output1{test++} = 11##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(7#4);
output1{test++} = 3#4 == (signedi+signedj);
output1{test++} = -11#4 == (signedi -signedj);
output1{test++} = -28#4 == (signedi *signedj);
output1{test++} = -28#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = -4#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(-4#8)) // signedj);
output1{test++} = -4#4 == ((MI8(-4#8)) %%signedj);
output1{test++} = 4#4 == (signedi & signedj);
output1{test++} = -1#4 == (signedi | signedj);
output1{test++} = -5#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedi = MUI4(5##4);
signedi = MI4(-3#4);
output1{test++} = 10##4 == (~unsignedi);
output1{test++} = 2#4 == (~signedi);
unsignedj = MUI4(0##4);
output1{test++} = 5##4 == (unsignedi+unsignedj);
output1{test++} = 5##4 == (unsignedi -unsignedj);
output1{test++} = 0##4 == (unsignedi *unsignedj);
output1{test++} = 0##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi & unsignedj);
output1{test++} = 5##4 == (unsignedi | unsignedj);
output1{test++} = 5##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-8#4);
output1{test++} = -11#4 == (signedi+signedj);
output1{test++} = 5#4 == (signedi -signedj);
output1{test++} = 24#4 == (signedi *signedj);
output1{test++} = 24#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = -3#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(-3#8)) // signedj);
output1{test++} = -3#4 == ((MI8(-3#8)) %%signedj);
output1{test++} = -8#4 == (signedi & signedj);
output1{test++} = -3#4 == (signedi | signedj);
output1{test++} = 5#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(1##4);
output1{test++} = 6##4 == (unsignedi+unsignedj);
output1{test++} = 4##4 == (unsignedi -unsignedj);
output1{test++} = 5##4 == (unsignedi *unsignedj);
output1{test++} = 5##8 == (unsignedi **unsignedj);
output1{test++} = 5##4 == (unsignedi /unsignedj);
output1{test++} = 0##4 == (unsignedi %unsignedj);
output1{test++} = 1##4 == (unsignedi & unsignedj);
output1{test++} = 5##4 == (unsignedi | unsignedj);
output1{test++} = 4##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-7#4);
output1{test++} = -10#4 == (signedi+signedj);
output1{test++} = 4#4 == (signedi -signedj);
output1{test++} = 21#4 == (signedi *signedj);
output1{test++} = 21#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = -3#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(-3#8)) // signedj);
output1{test++} = -3#4 == ((MI8(-3#8)) %%signedj);
output1{test++} = -7#4 == (signedi & signedj);
output1{test++} = -3#4 == (signedi | signedj);
output1{test++} = 4#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(2##4);
output1{test++} = 7##4 == (unsignedi+unsignedj);
output1{test++} = 3##4 == (unsignedi -unsignedj);
output1{test++} = 10##4 == (unsignedi *unsignedj);
output1{test++} = 10##8 == (unsignedi **unsignedj);
output1{test++} = 2##4 == (unsignedi /unsignedj);
output1{test++} = 1##4 == (unsignedi %unsignedj);
output1{test++} = 0##4 == (unsignedi & unsignedj);
output1{test++} = 7##4 == (unsignedi | unsignedj);
output1{test++} = 7##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-6#4);
output1{test++} = -9#4 == (signedi+signedj);
output1{test++} = 3#4 == (signedi -signedj);
output1{test++} = 18#4 == (signedi *signedj);
output1{test++} = 18#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = -3#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(-3#8)) // signedj);
output1{test++} = -3#4 == ((MI8(-3#8)) %%signedj);
output1{test++} = -8#4 == (signedi & signedj);
output1{test++} = -1#4 == (signedi | signedj);
output1{test++} = 7#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(3##4);
output1{test++} = 8##4 == (unsignedi+unsignedj);
output1{test++} = 2##4 == (unsignedi -unsignedj);
output1{test++} = 15##4 == (unsignedi *unsignedj);
output1{test++} = 15##8 == (unsignedi **unsignedj);
output1{test++} = 1##4 == (unsignedi /unsignedj);
output1{test++} = 2##4 == (unsignedi %unsignedj);
output1{test++} = 13##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 1##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 1##4 == (unsignedi & unsignedj);
output1{test++} = 7##4 == (unsignedi | unsignedj);
output1{test++} = 6##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-5#4);
output1{test++} = -8#4 == (signedi+signedj);
output1{test++} = 2#4 == (signedi -signedj);
output1{test++} = 15#4 == (signedi *signedj);
output1{test++} = 15#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = -3#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(-3#8)) // signedj);
output1{test++} = -3#4 == ((MI8(-3#8)) %%signedj);
output1{test++} = -7#4 == (signedi & signedj);
output1{test++} = -1#4 == (signedi | signedj);
output1{test++} = 6#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(4##4);
output1{test++} = 9##4 == (unsignedi+unsignedj);
output1{test++} = 1##4 == (unsignedi -unsignedj);
output1{test++} = 20##4 == (unsignedi *unsignedj);
output1{test++} = 20##8 == (unsignedi **unsignedj);
output1{test++} = 1##4 == (unsignedi /unsignedj);
output1{test++} = 1##4 == (unsignedi %unsignedj);
output1{test++} = 10##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 0##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 4##4 == (unsignedi & unsignedj);
output1{test++} = 5##4 == (unsignedi | unsignedj);
output1{test++} = 1##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-4#4);
output1{test++} = -7#4 == (signedi+signedj);
output1{test++} = 1#4 == (signedi -signedj);
output1{test++} = 12#4 == (signedi *signedj);
output1{test++} = 12#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = -3#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(-3#8)) // signedj);
output1{test++} = -3#4 == ((MI8(-3#8)) %%signedj);
output1{test++} = -4#4 == (signedi & signedj);
output1{test++} = -3#4 == (signedi | signedj);
output1{test++} = 1#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(5##4);
output1{test++} = 10##4 == (unsignedi+unsignedj);
output1{test++} = 0##4 == (unsignedi -unsignedj);
output1{test++} = 25##4 == (unsignedi *unsignedj);
output1{test++} = 25##8 == (unsignedi **unsignedj);
output1{test++} = 1##4 == (unsignedi /unsignedj);
output1{test++} = 0##4 == (unsignedi %unsignedj);
output1{test++} = 8##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 0##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 5##4 == (unsignedi & unsignedj);
output1{test++} = 5##4 == (unsignedi | unsignedj);
output1{test++} = 0##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 1##1 == (unsignedi ==unsignedj);
output1{test++} = 0##1 == (unsignedi !=unsignedj);
signedj = MI4(-3#4);
output1{test++} = -6#4 == (signedi+signedj);
output1{test++} = 0#4 == (signedi -signedj);
output1{test++} = 9#4 == (signedi *signedj);
output1{test++} = 9#8 == (signedi **signedj);
output1{test++} = 1#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = 1#4 == ((MI8(-3#8)) // signedj);
output1{test++} = 0#4 == ((MI8(-3#8)) %%signedj);
output1{test++} = -3#4 == (signedi & signedj);
output1{test++} = -3#4 == (signedi | signedj);
output1{test++} = 0#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 1#1 == (signedi ==signedj);
output1{test++} = 0#1 == (signedi !=signedj);
unsignedj = MUI4(6##4);
output1{test++} = 11##4 == (unsignedi+unsignedj);
output1{test++} = -1##4 == (unsignedi -unsignedj);
output1{test++} = 30##4 == (unsignedi *unsignedj);
output1{test++} = 30##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 5##4 == (unsignedi %unsignedj);
output1{test++} = 6##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 4##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 4##4 == (unsignedi & unsignedj);
output1{test++} = 7##4 == (unsignedi | unsignedj);
output1{test++} = 3##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-2#4);
output1{test++} = -5#4 == (signedi+signedj);
output1{test++} = -1#4 == (signedi -signedj);
output1{test++} = 6#4 == (signedi *signedj);
output1{test++} = 6#8 == (signedi **signedj);
output1{test++} = 1#4 == (signedi /signedj);
output1{test++} = -1#4 == (signedi %signedj);
output1{test++} = 1#4 == ((MI8(-3#8)) // signedj);
output1{test++} = -1#4 == ((MI8(-3#8)) %%signedj);
output1{test++} = -4#4 == (signedi & signedj);
output1{test++} = -1#4 == (signedi | signedj);
output1{test++} = 3#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(7##4);
output1{test++} = 12##4 == (unsignedi+unsignedj);
output1{test++} = -2##4 == (unsignedi -unsignedj);
output1{test++} = 35##4 == (unsignedi *unsignedj);
output1{test++} = 35##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 5##4 == (unsignedi %unsignedj);
output1{test++} = 5##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 5##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 5##4 == (unsignedi & unsignedj);
output1{test++} = 7##4 == (unsignedi | unsignedj);
output1{test++} = 2##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-1#4);
output1{test++} = -4#4 == (signedi+signedj);
output1{test++} = -2#4 == (signedi -signedj);
output1{test++} = 3#4 == (signedi *signedj);
output1{test++} = 3#8 == (signedi **signedj);
output1{test++} = 3#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = 3#4 == ((MI8(-3#8)) // signedj);
output1{test++} = 0#4 == ((MI8(-3#8)) %%signedj);
output1{test++} = -3#4 == (signedi & signedj);
output1{test++} = -1#4 == (signedi | signedj);
output1{test++} = 2#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(8##4);
output1{test++} = 13##4 == (unsignedi+unsignedj);
output1{test++} = -3##4 == (unsignedi -unsignedj);
output1{test++} = 40##4 == (unsignedi *unsignedj);
output1{test++} = 40##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 5##4 == (unsignedi %unsignedj);
output1{test++} = 5##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 0##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 0##4 == (unsignedi & unsignedj);
output1{test++} = 13##4 == (unsignedi | unsignedj);
output1{test++} = 13##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(0#4);
output1{test++} = -3#4 == (signedi+signedj);
output1{test++} = -3#4 == (signedi -signedj);
output1{test++} = 0#4 == (signedi *signedj);
output1{test++} = 0#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi & signedj);
output1{test++} = -3#4 == (signedi | signedj);
output1{test++} = -3#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(9##4);
output1{test++} = 14##4 == (unsignedi+unsignedj);
output1{test++} = -4##4 == (unsignedi -unsignedj);
output1{test++} = 45##4 == (unsignedi *unsignedj);
output1{test++} = 45##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 5##4 == (unsignedi %unsignedj);
output1{test++} = 4##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 4##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 1##4 == (unsignedi & unsignedj);
output1{test++} = 13##4 == (unsignedi | unsignedj);
output1{test++} = 12##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(1#4);
output1{test++} = -2#4 == (signedi+signedj);
output1{test++} = -4#4 == (signedi -signedj);
output1{test++} = -3#4 == (signedi *signedj);
output1{test++} = -3#8 == (signedi **signedj);
output1{test++} = -3#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = -3#4 == ((MI8(-3#8)) // signedj);
output1{test++} = 0#4 == ((MI8(-3#8)) %%signedj);
output1{test++} = 1#4 == (signedi & signedj);
output1{test++} = -3#4 == (signedi | signedj);
output1{test++} = -4#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(10##4);
output1{test++} = 15##4 == (unsignedi+unsignedj);
output1{test++} = -5##4 == (unsignedi -unsignedj);
output1{test++} = 50##4 == (unsignedi *unsignedj);
output1{test++} = 50##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 5##4 == (unsignedi %unsignedj);
output1{test++} = 4##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 0##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 0##4 == (unsignedi & unsignedj);
output1{test++} = 15##4 == (unsignedi | unsignedj);
output1{test++} = 15##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(2#4);
output1{test++} = -1#4 == (signedi+signedj);
output1{test++} = -5#4 == (signedi -signedj);
output1{test++} = -6#4 == (signedi *signedj);
output1{test++} = -6#8 == (signedi **signedj);
output1{test++} = -1#4 == (signedi /signedj);
output1{test++} = -1#4 == (signedi %signedj);
output1{test++} = -1#4 == ((MI8(-3#8)) // signedj);
output1{test++} = -1#4 == ((MI8(-3#8)) %%signedj);
output1{test++} = 0#4 == (signedi & signedj);
output1{test++} = -1#4 == (signedi | signedj);
output1{test++} = -1#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(11##4);
output1{test++} = 16##4 == (unsignedi+unsignedj);
output1{test++} = -6##4 == (unsignedi -unsignedj);
output1{test++} = 55##4 == (unsignedi *unsignedj);
output1{test++} = 55##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 5##4 == (unsignedi %unsignedj);
output1{test++} = 3##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 7##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 1##4 == (unsignedi & unsignedj);
output1{test++} = 15##4 == (unsignedi | unsignedj);
output1{test++} = 14##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(3#4);
output1{test++} = 0#4 == (signedi+signedj);
output1{test++} = -6#4 == (signedi -signedj);
output1{test++} = -9#4 == (signedi *signedj);
output1{test++} = -9#8 == (signedi **signedj);
output1{test++} = -1#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = -1#4 == ((MI8(-3#8)) // signedj);
output1{test++} = 0#4 == ((MI8(-3#8)) %%signedj);
output1{test++} = 1#4 == (signedi & signedj);
output1{test++} = -1#4 == (signedi | signedj);
output1{test++} = -2#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(12##4);
output1{test++} = 17##4 == (unsignedi+unsignedj);
output1{test++} = -7##4 == (unsignedi -unsignedj);
output1{test++} = 60##4 == (unsignedi *unsignedj);
output1{test++} = 60##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 5##4 == (unsignedi %unsignedj);
output1{test++} = 3##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 4##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 4##4 == (unsignedi & unsignedj);
output1{test++} = 13##4 == (unsignedi | unsignedj);
output1{test++} = 9##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(4#4);
output1{test++} = 1#4 == (signedi+signedj);
output1{test++} = -7#4 == (signedi -signedj);
output1{test++} = -12#4 == (signedi *signedj);
output1{test++} = -12#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = -3#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(-3#8)) // signedj);
output1{test++} = -3#4 == ((MI8(-3#8)) %%signedj);
output1{test++} = 4#4 == (signedi & signedj);
output1{test++} = -3#4 == (signedi | signedj);
output1{test++} = -7#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(13##4);
output1{test++} = 18##4 == (unsignedi+unsignedj);
output1{test++} = -8##4 == (unsignedi -unsignedj);
output1{test++} = 65##4 == (unsignedi *unsignedj);
output1{test++} = 65##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 5##4 == (unsignedi %unsignedj);
output1{test++} = 3##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 1##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 5##4 == (unsignedi & unsignedj);
output1{test++} = 13##4 == (unsignedi | unsignedj);
output1{test++} = 8##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(5#4);
output1{test++} = 2#4 == (signedi+signedj);
output1{test++} = -8#4 == (signedi -signedj);
output1{test++} = -15#4 == (signedi *signedj);
output1{test++} = -15#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = -3#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(-3#8)) // signedj);
output1{test++} = -3#4 == ((MI8(-3#8)) %%signedj);
output1{test++} = 5#4 == (signedi & signedj);
output1{test++} = -3#4 == (signedi | signedj);
output1{test++} = -8#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(14##4);
output1{test++} = 19##4 == (unsignedi+unsignedj);
output1{test++} = -9##4 == (unsignedi -unsignedj);
output1{test++} = 70##4 == (unsignedi *unsignedj);
output1{test++} = 70##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 5##4 == (unsignedi %unsignedj);
output1{test++} = 2##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 12##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 4##4 == (unsignedi & unsignedj);
output1{test++} = 15##4 == (unsignedi | unsignedj);
output1{test++} = 11##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(6#4);
output1{test++} = 3#4 == (signedi+signedj);
output1{test++} = -9#4 == (signedi -signedj);
output1{test++} = -18#4 == (signedi *signedj);
output1{test++} = -18#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = -3#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(-3#8)) // signedj);
output1{test++} = -3#4 == ((MI8(-3#8)) %%signedj);
output1{test++} = 4#4 == (signedi & signedj);
output1{test++} = -1#4 == (signedi | signedj);
output1{test++} = -5#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(15##4);
output1{test++} = 20##4 == (unsignedi+unsignedj);
output1{test++} = -10##4 == (unsignedi -unsignedj);
output1{test++} = 75##4 == (unsignedi *unsignedj);
output1{test++} = 75##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 5##4 == (unsignedi %unsignedj);
output1{test++} = 2##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 10##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 5##4 == (unsignedi & unsignedj);
output1{test++} = 15##4 == (unsignedi | unsignedj);
output1{test++} = 10##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(7#4);
output1{test++} = 4#4 == (signedi+signedj);
output1{test++} = -10#4 == (signedi -signedj);
output1{test++} = -21#4 == (signedi *signedj);
output1{test++} = -21#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = -3#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(-3#8)) // signedj);
output1{test++} = -3#4 == ((MI8(-3#8)) %%signedj);
output1{test++} = 5#4 == (signedi & signedj);
output1{test++} = -1#4 == (signedi | signedj);
output1{test++} = -6#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedi = MUI4(6##4);
signedi = MI4(-2#4);
output1{test++} = 9##4 == (~unsignedi);
output1{test++} = 1#4 == (~signedi);
unsignedj = MUI4(0##4);
output1{test++} = 6##4 == (unsignedi+unsignedj);
output1{test++} = 6##4 == (unsignedi -unsignedj);
output1{test++} = 0##4 == (unsignedi *unsignedj);
output1{test++} = 0##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi & unsignedj);
output1{test++} = 6##4 == (unsignedi | unsignedj);
output1{test++} = 6##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-8#4);
output1{test++} = -10#4 == (signedi+signedj);
output1{test++} = 6#4 == (signedi -signedj);
output1{test++} = 16#4 == (signedi *signedj);
output1{test++} = 16#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = -2#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(-2#8)) // signedj);
output1{test++} = -2#4 == ((MI8(-2#8)) %%signedj);
output1{test++} = -8#4 == (signedi & signedj);
output1{test++} = -2#4 == (signedi | signedj);
output1{test++} = 6#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(1##4);
output1{test++} = 7##4 == (unsignedi+unsignedj);
output1{test++} = 5##4 == (unsignedi -unsignedj);
output1{test++} = 6##4 == (unsignedi *unsignedj);
output1{test++} = 6##8 == (unsignedi **unsignedj);
output1{test++} = 6##4 == (unsignedi /unsignedj);
output1{test++} = 0##4 == (unsignedi %unsignedj);
output1{test++} = 0##4 == (unsignedi & unsignedj);
output1{test++} = 7##4 == (unsignedi | unsignedj);
output1{test++} = 7##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-7#4);
output1{test++} = -9#4 == (signedi+signedj);
output1{test++} = 5#4 == (signedi -signedj);
output1{test++} = 14#4 == (signedi *signedj);
output1{test++} = 14#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = -2#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(-2#8)) // signedj);
output1{test++} = -2#4 == ((MI8(-2#8)) %%signedj);
output1{test++} = -8#4 == (signedi & signedj);
output1{test++} = -1#4 == (signedi | signedj);
output1{test++} = 7#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(2##4);
output1{test++} = 8##4 == (unsignedi+unsignedj);
output1{test++} = 4##4 == (unsignedi -unsignedj);
output1{test++} = 12##4 == (unsignedi *unsignedj);
output1{test++} = 12##8 == (unsignedi **unsignedj);
output1{test++} = 3##4 == (unsignedi /unsignedj);
output1{test++} = 0##4 == (unsignedi %unsignedj);
output1{test++} = 2##4 == (unsignedi & unsignedj);
output1{test++} = 6##4 == (unsignedi | unsignedj);
output1{test++} = 4##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-6#4);
output1{test++} = -8#4 == (signedi+signedj);
output1{test++} = 4#4 == (signedi -signedj);
output1{test++} = 12#4 == (signedi *signedj);
output1{test++} = 12#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = -2#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(-2#8)) // signedj);
output1{test++} = -2#4 == ((MI8(-2#8)) %%signedj);
output1{test++} = -6#4 == (signedi & signedj);
output1{test++} = -2#4 == (signedi | signedj);
output1{test++} = 4#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(3##4);
output1{test++} = 9##4 == (unsignedi+unsignedj);
output1{test++} = 3##4 == (unsignedi -unsignedj);
output1{test++} = 18##4 == (unsignedi *unsignedj);
output1{test++} = 18##8 == (unsignedi **unsignedj);
output1{test++} = 2##4 == (unsignedi /unsignedj);
output1{test++} = 0##4 == (unsignedi %unsignedj);
output1{test++} = 2##4 == (unsignedi & unsignedj);
output1{test++} = 7##4 == (unsignedi | unsignedj);
output1{test++} = 5##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-5#4);
output1{test++} = -7#4 == (signedi+signedj);
output1{test++} = 3#4 == (signedi -signedj);
output1{test++} = 10#4 == (signedi *signedj);
output1{test++} = 10#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = -2#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(-2#8)) // signedj);
output1{test++} = -2#4 == ((MI8(-2#8)) %%signedj);
output1{test++} = -6#4 == (signedi & signedj);
output1{test++} = -1#4 == (signedi | signedj);
output1{test++} = 5#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(4##4);
output1{test++} = 10##4 == (unsignedi+unsignedj);
output1{test++} = 2##4 == (unsignedi -unsignedj);
output1{test++} = 24##4 == (unsignedi *unsignedj);
output1{test++} = 24##8 == (unsignedi **unsignedj);
output1{test++} = 1##4 == (unsignedi /unsignedj);
output1{test++} = 2##4 == (unsignedi %unsignedj);
output1{test++} = 12##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 0##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 4##4 == (unsignedi & unsignedj);
output1{test++} = 6##4 == (unsignedi | unsignedj);
output1{test++} = 2##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-4#4);
output1{test++} = -6#4 == (signedi+signedj);
output1{test++} = 2#4 == (signedi -signedj);
output1{test++} = 8#4 == (signedi *signedj);
output1{test++} = 8#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = -2#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(-2#8)) // signedj);
output1{test++} = -2#4 == ((MI8(-2#8)) %%signedj);
output1{test++} = -4#4 == (signedi & signedj);
output1{test++} = -2#4 == (signedi | signedj);
output1{test++} = 2#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(5##4);
output1{test++} = 11##4 == (unsignedi+unsignedj);
output1{test++} = 1##4 == (unsignedi -unsignedj);
output1{test++} = 30##4 == (unsignedi *unsignedj);
output1{test++} = 30##8 == (unsignedi **unsignedj);
output1{test++} = 1##4 == (unsignedi /unsignedj);
output1{test++} = 1##4 == (unsignedi %unsignedj);
output1{test++} = 9##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 3##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 4##4 == (unsignedi & unsignedj);
output1{test++} = 7##4 == (unsignedi | unsignedj);
output1{test++} = 3##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-3#4);
output1{test++} = -5#4 == (signedi+signedj);
output1{test++} = 1#4 == (signedi -signedj);
output1{test++} = 6#4 == (signedi *signedj);
output1{test++} = 6#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = -2#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(-2#8)) // signedj);
output1{test++} = -2#4 == ((MI8(-2#8)) %%signedj);
output1{test++} = -4#4 == (signedi & signedj);
output1{test++} = -1#4 == (signedi | signedj);
output1{test++} = 3#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(6##4);
output1{test++} = 12##4 == (unsignedi+unsignedj);
output1{test++} = 0##4 == (unsignedi -unsignedj);
output1{test++} = 36##4 == (unsignedi *unsignedj);
output1{test++} = 36##8 == (unsignedi **unsignedj);
output1{test++} = 1##4 == (unsignedi /unsignedj);
output1{test++} = 0##4 == (unsignedi %unsignedj);
output1{test++} = 8##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 0##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 6##4 == (unsignedi & unsignedj);
output1{test++} = 6##4 == (unsignedi | unsignedj);
output1{test++} = 0##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 1##1 == (unsignedi ==unsignedj);
output1{test++} = 0##1 == (unsignedi !=unsignedj);
signedj = MI4(-2#4);
output1{test++} = -4#4 == (signedi+signedj);
output1{test++} = 0#4 == (signedi -signedj);
output1{test++} = 4#4 == (signedi *signedj);
output1{test++} = 4#8 == (signedi **signedj);
output1{test++} = 1#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = 1#4 == ((MI8(-2#8)) // signedj);
output1{test++} = 0#4 == ((MI8(-2#8)) %%signedj);
output1{test++} = -2#4 == (signedi & signedj);
output1{test++} = -2#4 == (signedi | signedj);
output1{test++} = 0#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 1#1 == (signedi ==signedj);
output1{test++} = 0#1 == (signedi !=signedj);
unsignedj = MUI4(7##4);
output1{test++} = 13##4 == (unsignedi+unsignedj);
output1{test++} = -1##4 == (unsignedi -unsignedj);
output1{test++} = 42##4 == (unsignedi *unsignedj);
output1{test++} = 42##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 6##4 == (unsignedi %unsignedj);
output1{test++} = 6##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 6##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 6##4 == (unsignedi & unsignedj);
output1{test++} = 7##4 == (unsignedi | unsignedj);
output1{test++} = 1##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-1#4);
output1{test++} = -3#4 == (signedi+signedj);
output1{test++} = -1#4 == (signedi -signedj);
output1{test++} = 2#4 == (signedi *signedj);
output1{test++} = 2#8 == (signedi **signedj);
output1{test++} = 2#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = 2#4 == ((MI8(-2#8)) // signedj);
output1{test++} = 0#4 == ((MI8(-2#8)) %%signedj);
output1{test++} = -2#4 == (signedi & signedj);
output1{test++} = -1#4 == (signedi | signedj);
output1{test++} = 1#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(8##4);
output1{test++} = 14##4 == (unsignedi+unsignedj);
output1{test++} = -2##4 == (unsignedi -unsignedj);
output1{test++} = 48##4 == (unsignedi *unsignedj);
output1{test++} = 48##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 6##4 == (unsignedi %unsignedj);
output1{test++} = 6##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 0##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 0##4 == (unsignedi & unsignedj);
output1{test++} = 14##4 == (unsignedi | unsignedj);
output1{test++} = 14##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(0#4);
output1{test++} = -2#4 == (signedi+signedj);
output1{test++} = -2#4 == (signedi -signedj);
output1{test++} = 0#4 == (signedi *signedj);
output1{test++} = 0#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi & signedj);
output1{test++} = -2#4 == (signedi | signedj);
output1{test++} = -2#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(9##4);
output1{test++} = 15##4 == (unsignedi+unsignedj);
output1{test++} = -3##4 == (unsignedi -unsignedj);
output1{test++} = 54##4 == (unsignedi *unsignedj);
output1{test++} = 54##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 6##4 == (unsignedi %unsignedj);
output1{test++} = 5##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 3##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 0##4 == (unsignedi & unsignedj);
output1{test++} = 15##4 == (unsignedi | unsignedj);
output1{test++} = 15##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(1#4);
output1{test++} = -1#4 == (signedi+signedj);
output1{test++} = -3#4 == (signedi -signedj);
output1{test++} = -2#4 == (signedi *signedj);
output1{test++} = -2#8 == (signedi **signedj);
output1{test++} = -2#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = -2#4 == ((MI8(-2#8)) // signedj);
output1{test++} = 0#4 == ((MI8(-2#8)) %%signedj);
output1{test++} = 0#4 == (signedi & signedj);
output1{test++} = -1#4 == (signedi | signedj);
output1{test++} = -1#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(10##4);
output1{test++} = 16##4 == (unsignedi+unsignedj);
output1{test++} = -4##4 == (unsignedi -unsignedj);
output1{test++} = 60##4 == (unsignedi *unsignedj);
output1{test++} = 60##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 6##4 == (unsignedi %unsignedj);
output1{test++} = 4##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 8##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 2##4 == (unsignedi & unsignedj);
output1{test++} = 14##4 == (unsignedi | unsignedj);
output1{test++} = 12##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(2#4);
output1{test++} = 0#4 == (signedi+signedj);
output1{test++} = -4#4 == (signedi -signedj);
output1{test++} = -4#4 == (signedi *signedj);
output1{test++} = -4#8 == (signedi **signedj);
output1{test++} = -1#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = -1#4 == ((MI8(-2#8)) // signedj);
output1{test++} = 0#4 == ((MI8(-2#8)) %%signedj);
output1{test++} = 2#4 == (signedi & signedj);
output1{test++} = -2#4 == (signedi | signedj);
output1{test++} = -4#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(11##4);
output1{test++} = 17##4 == (unsignedi+unsignedj);
output1{test++} = -5##4 == (unsignedi -unsignedj);
output1{test++} = 66##4 == (unsignedi *unsignedj);
output1{test++} = 66##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 6##4 == (unsignedi %unsignedj);
output1{test++} = 4##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 4##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 2##4 == (unsignedi & unsignedj);
output1{test++} = 15##4 == (unsignedi | unsignedj);
output1{test++} = 13##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(3#4);
output1{test++} = 1#4 == (signedi+signedj);
output1{test++} = -5#4 == (signedi -signedj);
output1{test++} = -6#4 == (signedi *signedj);
output1{test++} = -6#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = -2#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(-2#8)) // signedj);
output1{test++} = -2#4 == ((MI8(-2#8)) %%signedj);
output1{test++} = 2#4 == (signedi & signedj);
output1{test++} = -1#4 == (signedi | signedj);
output1{test++} = -3#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(12##4);
output1{test++} = 18##4 == (unsignedi+unsignedj);
output1{test++} = -6##4 == (unsignedi -unsignedj);
output1{test++} = 72##4 == (unsignedi *unsignedj);
output1{test++} = 72##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 6##4 == (unsignedi %unsignedj);
output1{test++} = 4##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 0##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 4##4 == (unsignedi & unsignedj);
output1{test++} = 14##4 == (unsignedi | unsignedj);
output1{test++} = 10##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(4#4);
output1{test++} = 2#4 == (signedi+signedj);
output1{test++} = -6#4 == (signedi -signedj);
output1{test++} = -8#4 == (signedi *signedj);
output1{test++} = -8#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = -2#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(-2#8)) // signedj);
output1{test++} = -2#4 == ((MI8(-2#8)) %%signedj);
output1{test++} = 4#4 == (signedi & signedj);
output1{test++} = -2#4 == (signedi | signedj);
output1{test++} = -6#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(13##4);
output1{test++} = 19##4 == (unsignedi+unsignedj);
output1{test++} = -7##4 == (unsignedi -unsignedj);
output1{test++} = 78##4 == (unsignedi *unsignedj);
output1{test++} = 78##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 6##4 == (unsignedi %unsignedj);
output1{test++} = 3##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 9##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 4##4 == (unsignedi & unsignedj);
output1{test++} = 15##4 == (unsignedi | unsignedj);
output1{test++} = 11##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(5#4);
output1{test++} = 3#4 == (signedi+signedj);
output1{test++} = -7#4 == (signedi -signedj);
output1{test++} = -10#4 == (signedi *signedj);
output1{test++} = -10#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = -2#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(-2#8)) // signedj);
output1{test++} = -2#4 == ((MI8(-2#8)) %%signedj);
output1{test++} = 4#4 == (signedi & signedj);
output1{test++} = -1#4 == (signedi | signedj);
output1{test++} = -5#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(14##4);
output1{test++} = 20##4 == (unsignedi+unsignedj);
output1{test++} = -8##4 == (unsignedi -unsignedj);
output1{test++} = 84##4 == (unsignedi *unsignedj);
output1{test++} = 84##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 6##4 == (unsignedi %unsignedj);
output1{test++} = 3##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 6##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 6##4 == (unsignedi & unsignedj);
output1{test++} = 14##4 == (unsignedi | unsignedj);
output1{test++} = 8##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(6#4);
output1{test++} = 4#4 == (signedi+signedj);
output1{test++} = -8#4 == (signedi -signedj);
output1{test++} = -12#4 == (signedi *signedj);
output1{test++} = -12#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = -2#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(-2#8)) // signedj);
output1{test++} = -2#4 == ((MI8(-2#8)) %%signedj);
output1{test++} = 6#4 == (signedi & signedj);
output1{test++} = -2#4 == (signedi | signedj);
output1{test++} = -8#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(15##4);
output1{test++} = 21##4 == (unsignedi+unsignedj);
output1{test++} = -9##4 == (unsignedi -unsignedj);
output1{test++} = 90##4 == (unsignedi *unsignedj);
output1{test++} = 90##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 6##4 == (unsignedi %unsignedj);
output1{test++} = 3##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 3##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 6##4 == (unsignedi & unsignedj);
output1{test++} = 15##4 == (unsignedi | unsignedj);
output1{test++} = 9##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(7#4);
output1{test++} = 5#4 == (signedi+signedj);
output1{test++} = -9#4 == (signedi -signedj);
output1{test++} = -14#4 == (signedi *signedj);
output1{test++} = -14#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = -2#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(-2#8)) // signedj);
output1{test++} = -2#4 == ((MI8(-2#8)) %%signedj);
output1{test++} = 6#4 == (signedi & signedj);
output1{test++} = -1#4 == (signedi | signedj);
output1{test++} = -7#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedi = MUI4(7##4);
signedi = MI4(-1#4);
output1{test++} = 8##4 == (~unsignedi);
output1{test++} = 0#4 == (~signedi);
unsignedj = MUI4(0##4);
output1{test++} = 7##4 == (unsignedi+unsignedj);
output1{test++} = 7##4 == (unsignedi -unsignedj);
output1{test++} = 0##4 == (unsignedi *unsignedj);
output1{test++} = 0##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi & unsignedj);
output1{test++} = 7##4 == (unsignedi | unsignedj);
output1{test++} = 7##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-8#4);
output1{test++} = -9#4 == (signedi+signedj);
output1{test++} = 7#4 == (signedi -signedj);
output1{test++} = 8#4 == (signedi *signedj);
output1{test++} = 8#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = -1#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(-1#8)) // signedj);
output1{test++} = -1#4 == ((MI8(-1#8)) %%signedj);
output1{test++} = -8#4 == (signedi & signedj);
output1{test++} = -1#4 == (signedi | signedj);
output1{test++} = 7#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(1##4);
output1{test++} = 8##4 == (unsignedi+unsignedj);
output1{test++} = 6##4 == (unsignedi -unsignedj);
output1{test++} = 7##4 == (unsignedi *unsignedj);
output1{test++} = 7##8 == (unsignedi **unsignedj);
output1{test++} = 7##4 == (unsignedi /unsignedj);
output1{test++} = 0##4 == (unsignedi %unsignedj);
output1{test++} = 1##4 == (unsignedi & unsignedj);
output1{test++} = 7##4 == (unsignedi | unsignedj);
output1{test++} = 6##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-7#4);
output1{test++} = -8#4 == (signedi+signedj);
output1{test++} = 6#4 == (signedi -signedj);
output1{test++} = 7#4 == (signedi *signedj);
output1{test++} = 7#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = -1#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(-1#8)) // signedj);
output1{test++} = -1#4 == ((MI8(-1#8)) %%signedj);
output1{test++} = -7#4 == (signedi & signedj);
output1{test++} = -1#4 == (signedi | signedj);
output1{test++} = 6#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(2##4);
output1{test++} = 9##4 == (unsignedi+unsignedj);
output1{test++} = 5##4 == (unsignedi -unsignedj);
output1{test++} = 14##4 == (unsignedi *unsignedj);
output1{test++} = 14##8 == (unsignedi **unsignedj);
output1{test++} = 3##4 == (unsignedi /unsignedj);
output1{test++} = 1##4 == (unsignedi %unsignedj);
output1{test++} = 2##4 == (unsignedi & unsignedj);
output1{test++} = 7##4 == (unsignedi | unsignedj);
output1{test++} = 5##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-6#4);
output1{test++} = -7#4 == (signedi+signedj);
output1{test++} = 5#4 == (signedi -signedj);
output1{test++} = 6#4 == (signedi *signedj);
output1{test++} = 6#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = -1#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(-1#8)) // signedj);
output1{test++} = -1#4 == ((MI8(-1#8)) %%signedj);
output1{test++} = -6#4 == (signedi & signedj);
output1{test++} = -1#4 == (signedi | signedj);
output1{test++} = 5#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(3##4);
output1{test++} = 10##4 == (unsignedi+unsignedj);
output1{test++} = 4##4 == (unsignedi -unsignedj);
output1{test++} = 21##4 == (unsignedi *unsignedj);
output1{test++} = 21##8 == (unsignedi **unsignedj);
output1{test++} = 2##4 == (unsignedi /unsignedj);
output1{test++} = 1##4 == (unsignedi %unsignedj);
output1{test++} = 3##4 == (unsignedi & unsignedj);
output1{test++} = 7##4 == (unsignedi | unsignedj);
output1{test++} = 4##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-5#4);
output1{test++} = -6#4 == (signedi+signedj);
output1{test++} = 4#4 == (signedi -signedj);
output1{test++} = 5#4 == (signedi *signedj);
output1{test++} = 5#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = -1#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(-1#8)) // signedj);
output1{test++} = -1#4 == ((MI8(-1#8)) %%signedj);
output1{test++} = -5#4 == (signedi & signedj);
output1{test++} = -1#4 == (signedi | signedj);
output1{test++} = 4#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(4##4);
output1{test++} = 11##4 == (unsignedi+unsignedj);
output1{test++} = 3##4 == (unsignedi -unsignedj);
output1{test++} = 28##4 == (unsignedi *unsignedj);
output1{test++} = 28##8 == (unsignedi **unsignedj);
output1{test++} = 1##4 == (unsignedi /unsignedj);
output1{test++} = 3##4 == (unsignedi %unsignedj);
output1{test++} = 14##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 0##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 4##4 == (unsignedi & unsignedj);
output1{test++} = 7##4 == (unsignedi | unsignedj);
output1{test++} = 3##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-4#4);
output1{test++} = -5#4 == (signedi+signedj);
output1{test++} = 3#4 == (signedi -signedj);
output1{test++} = 4#4 == (signedi *signedj);
output1{test++} = 4#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = -1#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(-1#8)) // signedj);
output1{test++} = -1#4 == ((MI8(-1#8)) %%signedj);
output1{test++} = -4#4 == (signedi & signedj);
output1{test++} = -1#4 == (signedi | signedj);
output1{test++} = 3#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(5##4);
output1{test++} = 12##4 == (unsignedi+unsignedj);
output1{test++} = 2##4 == (unsignedi -unsignedj);
output1{test++} = 35##4 == (unsignedi *unsignedj);
output1{test++} = 35##8 == (unsignedi **unsignedj);
output1{test++} = 1##4 == (unsignedi /unsignedj);
output1{test++} = 2##4 == (unsignedi %unsignedj);
output1{test++} = 11##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 1##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 5##4 == (unsignedi & unsignedj);
output1{test++} = 7##4 == (unsignedi | unsignedj);
output1{test++} = 2##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-3#4);
output1{test++} = -4#4 == (signedi+signedj);
output1{test++} = 2#4 == (signedi -signedj);
output1{test++} = 3#4 == (signedi *signedj);
output1{test++} = 3#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = -1#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(-1#8)) // signedj);
output1{test++} = -1#4 == ((MI8(-1#8)) %%signedj);
output1{test++} = -3#4 == (signedi & signedj);
output1{test++} = -1#4 == (signedi | signedj);
output1{test++} = 2#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(6##4);
output1{test++} = 13##4 == (unsignedi+unsignedj);
output1{test++} = 1##4 == (unsignedi -unsignedj);
output1{test++} = 42##4 == (unsignedi *unsignedj);
output1{test++} = 42##8 == (unsignedi **unsignedj);
output1{test++} = 1##4 == (unsignedi /unsignedj);
output1{test++} = 1##4 == (unsignedi %unsignedj);
output1{test++} = 9##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 2##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 6##4 == (unsignedi & unsignedj);
output1{test++} = 7##4 == (unsignedi | unsignedj);
output1{test++} = 1##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-2#4);
output1{test++} = -3#4 == (signedi+signedj);
output1{test++} = 1#4 == (signedi -signedj);
output1{test++} = 2#4 == (signedi *signedj);
output1{test++} = 2#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = -1#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(-1#8)) // signedj);
output1{test++} = -1#4 == ((MI8(-1#8)) %%signedj);
output1{test++} = -2#4 == (signedi & signedj);
output1{test++} = -1#4 == (signedi | signedj);
output1{test++} = 1#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(7##4);
output1{test++} = 14##4 == (unsignedi+unsignedj);
output1{test++} = 0##4 == (unsignedi -unsignedj);
output1{test++} = 49##4 == (unsignedi *unsignedj);
output1{test++} = 49##8 == (unsignedi **unsignedj);
output1{test++} = 1##4 == (unsignedi /unsignedj);
output1{test++} = 0##4 == (unsignedi %unsignedj);
output1{test++} = 8##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 0##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 7##4 == (unsignedi & unsignedj);
output1{test++} = 7##4 == (unsignedi | unsignedj);
output1{test++} = 0##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 1##1 == (unsignedi ==unsignedj);
output1{test++} = 0##1 == (unsignedi !=unsignedj);
signedj = MI4(-1#4);
output1{test++} = -2#4 == (signedi+signedj);
output1{test++} = 0#4 == (signedi -signedj);
output1{test++} = 1#4 == (signedi *signedj);
output1{test++} = 1#8 == (signedi **signedj);
output1{test++} = 1#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = 1#4 == ((MI8(-1#8)) // signedj);
output1{test++} = 0#4 == ((MI8(-1#8)) %%signedj);
output1{test++} = -1#4 == (signedi & signedj);
output1{test++} = -1#4 == (signedi | signedj);
output1{test++} = 0#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 1#1 == (signedi ==signedj);
output1{test++} = 0#1 == (signedi !=signedj);
unsignedj = MUI4(8##4);
output1{test++} = 15##4 == (unsignedi+unsignedj);
output1{test++} = -1##4 == (unsignedi -unsignedj);
output1{test++} = 56##4 == (unsignedi *unsignedj);
output1{test++} = 56##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 7##4 == (unsignedi %unsignedj);
output1{test++} = 7##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 0##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 0##4 == (unsignedi & unsignedj);
output1{test++} = 15##4 == (unsignedi | unsignedj);
output1{test++} = 15##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(0#4);
output1{test++} = -1#4 == (signedi+signedj);
output1{test++} = -1#4 == (signedi -signedj);
output1{test++} = 0#4 == (signedi *signedj);
output1{test++} = 0#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi & signedj);
output1{test++} = -1#4 == (signedi | signedj);
output1{test++} = -1#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(9##4);
output1{test++} = 16##4 == (unsignedi+unsignedj);
output1{test++} = -2##4 == (unsignedi -unsignedj);
output1{test++} = 63##4 == (unsignedi *unsignedj);
output1{test++} = 63##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 7##4 == (unsignedi %unsignedj);
output1{test++} = 6##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 2##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 1##4 == (unsignedi & unsignedj);
output1{test++} = 15##4 == (unsignedi | unsignedj);
output1{test++} = 14##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(1#4);
output1{test++} = 0#4 == (signedi+signedj);
output1{test++} = -2#4 == (signedi -signedj);
output1{test++} = -1#4 == (signedi *signedj);
output1{test++} = -1#8 == (signedi **signedj);
output1{test++} = -1#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = -1#4 == ((MI8(-1#8)) // signedj);
output1{test++} = 0#4 == ((MI8(-1#8)) %%signedj);
output1{test++} = 1#4 == (signedi & signedj);
output1{test++} = -1#4 == (signedi | signedj);
output1{test++} = -2#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(10##4);
output1{test++} = 17##4 == (unsignedi+unsignedj);
output1{test++} = -3##4 == (unsignedi -unsignedj);
output1{test++} = 70##4 == (unsignedi *unsignedj);
output1{test++} = 70##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 7##4 == (unsignedi %unsignedj);
output1{test++} = 5##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 6##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 2##4 == (unsignedi & unsignedj);
output1{test++} = 15##4 == (unsignedi | unsignedj);
output1{test++} = 13##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(2#4);
output1{test++} = 1#4 == (signedi+signedj);
output1{test++} = -3#4 == (signedi -signedj);
output1{test++} = -2#4 == (signedi *signedj);
output1{test++} = -2#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = -1#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(-1#8)) // signedj);
output1{test++} = -1#4 == ((MI8(-1#8)) %%signedj);
output1{test++} = 2#4 == (signedi & signedj);
output1{test++} = -1#4 == (signedi | signedj);
output1{test++} = -3#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(11##4);
output1{test++} = 18##4 == (unsignedi+unsignedj);
output1{test++} = -4##4 == (unsignedi -unsignedj);
output1{test++} = 77##4 == (unsignedi *unsignedj);
output1{test++} = 77##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 7##4 == (unsignedi %unsignedj);
output1{test++} = 5##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 1##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 3##4 == (unsignedi & unsignedj);
output1{test++} = 15##4 == (unsignedi | unsignedj);
output1{test++} = 12##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(3#4);
output1{test++} = 2#4 == (signedi+signedj);
output1{test++} = -4#4 == (signedi -signedj);
output1{test++} = -3#4 == (signedi *signedj);
output1{test++} = -3#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = -1#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(-1#8)) // signedj);
output1{test++} = -1#4 == ((MI8(-1#8)) %%signedj);
output1{test++} = 3#4 == (signedi & signedj);
output1{test++} = -1#4 == (signedi | signedj);
output1{test++} = -4#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(12##4);
output1{test++} = 19##4 == (unsignedi+unsignedj);
output1{test++} = -5##4 == (unsignedi -unsignedj);
output1{test++} = 84##4 == (unsignedi *unsignedj);
output1{test++} = 84##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 7##4 == (unsignedi %unsignedj);
output1{test++} = 4##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 8##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 4##4 == (unsignedi & unsignedj);
output1{test++} = 15##4 == (unsignedi | unsignedj);
output1{test++} = 11##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(4#4);
output1{test++} = 3#4 == (signedi+signedj);
output1{test++} = -5#4 == (signedi -signedj);
output1{test++} = -4#4 == (signedi *signedj);
output1{test++} = -4#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = -1#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(-1#8)) // signedj);
output1{test++} = -1#4 == ((MI8(-1#8)) %%signedj);
output1{test++} = 4#4 == (signedi & signedj);
output1{test++} = -1#4 == (signedi | signedj);
output1{test++} = -5#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(13##4);
output1{test++} = 20##4 == (unsignedi+unsignedj);
output1{test++} = -6##4 == (unsignedi -unsignedj);
output1{test++} = 91##4 == (unsignedi *unsignedj);
output1{test++} = 91##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 7##4 == (unsignedi %unsignedj);
output1{test++} = 4##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 4##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 5##4 == (unsignedi & unsignedj);
output1{test++} = 15##4 == (unsignedi | unsignedj);
output1{test++} = 10##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(5#4);
output1{test++} = 4#4 == (signedi+signedj);
output1{test++} = -6#4 == (signedi -signedj);
output1{test++} = -5#4 == (signedi *signedj);
output1{test++} = -5#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = -1#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(-1#8)) // signedj);
output1{test++} = -1#4 == ((MI8(-1#8)) %%signedj);
output1{test++} = 5#4 == (signedi & signedj);
output1{test++} = -1#4 == (signedi | signedj);
output1{test++} = -6#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(14##4);
output1{test++} = 21##4 == (unsignedi+unsignedj);
output1{test++} = -7##4 == (unsignedi -unsignedj);
output1{test++} = 98##4 == (unsignedi *unsignedj);
output1{test++} = 98##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 7##4 == (unsignedi %unsignedj);
output1{test++} = 4##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 0##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 6##4 == (unsignedi & unsignedj);
output1{test++} = 15##4 == (unsignedi | unsignedj);
output1{test++} = 9##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(6#4);
output1{test++} = 5#4 == (signedi+signedj);
output1{test++} = -7#4 == (signedi -signedj);
output1{test++} = -6#4 == (signedi *signedj);
output1{test++} = -6#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = -1#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(-1#8)) // signedj);
output1{test++} = -1#4 == ((MI8(-1#8)) %%signedj);
output1{test++} = 6#4 == (signedi & signedj);
output1{test++} = -1#4 == (signedi | signedj);
output1{test++} = -7#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(15##4);
output1{test++} = 22##4 == (unsignedi+unsignedj);
output1{test++} = -8##4 == (unsignedi -unsignedj);
output1{test++} = 105##4 == (unsignedi *unsignedj);
output1{test++} = 105##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 7##4 == (unsignedi %unsignedj);
output1{test++} = 3##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 11##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 7##4 == (unsignedi & unsignedj);
output1{test++} = 15##4 == (unsignedi | unsignedj);
output1{test++} = 8##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(7#4);
output1{test++} = 6#4 == (signedi+signedj);
output1{test++} = -8#4 == (signedi -signedj);
output1{test++} = -7#4 == (signedi *signedj);
output1{test++} = -7#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = -1#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(-1#8)) // signedj);
output1{test++} = -1#4 == ((MI8(-1#8)) %%signedj);
output1{test++} = 7#4 == (signedi & signedj);
output1{test++} = -1#4 == (signedi | signedj);
output1{test++} = -8#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedi = MUI4(8##4);
signedi = MI4(0#4);
output1{test++} = 7##4 == (~unsignedi);
output1{test++} = 15#4 == (~signedi);
unsignedj = MUI4(0##4);
output1{test++} = 8##4 == (unsignedi+unsignedj);
output1{test++} = 8##4 == (unsignedi -unsignedj);
output1{test++} = 0##4 == (unsignedi *unsignedj);
output1{test++} = 0##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi & unsignedj);
output1{test++} = 8##4 == (unsignedi | unsignedj);
output1{test++} = 8##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-8#4);
output1{test++} = -8#4 == (signedi+signedj);
output1{test++} = 8#4 == (signedi -signedj);
output1{test++} = 0#4 == (signedi *signedj);
output1{test++} = 0#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(0#8)) // signedj);
output1{test++} = 0#4 == ((MI8(0#8)) %%signedj);
output1{test++} = 0#4 == (signedi & signedj);
output1{test++} = -8#4 == (signedi | signedj);
output1{test++} = -8#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(1##4);
output1{test++} = 9##4 == (unsignedi+unsignedj);
output1{test++} = 7##4 == (unsignedi -unsignedj);
output1{test++} = 8##4 == (unsignedi *unsignedj);
output1{test++} = 8##8 == (unsignedi **unsignedj);
output1{test++} = 8##4 == (unsignedi /unsignedj);
output1{test++} = 0##4 == (unsignedi %unsignedj);
output1{test++} = 0##4 == (unsignedi & unsignedj);
output1{test++} = 9##4 == (unsignedi | unsignedj);
output1{test++} = 9##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-7#4);
output1{test++} = -7#4 == (signedi+signedj);
output1{test++} = 7#4 == (signedi -signedj);
output1{test++} = 0#4 == (signedi *signedj);
output1{test++} = 0#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(0#8)) // signedj);
output1{test++} = 0#4 == ((MI8(0#8)) %%signedj);
output1{test++} = 0#4 == (signedi & signedj);
output1{test++} = -7#4 == (signedi | signedj);
output1{test++} = -7#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(2##4);
output1{test++} = 10##4 == (unsignedi+unsignedj);
output1{test++} = 6##4 == (unsignedi -unsignedj);
output1{test++} = 16##4 == (unsignedi *unsignedj);
output1{test++} = 16##8 == (unsignedi **unsignedj);
output1{test++} = 4##4 == (unsignedi /unsignedj);
output1{test++} = 0##4 == (unsignedi %unsignedj);
output1{test++} = 0##4 == (unsignedi & unsignedj);
output1{test++} = 10##4 == (unsignedi | unsignedj);
output1{test++} = 10##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-6#4);
output1{test++} = -6#4 == (signedi+signedj);
output1{test++} = 6#4 == (signedi -signedj);
output1{test++} = 0#4 == (signedi *signedj);
output1{test++} = 0#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(0#8)) // signedj);
output1{test++} = 0#4 == ((MI8(0#8)) %%signedj);
output1{test++} = 0#4 == (signedi & signedj);
output1{test++} = -6#4 == (signedi | signedj);
output1{test++} = -6#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(3##4);
output1{test++} = 11##4 == (unsignedi+unsignedj);
output1{test++} = 5##4 == (unsignedi -unsignedj);
output1{test++} = 24##4 == (unsignedi *unsignedj);
output1{test++} = 24##8 == (unsignedi **unsignedj);
output1{test++} = 2##4 == (unsignedi /unsignedj);
output1{test++} = 2##4 == (unsignedi %unsignedj);
output1{test++} = 0##4 == (unsignedi & unsignedj);
output1{test++} = 11##4 == (unsignedi | unsignedj);
output1{test++} = 11##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-5#4);
output1{test++} = -5#4 == (signedi+signedj);
output1{test++} = 5#4 == (signedi -signedj);
output1{test++} = 0#4 == (signedi *signedj);
output1{test++} = 0#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(0#8)) // signedj);
output1{test++} = 0#4 == ((MI8(0#8)) %%signedj);
output1{test++} = 0#4 == (signedi & signedj);
output1{test++} = -5#4 == (signedi | signedj);
output1{test++} = -5#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(4##4);
output1{test++} = 12##4 == (unsignedi+unsignedj);
output1{test++} = 4##4 == (unsignedi -unsignedj);
output1{test++} = 32##4 == (unsignedi *unsignedj);
output1{test++} = 32##8 == (unsignedi **unsignedj);
output1{test++} = 2##4 == (unsignedi /unsignedj);
output1{test++} = 0##4 == (unsignedi %unsignedj);
output1{test++} = 0##4 == (unsignedi & unsignedj);
output1{test++} = 12##4 == (unsignedi | unsignedj);
output1{test++} = 12##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-4#4);
output1{test++} = -4#4 == (signedi+signedj);
output1{test++} = 4#4 == (signedi -signedj);
output1{test++} = 0#4 == (signedi *signedj);
output1{test++} = 0#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(0#8)) // signedj);
output1{test++} = 0#4 == ((MI8(0#8)) %%signedj);
output1{test++} = 0#4 == (signedi & signedj);
output1{test++} = -4#4 == (signedi | signedj);
output1{test++} = -4#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(5##4);
output1{test++} = 13##4 == (unsignedi+unsignedj);
output1{test++} = 3##4 == (unsignedi -unsignedj);
output1{test++} = 40##4 == (unsignedi *unsignedj);
output1{test++} = 40##8 == (unsignedi **unsignedj);
output1{test++} = 1##4 == (unsignedi /unsignedj);
output1{test++} = 3##4 == (unsignedi %unsignedj);
output1{test++} = 12##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 4##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 0##4 == (unsignedi & unsignedj);
output1{test++} = 13##4 == (unsignedi | unsignedj);
output1{test++} = 13##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-3#4);
output1{test++} = -3#4 == (signedi+signedj);
output1{test++} = 3#4 == (signedi -signedj);
output1{test++} = 0#4 == (signedi *signedj);
output1{test++} = 0#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(0#8)) // signedj);
output1{test++} = 0#4 == ((MI8(0#8)) %%signedj);
output1{test++} = 0#4 == (signedi & signedj);
output1{test++} = -3#4 == (signedi | signedj);
output1{test++} = -3#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(6##4);
output1{test++} = 14##4 == (unsignedi+unsignedj);
output1{test++} = 2##4 == (unsignedi -unsignedj);
output1{test++} = 48##4 == (unsignedi *unsignedj);
output1{test++} = 48##8 == (unsignedi **unsignedj);
output1{test++} = 1##4 == (unsignedi /unsignedj);
output1{test++} = 2##4 == (unsignedi %unsignedj);
output1{test++} = 10##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 4##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 0##4 == (unsignedi & unsignedj);
output1{test++} = 14##4 == (unsignedi | unsignedj);
output1{test++} = 14##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-2#4);
output1{test++} = -2#4 == (signedi+signedj);
output1{test++} = 2#4 == (signedi -signedj);
output1{test++} = 0#4 == (signedi *signedj);
output1{test++} = 0#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(0#8)) // signedj);
output1{test++} = 0#4 == ((MI8(0#8)) %%signedj);
output1{test++} = 0#4 == (signedi & signedj);
output1{test++} = -2#4 == (signedi | signedj);
output1{test++} = -2#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(7##4);
output1{test++} = 15##4 == (unsignedi+unsignedj);
output1{test++} = 1##4 == (unsignedi -unsignedj);
output1{test++} = 56##4 == (unsignedi *unsignedj);
output1{test++} = 56##8 == (unsignedi **unsignedj);
output1{test++} = 1##4 == (unsignedi /unsignedj);
output1{test++} = 1##4 == (unsignedi %unsignedj);
output1{test++} = 9##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 1##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 0##4 == (unsignedi & unsignedj);
output1{test++} = 15##4 == (unsignedi | unsignedj);
output1{test++} = 15##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-1#4);
output1{test++} = -1#4 == (signedi+signedj);
output1{test++} = 1#4 == (signedi -signedj);
output1{test++} = 0#4 == (signedi *signedj);
output1{test++} = 0#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(0#8)) // signedj);
output1{test++} = 0#4 == ((MI8(0#8)) %%signedj);
output1{test++} = 0#4 == (signedi & signedj);
output1{test++} = -1#4 == (signedi | signedj);
output1{test++} = -1#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(8##4);
output1{test++} = 16##4 == (unsignedi+unsignedj);
output1{test++} = 0##4 == (unsignedi -unsignedj);
output1{test++} = 64##4 == (unsignedi *unsignedj);
output1{test++} = 64##8 == (unsignedi **unsignedj);
output1{test++} = 1##4 == (unsignedi /unsignedj);
output1{test++} = 0##4 == (unsignedi %unsignedj);
output1{test++} = 8##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 0##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 8##4 == (unsignedi & unsignedj);
output1{test++} = 8##4 == (unsignedi | unsignedj);
output1{test++} = 0##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 1##1 == (unsignedi ==unsignedj);
output1{test++} = 0##1 == (unsignedi !=unsignedj);
signedj = MI4(0#4);
output1{test++} = 0#4 == (signedi+signedj);
output1{test++} = 0#4 == (signedi -signedj);
output1{test++} = 0#4 == (signedi *signedj);
output1{test++} = 0#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi & signedj);
output1{test++} = 0#4 == (signedi | signedj);
output1{test++} = 0#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 1#1 == (signedi ==signedj);
output1{test++} = 0#1 == (signedi !=signedj);
unsignedj = MUI4(9##4);
output1{test++} = 17##4 == (unsignedi+unsignedj);
output1{test++} = -1##4 == (unsignedi -unsignedj);
output1{test++} = 72##4 == (unsignedi *unsignedj);
output1{test++} = 72##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 8##4 == (unsignedi %unsignedj);
output1{test++} = 7##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 1##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 8##4 == (unsignedi & unsignedj);
output1{test++} = 9##4 == (unsignedi | unsignedj);
output1{test++} = 1##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(1#4);
output1{test++} = 1#4 == (signedi+signedj);
output1{test++} = -1#4 == (signedi -signedj);
output1{test++} = 0#4 == (signedi *signedj);
output1{test++} = 0#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(0#8)) // signedj);
output1{test++} = 0#4 == ((MI8(0#8)) %%signedj);
output1{test++} = 0#4 == (signedi & signedj);
output1{test++} = 1#4 == (signedi | signedj);
output1{test++} = 1#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(10##4);
output1{test++} = 18##4 == (unsignedi+unsignedj);
output1{test++} = -2##4 == (unsignedi -unsignedj);
output1{test++} = 80##4 == (unsignedi *unsignedj);
output1{test++} = 80##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 8##4 == (unsignedi %unsignedj);
output1{test++} = 6##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 4##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 8##4 == (unsignedi & unsignedj);
output1{test++} = 10##4 == (unsignedi | unsignedj);
output1{test++} = 2##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(2#4);
output1{test++} = 2#4 == (signedi+signedj);
output1{test++} = -2#4 == (signedi -signedj);
output1{test++} = 0#4 == (signedi *signedj);
output1{test++} = 0#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(0#8)) // signedj);
output1{test++} = 0#4 == ((MI8(0#8)) %%signedj);
output1{test++} = 0#4 == (signedi & signedj);
output1{test++} = 2#4 == (signedi | signedj);
output1{test++} = 2#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(11##4);
output1{test++} = 19##4 == (unsignedi+unsignedj);
output1{test++} = -3##4 == (unsignedi -unsignedj);
output1{test++} = 88##4 == (unsignedi *unsignedj);
output1{test++} = 88##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 8##4 == (unsignedi %unsignedj);
output1{test++} = 5##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 9##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 8##4 == (unsignedi & unsignedj);
output1{test++} = 11##4 == (unsignedi | unsignedj);
output1{test++} = 3##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(3#4);
output1{test++} = 3#4 == (signedi+signedj);
output1{test++} = -3#4 == (signedi -signedj);
output1{test++} = 0#4 == (signedi *signedj);
output1{test++} = 0#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(0#8)) // signedj);
output1{test++} = 0#4 == ((MI8(0#8)) %%signedj);
output1{test++} = 0#4 == (signedi & signedj);
output1{test++} = 3#4 == (signedi | signedj);
output1{test++} = 3#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(12##4);
output1{test++} = 20##4 == (unsignedi+unsignedj);
output1{test++} = -4##4 == (unsignedi -unsignedj);
output1{test++} = 96##4 == (unsignedi *unsignedj);
output1{test++} = 96##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 8##4 == (unsignedi %unsignedj);
output1{test++} = 5##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 4##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 8##4 == (unsignedi & unsignedj);
output1{test++} = 12##4 == (unsignedi | unsignedj);
output1{test++} = 4##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(4#4);
output1{test++} = 4#4 == (signedi+signedj);
output1{test++} = -4#4 == (signedi -signedj);
output1{test++} = 0#4 == (signedi *signedj);
output1{test++} = 0#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(0#8)) // signedj);
output1{test++} = 0#4 == ((MI8(0#8)) %%signedj);
output1{test++} = 0#4 == (signedi & signedj);
output1{test++} = 4#4 == (signedi | signedj);
output1{test++} = 4#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(13##4);
output1{test++} = 21##4 == (unsignedi+unsignedj);
output1{test++} = -5##4 == (unsignedi -unsignedj);
output1{test++} = 104##4 == (unsignedi *unsignedj);
output1{test++} = 104##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 8##4 == (unsignedi %unsignedj);
output1{test++} = 4##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 12##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 8##4 == (unsignedi & unsignedj);
output1{test++} = 13##4 == (unsignedi | unsignedj);
output1{test++} = 5##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(5#4);
output1{test++} = 5#4 == (signedi+signedj);
output1{test++} = -5#4 == (signedi -signedj);
output1{test++} = 0#4 == (signedi *signedj);
output1{test++} = 0#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(0#8)) // signedj);
output1{test++} = 0#4 == ((MI8(0#8)) %%signedj);
output1{test++} = 0#4 == (signedi & signedj);
output1{test++} = 5#4 == (signedi | signedj);
output1{test++} = 5#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(14##4);
output1{test++} = 22##4 == (unsignedi+unsignedj);
output1{test++} = -6##4 == (unsignedi -unsignedj);
output1{test++} = 112##4 == (unsignedi *unsignedj);
output1{test++} = 112##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 8##4 == (unsignedi %unsignedj);
output1{test++} = 4##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 8##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 8##4 == (unsignedi & unsignedj);
output1{test++} = 14##4 == (unsignedi | unsignedj);
output1{test++} = 6##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(6#4);
output1{test++} = 6#4 == (signedi+signedj);
output1{test++} = -6#4 == (signedi -signedj);
output1{test++} = 0#4 == (signedi *signedj);
output1{test++} = 0#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(0#8)) // signedj);
output1{test++} = 0#4 == ((MI8(0#8)) %%signedj);
output1{test++} = 0#4 == (signedi & signedj);
output1{test++} = 6#4 == (signedi | signedj);
output1{test++} = 6#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(15##4);
output1{test++} = 23##4 == (unsignedi+unsignedj);
output1{test++} = -7##4 == (unsignedi -unsignedj);
output1{test++} = 120##4 == (unsignedi *unsignedj);
output1{test++} = 120##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 8##4 == (unsignedi %unsignedj);
output1{test++} = 4##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 4##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 8##4 == (unsignedi & unsignedj);
output1{test++} = 15##4 == (unsignedi | unsignedj);
output1{test++} = 7##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(7#4);
output1{test++} = 7#4 == (signedi+signedj);
output1{test++} = -7#4 == (signedi -signedj);
output1{test++} = 0#4 == (signedi *signedj);
output1{test++} = 0#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(0#8)) // signedj);
output1{test++} = 0#4 == ((MI8(0#8)) %%signedj);
output1{test++} = 0#4 == (signedi & signedj);
output1{test++} = 7#4 == (signedi | signedj);
output1{test++} = 7#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedi = MUI4(9##4);
signedi = MI4(1#4);
output1{test++} = 6##4 == (~unsignedi);
output1{test++} = 14#4 == (~signedi);
unsignedj = MUI4(0##4);
output1{test++} = 9##4 == (unsignedi+unsignedj);
output1{test++} = 9##4 == (unsignedi -unsignedj);
output1{test++} = 0##4 == (unsignedi *unsignedj);
output1{test++} = 0##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi & unsignedj);
output1{test++} = 9##4 == (unsignedi | unsignedj);
output1{test++} = 9##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-8#4);
output1{test++} = -7#4 == (signedi+signedj);
output1{test++} = 9#4 == (signedi -signedj);
output1{test++} = -8#4 == (signedi *signedj);
output1{test++} = -8#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = 1#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(1#8)) // signedj);
output1{test++} = 1#4 == ((MI8(1#8)) %%signedj);
output1{test++} = 0#4 == (signedi & signedj);
output1{test++} = -7#4 == (signedi | signedj);
output1{test++} = -7#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(1##4);
output1{test++} = 10##4 == (unsignedi+unsignedj);
output1{test++} = 8##4 == (unsignedi -unsignedj);
output1{test++} = 9##4 == (unsignedi *unsignedj);
output1{test++} = 9##8 == (unsignedi **unsignedj);
output1{test++} = 9##4 == (unsignedi /unsignedj);
output1{test++} = 0##4 == (unsignedi %unsignedj);
output1{test++} = 1##4 == (unsignedi & unsignedj);
output1{test++} = 9##4 == (unsignedi | unsignedj);
output1{test++} = 8##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-7#4);
output1{test++} = -6#4 == (signedi+signedj);
output1{test++} = 8#4 == (signedi -signedj);
output1{test++} = -7#4 == (signedi *signedj);
output1{test++} = -7#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = 1#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(1#8)) // signedj);
output1{test++} = 1#4 == ((MI8(1#8)) %%signedj);
output1{test++} = 1#4 == (signedi & signedj);
output1{test++} = -7#4 == (signedi | signedj);
output1{test++} = -8#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(2##4);
output1{test++} = 11##4 == (unsignedi+unsignedj);
output1{test++} = 7##4 == (unsignedi -unsignedj);
output1{test++} = 18##4 == (unsignedi *unsignedj);
output1{test++} = 18##8 == (unsignedi **unsignedj);
output1{test++} = 4##4 == (unsignedi /unsignedj);
output1{test++} = 1##4 == (unsignedi %unsignedj);
output1{test++} = 0##4 == (unsignedi & unsignedj);
output1{test++} = 11##4 == (unsignedi | unsignedj);
output1{test++} = 11##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-6#4);
output1{test++} = -5#4 == (signedi+signedj);
output1{test++} = 7#4 == (signedi -signedj);
output1{test++} = -6#4 == (signedi *signedj);
output1{test++} = -6#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = 1#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(1#8)) // signedj);
output1{test++} = 1#4 == ((MI8(1#8)) %%signedj);
output1{test++} = 0#4 == (signedi & signedj);
output1{test++} = -5#4 == (signedi | signedj);
output1{test++} = -5#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(3##4);
output1{test++} = 12##4 == (unsignedi+unsignedj);
output1{test++} = 6##4 == (unsignedi -unsignedj);
output1{test++} = 27##4 == (unsignedi *unsignedj);
output1{test++} = 27##8 == (unsignedi **unsignedj);
output1{test++} = 3##4 == (unsignedi /unsignedj);
output1{test++} = 0##4 == (unsignedi %unsignedj);
output1{test++} = 1##4 == (unsignedi & unsignedj);
output1{test++} = 11##4 == (unsignedi | unsignedj);
output1{test++} = 10##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-5#4);
output1{test++} = -4#4 == (signedi+signedj);
output1{test++} = 6#4 == (signedi -signedj);
output1{test++} = -5#4 == (signedi *signedj);
output1{test++} = -5#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = 1#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(1#8)) // signedj);
output1{test++} = 1#4 == ((MI8(1#8)) %%signedj);
output1{test++} = 1#4 == (signedi & signedj);
output1{test++} = -5#4 == (signedi | signedj);
output1{test++} = -6#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(4##4);
output1{test++} = 13##4 == (unsignedi+unsignedj);
output1{test++} = 5##4 == (unsignedi -unsignedj);
output1{test++} = 36##4 == (unsignedi *unsignedj);
output1{test++} = 36##8 == (unsignedi **unsignedj);
output1{test++} = 2##4 == (unsignedi /unsignedj);
output1{test++} = 1##4 == (unsignedi %unsignedj);
output1{test++} = 0##4 == (unsignedi & unsignedj);
output1{test++} = 13##4 == (unsignedi | unsignedj);
output1{test++} = 13##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-4#4);
output1{test++} = -3#4 == (signedi+signedj);
output1{test++} = 5#4 == (signedi -signedj);
output1{test++} = -4#4 == (signedi *signedj);
output1{test++} = -4#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = 1#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(1#8)) // signedj);
output1{test++} = 1#4 == ((MI8(1#8)) %%signedj);
output1{test++} = 0#4 == (signedi & signedj);
output1{test++} = -3#4 == (signedi | signedj);
output1{test++} = -3#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(5##4);
output1{test++} = 14##4 == (unsignedi+unsignedj);
output1{test++} = 4##4 == (unsignedi -unsignedj);
output1{test++} = 45##4 == (unsignedi *unsignedj);
output1{test++} = 45##8 == (unsignedi **unsignedj);
output1{test++} = 1##4 == (unsignedi /unsignedj);
output1{test++} = 4##4 == (unsignedi %unsignedj);
output1{test++} = 14##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 2##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 1##4 == (unsignedi & unsignedj);
output1{test++} = 13##4 == (unsignedi | unsignedj);
output1{test++} = 12##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-3#4);
output1{test++} = -2#4 == (signedi+signedj);
output1{test++} = 4#4 == (signedi -signedj);
output1{test++} = -3#4 == (signedi *signedj);
output1{test++} = -3#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = 1#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(1#8)) // signedj);
output1{test++} = 1#4 == ((MI8(1#8)) %%signedj);
output1{test++} = 1#4 == (signedi & signedj);
output1{test++} = -3#4 == (signedi | signedj);
output1{test++} = -4#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(6##4);
output1{test++} = 15##4 == (unsignedi+unsignedj);
output1{test++} = 3##4 == (unsignedi -unsignedj);
output1{test++} = 54##4 == (unsignedi *unsignedj);
output1{test++} = 54##8 == (unsignedi **unsignedj);
output1{test++} = 1##4 == (unsignedi /unsignedj);
output1{test++} = 3##4 == (unsignedi %unsignedj);
output1{test++} = 12##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 0##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 0##4 == (unsignedi & unsignedj);
output1{test++} = 15##4 == (unsignedi | unsignedj);
output1{test++} = 15##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-2#4);
output1{test++} = -1#4 == (signedi+signedj);
output1{test++} = 3#4 == (signedi -signedj);
output1{test++} = -2#4 == (signedi *signedj);
output1{test++} = -2#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = 1#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(1#8)) // signedj);
output1{test++} = 1#4 == ((MI8(1#8)) %%signedj);
output1{test++} = 0#4 == (signedi & signedj);
output1{test++} = -1#4 == (signedi | signedj);
output1{test++} = -1#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(7##4);
output1{test++} = 16##4 == (unsignedi+unsignedj);
output1{test++} = 2##4 == (unsignedi -unsignedj);
output1{test++} = 63##4 == (unsignedi *unsignedj);
output1{test++} = 63##8 == (unsignedi **unsignedj);
output1{test++} = 1##4 == (unsignedi /unsignedj);
output1{test++} = 2##4 == (unsignedi %unsignedj);
output1{test++} = 10##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 2##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 1##4 == (unsignedi & unsignedj);
output1{test++} = 15##4 == (unsignedi | unsignedj);
output1{test++} = 14##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-1#4);
output1{test++} = 0#4 == (signedi+signedj);
output1{test++} = 2#4 == (signedi -signedj);
output1{test++} = -1#4 == (signedi *signedj);
output1{test++} = -1#8 == (signedi **signedj);
output1{test++} = -1#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = -1#4 == ((MI8(1#8)) // signedj);
output1{test++} = 0#4 == ((MI8(1#8)) %%signedj);
output1{test++} = 1#4 == (signedi & signedj);
output1{test++} = -1#4 == (signedi | signedj);
output1{test++} = -2#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(8##4);
output1{test++} = 17##4 == (unsignedi+unsignedj);
output1{test++} = 1##4 == (unsignedi -unsignedj);
output1{test++} = 72##4 == (unsignedi *unsignedj);
output1{test++} = 72##8 == (unsignedi **unsignedj);
output1{test++} = 1##4 == (unsignedi /unsignedj);
output1{test++} = 1##4 == (unsignedi %unsignedj);
output1{test++} = 9##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 0##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 8##4 == (unsignedi & unsignedj);
output1{test++} = 9##4 == (unsignedi | unsignedj);
output1{test++} = 1##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(0#4);
output1{test++} = 1#4 == (signedi+signedj);
output1{test++} = 1#4 == (signedi -signedj);
output1{test++} = 0#4 == (signedi *signedj);
output1{test++} = 0#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi & signedj);
output1{test++} = 1#4 == (signedi | signedj);
output1{test++} = 1#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(9##4);
output1{test++} = 18##4 == (unsignedi+unsignedj);
output1{test++} = 0##4 == (unsignedi -unsignedj);
output1{test++} = 81##4 == (unsignedi *unsignedj);
output1{test++} = 81##8 == (unsignedi **unsignedj);
output1{test++} = 1##4 == (unsignedi /unsignedj);
output1{test++} = 0##4 == (unsignedi %unsignedj);
output1{test++} = 8##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 0##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 9##4 == (unsignedi & unsignedj);
output1{test++} = 9##4 == (unsignedi | unsignedj);
output1{test++} = 0##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 1##1 == (unsignedi ==unsignedj);
output1{test++} = 0##1 == (unsignedi !=unsignedj);
signedj = MI4(1#4);
output1{test++} = 2#4 == (signedi+signedj);
output1{test++} = 0#4 == (signedi -signedj);
output1{test++} = 1#4 == (signedi *signedj);
output1{test++} = 1#8 == (signedi **signedj);
output1{test++} = 1#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = 1#4 == ((MI8(1#8)) // signedj);
output1{test++} = 0#4 == ((MI8(1#8)) %%signedj);
output1{test++} = 1#4 == (signedi & signedj);
output1{test++} = 1#4 == (signedi | signedj);
output1{test++} = 0#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 1#1 == (signedi ==signedj);
output1{test++} = 0#1 == (signedi !=signedj);
unsignedj = MUI4(10##4);
output1{test++} = 19##4 == (unsignedi+unsignedj);
output1{test++} = -1##4 == (unsignedi -unsignedj);
output1{test++} = 90##4 == (unsignedi *unsignedj);
output1{test++} = 90##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 9##4 == (unsignedi %unsignedj);
output1{test++} = 7##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 2##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 8##4 == (unsignedi & unsignedj);
output1{test++} = 11##4 == (unsignedi | unsignedj);
output1{test++} = 3##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(2#4);
output1{test++} = 3#4 == (signedi+signedj);
output1{test++} = -1#4 == (signedi -signedj);
output1{test++} = 2#4 == (signedi *signedj);
output1{test++} = 2#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = 1#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(1#8)) // signedj);
output1{test++} = 1#4 == ((MI8(1#8)) %%signedj);
output1{test++} = 0#4 == (signedi & signedj);
output1{test++} = 3#4 == (signedi | signedj);
output1{test++} = 3#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(11##4);
output1{test++} = 20##4 == (unsignedi+unsignedj);
output1{test++} = -2##4 == (unsignedi -unsignedj);
output1{test++} = 99##4 == (unsignedi *unsignedj);
output1{test++} = 99##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 9##4 == (unsignedi %unsignedj);
output1{test++} = 6##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 6##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 9##4 == (unsignedi & unsignedj);
output1{test++} = 11##4 == (unsignedi | unsignedj);
output1{test++} = 2##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(3#4);
output1{test++} = 4#4 == (signedi+signedj);
output1{test++} = -2#4 == (signedi -signedj);
output1{test++} = 3#4 == (signedi *signedj);
output1{test++} = 3#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = 1#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(1#8)) // signedj);
output1{test++} = 1#4 == ((MI8(1#8)) %%signedj);
output1{test++} = 1#4 == (signedi & signedj);
output1{test++} = 3#4 == (signedi | signedj);
output1{test++} = 2#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(12##4);
output1{test++} = 21##4 == (unsignedi+unsignedj);
output1{test++} = -3##4 == (unsignedi -unsignedj);
output1{test++} = 108##4 == (unsignedi *unsignedj);
output1{test++} = 108##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 9##4 == (unsignedi %unsignedj);
output1{test++} = 6##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 0##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 8##4 == (unsignedi & unsignedj);
output1{test++} = 13##4 == (unsignedi | unsignedj);
output1{test++} = 5##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(4#4);
output1{test++} = 5#4 == (signedi+signedj);
output1{test++} = -3#4 == (signedi -signedj);
output1{test++} = 4#4 == (signedi *signedj);
output1{test++} = 4#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = 1#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(1#8)) // signedj);
output1{test++} = 1#4 == ((MI8(1#8)) %%signedj);
output1{test++} = 0#4 == (signedi & signedj);
output1{test++} = 5#4 == (signedi | signedj);
output1{test++} = 5#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(13##4);
output1{test++} = 22##4 == (unsignedi+unsignedj);
output1{test++} = -4##4 == (unsignedi -unsignedj);
output1{test++} = 117##4 == (unsignedi *unsignedj);
output1{test++} = 117##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 9##4 == (unsignedi %unsignedj);
output1{test++} = 5##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 7##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 9##4 == (unsignedi & unsignedj);
output1{test++} = 13##4 == (unsignedi | unsignedj);
output1{test++} = 4##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(5#4);
output1{test++} = 6#4 == (signedi+signedj);
output1{test++} = -4#4 == (signedi -signedj);
output1{test++} = 5#4 == (signedi *signedj);
output1{test++} = 5#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = 1#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(1#8)) // signedj);
output1{test++} = 1#4 == ((MI8(1#8)) %%signedj);
output1{test++} = 1#4 == (signedi & signedj);
output1{test++} = 5#4 == (signedi | signedj);
output1{test++} = 4#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(14##4);
output1{test++} = 23##4 == (unsignedi+unsignedj);
output1{test++} = -5##4 == (unsignedi -unsignedj);
output1{test++} = 126##4 == (unsignedi *unsignedj);
output1{test++} = 126##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 9##4 == (unsignedi %unsignedj);
output1{test++} = 5##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 2##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 8##4 == (unsignedi & unsignedj);
output1{test++} = 15##4 == (unsignedi | unsignedj);
output1{test++} = 7##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(6#4);
output1{test++} = 7#4 == (signedi+signedj);
output1{test++} = -5#4 == (signedi -signedj);
output1{test++} = 6#4 == (signedi *signedj);
output1{test++} = 6#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = 1#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(1#8)) // signedj);
output1{test++} = 1#4 == ((MI8(1#8)) %%signedj);
output1{test++} = 0#4 == (signedi & signedj);
output1{test++} = 7#4 == (signedi | signedj);
output1{test++} = 7#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(15##4);
output1{test++} = 24##4 == (unsignedi+unsignedj);
output1{test++} = -6##4 == (unsignedi -unsignedj);
output1{test++} = 135##4 == (unsignedi *unsignedj);
output1{test++} = 135##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 9##4 == (unsignedi %unsignedj);
output1{test++} = 4##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 12##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 9##4 == (unsignedi & unsignedj);
output1{test++} = 15##4 == (unsignedi | unsignedj);
output1{test++} = 6##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(7#4);
output1{test++} = 8#4 == (signedi+signedj);
output1{test++} = -6#4 == (signedi -signedj);
output1{test++} = 7#4 == (signedi *signedj);
output1{test++} = 7#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = 1#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(1#8)) // signedj);
output1{test++} = 1#4 == ((MI8(1#8)) %%signedj);
output1{test++} = 1#4 == (signedi & signedj);
output1{test++} = 7#4 == (signedi | signedj);
output1{test++} = 6#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedi = MUI4(10##4);
signedi = MI4(2#4);
output1{test++} = 5##4 == (~unsignedi);
output1{test++} = 13#4 == (~signedi);
unsignedj = MUI4(0##4);
output1{test++} = 10##4 == (unsignedi+unsignedj);
output1{test++} = 10##4 == (unsignedi -unsignedj);
output1{test++} = 0##4 == (unsignedi *unsignedj);
output1{test++} = 0##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi & unsignedj);
output1{test++} = 10##4 == (unsignedi | unsignedj);
output1{test++} = 10##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-8#4);
output1{test++} = -6#4 == (signedi+signedj);
output1{test++} = 10#4 == (signedi -signedj);
output1{test++} = -16#4 == (signedi *signedj);
output1{test++} = -16#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = 2#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(2#8)) // signedj);
output1{test++} = 2#4 == ((MI8(2#8)) %%signedj);
output1{test++} = 0#4 == (signedi & signedj);
output1{test++} = -6#4 == (signedi | signedj);
output1{test++} = -6#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(1##4);
output1{test++} = 11##4 == (unsignedi+unsignedj);
output1{test++} = 9##4 == (unsignedi -unsignedj);
output1{test++} = 10##4 == (unsignedi *unsignedj);
output1{test++} = 10##8 == (unsignedi **unsignedj);
output1{test++} = 10##4 == (unsignedi /unsignedj);
output1{test++} = 0##4 == (unsignedi %unsignedj);
output1{test++} = 0##4 == (unsignedi & unsignedj);
output1{test++} = 11##4 == (unsignedi | unsignedj);
output1{test++} = 11##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-7#4);
output1{test++} = -5#4 == (signedi+signedj);
output1{test++} = 9#4 == (signedi -signedj);
output1{test++} = -14#4 == (signedi *signedj);
output1{test++} = -14#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = 2#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(2#8)) // signedj);
output1{test++} = 2#4 == ((MI8(2#8)) %%signedj);
output1{test++} = 0#4 == (signedi & signedj);
output1{test++} = -5#4 == (signedi | signedj);
output1{test++} = -5#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(2##4);
output1{test++} = 12##4 == (unsignedi+unsignedj);
output1{test++} = 8##4 == (unsignedi -unsignedj);
output1{test++} = 20##4 == (unsignedi *unsignedj);
output1{test++} = 20##8 == (unsignedi **unsignedj);
output1{test++} = 5##4 == (unsignedi /unsignedj);
output1{test++} = 0##4 == (unsignedi %unsignedj);
output1{test++} = 2##4 == (unsignedi & unsignedj);
output1{test++} = 10##4 == (unsignedi | unsignedj);
output1{test++} = 8##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-6#4);
output1{test++} = -4#4 == (signedi+signedj);
output1{test++} = 8#4 == (signedi -signedj);
output1{test++} = -12#4 == (signedi *signedj);
output1{test++} = -12#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = 2#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(2#8)) // signedj);
output1{test++} = 2#4 == ((MI8(2#8)) %%signedj);
output1{test++} = 2#4 == (signedi & signedj);
output1{test++} = -6#4 == (signedi | signedj);
output1{test++} = -8#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(3##4);
output1{test++} = 13##4 == (unsignedi+unsignedj);
output1{test++} = 7##4 == (unsignedi -unsignedj);
output1{test++} = 30##4 == (unsignedi *unsignedj);
output1{test++} = 30##8 == (unsignedi **unsignedj);
output1{test++} = 3##4 == (unsignedi /unsignedj);
output1{test++} = 1##4 == (unsignedi %unsignedj);
output1{test++} = 2##4 == (unsignedi & unsignedj);
output1{test++} = 11##4 == (unsignedi | unsignedj);
output1{test++} = 9##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-5#4);
output1{test++} = -3#4 == (signedi+signedj);
output1{test++} = 7#4 == (signedi -signedj);
output1{test++} = -10#4 == (signedi *signedj);
output1{test++} = -10#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = 2#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(2#8)) // signedj);
output1{test++} = 2#4 == ((MI8(2#8)) %%signedj);
output1{test++} = 2#4 == (signedi & signedj);
output1{test++} = -5#4 == (signedi | signedj);
output1{test++} = -7#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(4##4);
output1{test++} = 14##4 == (unsignedi+unsignedj);
output1{test++} = 6##4 == (unsignedi -unsignedj);
output1{test++} = 40##4 == (unsignedi *unsignedj);
output1{test++} = 40##8 == (unsignedi **unsignedj);
output1{test++} = 2##4 == (unsignedi /unsignedj);
output1{test++} = 2##4 == (unsignedi %unsignedj);
output1{test++} = 0##4 == (unsignedi & unsignedj);
output1{test++} = 14##4 == (unsignedi | unsignedj);
output1{test++} = 14##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-4#4);
output1{test++} = -2#4 == (signedi+signedj);
output1{test++} = 6#4 == (signedi -signedj);
output1{test++} = -8#4 == (signedi *signedj);
output1{test++} = -8#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = 2#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(2#8)) // signedj);
output1{test++} = 2#4 == ((MI8(2#8)) %%signedj);
output1{test++} = 0#4 == (signedi & signedj);
output1{test++} = -2#4 == (signedi | signedj);
output1{test++} = -2#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(5##4);
output1{test++} = 15##4 == (unsignedi+unsignedj);
output1{test++} = 5##4 == (unsignedi -unsignedj);
output1{test++} = 50##4 == (unsignedi *unsignedj);
output1{test++} = 50##8 == (unsignedi **unsignedj);
output1{test++} = 2##4 == (unsignedi /unsignedj);
output1{test++} = 0##4 == (unsignedi %unsignedj);
output1{test++} = 0##4 == (unsignedi & unsignedj);
output1{test++} = 15##4 == (unsignedi | unsignedj);
output1{test++} = 15##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-3#4);
output1{test++} = -1#4 == (signedi+signedj);
output1{test++} = 5#4 == (signedi -signedj);
output1{test++} = -6#4 == (signedi *signedj);
output1{test++} = -6#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = 2#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(2#8)) // signedj);
output1{test++} = 2#4 == ((MI8(2#8)) %%signedj);
output1{test++} = 0#4 == (signedi & signedj);
output1{test++} = -1#4 == (signedi | signedj);
output1{test++} = -1#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(6##4);
output1{test++} = 16##4 == (unsignedi+unsignedj);
output1{test++} = 4##4 == (unsignedi -unsignedj);
output1{test++} = 60##4 == (unsignedi *unsignedj);
output1{test++} = 60##8 == (unsignedi **unsignedj);
output1{test++} = 1##4 == (unsignedi /unsignedj);
output1{test++} = 4##4 == (unsignedi %unsignedj);
output1{test++} = 13##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 2##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 2##4 == (unsignedi & unsignedj);
output1{test++} = 14##4 == (unsignedi | unsignedj);
output1{test++} = 12##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-2#4);
output1{test++} = 0#4 == (signedi+signedj);
output1{test++} = 4#4 == (signedi -signedj);
output1{test++} = -4#4 == (signedi *signedj);
output1{test++} = -4#8 == (signedi **signedj);
output1{test++} = -1#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = -1#4 == ((MI8(2#8)) // signedj);
output1{test++} = 0#4 == ((MI8(2#8)) %%signedj);
output1{test++} = 2#4 == (signedi & signedj);
output1{test++} = -2#4 == (signedi | signedj);
output1{test++} = -4#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(7##4);
output1{test++} = 17##4 == (unsignedi+unsignedj);
output1{test++} = 3##4 == (unsignedi -unsignedj);
output1{test++} = 70##4 == (unsignedi *unsignedj);
output1{test++} = 70##8 == (unsignedi **unsignedj);
output1{test++} = 1##4 == (unsignedi /unsignedj);
output1{test++} = 3##4 == (unsignedi %unsignedj);
output1{test++} = 11##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 3##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 2##4 == (unsignedi & unsignedj);
output1{test++} = 15##4 == (unsignedi | unsignedj);
output1{test++} = 13##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-1#4);
output1{test++} = 1#4 == (signedi+signedj);
output1{test++} = 3#4 == (signedi -signedj);
output1{test++} = -2#4 == (signedi *signedj);
output1{test++} = -2#8 == (signedi **signedj);
output1{test++} = -2#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = -2#4 == ((MI8(2#8)) // signedj);
output1{test++} = 0#4 == ((MI8(2#8)) %%signedj);
output1{test++} = 2#4 == (signedi & signedj);
output1{test++} = -1#4 == (signedi | signedj);
output1{test++} = -3#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(8##4);
output1{test++} = 18##4 == (unsignedi+unsignedj);
output1{test++} = 2##4 == (unsignedi -unsignedj);
output1{test++} = 80##4 == (unsignedi *unsignedj);
output1{test++} = 80##8 == (unsignedi **unsignedj);
output1{test++} = 1##4 == (unsignedi /unsignedj);
output1{test++} = 2##4 == (unsignedi %unsignedj);
output1{test++} = 10##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 0##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 8##4 == (unsignedi & unsignedj);
output1{test++} = 10##4 == (unsignedi | unsignedj);
output1{test++} = 2##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(0#4);
output1{test++} = 2#4 == (signedi+signedj);
output1{test++} = 2#4 == (signedi -signedj);
output1{test++} = 0#4 == (signedi *signedj);
output1{test++} = 0#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi & signedj);
output1{test++} = 2#4 == (signedi | signedj);
output1{test++} = 2#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(9##4);
output1{test++} = 19##4 == (unsignedi+unsignedj);
output1{test++} = 1##4 == (unsignedi -unsignedj);
output1{test++} = 90##4 == (unsignedi *unsignedj);
output1{test++} = 90##8 == (unsignedi **unsignedj);
output1{test++} = 1##4 == (unsignedi /unsignedj);
output1{test++} = 1##4 == (unsignedi %unsignedj);
output1{test++} = 8##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 8##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 8##4 == (unsignedi & unsignedj);
output1{test++} = 11##4 == (unsignedi | unsignedj);
output1{test++} = 3##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(1#4);
output1{test++} = 3#4 == (signedi+signedj);
output1{test++} = 1#4 == (signedi -signedj);
output1{test++} = 2#4 == (signedi *signedj);
output1{test++} = 2#8 == (signedi **signedj);
output1{test++} = 2#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = 2#4 == ((MI8(2#8)) // signedj);
output1{test++} = 0#4 == ((MI8(2#8)) %%signedj);
output1{test++} = 0#4 == (signedi & signedj);
output1{test++} = 3#4 == (signedi | signedj);
output1{test++} = 3#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(10##4);
output1{test++} = 20##4 == (unsignedi+unsignedj);
output1{test++} = 0##4 == (unsignedi -unsignedj);
output1{test++} = 100##4 == (unsignedi *unsignedj);
output1{test++} = 100##8 == (unsignedi **unsignedj);
output1{test++} = 1##4 == (unsignedi /unsignedj);
output1{test++} = 0##4 == (unsignedi %unsignedj);
output1{test++} = 8##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 0##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 10##4 == (unsignedi & unsignedj);
output1{test++} = 10##4 == (unsignedi | unsignedj);
output1{test++} = 0##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 1##1 == (unsignedi ==unsignedj);
output1{test++} = 0##1 == (unsignedi !=unsignedj);
signedj = MI4(2#4);
output1{test++} = 4#4 == (signedi+signedj);
output1{test++} = 0#4 == (signedi -signedj);
output1{test++} = 4#4 == (signedi *signedj);
output1{test++} = 4#8 == (signedi **signedj);
output1{test++} = 1#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = 1#4 == ((MI8(2#8)) // signedj);
output1{test++} = 0#4 == ((MI8(2#8)) %%signedj);
output1{test++} = 2#4 == (signedi & signedj);
output1{test++} = 2#4 == (signedi | signedj);
output1{test++} = 0#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 1#1 == (signedi ==signedj);
output1{test++} = 0#1 == (signedi !=signedj);
unsignedj = MUI4(11##4);
output1{test++} = 21##4 == (unsignedi+unsignedj);
output1{test++} = -1##4 == (unsignedi -unsignedj);
output1{test++} = 110##4 == (unsignedi *unsignedj);
output1{test++} = 110##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 10##4 == (unsignedi %unsignedj);
output1{test++} = 7##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 3##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 10##4 == (unsignedi & unsignedj);
output1{test++} = 11##4 == (unsignedi | unsignedj);
output1{test++} = 1##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(3#4);
output1{test++} = 5#4 == (signedi+signedj);
output1{test++} = -1#4 == (signedi -signedj);
output1{test++} = 6#4 == (signedi *signedj);
output1{test++} = 6#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = 2#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(2#8)) // signedj);
output1{test++} = 2#4 == ((MI8(2#8)) %%signedj);
output1{test++} = 2#4 == (signedi & signedj);
output1{test++} = 3#4 == (signedi | signedj);
output1{test++} = 1#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(12##4);
output1{test++} = 22##4 == (unsignedi+unsignedj);
output1{test++} = -2##4 == (unsignedi -unsignedj);
output1{test++} = 120##4 == (unsignedi *unsignedj);
output1{test++} = 120##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 10##4 == (unsignedi %unsignedj);
output1{test++} = 6##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 8##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 8##4 == (unsignedi & unsignedj);
output1{test++} = 14##4 == (unsignedi | unsignedj);
output1{test++} = 6##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(4#4);
output1{test++} = 6#4 == (signedi+signedj);
output1{test++} = -2#4 == (signedi -signedj);
output1{test++} = 8#4 == (signedi *signedj);
output1{test++} = 8#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = 2#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(2#8)) // signedj);
output1{test++} = 2#4 == ((MI8(2#8)) %%signedj);
output1{test++} = 0#4 == (signedi & signedj);
output1{test++} = 6#4 == (signedi | signedj);
output1{test++} = 6#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(13##4);
output1{test++} = 23##4 == (unsignedi+unsignedj);
output1{test++} = -3##4 == (unsignedi -unsignedj);
output1{test++} = 130##4 == (unsignedi *unsignedj);
output1{test++} = 130##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 10##4 == (unsignedi %unsignedj);
output1{test++} = 6##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 2##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 8##4 == (unsignedi & unsignedj);
output1{test++} = 15##4 == (unsignedi | unsignedj);
output1{test++} = 7##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(5#4);
output1{test++} = 7#4 == (signedi+signedj);
output1{test++} = -3#4 == (signedi -signedj);
output1{test++} = 10#4 == (signedi *signedj);
output1{test++} = 10#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = 2#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(2#8)) // signedj);
output1{test++} = 2#4 == ((MI8(2#8)) %%signedj);
output1{test++} = 0#4 == (signedi & signedj);
output1{test++} = 7#4 == (signedi | signedj);
output1{test++} = 7#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(14##4);
output1{test++} = 24##4 == (unsignedi+unsignedj);
output1{test++} = -4##4 == (unsignedi -unsignedj);
output1{test++} = 140##4 == (unsignedi *unsignedj);
output1{test++} = 140##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 10##4 == (unsignedi %unsignedj);
output1{test++} = 5##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 10##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 10##4 == (unsignedi & unsignedj);
output1{test++} = 14##4 == (unsignedi | unsignedj);
output1{test++} = 4##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(6#4);
output1{test++} = 8#4 == (signedi+signedj);
output1{test++} = -4#4 == (signedi -signedj);
output1{test++} = 12#4 == (signedi *signedj);
output1{test++} = 12#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = 2#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(2#8)) // signedj);
output1{test++} = 2#4 == ((MI8(2#8)) %%signedj);
output1{test++} = 2#4 == (signedi & signedj);
output1{test++} = 6#4 == (signedi | signedj);
output1{test++} = 4#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(15##4);
output1{test++} = 25##4 == (unsignedi+unsignedj);
output1{test++} = -5##4 == (unsignedi -unsignedj);
output1{test++} = 150##4 == (unsignedi *unsignedj);
output1{test++} = 150##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 10##4 == (unsignedi %unsignedj);
output1{test++} = 5##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 5##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 10##4 == (unsignedi & unsignedj);
output1{test++} = 15##4 == (unsignedi | unsignedj);
output1{test++} = 5##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(7#4);
output1{test++} = 9#4 == (signedi+signedj);
output1{test++} = -5#4 == (signedi -signedj);
output1{test++} = 14#4 == (signedi *signedj);
output1{test++} = 14#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = 2#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(2#8)) // signedj);
output1{test++} = 2#4 == ((MI8(2#8)) %%signedj);
output1{test++} = 2#4 == (signedi & signedj);
output1{test++} = 7#4 == (signedi | signedj);
output1{test++} = 5#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedi = MUI4(11##4);
signedi = MI4(3#4);
output1{test++} = 4##4 == (~unsignedi);
output1{test++} = 12#4 == (~signedi);
unsignedj = MUI4(0##4);
output1{test++} = 11##4 == (unsignedi+unsignedj);
output1{test++} = 11##4 == (unsignedi -unsignedj);
output1{test++} = 0##4 == (unsignedi *unsignedj);
output1{test++} = 0##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi & unsignedj);
output1{test++} = 11##4 == (unsignedi | unsignedj);
output1{test++} = 11##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-8#4);
output1{test++} = -5#4 == (signedi+signedj);
output1{test++} = 11#4 == (signedi -signedj);
output1{test++} = -24#4 == (signedi *signedj);
output1{test++} = -24#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = 3#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(3#8)) // signedj);
output1{test++} = 3#4 == ((MI8(3#8)) %%signedj);
output1{test++} = 0#4 == (signedi & signedj);
output1{test++} = -5#4 == (signedi | signedj);
output1{test++} = -5#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(1##4);
output1{test++} = 12##4 == (unsignedi+unsignedj);
output1{test++} = 10##4 == (unsignedi -unsignedj);
output1{test++} = 11##4 == (unsignedi *unsignedj);
output1{test++} = 11##8 == (unsignedi **unsignedj);
output1{test++} = 11##4 == (unsignedi /unsignedj);
output1{test++} = 0##4 == (unsignedi %unsignedj);
output1{test++} = 1##4 == (unsignedi & unsignedj);
output1{test++} = 11##4 == (unsignedi | unsignedj);
output1{test++} = 10##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-7#4);
output1{test++} = -4#4 == (signedi+signedj);
output1{test++} = 10#4 == (signedi -signedj);
output1{test++} = -21#4 == (signedi *signedj);
output1{test++} = -21#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = 3#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(3#8)) // signedj);
output1{test++} = 3#4 == ((MI8(3#8)) %%signedj);
output1{test++} = 1#4 == (signedi & signedj);
output1{test++} = -5#4 == (signedi | signedj);
output1{test++} = -6#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(2##4);
output1{test++} = 13##4 == (unsignedi+unsignedj);
output1{test++} = 9##4 == (unsignedi -unsignedj);
output1{test++} = 22##4 == (unsignedi *unsignedj);
output1{test++} = 22##8 == (unsignedi **unsignedj);
output1{test++} = 5##4 == (unsignedi /unsignedj);
output1{test++} = 1##4 == (unsignedi %unsignedj);
output1{test++} = 2##4 == (unsignedi & unsignedj);
output1{test++} = 11##4 == (unsignedi | unsignedj);
output1{test++} = 9##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-6#4);
output1{test++} = -3#4 == (signedi+signedj);
output1{test++} = 9#4 == (signedi -signedj);
output1{test++} = -18#4 == (signedi *signedj);
output1{test++} = -18#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = 3#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(3#8)) // signedj);
output1{test++} = 3#4 == ((MI8(3#8)) %%signedj);
output1{test++} = 2#4 == (signedi & signedj);
output1{test++} = -5#4 == (signedi | signedj);
output1{test++} = -7#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(3##4);
output1{test++} = 14##4 == (unsignedi+unsignedj);
output1{test++} = 8##4 == (unsignedi -unsignedj);
output1{test++} = 33##4 == (unsignedi *unsignedj);
output1{test++} = 33##8 == (unsignedi **unsignedj);
output1{test++} = 3##4 == (unsignedi /unsignedj);
output1{test++} = 2##4 == (unsignedi %unsignedj);
output1{test++} = 3##4 == (unsignedi & unsignedj);
output1{test++} = 11##4 == (unsignedi | unsignedj);
output1{test++} = 8##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-5#4);
output1{test++} = -2#4 == (signedi+signedj);
output1{test++} = 8#4 == (signedi -signedj);
output1{test++} = -15#4 == (signedi *signedj);
output1{test++} = -15#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = 3#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(3#8)) // signedj);
output1{test++} = 3#4 == ((MI8(3#8)) %%signedj);
output1{test++} = 3#4 == (signedi & signedj);
output1{test++} = -5#4 == (signedi | signedj);
output1{test++} = -8#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(4##4);
output1{test++} = 15##4 == (unsignedi+unsignedj);
output1{test++} = 7##4 == (unsignedi -unsignedj);
output1{test++} = 44##4 == (unsignedi *unsignedj);
output1{test++} = 44##8 == (unsignedi **unsignedj);
output1{test++} = 2##4 == (unsignedi /unsignedj);
output1{test++} = 3##4 == (unsignedi %unsignedj);
output1{test++} = 0##4 == (unsignedi & unsignedj);
output1{test++} = 15##4 == (unsignedi | unsignedj);
output1{test++} = 15##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-4#4);
output1{test++} = -1#4 == (signedi+signedj);
output1{test++} = 7#4 == (signedi -signedj);
output1{test++} = -12#4 == (signedi *signedj);
output1{test++} = -12#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = 3#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(3#8)) // signedj);
output1{test++} = 3#4 == ((MI8(3#8)) %%signedj);
output1{test++} = 0#4 == (signedi & signedj);
output1{test++} = -1#4 == (signedi | signedj);
output1{test++} = -1#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(5##4);
output1{test++} = 16##4 == (unsignedi+unsignedj);
output1{test++} = 6##4 == (unsignedi -unsignedj);
output1{test++} = 55##4 == (unsignedi *unsignedj);
output1{test++} = 55##8 == (unsignedi **unsignedj);
output1{test++} = 2##4 == (unsignedi /unsignedj);
output1{test++} = 1##4 == (unsignedi %unsignedj);
output1{test++} = 1##4 == (unsignedi & unsignedj);
output1{test++} = 15##4 == (unsignedi | unsignedj);
output1{test++} = 14##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-3#4);
output1{test++} = 0#4 == (signedi+signedj);
output1{test++} = 6#4 == (signedi -signedj);
output1{test++} = -9#4 == (signedi *signedj);
output1{test++} = -9#8 == (signedi **signedj);
output1{test++} = -1#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = -1#4 == ((MI8(3#8)) // signedj);
output1{test++} = 0#4 == ((MI8(3#8)) %%signedj);
output1{test++} = 1#4 == (signedi & signedj);
output1{test++} = -1#4 == (signedi | signedj);
output1{test++} = -2#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(6##4);
output1{test++} = 17##4 == (unsignedi+unsignedj);
output1{test++} = 5##4 == (unsignedi -unsignedj);
output1{test++} = 66##4 == (unsignedi *unsignedj);
output1{test++} = 66##8 == (unsignedi **unsignedj);
output1{test++} = 1##4 == (unsignedi /unsignedj);
output1{test++} = 5##4 == (unsignedi %unsignedj);
output1{test++} = 14##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 4##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 2##4 == (unsignedi & unsignedj);
output1{test++} = 15##4 == (unsignedi | unsignedj);
output1{test++} = 13##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-2#4);
output1{test++} = 1#4 == (signedi+signedj);
output1{test++} = 5#4 == (signedi -signedj);
output1{test++} = -6#4 == (signedi *signedj);
output1{test++} = -6#8 == (signedi **signedj);
output1{test++} = -1#4 == (signedi /signedj);
output1{test++} = 1#4 == (signedi %signedj);
output1{test++} = -1#4 == ((MI8(3#8)) // signedj);
output1{test++} = 1#4 == ((MI8(3#8)) %%signedj);
output1{test++} = 2#4 == (signedi & signedj);
output1{test++} = -1#4 == (signedi | signedj);
output1{test++} = -3#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(7##4);
output1{test++} = 18##4 == (unsignedi+unsignedj);
output1{test++} = 4##4 == (unsignedi -unsignedj);
output1{test++} = 77##4 == (unsignedi *unsignedj);
output1{test++} = 77##8 == (unsignedi **unsignedj);
output1{test++} = 1##4 == (unsignedi /unsignedj);
output1{test++} = 4##4 == (unsignedi %unsignedj);
output1{test++} = 12##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 4##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 3##4 == (unsignedi & unsignedj);
output1{test++} = 15##4 == (unsignedi | unsignedj);
output1{test++} = 12##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-1#4);
output1{test++} = 2#4 == (signedi+signedj);
output1{test++} = 4#4 == (signedi -signedj);
output1{test++} = -3#4 == (signedi *signedj);
output1{test++} = -3#8 == (signedi **signedj);
output1{test++} = -3#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = -3#4 == ((MI8(3#8)) // signedj);
output1{test++} = 0#4 == ((MI8(3#8)) %%signedj);
output1{test++} = 3#4 == (signedi & signedj);
output1{test++} = -1#4 == (signedi | signedj);
output1{test++} = -4#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(8##4);
output1{test++} = 19##4 == (unsignedi+unsignedj);
output1{test++} = 3##4 == (unsignedi -unsignedj);
output1{test++} = 88##4 == (unsignedi *unsignedj);
output1{test++} = 88##8 == (unsignedi **unsignedj);
output1{test++} = 1##4 == (unsignedi /unsignedj);
output1{test++} = 3##4 == (unsignedi %unsignedj);
output1{test++} = 11##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 0##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 8##4 == (unsignedi & unsignedj);
output1{test++} = 11##4 == (unsignedi | unsignedj);
output1{test++} = 3##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(0#4);
output1{test++} = 3#4 == (signedi+signedj);
output1{test++} = 3#4 == (signedi -signedj);
output1{test++} = 0#4 == (signedi *signedj);
output1{test++} = 0#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi & signedj);
output1{test++} = 3#4 == (signedi | signedj);
output1{test++} = 3#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(9##4);
output1{test++} = 20##4 == (unsignedi+unsignedj);
output1{test++} = 2##4 == (unsignedi -unsignedj);
output1{test++} = 99##4 == (unsignedi *unsignedj);
output1{test++} = 99##8 == (unsignedi **unsignedj);
output1{test++} = 1##4 == (unsignedi /unsignedj);
output1{test++} = 2##4 == (unsignedi %unsignedj);
output1{test++} = 9##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 7##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 9##4 == (unsignedi & unsignedj);
output1{test++} = 11##4 == (unsignedi | unsignedj);
output1{test++} = 2##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(1#4);
output1{test++} = 4#4 == (signedi+signedj);
output1{test++} = 2#4 == (signedi -signedj);
output1{test++} = 3#4 == (signedi *signedj);
output1{test++} = 3#8 == (signedi **signedj);
output1{test++} = 3#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = 3#4 == ((MI8(3#8)) // signedj);
output1{test++} = 0#4 == ((MI8(3#8)) %%signedj);
output1{test++} = 1#4 == (signedi & signedj);
output1{test++} = 3#4 == (signedi | signedj);
output1{test++} = 2#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(10##4);
output1{test++} = 21##4 == (unsignedi+unsignedj);
output1{test++} = 1##4 == (unsignedi -unsignedj);
output1{test++} = 110##4 == (unsignedi *unsignedj);
output1{test++} = 110##8 == (unsignedi **unsignedj);
output1{test++} = 1##4 == (unsignedi /unsignedj);
output1{test++} = 1##4 == (unsignedi %unsignedj);
output1{test++} = 8##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 8##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 10##4 == (unsignedi & unsignedj);
output1{test++} = 11##4 == (unsignedi | unsignedj);
output1{test++} = 1##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(2#4);
output1{test++} = 5#4 == (signedi+signedj);
output1{test++} = 1#4 == (signedi -signedj);
output1{test++} = 6#4 == (signedi *signedj);
output1{test++} = 6#8 == (signedi **signedj);
output1{test++} = 1#4 == (signedi /signedj);
output1{test++} = 1#4 == (signedi %signedj);
output1{test++} = 1#4 == ((MI8(3#8)) // signedj);
output1{test++} = 1#4 == ((MI8(3#8)) %%signedj);
output1{test++} = 2#4 == (signedi & signedj);
output1{test++} = 3#4 == (signedi | signedj);
output1{test++} = 1#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(11##4);
output1{test++} = 22##4 == (unsignedi+unsignedj);
output1{test++} = 0##4 == (unsignedi -unsignedj);
output1{test++} = 121##4 == (unsignedi *unsignedj);
output1{test++} = 121##8 == (unsignedi **unsignedj);
output1{test++} = 1##4 == (unsignedi /unsignedj);
output1{test++} = 0##4 == (unsignedi %unsignedj);
output1{test++} = 8##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 0##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 11##4 == (unsignedi & unsignedj);
output1{test++} = 11##4 == (unsignedi | unsignedj);
output1{test++} = 0##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 1##1 == (unsignedi ==unsignedj);
output1{test++} = 0##1 == (unsignedi !=unsignedj);
signedj = MI4(3#4);
output1{test++} = 6#4 == (signedi+signedj);
output1{test++} = 0#4 == (signedi -signedj);
output1{test++} = 9#4 == (signedi *signedj);
output1{test++} = 9#8 == (signedi **signedj);
output1{test++} = 1#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = 1#4 == ((MI8(3#8)) // signedj);
output1{test++} = 0#4 == ((MI8(3#8)) %%signedj);
output1{test++} = 3#4 == (signedi & signedj);
output1{test++} = 3#4 == (signedi | signedj);
output1{test++} = 0#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 1#1 == (signedi ==signedj);
output1{test++} = 0#1 == (signedi !=signedj);
unsignedj = MUI4(12##4);
output1{test++} = 23##4 == (unsignedi+unsignedj);
output1{test++} = -1##4 == (unsignedi -unsignedj);
output1{test++} = 132##4 == (unsignedi *unsignedj);
output1{test++} = 132##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 11##4 == (unsignedi %unsignedj);
output1{test++} = 7##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 4##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 8##4 == (unsignedi & unsignedj);
output1{test++} = 15##4 == (unsignedi | unsignedj);
output1{test++} = 7##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(4#4);
output1{test++} = 7#4 == (signedi+signedj);
output1{test++} = -1#4 == (signedi -signedj);
output1{test++} = 12#4 == (signedi *signedj);
output1{test++} = 12#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = 3#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(3#8)) // signedj);
output1{test++} = 3#4 == ((MI8(3#8)) %%signedj);
output1{test++} = 0#4 == (signedi & signedj);
output1{test++} = 7#4 == (signedi | signedj);
output1{test++} = 7#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(13##4);
output1{test++} = 24##4 == (unsignedi+unsignedj);
output1{test++} = -2##4 == (unsignedi -unsignedj);
output1{test++} = 143##4 == (unsignedi *unsignedj);
output1{test++} = 143##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 11##4 == (unsignedi %unsignedj);
output1{test++} = 6##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 10##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 9##4 == (unsignedi & unsignedj);
output1{test++} = 15##4 == (unsignedi | unsignedj);
output1{test++} = 6##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(5#4);
output1{test++} = 8#4 == (signedi+signedj);
output1{test++} = -2#4 == (signedi -signedj);
output1{test++} = 15#4 == (signedi *signedj);
output1{test++} = 15#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = 3#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(3#8)) // signedj);
output1{test++} = 3#4 == ((MI8(3#8)) %%signedj);
output1{test++} = 1#4 == (signedi & signedj);
output1{test++} = 7#4 == (signedi | signedj);
output1{test++} = 6#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(14##4);
output1{test++} = 25##4 == (unsignedi+unsignedj);
output1{test++} = -3##4 == (unsignedi -unsignedj);
output1{test++} = 154##4 == (unsignedi *unsignedj);
output1{test++} = 154##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 11##4 == (unsignedi %unsignedj);
output1{test++} = 6##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 4##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 10##4 == (unsignedi & unsignedj);
output1{test++} = 15##4 == (unsignedi | unsignedj);
output1{test++} = 5##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(6#4);
output1{test++} = 9#4 == (signedi+signedj);
output1{test++} = -3#4 == (signedi -signedj);
output1{test++} = 18#4 == (signedi *signedj);
output1{test++} = 18#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = 3#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(3#8)) // signedj);
output1{test++} = 3#4 == ((MI8(3#8)) %%signedj);
output1{test++} = 2#4 == (signedi & signedj);
output1{test++} = 7#4 == (signedi | signedj);
output1{test++} = 5#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(15##4);
output1{test++} = 26##4 == (unsignedi+unsignedj);
output1{test++} = -4##4 == (unsignedi -unsignedj);
output1{test++} = 165##4 == (unsignedi *unsignedj);
output1{test++} = 165##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 11##4 == (unsignedi %unsignedj);
output1{test++} = 5##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 13##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 11##4 == (unsignedi & unsignedj);
output1{test++} = 15##4 == (unsignedi | unsignedj);
output1{test++} = 4##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(7#4);
output1{test++} = 10#4 == (signedi+signedj);
output1{test++} = -4#4 == (signedi -signedj);
output1{test++} = 21#4 == (signedi *signedj);
output1{test++} = 21#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = 3#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(3#8)) // signedj);
output1{test++} = 3#4 == ((MI8(3#8)) %%signedj);
output1{test++} = 3#4 == (signedi & signedj);
output1{test++} = 7#4 == (signedi | signedj);
output1{test++} = 4#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedi = MUI4(12##4);
signedi = MI4(4#4);
output1{test++} = 3##4 == (~unsignedi);
output1{test++} = 11#4 == (~signedi);
unsignedj = MUI4(0##4);
output1{test++} = 12##4 == (unsignedi+unsignedj);
output1{test++} = 12##4 == (unsignedi -unsignedj);
output1{test++} = 0##4 == (unsignedi *unsignedj);
output1{test++} = 0##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi & unsignedj);
output1{test++} = 12##4 == (unsignedi | unsignedj);
output1{test++} = 12##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-8#4);
output1{test++} = -4#4 == (signedi+signedj);
output1{test++} = 12#4 == (signedi -signedj);
output1{test++} = -32#4 == (signedi *signedj);
output1{test++} = -32#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = 4#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(4#8)) // signedj);
output1{test++} = 4#4 == ((MI8(4#8)) %%signedj);
output1{test++} = 0#4 == (signedi & signedj);
output1{test++} = -4#4 == (signedi | signedj);
output1{test++} = -4#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(1##4);
output1{test++} = 13##4 == (unsignedi+unsignedj);
output1{test++} = 11##4 == (unsignedi -unsignedj);
output1{test++} = 12##4 == (unsignedi *unsignedj);
output1{test++} = 12##8 == (unsignedi **unsignedj);
output1{test++} = 12##4 == (unsignedi /unsignedj);
output1{test++} = 0##4 == (unsignedi %unsignedj);
output1{test++} = 0##4 == (unsignedi & unsignedj);
output1{test++} = 13##4 == (unsignedi | unsignedj);
output1{test++} = 13##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-7#4);
output1{test++} = -3#4 == (signedi+signedj);
output1{test++} = 11#4 == (signedi -signedj);
output1{test++} = -28#4 == (signedi *signedj);
output1{test++} = -28#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = 4#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(4#8)) // signedj);
output1{test++} = 4#4 == ((MI8(4#8)) %%signedj);
output1{test++} = 0#4 == (signedi & signedj);
output1{test++} = -3#4 == (signedi | signedj);
output1{test++} = -3#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(2##4);
output1{test++} = 14##4 == (unsignedi+unsignedj);
output1{test++} = 10##4 == (unsignedi -unsignedj);
output1{test++} = 24##4 == (unsignedi *unsignedj);
output1{test++} = 24##8 == (unsignedi **unsignedj);
output1{test++} = 6##4 == (unsignedi /unsignedj);
output1{test++} = 0##4 == (unsignedi %unsignedj);
output1{test++} = 0##4 == (unsignedi & unsignedj);
output1{test++} = 14##4 == (unsignedi | unsignedj);
output1{test++} = 14##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-6#4);
output1{test++} = -2#4 == (signedi+signedj);
output1{test++} = 10#4 == (signedi -signedj);
output1{test++} = -24#4 == (signedi *signedj);
output1{test++} = -24#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = 4#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(4#8)) // signedj);
output1{test++} = 4#4 == ((MI8(4#8)) %%signedj);
output1{test++} = 0#4 == (signedi & signedj);
output1{test++} = -2#4 == (signedi | signedj);
output1{test++} = -2#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(3##4);
output1{test++} = 15##4 == (unsignedi+unsignedj);
output1{test++} = 9##4 == (unsignedi -unsignedj);
output1{test++} = 36##4 == (unsignedi *unsignedj);
output1{test++} = 36##8 == (unsignedi **unsignedj);
output1{test++} = 4##4 == (unsignedi /unsignedj);
output1{test++} = 0##4 == (unsignedi %unsignedj);
output1{test++} = 0##4 == (unsignedi & unsignedj);
output1{test++} = 15##4 == (unsignedi | unsignedj);
output1{test++} = 15##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-5#4);
output1{test++} = -1#4 == (signedi+signedj);
output1{test++} = 9#4 == (signedi -signedj);
output1{test++} = -20#4 == (signedi *signedj);
output1{test++} = -20#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = 4#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(4#8)) // signedj);
output1{test++} = 4#4 == ((MI8(4#8)) %%signedj);
output1{test++} = 0#4 == (signedi & signedj);
output1{test++} = -1#4 == (signedi | signedj);
output1{test++} = -1#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(4##4);
output1{test++} = 16##4 == (unsignedi+unsignedj);
output1{test++} = 8##4 == (unsignedi -unsignedj);
output1{test++} = 48##4 == (unsignedi *unsignedj);
output1{test++} = 48##8 == (unsignedi **unsignedj);
output1{test++} = 3##4 == (unsignedi /unsignedj);
output1{test++} = 0##4 == (unsignedi %unsignedj);
output1{test++} = 4##4 == (unsignedi & unsignedj);
output1{test++} = 12##4 == (unsignedi | unsignedj);
output1{test++} = 8##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-4#4);
output1{test++} = 0#4 == (signedi+signedj);
output1{test++} = 8#4 == (signedi -signedj);
output1{test++} = -16#4 == (signedi *signedj);
output1{test++} = -16#8 == (signedi **signedj);
output1{test++} = -1#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = -1#4 == ((MI8(4#8)) // signedj);
output1{test++} = 0#4 == ((MI8(4#8)) %%signedj);
output1{test++} = 4#4 == (signedi & signedj);
output1{test++} = -4#4 == (signedi | signedj);
output1{test++} = -8#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(5##4);
output1{test++} = 17##4 == (unsignedi+unsignedj);
output1{test++} = 7##4 == (unsignedi -unsignedj);
output1{test++} = 60##4 == (unsignedi *unsignedj);
output1{test++} = 60##8 == (unsignedi **unsignedj);
output1{test++} = 2##4 == (unsignedi /unsignedj);
output1{test++} = 2##4 == (unsignedi %unsignedj);
output1{test++} = 4##4 == (unsignedi & unsignedj);
output1{test++} = 13##4 == (unsignedi | unsignedj);
output1{test++} = 9##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-3#4);
output1{test++} = 1#4 == (signedi+signedj);
output1{test++} = 7#4 == (signedi -signedj);
output1{test++} = -12#4 == (signedi *signedj);
output1{test++} = -12#8 == (signedi **signedj);
output1{test++} = -1#4 == (signedi /signedj);
output1{test++} = 1#4 == (signedi %signedj);
output1{test++} = -1#4 == ((MI8(4#8)) // signedj);
output1{test++} = 1#4 == ((MI8(4#8)) %%signedj);
output1{test++} = 4#4 == (signedi & signedj);
output1{test++} = -3#4 == (signedi | signedj);
output1{test++} = -7#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(6##4);
output1{test++} = 18##4 == (unsignedi+unsignedj);
output1{test++} = 6##4 == (unsignedi -unsignedj);
output1{test++} = 72##4 == (unsignedi *unsignedj);
output1{test++} = 72##8 == (unsignedi **unsignedj);
output1{test++} = 2##4 == (unsignedi /unsignedj);
output1{test++} = 0##4 == (unsignedi %unsignedj);
output1{test++} = 4##4 == (unsignedi & unsignedj);
output1{test++} = 14##4 == (unsignedi | unsignedj);
output1{test++} = 10##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-2#4);
output1{test++} = 2#4 == (signedi+signedj);
output1{test++} = 6#4 == (signedi -signedj);
output1{test++} = -8#4 == (signedi *signedj);
output1{test++} = -8#8 == (signedi **signedj);
output1{test++} = -2#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = -2#4 == ((MI8(4#8)) // signedj);
output1{test++} = 0#4 == ((MI8(4#8)) %%signedj);
output1{test++} = 4#4 == (signedi & signedj);
output1{test++} = -2#4 == (signedi | signedj);
output1{test++} = -6#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(7##4);
output1{test++} = 19##4 == (unsignedi+unsignedj);
output1{test++} = 5##4 == (unsignedi -unsignedj);
output1{test++} = 84##4 == (unsignedi *unsignedj);
output1{test++} = 84##8 == (unsignedi **unsignedj);
output1{test++} = 1##4 == (unsignedi /unsignedj);
output1{test++} = 5##4 == (unsignedi %unsignedj);
output1{test++} = 13##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 5##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 4##4 == (unsignedi & unsignedj);
output1{test++} = 15##4 == (unsignedi | unsignedj);
output1{test++} = 11##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-1#4);
output1{test++} = 3#4 == (signedi+signedj);
output1{test++} = 5#4 == (signedi -signedj);
output1{test++} = -4#4 == (signedi *signedj);
output1{test++} = -4#8 == (signedi **signedj);
output1{test++} = -4#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = -4#4 == ((MI8(4#8)) // signedj);
output1{test++} = 0#4 == ((MI8(4#8)) %%signedj);
output1{test++} = 4#4 == (signedi & signedj);
output1{test++} = -1#4 == (signedi | signedj);
output1{test++} = -5#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(8##4);
output1{test++} = 20##4 == (unsignedi+unsignedj);
output1{test++} = 4##4 == (unsignedi -unsignedj);
output1{test++} = 96##4 == (unsignedi *unsignedj);
output1{test++} = 96##8 == (unsignedi **unsignedj);
output1{test++} = 1##4 == (unsignedi /unsignedj);
output1{test++} = 4##4 == (unsignedi %unsignedj);
output1{test++} = 12##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 0##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 8##4 == (unsignedi & unsignedj);
output1{test++} = 12##4 == (unsignedi | unsignedj);
output1{test++} = 4##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(0#4);
output1{test++} = 4#4 == (signedi+signedj);
output1{test++} = 4#4 == (signedi -signedj);
output1{test++} = 0#4 == (signedi *signedj);
output1{test++} = 0#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi & signedj);
output1{test++} = 4#4 == (signedi | signedj);
output1{test++} = 4#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(9##4);
output1{test++} = 21##4 == (unsignedi+unsignedj);
output1{test++} = 3##4 == (unsignedi -unsignedj);
output1{test++} = 108##4 == (unsignedi *unsignedj);
output1{test++} = 108##8 == (unsignedi **unsignedj);
output1{test++} = 1##4 == (unsignedi /unsignedj);
output1{test++} = 3##4 == (unsignedi %unsignedj);
output1{test++} = 10##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 6##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 8##4 == (unsignedi & unsignedj);
output1{test++} = 13##4 == (unsignedi | unsignedj);
output1{test++} = 5##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(1#4);
output1{test++} = 5#4 == (signedi+signedj);
output1{test++} = 3#4 == (signedi -signedj);
output1{test++} = 4#4 == (signedi *signedj);
output1{test++} = 4#8 == (signedi **signedj);
output1{test++} = 4#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = 4#4 == ((MI8(4#8)) // signedj);
output1{test++} = 0#4 == ((MI8(4#8)) %%signedj);
output1{test++} = 0#4 == (signedi & signedj);
output1{test++} = 5#4 == (signedi | signedj);
output1{test++} = 5#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(10##4);
output1{test++} = 22##4 == (unsignedi+unsignedj);
output1{test++} = 2##4 == (unsignedi -unsignedj);
output1{test++} = 120##4 == (unsignedi *unsignedj);
output1{test++} = 120##8 == (unsignedi **unsignedj);
output1{test++} = 1##4 == (unsignedi /unsignedj);
output1{test++} = 2##4 == (unsignedi %unsignedj);
output1{test++} = 9##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 6##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 8##4 == (unsignedi & unsignedj);
output1{test++} = 14##4 == (unsignedi | unsignedj);
output1{test++} = 6##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(2#4);
output1{test++} = 6#4 == (signedi+signedj);
output1{test++} = 2#4 == (signedi -signedj);
output1{test++} = 8#4 == (signedi *signedj);
output1{test++} = 8#8 == (signedi **signedj);
output1{test++} = 2#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = 2#4 == ((MI8(4#8)) // signedj);
output1{test++} = 0#4 == ((MI8(4#8)) %%signedj);
output1{test++} = 0#4 == (signedi & signedj);
output1{test++} = 6#4 == (signedi | signedj);
output1{test++} = 6#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(11##4);
output1{test++} = 23##4 == (unsignedi+unsignedj);
output1{test++} = 1##4 == (unsignedi -unsignedj);
output1{test++} = 132##4 == (unsignedi *unsignedj);
output1{test++} = 132##8 == (unsignedi **unsignedj);
output1{test++} = 1##4 == (unsignedi /unsignedj);
output1{test++} = 1##4 == (unsignedi %unsignedj);
output1{test++} = 8##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 8##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 8##4 == (unsignedi & unsignedj);
output1{test++} = 15##4 == (unsignedi | unsignedj);
output1{test++} = 7##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(3#4);
output1{test++} = 7#4 == (signedi+signedj);
output1{test++} = 1#4 == (signedi -signedj);
output1{test++} = 12#4 == (signedi *signedj);
output1{test++} = 12#8 == (signedi **signedj);
output1{test++} = 1#4 == (signedi /signedj);
output1{test++} = 1#4 == (signedi %signedj);
output1{test++} = 1#4 == ((MI8(4#8)) // signedj);
output1{test++} = 1#4 == ((MI8(4#8)) %%signedj);
output1{test++} = 0#4 == (signedi & signedj);
output1{test++} = 7#4 == (signedi | signedj);
output1{test++} = 7#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(12##4);
output1{test++} = 24##4 == (unsignedi+unsignedj);
output1{test++} = 0##4 == (unsignedi -unsignedj);
output1{test++} = 144##4 == (unsignedi *unsignedj);
output1{test++} = 144##8 == (unsignedi **unsignedj);
output1{test++} = 1##4 == (unsignedi /unsignedj);
output1{test++} = 0##4 == (unsignedi %unsignedj);
output1{test++} = 8##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 0##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 12##4 == (unsignedi & unsignedj);
output1{test++} = 12##4 == (unsignedi | unsignedj);
output1{test++} = 0##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 1##1 == (unsignedi ==unsignedj);
output1{test++} = 0##1 == (unsignedi !=unsignedj);
signedj = MI4(4#4);
output1{test++} = 8#4 == (signedi+signedj);
output1{test++} = 0#4 == (signedi -signedj);
output1{test++} = 16#4 == (signedi *signedj);
output1{test++} = 16#8 == (signedi **signedj);
output1{test++} = 1#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = 1#4 == ((MI8(4#8)) // signedj);
output1{test++} = 0#4 == ((MI8(4#8)) %%signedj);
output1{test++} = 4#4 == (signedi & signedj);
output1{test++} = 4#4 == (signedi | signedj);
output1{test++} = 0#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 1#1 == (signedi ==signedj);
output1{test++} = 0#1 == (signedi !=signedj);
unsignedj = MUI4(13##4);
output1{test++} = 25##4 == (unsignedi+unsignedj);
output1{test++} = -1##4 == (unsignedi -unsignedj);
output1{test++} = 156##4 == (unsignedi *unsignedj);
output1{test++} = 156##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 12##4 == (unsignedi %unsignedj);
output1{test++} = 7##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 5##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 12##4 == (unsignedi & unsignedj);
output1{test++} = 13##4 == (unsignedi | unsignedj);
output1{test++} = 1##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(5#4);
output1{test++} = 9#4 == (signedi+signedj);
output1{test++} = -1#4 == (signedi -signedj);
output1{test++} = 20#4 == (signedi *signedj);
output1{test++} = 20#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = 4#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(4#8)) // signedj);
output1{test++} = 4#4 == ((MI8(4#8)) %%signedj);
output1{test++} = 4#4 == (signedi & signedj);
output1{test++} = 5#4 == (signedi | signedj);
output1{test++} = 1#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(14##4);
output1{test++} = 26##4 == (unsignedi+unsignedj);
output1{test++} = -2##4 == (unsignedi -unsignedj);
output1{test++} = 168##4 == (unsignedi *unsignedj);
output1{test++} = 168##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 12##4 == (unsignedi %unsignedj);
output1{test++} = 6##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 12##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 12##4 == (unsignedi & unsignedj);
output1{test++} = 14##4 == (unsignedi | unsignedj);
output1{test++} = 2##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(6#4);
output1{test++} = 10#4 == (signedi+signedj);
output1{test++} = -2#4 == (signedi -signedj);
output1{test++} = 24#4 == (signedi *signedj);
output1{test++} = 24#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = 4#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(4#8)) // signedj);
output1{test++} = 4#4 == ((MI8(4#8)) %%signedj);
output1{test++} = 4#4 == (signedi & signedj);
output1{test++} = 6#4 == (signedi | signedj);
output1{test++} = 2#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(15##4);
output1{test++} = 27##4 == (unsignedi+unsignedj);
output1{test++} = -3##4 == (unsignedi -unsignedj);
output1{test++} = 180##4 == (unsignedi *unsignedj);
output1{test++} = 180##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 12##4 == (unsignedi %unsignedj);
output1{test++} = 6##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 6##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 12##4 == (unsignedi & unsignedj);
output1{test++} = 15##4 == (unsignedi | unsignedj);
output1{test++} = 3##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(7#4);
output1{test++} = 11#4 == (signedi+signedj);
output1{test++} = -3#4 == (signedi -signedj);
output1{test++} = 28#4 == (signedi *signedj);
output1{test++} = 28#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = 4#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(4#8)) // signedj);
output1{test++} = 4#4 == ((MI8(4#8)) %%signedj);
output1{test++} = 4#4 == (signedi & signedj);
output1{test++} = 7#4 == (signedi | signedj);
output1{test++} = 3#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedi = MUI4(13##4);
signedi = MI4(5#4);
output1{test++} = 2##4 == (~unsignedi);
output1{test++} = 10#4 == (~signedi);
unsignedj = MUI4(0##4);
output1{test++} = 13##4 == (unsignedi+unsignedj);
output1{test++} = 13##4 == (unsignedi -unsignedj);
output1{test++} = 0##4 == (unsignedi *unsignedj);
output1{test++} = 0##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi & unsignedj);
output1{test++} = 13##4 == (unsignedi | unsignedj);
output1{test++} = 13##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-8#4);
output1{test++} = -3#4 == (signedi+signedj);
output1{test++} = 13#4 == (signedi -signedj);
output1{test++} = -40#4 == (signedi *signedj);
output1{test++} = -40#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = 5#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(5#8)) // signedj);
output1{test++} = 5#4 == ((MI8(5#8)) %%signedj);
output1{test++} = 0#4 == (signedi & signedj);
output1{test++} = -3#4 == (signedi | signedj);
output1{test++} = -3#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(1##4);
output1{test++} = 14##4 == (unsignedi+unsignedj);
output1{test++} = 12##4 == (unsignedi -unsignedj);
output1{test++} = 13##4 == (unsignedi *unsignedj);
output1{test++} = 13##8 == (unsignedi **unsignedj);
output1{test++} = 13##4 == (unsignedi /unsignedj);
output1{test++} = 0##4 == (unsignedi %unsignedj);
output1{test++} = 1##4 == (unsignedi & unsignedj);
output1{test++} = 13##4 == (unsignedi | unsignedj);
output1{test++} = 12##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-7#4);
output1{test++} = -2#4 == (signedi+signedj);
output1{test++} = 12#4 == (signedi -signedj);
output1{test++} = -35#4 == (signedi *signedj);
output1{test++} = -35#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = 5#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(5#8)) // signedj);
output1{test++} = 5#4 == ((MI8(5#8)) %%signedj);
output1{test++} = 1#4 == (signedi & signedj);
output1{test++} = -3#4 == (signedi | signedj);
output1{test++} = -4#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(2##4);
output1{test++} = 15##4 == (unsignedi+unsignedj);
output1{test++} = 11##4 == (unsignedi -unsignedj);
output1{test++} = 26##4 == (unsignedi *unsignedj);
output1{test++} = 26##8 == (unsignedi **unsignedj);
output1{test++} = 6##4 == (unsignedi /unsignedj);
output1{test++} = 1##4 == (unsignedi %unsignedj);
output1{test++} = 0##4 == (unsignedi & unsignedj);
output1{test++} = 15##4 == (unsignedi | unsignedj);
output1{test++} = 15##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-6#4);
output1{test++} = -1#4 == (signedi+signedj);
output1{test++} = 11#4 == (signedi -signedj);
output1{test++} = -30#4 == (signedi *signedj);
output1{test++} = -30#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = 5#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(5#8)) // signedj);
output1{test++} = 5#4 == ((MI8(5#8)) %%signedj);
output1{test++} = 0#4 == (signedi & signedj);
output1{test++} = -1#4 == (signedi | signedj);
output1{test++} = -1#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(3##4);
output1{test++} = 16##4 == (unsignedi+unsignedj);
output1{test++} = 10##4 == (unsignedi -unsignedj);
output1{test++} = 39##4 == (unsignedi *unsignedj);
output1{test++} = 39##8 == (unsignedi **unsignedj);
output1{test++} = 4##4 == (unsignedi /unsignedj);
output1{test++} = 1##4 == (unsignedi %unsignedj);
output1{test++} = 1##4 == (unsignedi & unsignedj);
output1{test++} = 15##4 == (unsignedi | unsignedj);
output1{test++} = 14##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-5#4);
output1{test++} = 0#4 == (signedi+signedj);
output1{test++} = 10#4 == (signedi -signedj);
output1{test++} = -25#4 == (signedi *signedj);
output1{test++} = -25#8 == (signedi **signedj);
output1{test++} = -1#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = -1#4 == ((MI8(5#8)) // signedj);
output1{test++} = 0#4 == ((MI8(5#8)) %%signedj);
output1{test++} = 1#4 == (signedi & signedj);
output1{test++} = -1#4 == (signedi | signedj);
output1{test++} = -2#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(4##4);
output1{test++} = 17##4 == (unsignedi+unsignedj);
output1{test++} = 9##4 == (unsignedi -unsignedj);
output1{test++} = 52##4 == (unsignedi *unsignedj);
output1{test++} = 52##8 == (unsignedi **unsignedj);
output1{test++} = 3##4 == (unsignedi /unsignedj);
output1{test++} = 1##4 == (unsignedi %unsignedj);
output1{test++} = 4##4 == (unsignedi & unsignedj);
output1{test++} = 13##4 == (unsignedi | unsignedj);
output1{test++} = 9##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-4#4);
output1{test++} = 1#4 == (signedi+signedj);
output1{test++} = 9#4 == (signedi -signedj);
output1{test++} = -20#4 == (signedi *signedj);
output1{test++} = -20#8 == (signedi **signedj);
output1{test++} = -1#4 == (signedi /signedj);
output1{test++} = 1#4 == (signedi %signedj);
output1{test++} = -1#4 == ((MI8(5#8)) // signedj);
output1{test++} = 1#4 == ((MI8(5#8)) %%signedj);
output1{test++} = 4#4 == (signedi & signedj);
output1{test++} = -3#4 == (signedi | signedj);
output1{test++} = -7#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(5##4);
output1{test++} = 18##4 == (unsignedi+unsignedj);
output1{test++} = 8##4 == (unsignedi -unsignedj);
output1{test++} = 65##4 == (unsignedi *unsignedj);
output1{test++} = 65##8 == (unsignedi **unsignedj);
output1{test++} = 2##4 == (unsignedi /unsignedj);
output1{test++} = 3##4 == (unsignedi %unsignedj);
output1{test++} = 5##4 == (unsignedi & unsignedj);
output1{test++} = 13##4 == (unsignedi | unsignedj);
output1{test++} = 8##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-3#4);
output1{test++} = 2#4 == (signedi+signedj);
output1{test++} = 8#4 == (signedi -signedj);
output1{test++} = -15#4 == (signedi *signedj);
output1{test++} = -15#8 == (signedi **signedj);
output1{test++} = -1#4 == (signedi /signedj);
output1{test++} = 2#4 == (signedi %signedj);
output1{test++} = -1#4 == ((MI8(5#8)) // signedj);
output1{test++} = 2#4 == ((MI8(5#8)) %%signedj);
output1{test++} = 5#4 == (signedi & signedj);
output1{test++} = -3#4 == (signedi | signedj);
output1{test++} = -8#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(6##4);
output1{test++} = 19##4 == (unsignedi+unsignedj);
output1{test++} = 7##4 == (unsignedi -unsignedj);
output1{test++} = 78##4 == (unsignedi *unsignedj);
output1{test++} = 78##8 == (unsignedi **unsignedj);
output1{test++} = 2##4 == (unsignedi /unsignedj);
output1{test++} = 1##4 == (unsignedi %unsignedj);
output1{test++} = 4##4 == (unsignedi & unsignedj);
output1{test++} = 15##4 == (unsignedi | unsignedj);
output1{test++} = 11##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-2#4);
output1{test++} = 3#4 == (signedi+signedj);
output1{test++} = 7#4 == (signedi -signedj);
output1{test++} = -10#4 == (signedi *signedj);
output1{test++} = -10#8 == (signedi **signedj);
output1{test++} = -2#4 == (signedi /signedj);
output1{test++} = 1#4 == (signedi %signedj);
output1{test++} = -2#4 == ((MI8(5#8)) // signedj);
output1{test++} = 1#4 == ((MI8(5#8)) %%signedj);
output1{test++} = 4#4 == (signedi & signedj);
output1{test++} = -1#4 == (signedi | signedj);
output1{test++} = -5#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(7##4);
output1{test++} = 20##4 == (unsignedi+unsignedj);
output1{test++} = 6##4 == (unsignedi -unsignedj);
output1{test++} = 91##4 == (unsignedi *unsignedj);
output1{test++} = 91##8 == (unsignedi **unsignedj);
output1{test++} = 1##4 == (unsignedi /unsignedj);
output1{test++} = 6##4 == (unsignedi %unsignedj);
output1{test++} = 14##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 6##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 5##4 == (unsignedi & unsignedj);
output1{test++} = 15##4 == (unsignedi | unsignedj);
output1{test++} = 10##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-1#4);
output1{test++} = 4#4 == (signedi+signedj);
output1{test++} = 6#4 == (signedi -signedj);
output1{test++} = -5#4 == (signedi *signedj);
output1{test++} = -5#8 == (signedi **signedj);
output1{test++} = -5#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = -5#4 == ((MI8(5#8)) // signedj);
output1{test++} = 0#4 == ((MI8(5#8)) %%signedj);
output1{test++} = 5#4 == (signedi & signedj);
output1{test++} = -1#4 == (signedi | signedj);
output1{test++} = -6#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(8##4);
output1{test++} = 21##4 == (unsignedi+unsignedj);
output1{test++} = 5##4 == (unsignedi -unsignedj);
output1{test++} = 104##4 == (unsignedi *unsignedj);
output1{test++} = 104##8 == (unsignedi **unsignedj);
output1{test++} = 1##4 == (unsignedi /unsignedj);
output1{test++} = 5##4 == (unsignedi %unsignedj);
output1{test++} = 13##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 0##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 8##4 == (unsignedi & unsignedj);
output1{test++} = 13##4 == (unsignedi | unsignedj);
output1{test++} = 5##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(0#4);
output1{test++} = 5#4 == (signedi+signedj);
output1{test++} = 5#4 == (signedi -signedj);
output1{test++} = 0#4 == (signedi *signedj);
output1{test++} = 0#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi & signedj);
output1{test++} = 5#4 == (signedi | signedj);
output1{test++} = 5#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(9##4);
output1{test++} = 22##4 == (unsignedi+unsignedj);
output1{test++} = 4##4 == (unsignedi -unsignedj);
output1{test++} = 117##4 == (unsignedi *unsignedj);
output1{test++} = 117##8 == (unsignedi **unsignedj);
output1{test++} = 1##4 == (unsignedi /unsignedj);
output1{test++} = 4##4 == (unsignedi %unsignedj);
output1{test++} = 11##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 5##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 9##4 == (unsignedi & unsignedj);
output1{test++} = 13##4 == (unsignedi | unsignedj);
output1{test++} = 4##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(1#4);
output1{test++} = 6#4 == (signedi+signedj);
output1{test++} = 4#4 == (signedi -signedj);
output1{test++} = 5#4 == (signedi *signedj);
output1{test++} = 5#8 == (signedi **signedj);
output1{test++} = 5#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = 5#4 == ((MI8(5#8)) // signedj);
output1{test++} = 0#4 == ((MI8(5#8)) %%signedj);
output1{test++} = 1#4 == (signedi & signedj);
output1{test++} = 5#4 == (signedi | signedj);
output1{test++} = 4#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(10##4);
output1{test++} = 23##4 == (unsignedi+unsignedj);
output1{test++} = 3##4 == (unsignedi -unsignedj);
output1{test++} = 130##4 == (unsignedi *unsignedj);
output1{test++} = 130##8 == (unsignedi **unsignedj);
output1{test++} = 1##4 == (unsignedi /unsignedj);
output1{test++} = 3##4 == (unsignedi %unsignedj);
output1{test++} = 10##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 4##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 8##4 == (unsignedi & unsignedj);
output1{test++} = 15##4 == (unsignedi | unsignedj);
output1{test++} = 7##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(2#4);
output1{test++} = 7#4 == (signedi+signedj);
output1{test++} = 3#4 == (signedi -signedj);
output1{test++} = 10#4 == (signedi *signedj);
output1{test++} = 10#8 == (signedi **signedj);
output1{test++} = 2#4 == (signedi /signedj);
output1{test++} = 1#4 == (signedi %signedj);
output1{test++} = 2#4 == ((MI8(5#8)) // signedj);
output1{test++} = 1#4 == ((MI8(5#8)) %%signedj);
output1{test++} = 0#4 == (signedi & signedj);
output1{test++} = 7#4 == (signedi | signedj);
output1{test++} = 7#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(11##4);
output1{test++} = 24##4 == (unsignedi+unsignedj);
output1{test++} = 2##4 == (unsignedi -unsignedj);
output1{test++} = 143##4 == (unsignedi *unsignedj);
output1{test++} = 143##8 == (unsignedi **unsignedj);
output1{test++} = 1##4 == (unsignedi /unsignedj);
output1{test++} = 2##4 == (unsignedi %unsignedj);
output1{test++} = 9##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 5##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 9##4 == (unsignedi & unsignedj);
output1{test++} = 15##4 == (unsignedi | unsignedj);
output1{test++} = 6##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(3#4);
output1{test++} = 8#4 == (signedi+signedj);
output1{test++} = 2#4 == (signedi -signedj);
output1{test++} = 15#4 == (signedi *signedj);
output1{test++} = 15#8 == (signedi **signedj);
output1{test++} = 1#4 == (signedi /signedj);
output1{test++} = 2#4 == (signedi %signedj);
output1{test++} = 1#4 == ((MI8(5#8)) // signedj);
output1{test++} = 2#4 == ((MI8(5#8)) %%signedj);
output1{test++} = 1#4 == (signedi & signedj);
output1{test++} = 7#4 == (signedi | signedj);
output1{test++} = 6#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(12##4);
output1{test++} = 25##4 == (unsignedi+unsignedj);
output1{test++} = 1##4 == (unsignedi -unsignedj);
output1{test++} = 156##4 == (unsignedi *unsignedj);
output1{test++} = 156##8 == (unsignedi **unsignedj);
output1{test++} = 1##4 == (unsignedi /unsignedj);
output1{test++} = 1##4 == (unsignedi %unsignedj);
output1{test++} = 8##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 8##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 12##4 == (unsignedi & unsignedj);
output1{test++} = 13##4 == (unsignedi | unsignedj);
output1{test++} = 1##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(4#4);
output1{test++} = 9#4 == (signedi+signedj);
output1{test++} = 1#4 == (signedi -signedj);
output1{test++} = 20#4 == (signedi *signedj);
output1{test++} = 20#8 == (signedi **signedj);
output1{test++} = 1#4 == (signedi /signedj);
output1{test++} = 1#4 == (signedi %signedj);
output1{test++} = 1#4 == ((MI8(5#8)) // signedj);
output1{test++} = 1#4 == ((MI8(5#8)) %%signedj);
output1{test++} = 4#4 == (signedi & signedj);
output1{test++} = 5#4 == (signedi | signedj);
output1{test++} = 1#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(13##4);
output1{test++} = 26##4 == (unsignedi+unsignedj);
output1{test++} = 0##4 == (unsignedi -unsignedj);
output1{test++} = 169##4 == (unsignedi *unsignedj);
output1{test++} = 169##8 == (unsignedi **unsignedj);
output1{test++} = 1##4 == (unsignedi /unsignedj);
output1{test++} = 0##4 == (unsignedi %unsignedj);
output1{test++} = 8##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 0##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 13##4 == (unsignedi & unsignedj);
output1{test++} = 13##4 == (unsignedi | unsignedj);
output1{test++} = 0##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 1##1 == (unsignedi ==unsignedj);
output1{test++} = 0##1 == (unsignedi !=unsignedj);
signedj = MI4(5#4);
output1{test++} = 10#4 == (signedi+signedj);
output1{test++} = 0#4 == (signedi -signedj);
output1{test++} = 25#4 == (signedi *signedj);
output1{test++} = 25#8 == (signedi **signedj);
output1{test++} = 1#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = 1#4 == ((MI8(5#8)) // signedj);
output1{test++} = 0#4 == ((MI8(5#8)) %%signedj);
output1{test++} = 5#4 == (signedi & signedj);
output1{test++} = 5#4 == (signedi | signedj);
output1{test++} = 0#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 1#1 == (signedi ==signedj);
output1{test++} = 0#1 == (signedi !=signedj);
unsignedj = MUI4(14##4);
output1{test++} = 27##4 == (unsignedi+unsignedj);
output1{test++} = -1##4 == (unsignedi -unsignedj);
output1{test++} = 182##4 == (unsignedi *unsignedj);
output1{test++} = 182##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 13##4 == (unsignedi %unsignedj);
output1{test++} = 7##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 6##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 12##4 == (unsignedi & unsignedj);
output1{test++} = 15##4 == (unsignedi | unsignedj);
output1{test++} = 3##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(6#4);
output1{test++} = 11#4 == (signedi+signedj);
output1{test++} = -1#4 == (signedi -signedj);
output1{test++} = 30#4 == (signedi *signedj);
output1{test++} = 30#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = 5#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(5#8)) // signedj);
output1{test++} = 5#4 == ((MI8(5#8)) %%signedj);
output1{test++} = 4#4 == (signedi & signedj);
output1{test++} = 7#4 == (signedi | signedj);
output1{test++} = 3#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(15##4);
output1{test++} = 28##4 == (unsignedi+unsignedj);
output1{test++} = -2##4 == (unsignedi -unsignedj);
output1{test++} = 195##4 == (unsignedi *unsignedj);
output1{test++} = 195##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 13##4 == (unsignedi %unsignedj);
output1{test++} = 6##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 14##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 13##4 == (unsignedi & unsignedj);
output1{test++} = 15##4 == (unsignedi | unsignedj);
output1{test++} = 2##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(7#4);
output1{test++} = 12#4 == (signedi+signedj);
output1{test++} = -2#4 == (signedi -signedj);
output1{test++} = 35#4 == (signedi *signedj);
output1{test++} = 35#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = 5#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(5#8)) // signedj);
output1{test++} = 5#4 == ((MI8(5#8)) %%signedj);
output1{test++} = 5#4 == (signedi & signedj);
output1{test++} = 7#4 == (signedi | signedj);
output1{test++} = 2#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedi = MUI4(14##4);
signedi = MI4(6#4);
output1{test++} = 1##4 == (~unsignedi);
output1{test++} = 9#4 == (~signedi);
unsignedj = MUI4(0##4);
output1{test++} = 14##4 == (unsignedi+unsignedj);
output1{test++} = 14##4 == (unsignedi -unsignedj);
output1{test++} = 0##4 == (unsignedi *unsignedj);
output1{test++} = 0##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi & unsignedj);
output1{test++} = 14##4 == (unsignedi | unsignedj);
output1{test++} = 14##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-8#4);
output1{test++} = -2#4 == (signedi+signedj);
output1{test++} = 14#4 == (signedi -signedj);
output1{test++} = -48#4 == (signedi *signedj);
output1{test++} = -48#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = 6#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(6#8)) // signedj);
output1{test++} = 6#4 == ((MI8(6#8)) %%signedj);
output1{test++} = 0#4 == (signedi & signedj);
output1{test++} = -2#4 == (signedi | signedj);
output1{test++} = -2#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(1##4);
output1{test++} = 15##4 == (unsignedi+unsignedj);
output1{test++} = 13##4 == (unsignedi -unsignedj);
output1{test++} = 14##4 == (unsignedi *unsignedj);
output1{test++} = 14##8 == (unsignedi **unsignedj);
output1{test++} = 14##4 == (unsignedi /unsignedj);
output1{test++} = 0##4 == (unsignedi %unsignedj);
output1{test++} = 0##4 == (unsignedi & unsignedj);
output1{test++} = 15##4 == (unsignedi | unsignedj);
output1{test++} = 15##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-7#4);
output1{test++} = -1#4 == (signedi+signedj);
output1{test++} = 13#4 == (signedi -signedj);
output1{test++} = -42#4 == (signedi *signedj);
output1{test++} = -42#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = 6#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(6#8)) // signedj);
output1{test++} = 6#4 == ((MI8(6#8)) %%signedj);
output1{test++} = 0#4 == (signedi & signedj);
output1{test++} = -1#4 == (signedi | signedj);
output1{test++} = -1#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(2##4);
output1{test++} = 16##4 == (unsignedi+unsignedj);
output1{test++} = 12##4 == (unsignedi -unsignedj);
output1{test++} = 28##4 == (unsignedi *unsignedj);
output1{test++} = 28##8 == (unsignedi **unsignedj);
output1{test++} = 7##4 == (unsignedi /unsignedj);
output1{test++} = 0##4 == (unsignedi %unsignedj);
output1{test++} = 2##4 == (unsignedi & unsignedj);
output1{test++} = 14##4 == (unsignedi | unsignedj);
output1{test++} = 12##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-6#4);
output1{test++} = 0#4 == (signedi+signedj);
output1{test++} = 12#4 == (signedi -signedj);
output1{test++} = -36#4 == (signedi *signedj);
output1{test++} = -36#8 == (signedi **signedj);
output1{test++} = -1#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = -1#4 == ((MI8(6#8)) // signedj);
output1{test++} = 0#4 == ((MI8(6#8)) %%signedj);
output1{test++} = 2#4 == (signedi & signedj);
output1{test++} = -2#4 == (signedi | signedj);
output1{test++} = -4#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(3##4);
output1{test++} = 17##4 == (unsignedi+unsignedj);
output1{test++} = 11##4 == (unsignedi -unsignedj);
output1{test++} = 42##4 == (unsignedi *unsignedj);
output1{test++} = 42##8 == (unsignedi **unsignedj);
output1{test++} = 4##4 == (unsignedi /unsignedj);
output1{test++} = 2##4 == (unsignedi %unsignedj);
output1{test++} = 2##4 == (unsignedi & unsignedj);
output1{test++} = 15##4 == (unsignedi | unsignedj);
output1{test++} = 13##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-5#4);
output1{test++} = 1#4 == (signedi+signedj);
output1{test++} = 11#4 == (signedi -signedj);
output1{test++} = -30#4 == (signedi *signedj);
output1{test++} = -30#8 == (signedi **signedj);
output1{test++} = -1#4 == (signedi /signedj);
output1{test++} = 1#4 == (signedi %signedj);
output1{test++} = -1#4 == ((MI8(6#8)) // signedj);
output1{test++} = 1#4 == ((MI8(6#8)) %%signedj);
output1{test++} = 2#4 == (signedi & signedj);
output1{test++} = -1#4 == (signedi | signedj);
output1{test++} = -3#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(4##4);
output1{test++} = 18##4 == (unsignedi+unsignedj);
output1{test++} = 10##4 == (unsignedi -unsignedj);
output1{test++} = 56##4 == (unsignedi *unsignedj);
output1{test++} = 56##8 == (unsignedi **unsignedj);
output1{test++} = 3##4 == (unsignedi /unsignedj);
output1{test++} = 2##4 == (unsignedi %unsignedj);
output1{test++} = 4##4 == (unsignedi & unsignedj);
output1{test++} = 14##4 == (unsignedi | unsignedj);
output1{test++} = 10##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-4#4);
output1{test++} = 2#4 == (signedi+signedj);
output1{test++} = 10#4 == (signedi -signedj);
output1{test++} = -24#4 == (signedi *signedj);
output1{test++} = -24#8 == (signedi **signedj);
output1{test++} = -1#4 == (signedi /signedj);
output1{test++} = 2#4 == (signedi %signedj);
output1{test++} = -1#4 == ((MI8(6#8)) // signedj);
output1{test++} = 2#4 == ((MI8(6#8)) %%signedj);
output1{test++} = 4#4 == (signedi & signedj);
output1{test++} = -2#4 == (signedi | signedj);
output1{test++} = -6#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(5##4);
output1{test++} = 19##4 == (unsignedi+unsignedj);
output1{test++} = 9##4 == (unsignedi -unsignedj);
output1{test++} = 70##4 == (unsignedi *unsignedj);
output1{test++} = 70##8 == (unsignedi **unsignedj);
output1{test++} = 2##4 == (unsignedi /unsignedj);
output1{test++} = 4##4 == (unsignedi %unsignedj);
output1{test++} = 4##4 == (unsignedi & unsignedj);
output1{test++} = 15##4 == (unsignedi | unsignedj);
output1{test++} = 11##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-3#4);
output1{test++} = 3#4 == (signedi+signedj);
output1{test++} = 9#4 == (signedi -signedj);
output1{test++} = -18#4 == (signedi *signedj);
output1{test++} = -18#8 == (signedi **signedj);
output1{test++} = -2#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = -2#4 == ((MI8(6#8)) // signedj);
output1{test++} = 0#4 == ((MI8(6#8)) %%signedj);
output1{test++} = 4#4 == (signedi & signedj);
output1{test++} = -1#4 == (signedi | signedj);
output1{test++} = -5#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(6##4);
output1{test++} = 20##4 == (unsignedi+unsignedj);
output1{test++} = 8##4 == (unsignedi -unsignedj);
output1{test++} = 84##4 == (unsignedi *unsignedj);
output1{test++} = 84##8 == (unsignedi **unsignedj);
output1{test++} = 2##4 == (unsignedi /unsignedj);
output1{test++} = 2##4 == (unsignedi %unsignedj);
output1{test++} = 6##4 == (unsignedi & unsignedj);
output1{test++} = 14##4 == (unsignedi | unsignedj);
output1{test++} = 8##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-2#4);
output1{test++} = 4#4 == (signedi+signedj);
output1{test++} = 8#4 == (signedi -signedj);
output1{test++} = -12#4 == (signedi *signedj);
output1{test++} = -12#8 == (signedi **signedj);
output1{test++} = -3#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = -3#4 == ((MI8(6#8)) // signedj);
output1{test++} = 0#4 == ((MI8(6#8)) %%signedj);
output1{test++} = 6#4 == (signedi & signedj);
output1{test++} = -2#4 == (signedi | signedj);
output1{test++} = -8#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(7##4);
output1{test++} = 21##4 == (unsignedi+unsignedj);
output1{test++} = 7##4 == (unsignedi -unsignedj);
output1{test++} = 98##4 == (unsignedi *unsignedj);
output1{test++} = 98##8 == (unsignedi **unsignedj);
output1{test++} = 2##4 == (unsignedi /unsignedj);
output1{test++} = 0##4 == (unsignedi %unsignedj);
output1{test++} = 6##4 == (unsignedi & unsignedj);
output1{test++} = 15##4 == (unsignedi | unsignedj);
output1{test++} = 9##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-1#4);
output1{test++} = 5#4 == (signedi+signedj);
output1{test++} = 7#4 == (signedi -signedj);
output1{test++} = -6#4 == (signedi *signedj);
output1{test++} = -6#8 == (signedi **signedj);
output1{test++} = -6#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = -6#4 == ((MI8(6#8)) // signedj);
output1{test++} = 0#4 == ((MI8(6#8)) %%signedj);
output1{test++} = 6#4 == (signedi & signedj);
output1{test++} = -1#4 == (signedi | signedj);
output1{test++} = -7#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(8##4);
output1{test++} = 22##4 == (unsignedi+unsignedj);
output1{test++} = 6##4 == (unsignedi -unsignedj);
output1{test++} = 112##4 == (unsignedi *unsignedj);
output1{test++} = 112##8 == (unsignedi **unsignedj);
output1{test++} = 1##4 == (unsignedi /unsignedj);
output1{test++} = 6##4 == (unsignedi %unsignedj);
output1{test++} = 14##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 0##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 8##4 == (unsignedi & unsignedj);
output1{test++} = 14##4 == (unsignedi | unsignedj);
output1{test++} = 6##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(0#4);
output1{test++} = 6#4 == (signedi+signedj);
output1{test++} = 6#4 == (signedi -signedj);
output1{test++} = 0#4 == (signedi *signedj);
output1{test++} = 0#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi & signedj);
output1{test++} = 6#4 == (signedi | signedj);
output1{test++} = 6#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(9##4);
output1{test++} = 23##4 == (unsignedi+unsignedj);
output1{test++} = 5##4 == (unsignedi -unsignedj);
output1{test++} = 126##4 == (unsignedi *unsignedj);
output1{test++} = 126##8 == (unsignedi **unsignedj);
output1{test++} = 1##4 == (unsignedi /unsignedj);
output1{test++} = 5##4 == (unsignedi %unsignedj);
output1{test++} = 12##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 4##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 8##4 == (unsignedi & unsignedj);
output1{test++} = 15##4 == (unsignedi | unsignedj);
output1{test++} = 7##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(1#4);
output1{test++} = 7#4 == (signedi+signedj);
output1{test++} = 5#4 == (signedi -signedj);
output1{test++} = 6#4 == (signedi *signedj);
output1{test++} = 6#8 == (signedi **signedj);
output1{test++} = 6#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = 6#4 == ((MI8(6#8)) // signedj);
output1{test++} = 0#4 == ((MI8(6#8)) %%signedj);
output1{test++} = 0#4 == (signedi & signedj);
output1{test++} = 7#4 == (signedi | signedj);
output1{test++} = 7#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(10##4);
output1{test++} = 24##4 == (unsignedi+unsignedj);
output1{test++} = 4##4 == (unsignedi -unsignedj);
output1{test++} = 140##4 == (unsignedi *unsignedj);
output1{test++} = 140##8 == (unsignedi **unsignedj);
output1{test++} = 1##4 == (unsignedi /unsignedj);
output1{test++} = 4##4 == (unsignedi %unsignedj);
output1{test++} = 11##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 2##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 10##4 == (unsignedi & unsignedj);
output1{test++} = 14##4 == (unsignedi | unsignedj);
output1{test++} = 4##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(2#4);
output1{test++} = 8#4 == (signedi+signedj);
output1{test++} = 4#4 == (signedi -signedj);
output1{test++} = 12#4 == (signedi *signedj);
output1{test++} = 12#8 == (signedi **signedj);
output1{test++} = 3#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = 3#4 == ((MI8(6#8)) // signedj);
output1{test++} = 0#4 == ((MI8(6#8)) %%signedj);
output1{test++} = 2#4 == (signedi & signedj);
output1{test++} = 6#4 == (signedi | signedj);
output1{test++} = 4#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(11##4);
output1{test++} = 25##4 == (unsignedi+unsignedj);
output1{test++} = 3##4 == (unsignedi -unsignedj);
output1{test++} = 154##4 == (unsignedi *unsignedj);
output1{test++} = 154##8 == (unsignedi **unsignedj);
output1{test++} = 1##4 == (unsignedi /unsignedj);
output1{test++} = 3##4 == (unsignedi %unsignedj);
output1{test++} = 10##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 2##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 10##4 == (unsignedi & unsignedj);
output1{test++} = 15##4 == (unsignedi | unsignedj);
output1{test++} = 5##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(3#4);
output1{test++} = 9#4 == (signedi+signedj);
output1{test++} = 3#4 == (signedi -signedj);
output1{test++} = 18#4 == (signedi *signedj);
output1{test++} = 18#8 == (signedi **signedj);
output1{test++} = 2#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = 2#4 == ((MI8(6#8)) // signedj);
output1{test++} = 0#4 == ((MI8(6#8)) %%signedj);
output1{test++} = 2#4 == (signedi & signedj);
output1{test++} = 7#4 == (signedi | signedj);
output1{test++} = 5#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(12##4);
output1{test++} = 26##4 == (unsignedi+unsignedj);
output1{test++} = 2##4 == (unsignedi -unsignedj);
output1{test++} = 168##4 == (unsignedi *unsignedj);
output1{test++} = 168##8 == (unsignedi **unsignedj);
output1{test++} = 1##4 == (unsignedi /unsignedj);
output1{test++} = 2##4 == (unsignedi %unsignedj);
output1{test++} = 9##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 4##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 12##4 == (unsignedi & unsignedj);
output1{test++} = 14##4 == (unsignedi | unsignedj);
output1{test++} = 2##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(4#4);
output1{test++} = 10#4 == (signedi+signedj);
output1{test++} = 2#4 == (signedi -signedj);
output1{test++} = 24#4 == (signedi *signedj);
output1{test++} = 24#8 == (signedi **signedj);
output1{test++} = 1#4 == (signedi /signedj);
output1{test++} = 2#4 == (signedi %signedj);
output1{test++} = 1#4 == ((MI8(6#8)) // signedj);
output1{test++} = 2#4 == ((MI8(6#8)) %%signedj);
output1{test++} = 4#4 == (signedi & signedj);
output1{test++} = 6#4 == (signedi | signedj);
output1{test++} = 2#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(13##4);
output1{test++} = 27##4 == (unsignedi+unsignedj);
output1{test++} = 1##4 == (unsignedi -unsignedj);
output1{test++} = 182##4 == (unsignedi *unsignedj);
output1{test++} = 182##8 == (unsignedi **unsignedj);
output1{test++} = 1##4 == (unsignedi /unsignedj);
output1{test++} = 1##4 == (unsignedi %unsignedj);
output1{test++} = 8##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 8##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 12##4 == (unsignedi & unsignedj);
output1{test++} = 15##4 == (unsignedi | unsignedj);
output1{test++} = 3##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(5#4);
output1{test++} = 11#4 == (signedi+signedj);
output1{test++} = 1#4 == (signedi -signedj);
output1{test++} = 30#4 == (signedi *signedj);
output1{test++} = 30#8 == (signedi **signedj);
output1{test++} = 1#4 == (signedi /signedj);
output1{test++} = 1#4 == (signedi %signedj);
output1{test++} = 1#4 == ((MI8(6#8)) // signedj);
output1{test++} = 1#4 == ((MI8(6#8)) %%signedj);
output1{test++} = 4#4 == (signedi & signedj);
output1{test++} = 7#4 == (signedi | signedj);
output1{test++} = 3#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(14##4);
output1{test++} = 28##4 == (unsignedi+unsignedj);
output1{test++} = 0##4 == (unsignedi -unsignedj);
output1{test++} = 196##4 == (unsignedi *unsignedj);
output1{test++} = 196##8 == (unsignedi **unsignedj);
output1{test++} = 1##4 == (unsignedi /unsignedj);
output1{test++} = 0##4 == (unsignedi %unsignedj);
output1{test++} = 8##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 0##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 14##4 == (unsignedi & unsignedj);
output1{test++} = 14##4 == (unsignedi | unsignedj);
output1{test++} = 0##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 1##1 == (unsignedi ==unsignedj);
output1{test++} = 0##1 == (unsignedi !=unsignedj);
signedj = MI4(6#4);
output1{test++} = 12#4 == (signedi+signedj);
output1{test++} = 0#4 == (signedi -signedj);
output1{test++} = 36#4 == (signedi *signedj);
output1{test++} = 36#8 == (signedi **signedj);
output1{test++} = 1#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = 1#4 == ((MI8(6#8)) // signedj);
output1{test++} = 0#4 == ((MI8(6#8)) %%signedj);
output1{test++} = 6#4 == (signedi & signedj);
output1{test++} = 6#4 == (signedi | signedj);
output1{test++} = 0#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 1#1 == (signedi ==signedj);
output1{test++} = 0#1 == (signedi !=signedj);
unsignedj = MUI4(15##4);
output1{test++} = 29##4 == (unsignedi+unsignedj);
output1{test++} = -1##4 == (unsignedi -unsignedj);
output1{test++} = 210##4 == (unsignedi *unsignedj);
output1{test++} = 210##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi /unsignedj);
output1{test++} = 14##4 == (unsignedi %unsignedj);
output1{test++} = 7##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 7##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 14##4 == (unsignedi & unsignedj);
output1{test++} = 15##4 == (unsignedi | unsignedj);
output1{test++} = 1##4 == (unsignedi ^ unsignedj);
output1{test++} = 1##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 0##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(7#4);
output1{test++} = 13#4 == (signedi+signedj);
output1{test++} = -1#4 == (signedi -signedj);
output1{test++} = 42#4 == (signedi *signedj);
output1{test++} = 42#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = 6#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(6#8)) // signedj);
output1{test++} = 6#4 == ((MI8(6#8)) %%signedj);
output1{test++} = 6#4 == (signedi & signedj);
output1{test++} = 7#4 == (signedi | signedj);
output1{test++} = 1#4 == (signedi ^ signedj);
output1{test++} = 1#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 0#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedi = MUI4(15##4);
signedi = MI4(7#4);
output1{test++} = 0##4 == (~unsignedi);
output1{test++} = 8#4 == (~signedi);
unsignedj = MUI4(0##4);
output1{test++} = 15##4 == (unsignedi+unsignedj);
output1{test++} = 15##4 == (unsignedi -unsignedj);
output1{test++} = 0##4 == (unsignedi *unsignedj);
output1{test++} = 0##8 == (unsignedi **unsignedj);
output1{test++} = 0##4 == (unsignedi & unsignedj);
output1{test++} = 15##4 == (unsignedi | unsignedj);
output1{test++} = 15##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-8#4);
output1{test++} = -1#4 == (signedi+signedj);
output1{test++} = 15#4 == (signedi -signedj);
output1{test++} = -56#4 == (signedi *signedj);
output1{test++} = -56#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi /signedj);
output1{test++} = 7#4 == (signedi %signedj);
output1{test++} = 0#4 == ((MI8(7#8)) // signedj);
output1{test++} = 7#4 == ((MI8(7#8)) %%signedj);
output1{test++} = 0#4 == (signedi & signedj);
output1{test++} = -1#4 == (signedi | signedj);
output1{test++} = -1#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(1##4);
output1{test++} = 16##4 == (unsignedi+unsignedj);
output1{test++} = 14##4 == (unsignedi -unsignedj);
output1{test++} = 15##4 == (unsignedi *unsignedj);
output1{test++} = 15##8 == (unsignedi **unsignedj);
output1{test++} = 15##4 == (unsignedi /unsignedj);
output1{test++} = 0##4 == (unsignedi %unsignedj);
output1{test++} = 1##4 == (unsignedi & unsignedj);
output1{test++} = 15##4 == (unsignedi | unsignedj);
output1{test++} = 14##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-7#4);
output1{test++} = 0#4 == (signedi+signedj);
output1{test++} = 14#4 == (signedi -signedj);
output1{test++} = -49#4 == (signedi *signedj);
output1{test++} = -49#8 == (signedi **signedj);
output1{test++} = -1#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = -1#4 == ((MI8(7#8)) // signedj);
output1{test++} = 0#4 == ((MI8(7#8)) %%signedj);
output1{test++} = 1#4 == (signedi & signedj);
output1{test++} = -1#4 == (signedi | signedj);
output1{test++} = -2#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(2##4);
output1{test++} = 17##4 == (unsignedi+unsignedj);
output1{test++} = 13##4 == (unsignedi -unsignedj);
output1{test++} = 30##4 == (unsignedi *unsignedj);
output1{test++} = 30##8 == (unsignedi **unsignedj);
output1{test++} = 7##4 == (unsignedi /unsignedj);
output1{test++} = 1##4 == (unsignedi %unsignedj);
output1{test++} = 2##4 == (unsignedi & unsignedj);
output1{test++} = 15##4 == (unsignedi | unsignedj);
output1{test++} = 13##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-6#4);
output1{test++} = 1#4 == (signedi+signedj);
output1{test++} = 13#4 == (signedi -signedj);
output1{test++} = -42#4 == (signedi *signedj);
output1{test++} = -42#8 == (signedi **signedj);
output1{test++} = -1#4 == (signedi /signedj);
output1{test++} = 1#4 == (signedi %signedj);
output1{test++} = -1#4 == ((MI8(7#8)) // signedj);
output1{test++} = 1#4 == ((MI8(7#8)) %%signedj);
output1{test++} = 2#4 == (signedi & signedj);
output1{test++} = -1#4 == (signedi | signedj);
output1{test++} = -3#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(3##4);
output1{test++} = 18##4 == (unsignedi+unsignedj);
output1{test++} = 12##4 == (unsignedi -unsignedj);
output1{test++} = 45##4 == (unsignedi *unsignedj);
output1{test++} = 45##8 == (unsignedi **unsignedj);
output1{test++} = 5##4 == (unsignedi /unsignedj);
output1{test++} = 0##4 == (unsignedi %unsignedj);
output1{test++} = 3##4 == (unsignedi & unsignedj);
output1{test++} = 15##4 == (unsignedi | unsignedj);
output1{test++} = 12##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-5#4);
output1{test++} = 2#4 == (signedi+signedj);
output1{test++} = 12#4 == (signedi -signedj);
output1{test++} = -35#4 == (signedi *signedj);
output1{test++} = -35#8 == (signedi **signedj);
output1{test++} = -1#4 == (signedi /signedj);
output1{test++} = 2#4 == (signedi %signedj);
output1{test++} = -1#4 == ((MI8(7#8)) // signedj);
output1{test++} = 2#4 == ((MI8(7#8)) %%signedj);
output1{test++} = 3#4 == (signedi & signedj);
output1{test++} = -1#4 == (signedi | signedj);
output1{test++} = -4#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(4##4);
output1{test++} = 19##4 == (unsignedi+unsignedj);
output1{test++} = 11##4 == (unsignedi -unsignedj);
output1{test++} = 60##4 == (unsignedi *unsignedj);
output1{test++} = 60##8 == (unsignedi **unsignedj);
output1{test++} = 3##4 == (unsignedi /unsignedj);
output1{test++} = 3##4 == (unsignedi %unsignedj);
output1{test++} = 4##4 == (unsignedi & unsignedj);
output1{test++} = 15##4 == (unsignedi | unsignedj);
output1{test++} = 11##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-4#4);
output1{test++} = 3#4 == (signedi+signedj);
output1{test++} = 11#4 == (signedi -signedj);
output1{test++} = -28#4 == (signedi *signedj);
output1{test++} = -28#8 == (signedi **signedj);
output1{test++} = -1#4 == (signedi /signedj);
output1{test++} = 3#4 == (signedi %signedj);
output1{test++} = -1#4 == ((MI8(7#8)) // signedj);
output1{test++} = 3#4 == ((MI8(7#8)) %%signedj);
output1{test++} = 4#4 == (signedi & signedj);
output1{test++} = -1#4 == (signedi | signedj);
output1{test++} = -5#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(5##4);
output1{test++} = 20##4 == (unsignedi+unsignedj);
output1{test++} = 10##4 == (unsignedi -unsignedj);
output1{test++} = 75##4 == (unsignedi *unsignedj);
output1{test++} = 75##8 == (unsignedi **unsignedj);
output1{test++} = 3##4 == (unsignedi /unsignedj);
output1{test++} = 0##4 == (unsignedi %unsignedj);
output1{test++} = 5##4 == (unsignedi & unsignedj);
output1{test++} = 15##4 == (unsignedi | unsignedj);
output1{test++} = 10##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-3#4);
output1{test++} = 4#4 == (signedi+signedj);
output1{test++} = 10#4 == (signedi -signedj);
output1{test++} = -21#4 == (signedi *signedj);
output1{test++} = -21#8 == (signedi **signedj);
output1{test++} = -2#4 == (signedi /signedj);
output1{test++} = 1#4 == (signedi %signedj);
output1{test++} = -2#4 == ((MI8(7#8)) // signedj);
output1{test++} = 1#4 == ((MI8(7#8)) %%signedj);
output1{test++} = 5#4 == (signedi & signedj);
output1{test++} = -1#4 == (signedi | signedj);
output1{test++} = -6#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(6##4);
output1{test++} = 21##4 == (unsignedi+unsignedj);
output1{test++} = 9##4 == (unsignedi -unsignedj);
output1{test++} = 90##4 == (unsignedi *unsignedj);
output1{test++} = 90##8 == (unsignedi **unsignedj);
output1{test++} = 2##4 == (unsignedi /unsignedj);
output1{test++} = 3##4 == (unsignedi %unsignedj);
output1{test++} = 6##4 == (unsignedi & unsignedj);
output1{test++} = 15##4 == (unsignedi | unsignedj);
output1{test++} = 9##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-2#4);
output1{test++} = 5#4 == (signedi+signedj);
output1{test++} = 9#4 == (signedi -signedj);
output1{test++} = -14#4 == (signedi *signedj);
output1{test++} = -14#8 == (signedi **signedj);
output1{test++} = -3#4 == (signedi /signedj);
output1{test++} = 1#4 == (signedi %signedj);
output1{test++} = -3#4 == ((MI8(7#8)) // signedj);
output1{test++} = 1#4 == ((MI8(7#8)) %%signedj);
output1{test++} = 6#4 == (signedi & signedj);
output1{test++} = -1#4 == (signedi | signedj);
output1{test++} = -7#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(7##4);
output1{test++} = 22##4 == (unsignedi+unsignedj);
output1{test++} = 8##4 == (unsignedi -unsignedj);
output1{test++} = 105##4 == (unsignedi *unsignedj);
output1{test++} = 105##8 == (unsignedi **unsignedj);
output1{test++} = 2##4 == (unsignedi /unsignedj);
output1{test++} = 1##4 == (unsignedi %unsignedj);
output1{test++} = 7##4 == (unsignedi & unsignedj);
output1{test++} = 15##4 == (unsignedi | unsignedj);
output1{test++} = 8##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(-1#4);
output1{test++} = 6#4 == (signedi+signedj);
output1{test++} = 8#4 == (signedi -signedj);
output1{test++} = -7#4 == (signedi *signedj);
output1{test++} = -7#8 == (signedi **signedj);
output1{test++} = -7#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = -7#4 == ((MI8(7#8)) // signedj);
output1{test++} = 0#4 == ((MI8(7#8)) %%signedj);
output1{test++} = 7#4 == (signedi & signedj);
output1{test++} = -1#4 == (signedi | signedj);
output1{test++} = -8#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(8##4);
output1{test++} = 23##4 == (unsignedi+unsignedj);
output1{test++} = 7##4 == (unsignedi -unsignedj);
output1{test++} = 120##4 == (unsignedi *unsignedj);
output1{test++} = 120##8 == (unsignedi **unsignedj);
output1{test++} = 1##4 == (unsignedi /unsignedj);
output1{test++} = 7##4 == (unsignedi %unsignedj);
output1{test++} = 15##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 0##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 8##4 == (unsignedi & unsignedj);
output1{test++} = 15##4 == (unsignedi | unsignedj);
output1{test++} = 7##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(0#4);
output1{test++} = 7#4 == (signedi+signedj);
output1{test++} = 7#4 == (signedi -signedj);
output1{test++} = 0#4 == (signedi *signedj);
output1{test++} = 0#8 == (signedi **signedj);
output1{test++} = 0#4 == (signedi & signedj);
output1{test++} = 7#4 == (signedi | signedj);
output1{test++} = 7#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(9##4);
output1{test++} = 24##4 == (unsignedi+unsignedj);
output1{test++} = 6##4 == (unsignedi -unsignedj);
output1{test++} = 135##4 == (unsignedi *unsignedj);
output1{test++} = 135##8 == (unsignedi **unsignedj);
output1{test++} = 1##4 == (unsignedi /unsignedj);
output1{test++} = 6##4 == (unsignedi %unsignedj);
output1{test++} = 13##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 3##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 9##4 == (unsignedi & unsignedj);
output1{test++} = 15##4 == (unsignedi | unsignedj);
output1{test++} = 6##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(1#4);
output1{test++} = 8#4 == (signedi+signedj);
output1{test++} = 6#4 == (signedi -signedj);
output1{test++} = 7#4 == (signedi *signedj);
output1{test++} = 7#8 == (signedi **signedj);
output1{test++} = 7#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = 7#4 == ((MI8(7#8)) // signedj);
output1{test++} = 0#4 == ((MI8(7#8)) %%signedj);
output1{test++} = 1#4 == (signedi & signedj);
output1{test++} = 7#4 == (signedi | signedj);
output1{test++} = 6#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(10##4);
output1{test++} = 25##4 == (unsignedi+unsignedj);
output1{test++} = 5##4 == (unsignedi -unsignedj);
output1{test++} = 150##4 == (unsignedi *unsignedj);
output1{test++} = 150##8 == (unsignedi **unsignedj);
output1{test++} = 1##4 == (unsignedi /unsignedj);
output1{test++} = 5##4 == (unsignedi %unsignedj);
output1{test++} = 12##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 0##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 10##4 == (unsignedi & unsignedj);
output1{test++} = 15##4 == (unsignedi | unsignedj);
output1{test++} = 5##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(2#4);
output1{test++} = 9#4 == (signedi+signedj);
output1{test++} = 5#4 == (signedi -signedj);
output1{test++} = 14#4 == (signedi *signedj);
output1{test++} = 14#8 == (signedi **signedj);
output1{test++} = 3#4 == (signedi /signedj);
output1{test++} = 1#4 == (signedi %signedj);
output1{test++} = 3#4 == ((MI8(7#8)) // signedj);
output1{test++} = 1#4 == ((MI8(7#8)) %%signedj);
output1{test++} = 2#4 == (signedi & signedj);
output1{test++} = 7#4 == (signedi | signedj);
output1{test++} = 5#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(11##4);
output1{test++} = 26##4 == (unsignedi+unsignedj);
output1{test++} = 4##4 == (unsignedi -unsignedj);
output1{test++} = 165##4 == (unsignedi *unsignedj);
output1{test++} = 165##8 == (unsignedi **unsignedj);
output1{test++} = 1##4 == (unsignedi /unsignedj);
output1{test++} = 4##4 == (unsignedi %unsignedj);
output1{test++} = 10##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 10##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 11##4 == (unsignedi & unsignedj);
output1{test++} = 15##4 == (unsignedi | unsignedj);
output1{test++} = 4##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(3#4);
output1{test++} = 10#4 == (signedi+signedj);
output1{test++} = 4#4 == (signedi -signedj);
output1{test++} = 21#4 == (signedi *signedj);
output1{test++} = 21#8 == (signedi **signedj);
output1{test++} = 2#4 == (signedi /signedj);
output1{test++} = 1#4 == (signedi %signedj);
output1{test++} = 2#4 == ((MI8(7#8)) // signedj);
output1{test++} = 1#4 == ((MI8(7#8)) %%signedj);
output1{test++} = 3#4 == (signedi & signedj);
output1{test++} = 7#4 == (signedi | signedj);
output1{test++} = 4#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(12##4);
output1{test++} = 27##4 == (unsignedi+unsignedj);
output1{test++} = 3##4 == (unsignedi -unsignedj);
output1{test++} = 180##4 == (unsignedi *unsignedj);
output1{test++} = 180##8 == (unsignedi **unsignedj);
output1{test++} = 1##4 == (unsignedi /unsignedj);
output1{test++} = 3##4 == (unsignedi %unsignedj);
output1{test++} = 10##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 0##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 12##4 == (unsignedi & unsignedj);
output1{test++} = 15##4 == (unsignedi | unsignedj);
output1{test++} = 3##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(4#4);
output1{test++} = 11#4 == (signedi+signedj);
output1{test++} = 3#4 == (signedi -signedj);
output1{test++} = 28#4 == (signedi *signedj);
output1{test++} = 28#8 == (signedi **signedj);
output1{test++} = 1#4 == (signedi /signedj);
output1{test++} = 3#4 == (signedi %signedj);
output1{test++} = 1#4 == ((MI8(7#8)) // signedj);
output1{test++} = 3#4 == ((MI8(7#8)) %%signedj);
output1{test++} = 4#4 == (signedi & signedj);
output1{test++} = 7#4 == (signedi | signedj);
output1{test++} = 3#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(13##4);
output1{test++} = 28##4 == (unsignedi+unsignedj);
output1{test++} = 2##4 == (unsignedi -unsignedj);
output1{test++} = 195##4 == (unsignedi *unsignedj);
output1{test++} = 195##8 == (unsignedi **unsignedj);
output1{test++} = 1##4 == (unsignedi /unsignedj);
output1{test++} = 2##4 == (unsignedi %unsignedj);
output1{test++} = 9##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 3##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 13##4 == (unsignedi & unsignedj);
output1{test++} = 15##4 == (unsignedi | unsignedj);
output1{test++} = 2##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(5#4);
output1{test++} = 12#4 == (signedi+signedj);
output1{test++} = 2#4 == (signedi -signedj);
output1{test++} = 35#4 == (signedi *signedj);
output1{test++} = 35#8 == (signedi **signedj);
output1{test++} = 1#4 == (signedi /signedj);
output1{test++} = 2#4 == (signedi %signedj);
output1{test++} = 1#4 == ((MI8(7#8)) // signedj);
output1{test++} = 2#4 == ((MI8(7#8)) %%signedj);
output1{test++} = 5#4 == (signedi & signedj);
output1{test++} = 7#4 == (signedi | signedj);
output1{test++} = 2#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(14##4);
output1{test++} = 29##4 == (unsignedi+unsignedj);
output1{test++} = 1##4 == (unsignedi -unsignedj);
output1{test++} = 210##4 == (unsignedi *unsignedj);
output1{test++} = 210##8 == (unsignedi **unsignedj);
output1{test++} = 1##4 == (unsignedi /unsignedj);
output1{test++} = 1##4 == (unsignedi %unsignedj);
output1{test++} = 8##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 8##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 14##4 == (unsignedi & unsignedj);
output1{test++} = 15##4 == (unsignedi | unsignedj);
output1{test++} = 1##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 0##1 == (unsignedi <= unsignedj);
output1{test++} = 1##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 0##1 == (unsignedi ==unsignedj);
output1{test++} = 1##1 == (unsignedi !=unsignedj);
signedj = MI4(6#4);
output1{test++} = 13#4 == (signedi+signedj);
output1{test++} = 1#4 == (signedi -signedj);
output1{test++} = 42#4 == (signedi *signedj);
output1{test++} = 42#8 == (signedi **signedj);
output1{test++} = 1#4 == (signedi /signedj);
output1{test++} = 1#4 == (signedi %signedj);
output1{test++} = 1#4 == ((MI8(7#8)) // signedj);
output1{test++} = 1#4 == ((MI8(7#8)) %%signedj);
output1{test++} = 6#4 == (signedi & signedj);
output1{test++} = 7#4 == (signedi | signedj);
output1{test++} = 1#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 0#1 == (signedi <= signedj);
output1{test++} = 1#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 0#1 == (signedi ==signedj);
output1{test++} = 1#1 == (signedi !=signedj);
unsignedj = MUI4(15##4);
output1{test++} = 30##4 == (unsignedi+unsignedj);
output1{test++} = 0##4 == (unsignedi -unsignedj);
output1{test++} = 225##4 == (unsignedi *unsignedj);
output1{test++} = 225##8 == (unsignedi **unsignedj);
output1{test++} = 1##4 == (unsignedi /unsignedj);
output1{test++} = 0##4 == (unsignedi %unsignedj);
output1{test++} = 8##4 == ((unsignedi**(2##4*4##4)) //unsignedj);
output1{test++} = 0##4 == ((unsignedi**8##4) %%unsignedj);
output1{test++} = 15##4 == (unsignedi & unsignedj);
output1{test++} = 15##4 == (unsignedi | unsignedj);
output1{test++} = 0##4 == (unsignedi ^ unsignedj);
output1{test++} = 0##1 == (unsignedi < unsignedj);
output1{test++} = 1##1 == (unsignedi <= unsignedj);
output1{test++} = 0##1 == (unsignedi > unsignedj);
output1{test++} = 1##1 == (unsignedi >=unsignedj);
output1{test++} = 1##1 == (unsignedi ==unsignedj);
output1{test++} = 0##1 == (unsignedi !=unsignedj);
signedj = MI4(7#4);
output1{test++} = 14#4 == (signedi+signedj);
output1{test++} = 0#4 == (signedi -signedj);
output1{test++} = 49#4 == (signedi *signedj);
output1{test++} = 49#8 == (signedi **signedj);
output1{test++} = 1#4 == (signedi /signedj);
output1{test++} = 0#4 == (signedi %signedj);
output1{test++} = 1#4 == ((MI8(7#8)) // signedj);
output1{test++} = 0#4 == ((MI8(7#8)) %%signedj);
output1{test++} = 7#4 == (signedi & signedj);
output1{test++} = 7#4 == (signedi | signedj);
output1{test++} = 0#4 == (signedi ^ signedj);
output1{test++} = 0#1 == (signedi < signedj);
output1{test++} = 1#1 == (signedi <= signedj);
output1{test++} = 0#1 == (signedi > signedj);
output1{test++} = 1#1 == (signedi >=signedj);
output1{test++} = 1#1 == (signedi ==signedj);
output1{test++} = 0#1 == (signedi !=signedj);



output1{test++} = 1#5 == (-16#9 // -16#5);
output1{test++} = 0#5 == (-16#9 %% -16#5);
output1{test++} = 1#5 == (-16#9 // -15#5);
output1{test++} = -1#5 == (-16#9 %% -15#5);
output1{test++} = 1#5 == (-16#9 // -14#5);
output1{test++} = -2#5 == (-16#9 %% -14#5);
output1{test++} = 1#5 == (-16#9 // -13#5);
output1{test++} = -3#5 == (-16#9 %% -13#5);
output1{test++} = 1#5 == (-16#9 // -12#5);
output1{test++} = -4#5 == (-16#9 %% -12#5);
output1{test++} = 1#5 == (-16#9 // -11#5);
output1{test++} = -5#5 == (-16#9 %% -11#5);
output1{test++} = 1#5 == (-16#9 // -10#5);
output1{test++} = -6#5 == (-16#9 %% -10#5);
output1{test++} = 1#5 == (-16#9 // -9#5);
output1{test++} = -7#5 == (-16#9 %% -9#5);
output1{test++} = 2#5 == (-16#9 // -8#5);
output1{test++} = 0#5 == (-16#9 %% -8#5);
output1{test++} = 2#5 == (-16#9 // -7#5);
output1{test++} = -2#5 == (-16#9 %% -7#5);
output1{test++} = 2#5 == (-16#9 // -6#5);
output1{test++} = -4#5 == (-16#9 %% -6#5);
output1{test++} = 3#5 == (-16#9 // -5#5);
output1{test++} = -1#5 == (-16#9 %% -5#5);
output1{test++} = 4#5 == (-16#9 // -4#5);
output1{test++} = 0#5 == (-16#9 %% -4#5);
output1{test++} = 5#5 == (-16#9 // -3#5);
output1{test++} = -1#5 == (-16#9 %% -3#5);
output1{test++} = 8#5 == (-16#9 // -2#5);
output1{test++} = 0#5 == (-16#9 %% -2#5);
output1{test++} = 16#5 == (-16#9 // -1#5);
output1{test++} = 0#5 == (-16#9 %% -1#5);
output1{test++} = -16#5 == (-16#9 // 1#5);
output1{test++} = 0#5 == (-16#9 %% 1#5);
output1{test++} = -8#5 == (-16#9 // 2#5);
output1{test++} = 0#5 == (-16#9 %% 2#5);
output1{test++} = -5#5 == (-16#9 // 3#5);
output1{test++} = -1#5 == (-16#9 %% 3#5);
output1{test++} = -4#5 == (-16#9 // 4#5);
output1{test++} = 0#5 == (-16#9 %% 4#5);
output1{test++} = -3#5 == (-16#9 // 5#5);
output1{test++} = -1#5 == (-16#9 %% 5#5);
output1{test++} = -2#5 == (-16#9 // 6#5);
output1{test++} = -4#5 == (-16#9 %% 6#5);
output1{test++} = -2#5 == (-16#9 // 7#5);
output1{test++} = -2#5 == (-16#9 %% 7#5);
output1{test++} = -2#5 == (-16#9 // 8#5);
output1{test++} = 0#5 == (-16#9 %% 8#5);
output1{test++} = -1#5 == (-16#9 // 9#5);
output1{test++} = -7#5 == (-16#9 %% 9#5);
output1{test++} = -1#5 == (-16#9 // 10#5);
output1{test++} = -6#5 == (-16#9 %% 10#5);
output1{test++} = -1#5 == (-16#9 // 11#5);
output1{test++} = -5#5 == (-16#9 %% 11#5);
output1{test++} = -1#5 == (-16#9 // 12#5);
output1{test++} = -4#5 == (-16#9 %% 12#5);
output1{test++} = -1#5 == (-16#9 // 13#5);
output1{test++} = -3#5 == (-16#9 %% 13#5);
output1{test++} = -1#5 == (-16#9 // 14#5);
output1{test++} = -2#5 == (-16#9 %% 14#5);
output1{test++} = -1#5 == (-16#9 // 15#5);
output1{test++} = -1#5 == (-16#9 %% 15#5);
output1{test++} = 0#5 == (-15#9 // -16#5);
output1{test++} = -15#5 == (-15#9 %% -16#5);
output1{test++} = 1#5 == (-15#9 // -15#5);
output1{test++} = 0#5 == (-15#9 %% -15#5);
output1{test++} = 1#5 == (-15#9 // -14#5);
output1{test++} = -1#5 == (-15#9 %% -14#5);
output1{test++} = 1#5 == (-15#9 // -13#5);
output1{test++} = -2#5 == (-15#9 %% -13#5);
output1{test++} = 1#5 == (-15#9 // -12#5);
output1{test++} = -3#5 == (-15#9 %% -12#5);
output1{test++} = 1#5 == (-15#9 // -11#5);
output1{test++} = -4#5 == (-15#9 %% -11#5);
output1{test++} = 1#5 == (-15#9 // -10#5);
output1{test++} = -5#5 == (-15#9 %% -10#5);
output1{test++} = 1#5 == (-15#9 // -9#5);
output1{test++} = -6#5 == (-15#9 %% -9#5);
output1{test++} = 1#5 == (-15#9 // -8#5);
output1{test++} = -7#5 == (-15#9 %% -8#5);
output1{test++} = 2#5 == (-15#9 // -7#5);
output1{test++} = -1#5 == (-15#9 %% -7#5);
output1{test++} = 2#5 == (-15#9 // -6#5);
output1{test++} = -3#5 == (-15#9 %% -6#5);
output1{test++} = 3#5 == (-15#9 // -5#5);
output1{test++} = 0#5 == (-15#9 %% -5#5);
output1{test++} = 3#5 == (-15#9 // -4#5);
output1{test++} = -3#5 == (-15#9 %% -4#5);
output1{test++} = 5#5 == (-15#9 // -3#5);
output1{test++} = 0#5 == (-15#9 %% -3#5);
output1{test++} = 7#5 == (-15#9 // -2#5);
output1{test++} = -1#5 == (-15#9 %% -2#5);
output1{test++} = 15#5 == (-15#9 // -1#5);
output1{test++} = 0#5 == (-15#9 %% -1#5);
output1{test++} = -15#5 == (-15#9 // 1#5);
output1{test++} = 0#5 == (-15#9 %% 1#5);
output1{test++} = -7#5 == (-15#9 // 2#5);
output1{test++} = -1#5 == (-15#9 %% 2#5);
output1{test++} = -5#5 == (-15#9 // 3#5);
output1{test++} = 0#5 == (-15#9 %% 3#5);
output1{test++} = -3#5 == (-15#9 // 4#5);
output1{test++} = -3#5 == (-15#9 %% 4#5);
output1{test++} = -3#5 == (-15#9 // 5#5);
output1{test++} = 0#5 == (-15#9 %% 5#5);
output1{test++} = -2#5 == (-15#9 // 6#5);
output1{test++} = -3#5 == (-15#9 %% 6#5);
output1{test++} = -2#5 == (-15#9 // 7#5);
output1{test++} = -1#5 == (-15#9 %% 7#5);
output1{test++} = -1#5 == (-15#9 // 8#5);
output1{test++} = -7#5 == (-15#9 %% 8#5);
output1{test++} = -1#5 == (-15#9 // 9#5);
output1{test++} = -6#5 == (-15#9 %% 9#5);
output1{test++} = -1#5 == (-15#9 // 10#5);
output1{test++} = -5#5 == (-15#9 %% 10#5);
output1{test++} = -1#5 == (-15#9 // 11#5);
output1{test++} = -4#5 == (-15#9 %% 11#5);
output1{test++} = -1#5 == (-15#9 // 12#5);
output1{test++} = -3#5 == (-15#9 %% 12#5);
output1{test++} = -1#5 == (-15#9 // 13#5);
output1{test++} = -2#5 == (-15#9 %% 13#5);
output1{test++} = -1#5 == (-15#9 // 14#5);
output1{test++} = -1#5 == (-15#9 %% 14#5);
output1{test++} = -1#5 == (-15#9 // 15#5);
output1{test++} = 0#5 == (-15#9 %% 15#5);
output1{test++} = 0#5 == (-14#9 // -16#5);
output1{test++} = -14#5 == (-14#9 %% -16#5);
output1{test++} = 0#5 == (-14#9 // -15#5);
output1{test++} = -14#5 == (-14#9 %% -15#5);
output1{test++} = 1#5 == (-14#9 // -14#5);
output1{test++} = 0#5 == (-14#9 %% -14#5);
output1{test++} = 1#5 == (-14#9 // -13#5);
output1{test++} = -1#5 == (-14#9 %% -13#5);
output1{test++} = 1#5 == (-14#9 // -12#5);
output1{test++} = -2#5 == (-14#9 %% -12#5);
output1{test++} = 1#5 == (-14#9 // -11#5);
output1{test++} = -3#5 == (-14#9 %% -11#5);
output1{test++} = 1#5 == (-14#9 // -10#5);
output1{test++} = -4#5 == (-14#9 %% -10#5);
output1{test++} = 1#5 == (-14#9 // -9#5);
output1{test++} = -5#5 == (-14#9 %% -9#5);
output1{test++} = 1#5 == (-14#9 // -8#5);
output1{test++} = -6#5 == (-14#9 %% -8#5);
output1{test++} = 2#5 == (-14#9 // -7#5);
output1{test++} = 0#5 == (-14#9 %% -7#5);
output1{test++} = 2#5 == (-14#9 // -6#5);
output1{test++} = -2#5 == (-14#9 %% -6#5);
output1{test++} = 2#5 == (-14#9 // -5#5);
output1{test++} = -4#5 == (-14#9 %% -5#5);
output1{test++} = 3#5 == (-14#9 // -4#5);
output1{test++} = -2#5 == (-14#9 %% -4#5);
output1{test++} = 4#5 == (-14#9 // -3#5);
output1{test++} = -2#5 == (-14#9 %% -3#5);
output1{test++} = 7#5 == (-14#9 // -2#5);
output1{test++} = 0#5 == (-14#9 %% -2#5);
output1{test++} = 14#5 == (-14#9 // -1#5);
output1{test++} = 0#5 == (-14#9 %% -1#5);
output1{test++} = -14#5 == (-14#9 // 1#5);
output1{test++} = 0#5 == (-14#9 %% 1#5);
output1{test++} = -7#5 == (-14#9 // 2#5);
output1{test++} = 0#5 == (-14#9 %% 2#5);
output1{test++} = -4#5 == (-14#9 // 3#5);
output1{test++} = -2#5 == (-14#9 %% 3#5);
output1{test++} = -3#5 == (-14#9 // 4#5);
output1{test++} = -2#5 == (-14#9 %% 4#5);
output1{test++} = -2#5 == (-14#9 // 5#5);
output1{test++} = -4#5 == (-14#9 %% 5#5);
output1{test++} = -2#5 == (-14#9 // 6#5);
output1{test++} = -2#5 == (-14#9 %% 6#5);
output1{test++} = -2#5 == (-14#9 // 7#5);
output1{test++} = 0#5 == (-14#9 %% 7#5);
output1{test++} = -1#5 == (-14#9 // 8#5);
output1{test++} = -6#5 == (-14#9 %% 8#5);
output1{test++} = -1#5 == (-14#9 // 9#5);
output1{test++} = -5#5 == (-14#9 %% 9#5);
output1{test++} = -1#5 == (-14#9 // 10#5);
output1{test++} = -4#5 == (-14#9 %% 10#5);
output1{test++} = -1#5 == (-14#9 // 11#5);
output1{test++} = -3#5 == (-14#9 %% 11#5);
output1{test++} = -1#5 == (-14#9 // 12#5);
output1{test++} = -2#5 == (-14#9 %% 12#5);
output1{test++} = -1#5 == (-14#9 // 13#5);
output1{test++} = -1#5 == (-14#9 %% 13#5);
output1{test++} = -1#5 == (-14#9 // 14#5);
output1{test++} = 0#5 == (-14#9 %% 14#5);
output1{test++} = 0#5 == (-14#9 // 15#5);
output1{test++} = -14#5 == (-14#9 %% 15#5);
output1{test++} = 0#5 == (-13#9 // -16#5);
output1{test++} = -13#5 == (-13#9 %% -16#5);
output1{test++} = 0#5 == (-13#9 // -15#5);
output1{test++} = -13#5 == (-13#9 %% -15#5);
output1{test++} = 0#5 == (-13#9 // -14#5);
output1{test++} = -13#5 == (-13#9 %% -14#5);
output1{test++} = 1#5 == (-13#9 // -13#5);
output1{test++} = 0#5 == (-13#9 %% -13#5);
output1{test++} = 1#5 == (-13#9 // -12#5);
output1{test++} = -1#5 == (-13#9 %% -12#5);
output1{test++} = 1#5 == (-13#9 // -11#5);
output1{test++} = -2#5 == (-13#9 %% -11#5);
output1{test++} = 1#5 == (-13#9 // -10#5);
output1{test++} = -3#5 == (-13#9 %% -10#5);
output1{test++} = 1#5 == (-13#9 // -9#5);
output1{test++} = -4#5 == (-13#9 %% -9#5);
output1{test++} = 1#5 == (-13#9 // -8#5);
output1{test++} = -5#5 == (-13#9 %% -8#5);
output1{test++} = 1#5 == (-13#9 // -7#5);
output1{test++} = -6#5 == (-13#9 %% -7#5);
output1{test++} = 2#5 == (-13#9 // -6#5);
output1{test++} = -1#5 == (-13#9 %% -6#5);
output1{test++} = 2#5 == (-13#9 // -5#5);
output1{test++} = -3#5 == (-13#9 %% -5#5);
output1{test++} = 3#5 == (-13#9 // -4#5);
output1{test++} = -1#5 == (-13#9 %% -4#5);
output1{test++} = 4#5 == (-13#9 // -3#5);
output1{test++} = -1#5 == (-13#9 %% -3#5);
output1{test++} = 6#5 == (-13#9 // -2#5);
output1{test++} = -1#5 == (-13#9 %% -2#5);
output1{test++} = 13#5 == (-13#9 // -1#5);
output1{test++} = 0#5 == (-13#9 %% -1#5);
output1{test++} = -13#5 == (-13#9 // 1#5);
output1{test++} = 0#5 == (-13#9 %% 1#5);
output1{test++} = -6#5 == (-13#9 // 2#5);
output1{test++} = -1#5 == (-13#9 %% 2#5);
output1{test++} = -4#5 == (-13#9 // 3#5);
output1{test++} = -1#5 == (-13#9 %% 3#5);
output1{test++} = -3#5 == (-13#9 // 4#5);
output1{test++} = -1#5 == (-13#9 %% 4#5);
output1{test++} = -2#5 == (-13#9 // 5#5);
output1{test++} = -3#5 == (-13#9 %% 5#5);
output1{test++} = -2#5 == (-13#9 // 6#5);
output1{test++} = -1#5 == (-13#9 %% 6#5);
output1{test++} = -1#5 == (-13#9 // 7#5);
output1{test++} = -6#5 == (-13#9 %% 7#5);
output1{test++} = -1#5 == (-13#9 // 8#5);
output1{test++} = -5#5 == (-13#9 %% 8#5);
output1{test++} = -1#5 == (-13#9 // 9#5);
output1{test++} = -4#5 == (-13#9 %% 9#5);
output1{test++} = -1#5 == (-13#9 // 10#5);
output1{test++} = -3#5 == (-13#9 %% 10#5);
output1{test++} = -1#5 == (-13#9 // 11#5);
output1{test++} = -2#5 == (-13#9 %% 11#5);
output1{test++} = -1#5 == (-13#9 // 12#5);
output1{test++} = -1#5 == (-13#9 %% 12#5);
output1{test++} = -1#5 == (-13#9 // 13#5);
output1{test++} = 0#5 == (-13#9 %% 13#5);
output1{test++} = 0#5 == (-13#9 // 14#5);
output1{test++} = -13#5 == (-13#9 %% 14#5);
output1{test++} = 0#5 == (-13#9 // 15#5);
output1{test++} = -13#5 == (-13#9 %% 15#5);
output1{test++} = 0#5 == (-12#9 // -16#5);
output1{test++} = -12#5 == (-12#9 %% -16#5);
output1{test++} = 0#5 == (-12#9 // -15#5);
output1{test++} = -12#5 == (-12#9 %% -15#5);
output1{test++} = 0#5 == (-12#9 // -14#5);
output1{test++} = -12#5 == (-12#9 %% -14#5);
output1{test++} = 0#5 == (-12#9 // -13#5);
output1{test++} = -12#5 == (-12#9 %% -13#5);
output1{test++} = 1#5 == (-12#9 // -12#5);
output1{test++} = 0#5 == (-12#9 %% -12#5);
output1{test++} = 1#5 == (-12#9 // -11#5);
output1{test++} = -1#5 == (-12#9 %% -11#5);
output1{test++} = 1#5 == (-12#9 // -10#5);
output1{test++} = -2#5 == (-12#9 %% -10#5);
output1{test++} = 1#5 == (-12#9 // -9#5);
output1{test++} = -3#5 == (-12#9 %% -9#5);
output1{test++} = 1#5 == (-12#9 // -8#5);
output1{test++} = -4#5 == (-12#9 %% -8#5);
output1{test++} = 1#5 == (-12#9 // -7#5);
output1{test++} = -5#5 == (-12#9 %% -7#5);
output1{test++} = 2#5 == (-12#9 // -6#5);
output1{test++} = 0#5 == (-12#9 %% -6#5);
output1{test++} = 2#5 == (-12#9 // -5#5);
output1{test++} = -2#5 == (-12#9 %% -5#5);
output1{test++} = 3#5 == (-12#9 // -4#5);
output1{test++} = 0#5 == (-12#9 %% -4#5);
output1{test++} = 4#5 == (-12#9 // -3#5);
output1{test++} = 0#5 == (-12#9 %% -3#5);
output1{test++} = 6#5 == (-12#9 // -2#5);
output1{test++} = 0#5 == (-12#9 %% -2#5);
output1{test++} = 12#5 == (-12#9 // -1#5);
output1{test++} = 0#5 == (-12#9 %% -1#5);
output1{test++} = -12#5 == (-12#9 // 1#5);
output1{test++} = 0#5 == (-12#9 %% 1#5);
output1{test++} = -6#5 == (-12#9 // 2#5);
output1{test++} = 0#5 == (-12#9 %% 2#5);
output1{test++} = -4#5 == (-12#9 // 3#5);
output1{test++} = 0#5 == (-12#9 %% 3#5);
output1{test++} = -3#5 == (-12#9 // 4#5);
output1{test++} = 0#5 == (-12#9 %% 4#5);
output1{test++} = -2#5 == (-12#9 // 5#5);
output1{test++} = -2#5 == (-12#9 %% 5#5);
output1{test++} = -2#5 == (-12#9 // 6#5);
output1{test++} = 0#5 == (-12#9 %% 6#5);
output1{test++} = -1#5 == (-12#9 // 7#5);
output1{test++} = -5#5 == (-12#9 %% 7#5);
output1{test++} = -1#5 == (-12#9 // 8#5);
output1{test++} = -4#5 == (-12#9 %% 8#5);
output1{test++} = -1#5 == (-12#9 // 9#5);
output1{test++} = -3#5 == (-12#9 %% 9#5);
output1{test++} = -1#5 == (-12#9 // 10#5);
output1{test++} = -2#5 == (-12#9 %% 10#5);
output1{test++} = -1#5 == (-12#9 // 11#5);
output1{test++} = -1#5 == (-12#9 %% 11#5);
output1{test++} = -1#5 == (-12#9 // 12#5);
output1{test++} = 0#5 == (-12#9 %% 12#5);
output1{test++} = 0#5 == (-12#9 // 13#5);
output1{test++} = -12#5 == (-12#9 %% 13#5);
output1{test++} = 0#5 == (-12#9 // 14#5);
output1{test++} = -12#5 == (-12#9 %% 14#5);
output1{test++} = 0#5 == (-12#9 // 15#5);
output1{test++} = -12#5 == (-12#9 %% 15#5);
output1{test++} = 0#5 == (-11#9 // -16#5);
output1{test++} = -11#5 == (-11#9 %% -16#5);
output1{test++} = 0#5 == (-11#9 // -15#5);
output1{test++} = -11#5 == (-11#9 %% -15#5);
output1{test++} = 0#5 == (-11#9 // -14#5);
output1{test++} = -11#5 == (-11#9 %% -14#5);
output1{test++} = 0#5 == (-11#9 // -13#5);
output1{test++} = -11#5 == (-11#9 %% -13#5);
output1{test++} = 0#5 == (-11#9 // -12#5);
output1{test++} = -11#5 == (-11#9 %% -12#5);
output1{test++} = 1#5 == (-11#9 // -11#5);
output1{test++} = 0#5 == (-11#9 %% -11#5);
output1{test++} = 1#5 == (-11#9 // -10#5);
output1{test++} = -1#5 == (-11#9 %% -10#5);
output1{test++} = 1#5 == (-11#9 // -9#5);
output1{test++} = -2#5 == (-11#9 %% -9#5);
output1{test++} = 1#5 == (-11#9 // -8#5);
output1{test++} = -3#5 == (-11#9 %% -8#5);
output1{test++} = 1#5 == (-11#9 // -7#5);
output1{test++} = -4#5 == (-11#9 %% -7#5);
output1{test++} = 1#5 == (-11#9 // -6#5);
output1{test++} = -5#5 == (-11#9 %% -6#5);
output1{test++} = 2#5 == (-11#9 // -5#5);
output1{test++} = -1#5 == (-11#9 %% -5#5);
output1{test++} = 2#5 == (-11#9 // -4#5);
output1{test++} = -3#5 == (-11#9 %% -4#5);
output1{test++} = 3#5 == (-11#9 // -3#5);
output1{test++} = -2#5 == (-11#9 %% -3#5);
output1{test++} = 5#5 == (-11#9 // -2#5);
output1{test++} = -1#5 == (-11#9 %% -2#5);
output1{test++} = 11#5 == (-11#9 // -1#5);
output1{test++} = 0#5 == (-11#9 %% -1#5);
output1{test++} = -11#5 == (-11#9 // 1#5);
output1{test++} = 0#5 == (-11#9 %% 1#5);
output1{test++} = -5#5 == (-11#9 // 2#5);
output1{test++} = -1#5 == (-11#9 %% 2#5);
output1{test++} = -3#5 == (-11#9 // 3#5);
output1{test++} = -2#5 == (-11#9 %% 3#5);
output1{test++} = -2#5 == (-11#9 // 4#5);
output1{test++} = -3#5 == (-11#9 %% 4#5);
output1{test++} = -2#5 == (-11#9 // 5#5);
output1{test++} = -1#5 == (-11#9 %% 5#5);
output1{test++} = -1#5 == (-11#9 // 6#5);
output1{test++} = -5#5 == (-11#9 %% 6#5);
output1{test++} = -1#5 == (-11#9 // 7#5);
output1{test++} = -4#5 == (-11#9 %% 7#5);
output1{test++} = -1#5 == (-11#9 // 8#5);
output1{test++} = -3#5 == (-11#9 %% 8#5);
output1{test++} = -1#5 == (-11#9 // 9#5);
output1{test++} = -2#5 == (-11#9 %% 9#5);
output1{test++} = -1#5 == (-11#9 // 10#5);
output1{test++} = -1#5 == (-11#9 %% 10#5);
output1{test++} = -1#5 == (-11#9 // 11#5);
output1{test++} = 0#5 == (-11#9 %% 11#5);
output1{test++} = 0#5 == (-11#9 // 12#5);
output1{test++} = -11#5 == (-11#9 %% 12#5);
output1{test++} = 0#5 == (-11#9 // 13#5);
output1{test++} = -11#5 == (-11#9 %% 13#5);
output1{test++} = 0#5 == (-11#9 // 14#5);
output1{test++} = -11#5 == (-11#9 %% 14#5);
output1{test++} = 0#5 == (-11#9 // 15#5);
output1{test++} = -11#5 == (-11#9 %% 15#5);
output1{test++} = 0#5 == (-10#9 // -16#5);
output1{test++} = -10#5 == (-10#9 %% -16#5);
output1{test++} = 0#5 == (-10#9 // -15#5);
output1{test++} = -10#5 == (-10#9 %% -15#5);
output1{test++} = 0#5 == (-10#9 // -14#5);
output1{test++} = -10#5 == (-10#9 %% -14#5);
output1{test++} = 0#5 == (-10#9 // -13#5);
output1{test++} = -10#5 == (-10#9 %% -13#5);
output1{test++} = 0#5 == (-10#9 // -12#5);
output1{test++} = -10#5 == (-10#9 %% -12#5);
output1{test++} = 0#5 == (-10#9 // -11#5);
output1{test++} = -10#5 == (-10#9 %% -11#5);
output1{test++} = 1#5 == (-10#9 // -10#5);
output1{test++} = 0#5 == (-10#9 %% -10#5);
output1{test++} = 1#5 == (-10#9 // -9#5);
output1{test++} = -1#5 == (-10#9 %% -9#5);
output1{test++} = 1#5 == (-10#9 // -8#5);
output1{test++} = -2#5 == (-10#9 %% -8#5);
output1{test++} = 1#5 == (-10#9 // -7#5);
output1{test++} = -3#5 == (-10#9 %% -7#5);
output1{test++} = 1#5 == (-10#9 // -6#5);
output1{test++} = -4#5 == (-10#9 %% -6#5);
output1{test++} = 2#5 == (-10#9 // -5#5);
output1{test++} = 0#5 == (-10#9 %% -5#5);
output1{test++} = 2#5 == (-10#9 // -4#5);
output1{test++} = -2#5 == (-10#9 %% -4#5);
output1{test++} = 3#5 == (-10#9 // -3#5);
output1{test++} = -1#5 == (-10#9 %% -3#5);
output1{test++} = 5#5 == (-10#9 // -2#5);
output1{test++} = 0#5 == (-10#9 %% -2#5);
output1{test++} = 10#5 == (-10#9 // -1#5);
output1{test++} = 0#5 == (-10#9 %% -1#5);
output1{test++} = -10#5 == (-10#9 // 1#5);
output1{test++} = 0#5 == (-10#9 %% 1#5);
output1{test++} = -5#5 == (-10#9 // 2#5);
output1{test++} = 0#5 == (-10#9 %% 2#5);
output1{test++} = -3#5 == (-10#9 // 3#5);
output1{test++} = -1#5 == (-10#9 %% 3#5);
output1{test++} = -2#5 == (-10#9 // 4#5);
output1{test++} = -2#5 == (-10#9 %% 4#5);
output1{test++} = -2#5 == (-10#9 // 5#5);
output1{test++} = 0#5 == (-10#9 %% 5#5);
output1{test++} = -1#5 == (-10#9 // 6#5);
output1{test++} = -4#5 == (-10#9 %% 6#5);
output1{test++} = -1#5 == (-10#9 // 7#5);
output1{test++} = -3#5 == (-10#9 %% 7#5);
output1{test++} = -1#5 == (-10#9 // 8#5);
output1{test++} = -2#5 == (-10#9 %% 8#5);
output1{test++} = -1#5 == (-10#9 // 9#5);
output1{test++} = -1#5 == (-10#9 %% 9#5);
output1{test++} = -1#5 == (-10#9 // 10#5);
output1{test++} = 0#5 == (-10#9 %% 10#5);
output1{test++} = 0#5 == (-10#9 // 11#5);
output1{test++} = -10#5 == (-10#9 %% 11#5);
output1{test++} = 0#5 == (-10#9 // 12#5);
output1{test++} = -10#5 == (-10#9 %% 12#5);
output1{test++} = 0#5 == (-10#9 // 13#5);
output1{test++} = -10#5 == (-10#9 %% 13#5);
output1{test++} = 0#5 == (-10#9 // 14#5);
output1{test++} = -10#5 == (-10#9 %% 14#5);
output1{test++} = 0#5 == (-10#9 // 15#5);
output1{test++} = -10#5 == (-10#9 %% 15#5);
output1{test++} = 0#5 == (-9#9 // -16#5);
output1{test++} = -9#5 == (-9#9 %% -16#5);
output1{test++} = 0#5 == (-9#9 // -15#5);
output1{test++} = -9#5 == (-9#9 %% -15#5);
output1{test++} = 0#5 == (-9#9 // -14#5);
output1{test++} = -9#5 == (-9#9 %% -14#5);
output1{test++} = 0#5 == (-9#9 // -13#5);
output1{test++} = -9#5 == (-9#9 %% -13#5);
output1{test++} = 0#5 == (-9#9 // -12#5);
output1{test++} = -9#5 == (-9#9 %% -12#5);
output1{test++} = 0#5 == (-9#9 // -11#5);
output1{test++} = -9#5 == (-9#9 %% -11#5);
output1{test++} = 0#5 == (-9#9 // -10#5);
output1{test++} = -9#5 == (-9#9 %% -10#5);
output1{test++} = 1#5 == (-9#9 // -9#5);
output1{test++} = 0#5 == (-9#9 %% -9#5);
output1{test++} = 1#5 == (-9#9 // -8#5);
output1{test++} = -1#5 == (-9#9 %% -8#5);
output1{test++} = 1#5 == (-9#9 // -7#5);
output1{test++} = -2#5 == (-9#9 %% -7#5);
output1{test++} = 1#5 == (-9#9 // -6#5);
output1{test++} = -3#5 == (-9#9 %% -6#5);
output1{test++} = 1#5 == (-9#9 // -5#5);
output1{test++} = -4#5 == (-9#9 %% -5#5);
output1{test++} = 2#5 == (-9#9 // -4#5);
output1{test++} = -1#5 == (-9#9 %% -4#5);
output1{test++} = 3#5 == (-9#9 // -3#5);
output1{test++} = 0#5 == (-9#9 %% -3#5);
output1{test++} = 4#5 == (-9#9 // -2#5);
output1{test++} = -1#5 == (-9#9 %% -2#5);
output1{test++} = 9#5 == (-9#9 // -1#5);
output1{test++} = 0#5 == (-9#9 %% -1#5);
output1{test++} = -9#5 == (-9#9 // 1#5);
output1{test++} = 0#5 == (-9#9 %% 1#5);
output1{test++} = -4#5 == (-9#9 // 2#5);
output1{test++} = -1#5 == (-9#9 %% 2#5);
output1{test++} = -3#5 == (-9#9 // 3#5);
output1{test++} = 0#5 == (-9#9 %% 3#5);
output1{test++} = -2#5 == (-9#9 // 4#5);
output1{test++} = -1#5 == (-9#9 %% 4#5);
output1{test++} = -1#5 == (-9#9 // 5#5);
output1{test++} = -4#5 == (-9#9 %% 5#5);
output1{test++} = -1#5 == (-9#9 // 6#5);
output1{test++} = -3#5 == (-9#9 %% 6#5);
output1{test++} = -1#5 == (-9#9 // 7#5);
output1{test++} = -2#5 == (-9#9 %% 7#5);
output1{test++} = -1#5 == (-9#9 // 8#5);
output1{test++} = -1#5 == (-9#9 %% 8#5);
output1{test++} = -1#5 == (-9#9 // 9#5);
output1{test++} = 0#5 == (-9#9 %% 9#5);
output1{test++} = 0#5 == (-9#9 // 10#5);
output1{test++} = -9#5 == (-9#9 %% 10#5);
output1{test++} = 0#5 == (-9#9 // 11#5);
output1{test++} = -9#5 == (-9#9 %% 11#5);
output1{test++} = 0#5 == (-9#9 // 12#5);
output1{test++} = -9#5 == (-9#9 %% 12#5);
output1{test++} = 0#5 == (-9#9 // 13#5);
output1{test++} = -9#5 == (-9#9 %% 13#5);
output1{test++} = 0#5 == (-9#9 // 14#5);
output1{test++} = -9#5 == (-9#9 %% 14#5);
output1{test++} = 0#5 == (-9#9 // 15#5);
output1{test++} = -9#5 == (-9#9 %% 15#5);
output1{test++} = 0#5 == (-8#9 // -16#5);
output1{test++} = -8#5 == (-8#9 %% -16#5);
output1{test++} = 0#5 == (-8#9 // -15#5);
output1{test++} = -8#5 == (-8#9 %% -15#5);
output1{test++} = 0#5 == (-8#9 // -14#5);
output1{test++} = -8#5 == (-8#9 %% -14#5);
output1{test++} = 0#5 == (-8#9 // -13#5);
output1{test++} = -8#5 == (-8#9 %% -13#5);
output1{test++} = 0#5 == (-8#9 // -12#5);
output1{test++} = -8#5 == (-8#9 %% -12#5);
output1{test++} = 0#5 == (-8#9 // -11#5);
output1{test++} = -8#5 == (-8#9 %% -11#5);
output1{test++} = 0#5 == (-8#9 // -10#5);
output1{test++} = -8#5 == (-8#9 %% -10#5);
output1{test++} = 0#5 == (-8#9 // -9#5);
output1{test++} = -8#5 == (-8#9 %% -9#5);
output1{test++} = 1#5 == (-8#9 // -8#5);
output1{test++} = 0#5 == (-8#9 %% -8#5);
output1{test++} = 1#5 == (-8#9 // -7#5);
output1{test++} = -1#5 == (-8#9 %% -7#5);
output1{test++} = 1#5 == (-8#9 // -6#5);
output1{test++} = -2#5 == (-8#9 %% -6#5);
output1{test++} = 1#5 == (-8#9 // -5#5);
output1{test++} = -3#5 == (-8#9 %% -5#5);
output1{test++} = 2#5 == (-8#9 // -4#5);
output1{test++} = 0#5 == (-8#9 %% -4#5);
output1{test++} = 2#5 == (-8#9 // -3#5);
output1{test++} = -2#5 == (-8#9 %% -3#5);
output1{test++} = 4#5 == (-8#9 // -2#5);
output1{test++} = 0#5 == (-8#9 %% -2#5);
output1{test++} = 8#5 == (-8#9 // -1#5);
output1{test++} = 0#5 == (-8#9 %% -1#5);
output1{test++} = -8#5 == (-8#9 // 1#5);
output1{test++} = 0#5 == (-8#9 %% 1#5);
output1{test++} = -4#5 == (-8#9 // 2#5);
output1{test++} = 0#5 == (-8#9 %% 2#5);
output1{test++} = -2#5 == (-8#9 // 3#5);
output1{test++} = -2#5 == (-8#9 %% 3#5);
output1{test++} = -2#5 == (-8#9 // 4#5);
output1{test++} = 0#5 == (-8#9 %% 4#5);
output1{test++} = -1#5 == (-8#9 // 5#5);
output1{test++} = -3#5 == (-8#9 %% 5#5);
output1{test++} = -1#5 == (-8#9 // 6#5);
output1{test++} = -2#5 == (-8#9 %% 6#5);
output1{test++} = -1#5 == (-8#9 // 7#5);
output1{test++} = -1#5 == (-8#9 %% 7#5);
output1{test++} = -1#5 == (-8#9 // 8#5);
output1{test++} = 0#5 == (-8#9 %% 8#5);
output1{test++} = 0#5 == (-8#9 // 9#5);
output1{test++} = -8#5 == (-8#9 %% 9#5);
output1{test++} = 0#5 == (-8#9 // 10#5);
output1{test++} = -8#5 == (-8#9 %% 10#5);
output1{test++} = 0#5 == (-8#9 // 11#5);
output1{test++} = -8#5 == (-8#9 %% 11#5);
output1{test++} = 0#5 == (-8#9 // 12#5);
output1{test++} = -8#5 == (-8#9 %% 12#5);
output1{test++} = 0#5 == (-8#9 // 13#5);
output1{test++} = -8#5 == (-8#9 %% 13#5);
output1{test++} = 0#5 == (-8#9 // 14#5);
output1{test++} = -8#5 == (-8#9 %% 14#5);
output1{test++} = 0#5 == (-8#9 // 15#5);
output1{test++} = -8#5 == (-8#9 %% 15#5);
output1{test++} = 0#5 == (-7#9 // -16#5);
output1{test++} = -7#5 == (-7#9 %% -16#5);
output1{test++} = 0#5 == (-7#9 // -15#5);
output1{test++} = -7#5 == (-7#9 %% -15#5);
output1{test++} = 0#5 == (-7#9 // -14#5);
output1{test++} = -7#5 == (-7#9 %% -14#5);
output1{test++} = 0#5 == (-7#9 // -13#5);
output1{test++} = -7#5 == (-7#9 %% -13#5);
output1{test++} = 0#5 == (-7#9 // -12#5);
output1{test++} = -7#5 == (-7#9 %% -12#5);
output1{test++} = 0#5 == (-7#9 // -11#5);
output1{test++} = -7#5 == (-7#9 %% -11#5);
output1{test++} = 0#5 == (-7#9 // -10#5);
output1{test++} = -7#5 == (-7#9 %% -10#5);
output1{test++} = 0#5 == (-7#9 // -9#5);
output1{test++} = -7#5 == (-7#9 %% -9#5);
output1{test++} = 0#5 == (-7#9 // -8#5);
output1{test++} = -7#5 == (-7#9 %% -8#5);
output1{test++} = 1#5 == (-7#9 // -7#5);
output1{test++} = 0#5 == (-7#9 %% -7#5);
output1{test++} = 1#5 == (-7#9 // -6#5);
output1{test++} = -1#5 == (-7#9 %% -6#5);
output1{test++} = 1#5 == (-7#9 // -5#5);
output1{test++} = -2#5 == (-7#9 %% -5#5);
output1{test++} = 1#5 == (-7#9 // -4#5);
output1{test++} = -3#5 == (-7#9 %% -4#5);
output1{test++} = 2#5 == (-7#9 // -3#5);
output1{test++} = -1#5 == (-7#9 %% -3#5);
output1{test++} = 3#5 == (-7#9 // -2#5);
output1{test++} = -1#5 == (-7#9 %% -2#5);
output1{test++} = 7#5 == (-7#9 // -1#5);
output1{test++} = 0#5 == (-7#9 %% -1#5);
output1{test++} = -7#5 == (-7#9 // 1#5);
output1{test++} = 0#5 == (-7#9 %% 1#5);
output1{test++} = -3#5 == (-7#9 // 2#5);
output1{test++} = -1#5 == (-7#9 %% 2#5);
output1{test++} = -2#5 == (-7#9 // 3#5);
output1{test++} = -1#5 == (-7#9 %% 3#5);
output1{test++} = -1#5 == (-7#9 // 4#5);
output1{test++} = -3#5 == (-7#9 %% 4#5);
output1{test++} = -1#5 == (-7#9 // 5#5);
output1{test++} = -2#5 == (-7#9 %% 5#5);
output1{test++} = -1#5 == (-7#9 // 6#5);
output1{test++} = -1#5 == (-7#9 %% 6#5);
output1{test++} = -1#5 == (-7#9 // 7#5);
output1{test++} = 0#5 == (-7#9 %% 7#5);
output1{test++} = 0#5 == (-7#9 // 8#5);
output1{test++} = -7#5 == (-7#9 %% 8#5);
output1{test++} = 0#5 == (-7#9 // 9#5);
output1{test++} = -7#5 == (-7#9 %% 9#5);
output1{test++} = 0#5 == (-7#9 // 10#5);
output1{test++} = -7#5 == (-7#9 %% 10#5);
output1{test++} = 0#5 == (-7#9 // 11#5);
output1{test++} = -7#5 == (-7#9 %% 11#5);
output1{test++} = 0#5 == (-7#9 // 12#5);
output1{test++} = -7#5 == (-7#9 %% 12#5);
output1{test++} = 0#5 == (-7#9 // 13#5);
output1{test++} = -7#5 == (-7#9 %% 13#5);
output1{test++} = 0#5 == (-7#9 // 14#5);
output1{test++} = -7#5 == (-7#9 %% 14#5);
output1{test++} = 0#5 == (-7#9 // 15#5);
output1{test++} = -7#5 == (-7#9 %% 15#5);
output1{test++} = 0#5 == (-6#9 // -16#5);
output1{test++} = -6#5 == (-6#9 %% -16#5);
output1{test++} = 0#5 == (-6#9 // -15#5);
output1{test++} = -6#5 == (-6#9 %% -15#5);
output1{test++} = 0#5 == (-6#9 // -14#5);
output1{test++} = -6#5 == (-6#9 %% -14#5);
output1{test++} = 0#5 == (-6#9 // -13#5);
output1{test++} = -6#5 == (-6#9 %% -13#5);
output1{test++} = 0#5 == (-6#9 // -12#5);
output1{test++} = -6#5 == (-6#9 %% -12#5);
output1{test++} = 0#5 == (-6#9 // -11#5);
output1{test++} = -6#5 == (-6#9 %% -11#5);
output1{test++} = 0#5 == (-6#9 // -10#5);
output1{test++} = -6#5 == (-6#9 %% -10#5);
output1{test++} = 0#5 == (-6#9 // -9#5);
output1{test++} = -6#5 == (-6#9 %% -9#5);
output1{test++} = 0#5 == (-6#9 // -8#5);
output1{test++} = -6#5 == (-6#9 %% -8#5);
output1{test++} = 0#5 == (-6#9 // -7#5);
output1{test++} = -6#5 == (-6#9 %% -7#5);
output1{test++} = 1#5 == (-6#9 // -6#5);
output1{test++} = 0#5 == (-6#9 %% -6#5);
output1{test++} = 1#5 == (-6#9 // -5#5);
output1{test++} = -1#5 == (-6#9 %% -5#5);
output1{test++} = 1#5 == (-6#9 // -4#5);
output1{test++} = -2#5 == (-6#9 %% -4#5);
output1{test++} = 2#5 == (-6#9 // -3#5);
output1{test++} = 0#5 == (-6#9 %% -3#5);
output1{test++} = 3#5 == (-6#9 // -2#5);
output1{test++} = 0#5 == (-6#9 %% -2#5);
output1{test++} = 6#5 == (-6#9 // -1#5);
output1{test++} = 0#5 == (-6#9 %% -1#5);
output1{test++} = -6#5 == (-6#9 // 1#5);
output1{test++} = 0#5 == (-6#9 %% 1#5);
output1{test++} = -3#5 == (-6#9 // 2#5);
output1{test++} = 0#5 == (-6#9 %% 2#5);
output1{test++} = -2#5 == (-6#9 // 3#5);
output1{test++} = 0#5 == (-6#9 %% 3#5);
output1{test++} = -1#5 == (-6#9 // 4#5);
output1{test++} = -2#5 == (-6#9 %% 4#5);
output1{test++} = -1#5 == (-6#9 // 5#5);
output1{test++} = -1#5 == (-6#9 %% 5#5);
output1{test++} = -1#5 == (-6#9 // 6#5);
output1{test++} = 0#5 == (-6#9 %% 6#5);
output1{test++} = 0#5 == (-6#9 // 7#5);
output1{test++} = -6#5 == (-6#9 %% 7#5);
output1{test++} = 0#5 == (-6#9 // 8#5);
output1{test++} = -6#5 == (-6#9 %% 8#5);
output1{test++} = 0#5 == (-6#9 // 9#5);
output1{test++} = -6#5 == (-6#9 %% 9#5);
output1{test++} = 0#5 == (-6#9 // 10#5);
output1{test++} = -6#5 == (-6#9 %% 10#5);
output1{test++} = 0#5 == (-6#9 // 11#5);
output1{test++} = -6#5 == (-6#9 %% 11#5);
output1{test++} = 0#5 == (-6#9 // 12#5);
output1{test++} = -6#5 == (-6#9 %% 12#5);
output1{test++} = 0#5 == (-6#9 // 13#5);
output1{test++} = -6#5 == (-6#9 %% 13#5);
output1{test++} = 0#5 == (-6#9 // 14#5);
output1{test++} = -6#5 == (-6#9 %% 14#5);
output1{test++} = 0#5 == (-6#9 // 15#5);
output1{test++} = -6#5 == (-6#9 %% 15#5);
output1{test++} = 0#5 == (-5#9 // -16#5);
output1{test++} = -5#5 == (-5#9 %% -16#5);
output1{test++} = 0#5 == (-5#9 // -15#5);
output1{test++} = -5#5 == (-5#9 %% -15#5);
output1{test++} = 0#5 == (-5#9 // -14#5);
output1{test++} = -5#5 == (-5#9 %% -14#5);
output1{test++} = 0#5 == (-5#9 // -13#5);
output1{test++} = -5#5 == (-5#9 %% -13#5);
output1{test++} = 0#5 == (-5#9 // -12#5);
output1{test++} = -5#5 == (-5#9 %% -12#5);
output1{test++} = 0#5 == (-5#9 // -11#5);
output1{test++} = -5#5 == (-5#9 %% -11#5);
output1{test++} = 0#5 == (-5#9 // -10#5);
output1{test++} = -5#5 == (-5#9 %% -10#5);
output1{test++} = 0#5 == (-5#9 // -9#5);
output1{test++} = -5#5 == (-5#9 %% -9#5);
output1{test++} = 0#5 == (-5#9 // -8#5);
output1{test++} = -5#5 == (-5#9 %% -8#5);
output1{test++} = 0#5 == (-5#9 // -7#5);
output1{test++} = -5#5 == (-5#9 %% -7#5);
output1{test++} = 0#5 == (-5#9 // -6#5);
output1{test++} = -5#5 == (-5#9 %% -6#5);
output1{test++} = 1#5 == (-5#9 // -5#5);
output1{test++} = 0#5 == (-5#9 %% -5#5);
output1{test++} = 1#5 == (-5#9 // -4#5);
output1{test++} = -1#5 == (-5#9 %% -4#5);
output1{test++} = 1#5 == (-5#9 // -3#5);
output1{test++} = -2#5 == (-5#9 %% -3#5);
output1{test++} = 2#5 == (-5#9 // -2#5);
output1{test++} = -1#5 == (-5#9 %% -2#5);
output1{test++} = 5#5 == (-5#9 // -1#5);
output1{test++} = 0#5 == (-5#9 %% -1#5);
output1{test++} = -5#5 == (-5#9 // 1#5);
output1{test++} = 0#5 == (-5#9 %% 1#5);
output1{test++} = -2#5 == (-5#9 // 2#5);
output1{test++} = -1#5 == (-5#9 %% 2#5);
output1{test++} = -1#5 == (-5#9 // 3#5);
output1{test++} = -2#5 == (-5#9 %% 3#5);
output1{test++} = -1#5 == (-5#9 // 4#5);
output1{test++} = -1#5 == (-5#9 %% 4#5);
output1{test++} = -1#5 == (-5#9 // 5#5);
output1{test++} = 0#5 == (-5#9 %% 5#5);
output1{test++} = 0#5 == (-5#9 // 6#5);
output1{test++} = -5#5 == (-5#9 %% 6#5);
output1{test++} = 0#5 == (-5#9 // 7#5);
output1{test++} = -5#5 == (-5#9 %% 7#5);
output1{test++} = 0#5 == (-5#9 // 8#5);
output1{test++} = -5#5 == (-5#9 %% 8#5);
output1{test++} = 0#5 == (-5#9 // 9#5);
output1{test++} = -5#5 == (-5#9 %% 9#5);
output1{test++} = 0#5 == (-5#9 // 10#5);
output1{test++} = -5#5 == (-5#9 %% 10#5);
output1{test++} = 0#5 == (-5#9 // 11#5);
output1{test++} = -5#5 == (-5#9 %% 11#5);
output1{test++} = 0#5 == (-5#9 // 12#5);
output1{test++} = -5#5 == (-5#9 %% 12#5);
output1{test++} = 0#5 == (-5#9 // 13#5);
output1{test++} = -5#5 == (-5#9 %% 13#5);
output1{test++} = 0#5 == (-5#9 // 14#5);
output1{test++} = -5#5 == (-5#9 %% 14#5);
output1{test++} = 0#5 == (-5#9 // 15#5);
output1{test++} = -5#5 == (-5#9 %% 15#5);
output1{test++} = 0#5 == (-4#9 // -16#5);
output1{test++} = -4#5 == (-4#9 %% -16#5);
output1{test++} = 0#5 == (-4#9 // -15#5);
output1{test++} = -4#5 == (-4#9 %% -15#5);
output1{test++} = 0#5 == (-4#9 // -14#5);
output1{test++} = -4#5 == (-4#9 %% -14#5);
output1{test++} = 0#5 == (-4#9 // -13#5);
output1{test++} = -4#5 == (-4#9 %% -13#5);
output1{test++} = 0#5 == (-4#9 // -12#5);
output1{test++} = -4#5 == (-4#9 %% -12#5);
output1{test++} = 0#5 == (-4#9 // -11#5);
output1{test++} = -4#5 == (-4#9 %% -11#5);
output1{test++} = 0#5 == (-4#9 // -10#5);
output1{test++} = -4#5 == (-4#9 %% -10#5);
output1{test++} = 0#5 == (-4#9 // -9#5);
output1{test++} = -4#5 == (-4#9 %% -9#5);
output1{test++} = 0#5 == (-4#9 // -8#5);
output1{test++} = -4#5 == (-4#9 %% -8#5);
output1{test++} = 0#5 == (-4#9 // -7#5);
output1{test++} = -4#5 == (-4#9 %% -7#5);
output1{test++} = 0#5 == (-4#9 // -6#5);
output1{test++} = -4#5 == (-4#9 %% -6#5);
output1{test++} = 0#5 == (-4#9 // -5#5);
output1{test++} = -4#5 == (-4#9 %% -5#5);
output1{test++} = 1#5 == (-4#9 // -4#5);
output1{test++} = 0#5 == (-4#9 %% -4#5);
output1{test++} = 1#5 == (-4#9 // -3#5);
output1{test++} = -1#5 == (-4#9 %% -3#5);
output1{test++} = 2#5 == (-4#9 // -2#5);
output1{test++} = 0#5 == (-4#9 %% -2#5);
output1{test++} = 4#5 == (-4#9 // -1#5);
output1{test++} = 0#5 == (-4#9 %% -1#5);
output1{test++} = -4#5 == (-4#9 // 1#5);
output1{test++} = 0#5 == (-4#9 %% 1#5);
output1{test++} = -2#5 == (-4#9 // 2#5);
output1{test++} = 0#5 == (-4#9 %% 2#5);
output1{test++} = -1#5 == (-4#9 // 3#5);
output1{test++} = -1#5 == (-4#9 %% 3#5);
output1{test++} = -1#5 == (-4#9 // 4#5);
output1{test++} = 0#5 == (-4#9 %% 4#5);
output1{test++} = 0#5 == (-4#9 // 5#5);
output1{test++} = -4#5 == (-4#9 %% 5#5);
output1{test++} = 0#5 == (-4#9 // 6#5);
output1{test++} = -4#5 == (-4#9 %% 6#5);
output1{test++} = 0#5 == (-4#9 // 7#5);
output1{test++} = -4#5 == (-4#9 %% 7#5);
output1{test++} = 0#5 == (-4#9 // 8#5);
output1{test++} = -4#5 == (-4#9 %% 8#5);
output1{test++} = 0#5 == (-4#9 // 9#5);
output1{test++} = -4#5 == (-4#9 %% 9#5);
output1{test++} = 0#5 == (-4#9 // 10#5);
output1{test++} = -4#5 == (-4#9 %% 10#5);
output1{test++} = 0#5 == (-4#9 // 11#5);
output1{test++} = -4#5 == (-4#9 %% 11#5);
output1{test++} = 0#5 == (-4#9 // 12#5);
output1{test++} = -4#5 == (-4#9 %% 12#5);
output1{test++} = 0#5 == (-4#9 // 13#5);
output1{test++} = -4#5 == (-4#9 %% 13#5);
output1{test++} = 0#5 == (-4#9 // 14#5);
output1{test++} = -4#5 == (-4#9 %% 14#5);
output1{test++} = 0#5 == (-4#9 // 15#5);
output1{test++} = -4#5 == (-4#9 %% 15#5);
output1{test++} = 0#5 == (-3#9 // -16#5);
output1{test++} = -3#5 == (-3#9 %% -16#5);
output1{test++} = 0#5 == (-3#9 // -15#5);
output1{test++} = -3#5 == (-3#9 %% -15#5);
output1{test++} = 0#5 == (-3#9 // -14#5);
output1{test++} = -3#5 == (-3#9 %% -14#5);
output1{test++} = 0#5 == (-3#9 // -13#5);
output1{test++} = -3#5 == (-3#9 %% -13#5);
output1{test++} = 0#5 == (-3#9 // -12#5);
output1{test++} = -3#5 == (-3#9 %% -12#5);
output1{test++} = 0#5 == (-3#9 // -11#5);
output1{test++} = -3#5 == (-3#9 %% -11#5);
output1{test++} = 0#5 == (-3#9 // -10#5);
output1{test++} = -3#5 == (-3#9 %% -10#5);
output1{test++} = 0#5 == (-3#9 // -9#5);
output1{test++} = -3#5 == (-3#9 %% -9#5);
output1{test++} = 0#5 == (-3#9 // -8#5);
output1{test++} = -3#5 == (-3#9 %% -8#5);
output1{test++} = 0#5 == (-3#9 // -7#5);
output1{test++} = -3#5 == (-3#9 %% -7#5);
output1{test++} = 0#5 == (-3#9 // -6#5);
output1{test++} = -3#5 == (-3#9 %% -6#5);
output1{test++} = 0#5 == (-3#9 // -5#5);
output1{test++} = -3#5 == (-3#9 %% -5#5);
output1{test++} = 0#5 == (-3#9 // -4#5);
output1{test++} = -3#5 == (-3#9 %% -4#5);
output1{test++} = 1#5 == (-3#9 // -3#5);
output1{test++} = 0#5 == (-3#9 %% -3#5);
output1{test++} = 1#5 == (-3#9 // -2#5);
output1{test++} = -1#5 == (-3#9 %% -2#5);
output1{test++} = 3#5 == (-3#9 // -1#5);
output1{test++} = 0#5 == (-3#9 %% -1#5);
output1{test++} = -3#5 == (-3#9 // 1#5);
output1{test++} = 0#5 == (-3#9 %% 1#5);
output1{test++} = -1#5 == (-3#9 // 2#5);
output1{test++} = -1#5 == (-3#9 %% 2#5);
output1{test++} = -1#5 == (-3#9 // 3#5);
output1{test++} = 0#5 == (-3#9 %% 3#5);
output1{test++} = 0#5 == (-3#9 // 4#5);
output1{test++} = -3#5 == (-3#9 %% 4#5);
output1{test++} = 0#5 == (-3#9 // 5#5);
output1{test++} = -3#5 == (-3#9 %% 5#5);
output1{test++} = 0#5 == (-3#9 // 6#5);
output1{test++} = -3#5 == (-3#9 %% 6#5);
output1{test++} = 0#5 == (-3#9 // 7#5);
output1{test++} = -3#5 == (-3#9 %% 7#5);
output1{test++} = 0#5 == (-3#9 // 8#5);
output1{test++} = -3#5 == (-3#9 %% 8#5);
output1{test++} = 0#5 == (-3#9 // 9#5);
output1{test++} = -3#5 == (-3#9 %% 9#5);
output1{test++} = 0#5 == (-3#9 // 10#5);
output1{test++} = -3#5 == (-3#9 %% 10#5);
output1{test++} = 0#5 == (-3#9 // 11#5);
output1{test++} = -3#5 == (-3#9 %% 11#5);
output1{test++} = 0#5 == (-3#9 // 12#5);
output1{test++} = -3#5 == (-3#9 %% 12#5);
output1{test++} = 0#5 == (-3#9 // 13#5);
output1{test++} = -3#5 == (-3#9 %% 13#5);
output1{test++} = 0#5 == (-3#9 // 14#5);
output1{test++} = -3#5 == (-3#9 %% 14#5);
output1{test++} = 0#5 == (-3#9 // 15#5);
output1{test++} = -3#5 == (-3#9 %% 15#5);
output1{test++} = 0#5 == (-2#9 // -16#5);
output1{test++} = -2#5 == (-2#9 %% -16#5);
output1{test++} = 0#5 == (-2#9 // -15#5);
output1{test++} = -2#5 == (-2#9 %% -15#5);
output1{test++} = 0#5 == (-2#9 // -14#5);
output1{test++} = -2#5 == (-2#9 %% -14#5);
output1{test++} = 0#5 == (-2#9 // -13#5);
output1{test++} = -2#5 == (-2#9 %% -13#5);
output1{test++} = 0#5 == (-2#9 // -12#5);
output1{test++} = -2#5 == (-2#9 %% -12#5);
output1{test++} = 0#5 == (-2#9 // -11#5);
output1{test++} = -2#5 == (-2#9 %% -11#5);
output1{test++} = 0#5 == (-2#9 // -10#5);
output1{test++} = -2#5 == (-2#9 %% -10#5);
output1{test++} = 0#5 == (-2#9 // -9#5);
output1{test++} = -2#5 == (-2#9 %% -9#5);
output1{test++} = 0#5 == (-2#9 // -8#5);
output1{test++} = -2#5 == (-2#9 %% -8#5);
output1{test++} = 0#5 == (-2#9 // -7#5);
output1{test++} = -2#5 == (-2#9 %% -7#5);
output1{test++} = 0#5 == (-2#9 // -6#5);
output1{test++} = -2#5 == (-2#9 %% -6#5);
output1{test++} = 0#5 == (-2#9 // -5#5);
output1{test++} = -2#5 == (-2#9 %% -5#5);
output1{test++} = 0#5 == (-2#9 // -4#5);
output1{test++} = -2#5 == (-2#9 %% -4#5);
output1{test++} = 0#5 == (-2#9 // -3#5);
output1{test++} = -2#5 == (-2#9 %% -3#5);
output1{test++} = 1#5 == (-2#9 // -2#5);
output1{test++} = 0#5 == (-2#9 %% -2#5);
output1{test++} = 2#5 == (-2#9 // -1#5);
output1{test++} = 0#5 == (-2#9 %% -1#5);
output1{test++} = -2#5 == (-2#9 // 1#5);
output1{test++} = 0#5 == (-2#9 %% 1#5);
output1{test++} = -1#5 == (-2#9 // 2#5);
output1{test++} = 0#5 == (-2#9 %% 2#5);
output1{test++} = 0#5 == (-2#9 // 3#5);
output1{test++} = -2#5 == (-2#9 %% 3#5);
output1{test++} = 0#5 == (-2#9 // 4#5);
output1{test++} = -2#5 == (-2#9 %% 4#5);
output1{test++} = 0#5 == (-2#9 // 5#5);
output1{test++} = -2#5 == (-2#9 %% 5#5);
output1{test++} = 0#5 == (-2#9 // 6#5);
output1{test++} = -2#5 == (-2#9 %% 6#5);
output1{test++} = 0#5 == (-2#9 // 7#5);
output1{test++} = -2#5 == (-2#9 %% 7#5);
output1{test++} = 0#5 == (-2#9 // 8#5);
output1{test++} = -2#5 == (-2#9 %% 8#5);
output1{test++} = 0#5 == (-2#9 // 9#5);
output1{test++} = -2#5 == (-2#9 %% 9#5);
output1{test++} = 0#5 == (-2#9 // 10#5);
output1{test++} = -2#5 == (-2#9 %% 10#5);
output1{test++} = 0#5 == (-2#9 // 11#5);
output1{test++} = -2#5 == (-2#9 %% 11#5);
output1{test++} = 0#5 == (-2#9 // 12#5);
output1{test++} = -2#5 == (-2#9 %% 12#5);
output1{test++} = 0#5 == (-2#9 // 13#5);
output1{test++} = -2#5 == (-2#9 %% 13#5);
output1{test++} = 0#5 == (-2#9 // 14#5);
output1{test++} = -2#5 == (-2#9 %% 14#5);
output1{test++} = 0#5 == (-2#9 // 15#5);
output1{test++} = -2#5 == (-2#9 %% 15#5);
output1{test++} = 0#5 == (-1#9 // -16#5);
output1{test++} = -1#5 == (-1#9 %% -16#5);
output1{test++} = 0#5 == (-1#9 // -15#5);
output1{test++} = -1#5 == (-1#9 %% -15#5);
output1{test++} = 0#5 == (-1#9 // -14#5);
output1{test++} = -1#5 == (-1#9 %% -14#5);
output1{test++} = 0#5 == (-1#9 // -13#5);
output1{test++} = -1#5 == (-1#9 %% -13#5);
output1{test++} = 0#5 == (-1#9 // -12#5);
output1{test++} = -1#5 == (-1#9 %% -12#5);
output1{test++} = 0#5 == (-1#9 // -11#5);
output1{test++} = -1#5 == (-1#9 %% -11#5);
output1{test++} = 0#5 == (-1#9 // -10#5);
output1{test++} = -1#5 == (-1#9 %% -10#5);
output1{test++} = 0#5 == (-1#9 // -9#5);
output1{test++} = -1#5 == (-1#9 %% -9#5);
output1{test++} = 0#5 == (-1#9 // -8#5);
output1{test++} = -1#5 == (-1#9 %% -8#5);
output1{test++} = 0#5 == (-1#9 // -7#5);
output1{test++} = -1#5 == (-1#9 %% -7#5);
output1{test++} = 0#5 == (-1#9 // -6#5);
output1{test++} = -1#5 == (-1#9 %% -6#5);
output1{test++} = 0#5 == (-1#9 // -5#5);
output1{test++} = -1#5 == (-1#9 %% -5#5);
output1{test++} = 0#5 == (-1#9 // -4#5);
output1{test++} = -1#5 == (-1#9 %% -4#5);
output1{test++} = 0#5 == (-1#9 // -3#5);
output1{test++} = -1#5 == (-1#9 %% -3#5);
output1{test++} = 0#5 == (-1#9 // -2#5);
output1{test++} = -1#5 == (-1#9 %% -2#5);
output1{test++} = 1#5 == (-1#9 // -1#5);
output1{test++} = 0#5 == (-1#9 %% -1#5);
output1{test++} = -1#5 == (-1#9 // 1#5);
output1{test++} = 0#5 == (-1#9 %% 1#5);
output1{test++} = 0#5 == (-1#9 // 2#5);
output1{test++} = -1#5 == (-1#9 %% 2#5);
output1{test++} = 0#5 == (-1#9 // 3#5);
output1{test++} = -1#5 == (-1#9 %% 3#5);
output1{test++} = 0#5 == (-1#9 // 4#5);
output1{test++} = -1#5 == (-1#9 %% 4#5);
output1{test++} = 0#5 == (-1#9 // 5#5);
output1{test++} = -1#5 == (-1#9 %% 5#5);
output1{test++} = 0#5 == (-1#9 // 6#5);
output1{test++} = -1#5 == (-1#9 %% 6#5);
output1{test++} = 0#5 == (-1#9 // 7#5);
output1{test++} = -1#5 == (-1#9 %% 7#5);
output1{test++} = 0#5 == (-1#9 // 8#5);
output1{test++} = -1#5 == (-1#9 %% 8#5);
output1{test++} = 0#5 == (-1#9 // 9#5);
output1{test++} = -1#5 == (-1#9 %% 9#5);
output1{test++} = 0#5 == (-1#9 // 10#5);
output1{test++} = -1#5 == (-1#9 %% 10#5);
output1{test++} = 0#5 == (-1#9 // 11#5);
output1{test++} = -1#5 == (-1#9 %% 11#5);
output1{test++} = 0#5 == (-1#9 // 12#5);
output1{test++} = -1#5 == (-1#9 %% 12#5);
output1{test++} = 0#5 == (-1#9 // 13#5);
output1{test++} = -1#5 == (-1#9 %% 13#5);
output1{test++} = 0#5 == (-1#9 // 14#5);
output1{test++} = -1#5 == (-1#9 %% 14#5);
output1{test++} = 0#5 == (-1#9 // 15#5);
output1{test++} = -1#5 == (-1#9 %% 15#5);
output1{test++} = 0#5 == (0#9 // -16#5);
output1{test++} = 0#5 == (0#9 %% -16#5);
output1{test++} = 0#5 == (0#9 // -15#5);
output1{test++} = 0#5 == (0#9 %% -15#5);
output1{test++} = 0#5 == (0#9 // -14#5);
output1{test++} = 0#5 == (0#9 %% -14#5);
output1{test++} = 0#5 == (0#9 // -13#5);
output1{test++} = 0#5 == (0#9 %% -13#5);
output1{test++} = 0#5 == (0#9 // -12#5);
output1{test++} = 0#5 == (0#9 %% -12#5);
output1{test++} = 0#5 == (0#9 // -11#5);
output1{test++} = 0#5 == (0#9 %% -11#5);
output1{test++} = 0#5 == (0#9 // -10#5);
output1{test++} = 0#5 == (0#9 %% -10#5);
output1{test++} = 0#5 == (0#9 // -9#5);
output1{test++} = 0#5 == (0#9 %% -9#5);
output1{test++} = 0#5 == (0#9 // -8#5);
output1{test++} = 0#5 == (0#9 %% -8#5);
output1{test++} = 0#5 == (0#9 // -7#5);
output1{test++} = 0#5 == (0#9 %% -7#5);
output1{test++} = 0#5 == (0#9 // -6#5);
output1{test++} = 0#5 == (0#9 %% -6#5);
output1{test++} = 0#5 == (0#9 // -5#5);
output1{test++} = 0#5 == (0#9 %% -5#5);
output1{test++} = 0#5 == (0#9 // -4#5);
output1{test++} = 0#5 == (0#9 %% -4#5);
output1{test++} = 0#5 == (0#9 // -3#5);
output1{test++} = 0#5 == (0#9 %% -3#5);
output1{test++} = 0#5 == (0#9 // -2#5);
output1{test++} = 0#5 == (0#9 %% -2#5);
output1{test++} = 0#5 == (0#9 // -1#5);
output1{test++} = 0#5 == (0#9 %% -1#5);
output1{test++} = 0#5 == (0#9 // 1#5);
output1{test++} = 0#5 == (0#9 %% 1#5);
output1{test++} = 0#5 == (0#9 // 2#5);
output1{test++} = 0#5 == (0#9 %% 2#5);
output1{test++} = 0#5 == (0#9 // 3#5);
output1{test++} = 0#5 == (0#9 %% 3#5);
output1{test++} = 0#5 == (0#9 // 4#5);
output1{test++} = 0#5 == (0#9 %% 4#5);
output1{test++} = 0#5 == (0#9 // 5#5);
output1{test++} = 0#5 == (0#9 %% 5#5);
output1{test++} = 0#5 == (0#9 // 6#5);
output1{test++} = 0#5 == (0#9 %% 6#5);
output1{test++} = 0#5 == (0#9 // 7#5);
output1{test++} = 0#5 == (0#9 %% 7#5);
output1{test++} = 0#5 == (0#9 // 8#5);
output1{test++} = 0#5 == (0#9 %% 8#5);
output1{test++} = 0#5 == (0#9 // 9#5);
output1{test++} = 0#5 == (0#9 %% 9#5);
output1{test++} = 0#5 == (0#9 // 10#5);
output1{test++} = 0#5 == (0#9 %% 10#5);
output1{test++} = 0#5 == (0#9 // 11#5);
output1{test++} = 0#5 == (0#9 %% 11#5);
output1{test++} = 0#5 == (0#9 // 12#5);
output1{test++} = 0#5 == (0#9 %% 12#5);
output1{test++} = 0#5 == (0#9 // 13#5);
output1{test++} = 0#5 == (0#9 %% 13#5);
output1{test++} = 0#5 == (0#9 // 14#5);
output1{test++} = 0#5 == (0#9 %% 14#5);
output1{test++} = 0#5 == (0#9 // 15#5);
output1{test++} = 0#5 == (0#9 %% 15#5);
output1{test++} = 0#5 == (1#9 // -16#5);
output1{test++} = 1#5 == (1#9 %% -16#5);
output1{test++} = 0#5 == (1#9 // -15#5);
output1{test++} = 1#5 == (1#9 %% -15#5);
output1{test++} = 0#5 == (1#9 // -14#5);
output1{test++} = 1#5 == (1#9 %% -14#5);
output1{test++} = 0#5 == (1#9 // -13#5);
output1{test++} = 1#5 == (1#9 %% -13#5);
output1{test++} = 0#5 == (1#9 // -12#5);
output1{test++} = 1#5 == (1#9 %% -12#5);
output1{test++} = 0#5 == (1#9 // -11#5);
output1{test++} = 1#5 == (1#9 %% -11#5);
output1{test++} = 0#5 == (1#9 // -10#5);
output1{test++} = 1#5 == (1#9 %% -10#5);
output1{test++} = 0#5 == (1#9 // -9#5);
output1{test++} = 1#5 == (1#9 %% -9#5);
output1{test++} = 0#5 == (1#9 // -8#5);
output1{test++} = 1#5 == (1#9 %% -8#5);
output1{test++} = 0#5 == (1#9 // -7#5);
output1{test++} = 1#5 == (1#9 %% -7#5);
output1{test++} = 0#5 == (1#9 // -6#5);
output1{test++} = 1#5 == (1#9 %% -6#5);
output1{test++} = 0#5 == (1#9 // -5#5);
output1{test++} = 1#5 == (1#9 %% -5#5);
output1{test++} = 0#5 == (1#9 // -4#5);
output1{test++} = 1#5 == (1#9 %% -4#5);
output1{test++} = 0#5 == (1#9 // -3#5);
output1{test++} = 1#5 == (1#9 %% -3#5);
output1{test++} = 0#5 == (1#9 // -2#5);
output1{test++} = 1#5 == (1#9 %% -2#5);
output1{test++} = -1#5 == (1#9 // -1#5);
output1{test++} = 0#5 == (1#9 %% -1#5);
output1{test++} = 1#5 == (1#9 // 1#5);
output1{test++} = 0#5 == (1#9 %% 1#5);
output1{test++} = 0#5 == (1#9 // 2#5);
output1{test++} = 1#5 == (1#9 %% 2#5);
output1{test++} = 0#5 == (1#9 // 3#5);
output1{test++} = 1#5 == (1#9 %% 3#5);
output1{test++} = 0#5 == (1#9 // 4#5);
output1{test++} = 1#5 == (1#9 %% 4#5);
output1{test++} = 0#5 == (1#9 // 5#5);
output1{test++} = 1#5 == (1#9 %% 5#5);
output1{test++} = 0#5 == (1#9 // 6#5);
output1{test++} = 1#5 == (1#9 %% 6#5);
output1{test++} = 0#5 == (1#9 // 7#5);
output1{test++} = 1#5 == (1#9 %% 7#5);
output1{test++} = 0#5 == (1#9 // 8#5);
output1{test++} = 1#5 == (1#9 %% 8#5);
output1{test++} = 0#5 == (1#9 // 9#5);
output1{test++} = 1#5 == (1#9 %% 9#5);
output1{test++} = 0#5 == (1#9 // 10#5);
output1{test++} = 1#5 == (1#9 %% 10#5);
output1{test++} = 0#5 == (1#9 // 11#5);
output1{test++} = 1#5 == (1#9 %% 11#5);
output1{test++} = 0#5 == (1#9 // 12#5);
output1{test++} = 1#5 == (1#9 %% 12#5);
output1{test++} = 0#5 == (1#9 // 13#5);
output1{test++} = 1#5 == (1#9 %% 13#5);
output1{test++} = 0#5 == (1#9 // 14#5);
output1{test++} = 1#5 == (1#9 %% 14#5);
output1{test++} = 0#5 == (1#9 // 15#5);
output1{test++} = 1#5 == (1#9 %% 15#5);
output1{test++} = 0#5 == (2#9 // -16#5);
output1{test++} = 2#5 == (2#9 %% -16#5);
output1{test++} = 0#5 == (2#9 // -15#5);
output1{test++} = 2#5 == (2#9 %% -15#5);
output1{test++} = 0#5 == (2#9 // -14#5);
output1{test++} = 2#5 == (2#9 %% -14#5);
output1{test++} = 0#5 == (2#9 // -13#5);
output1{test++} = 2#5 == (2#9 %% -13#5);
output1{test++} = 0#5 == (2#9 // -12#5);
output1{test++} = 2#5 == (2#9 %% -12#5);
output1{test++} = 0#5 == (2#9 // -11#5);
output1{test++} = 2#5 == (2#9 %% -11#5);
output1{test++} = 0#5 == (2#9 // -10#5);
output1{test++} = 2#5 == (2#9 %% -10#5);
output1{test++} = 0#5 == (2#9 // -9#5);
output1{test++} = 2#5 == (2#9 %% -9#5);
output1{test++} = 0#5 == (2#9 // -8#5);
output1{test++} = 2#5 == (2#9 %% -8#5);
output1{test++} = 0#5 == (2#9 // -7#5);
output1{test++} = 2#5 == (2#9 %% -7#5);
output1{test++} = 0#5 == (2#9 // -6#5);
output1{test++} = 2#5 == (2#9 %% -6#5);
output1{test++} = 0#5 == (2#9 // -5#5);
output1{test++} = 2#5 == (2#9 %% -5#5);
output1{test++} = 0#5 == (2#9 // -4#5);
output1{test++} = 2#5 == (2#9 %% -4#5);
output1{test++} = 0#5 == (2#9 // -3#5);
output1{test++} = 2#5 == (2#9 %% -3#5);
output1{test++} = -1#5 == (2#9 // -2#5);
output1{test++} = 0#5 == (2#9 %% -2#5);
output1{test++} = -2#5 == (2#9 // -1#5);
output1{test++} = 0#5 == (2#9 %% -1#5);
output1{test++} = 2#5 == (2#9 // 1#5);
output1{test++} = 0#5 == (2#9 %% 1#5);
output1{test++} = 1#5 == (2#9 // 2#5);
output1{test++} = 0#5 == (2#9 %% 2#5);
output1{test++} = 0#5 == (2#9 // 3#5);
output1{test++} = 2#5 == (2#9 %% 3#5);
output1{test++} = 0#5 == (2#9 // 4#5);
output1{test++} = 2#5 == (2#9 %% 4#5);
output1{test++} = 0#5 == (2#9 // 5#5);
output1{test++} = 2#5 == (2#9 %% 5#5);
output1{test++} = 0#5 == (2#9 // 6#5);
output1{test++} = 2#5 == (2#9 %% 6#5);
output1{test++} = 0#5 == (2#9 // 7#5);
output1{test++} = 2#5 == (2#9 %% 7#5);
output1{test++} = 0#5 == (2#9 // 8#5);
output1{test++} = 2#5 == (2#9 %% 8#5);
output1{test++} = 0#5 == (2#9 // 9#5);
output1{test++} = 2#5 == (2#9 %% 9#5);
output1{test++} = 0#5 == (2#9 // 10#5);
output1{test++} = 2#5 == (2#9 %% 10#5);
output1{test++} = 0#5 == (2#9 // 11#5);
output1{test++} = 2#5 == (2#9 %% 11#5);
output1{test++} = 0#5 == (2#9 // 12#5);
output1{test++} = 2#5 == (2#9 %% 12#5);
output1{test++} = 0#5 == (2#9 // 13#5);
output1{test++} = 2#5 == (2#9 %% 13#5);
output1{test++} = 0#5 == (2#9 // 14#5);
output1{test++} = 2#5 == (2#9 %% 14#5);
output1{test++} = 0#5 == (2#9 // 15#5);
output1{test++} = 2#5 == (2#9 %% 15#5);
output1{test++} = 0#5 == (3#9 // -16#5);
output1{test++} = 3#5 == (3#9 %% -16#5);
output1{test++} = 0#5 == (3#9 // -15#5);
output1{test++} = 3#5 == (3#9 %% -15#5);
output1{test++} = 0#5 == (3#9 // -14#5);
output1{test++} = 3#5 == (3#9 %% -14#5);
output1{test++} = 0#5 == (3#9 // -13#5);
output1{test++} = 3#5 == (3#9 %% -13#5);
output1{test++} = 0#5 == (3#9 // -12#5);
output1{test++} = 3#5 == (3#9 %% -12#5);
output1{test++} = 0#5 == (3#9 // -11#5);
output1{test++} = 3#5 == (3#9 %% -11#5);
output1{test++} = 0#5 == (3#9 // -10#5);
output1{test++} = 3#5 == (3#9 %% -10#5);
output1{test++} = 0#5 == (3#9 // -9#5);
output1{test++} = 3#5 == (3#9 %% -9#5);
output1{test++} = 0#5 == (3#9 // -8#5);
output1{test++} = 3#5 == (3#9 %% -8#5);
output1{test++} = 0#5 == (3#9 // -7#5);
output1{test++} = 3#5 == (3#9 %% -7#5);
output1{test++} = 0#5 == (3#9 // -6#5);
output1{test++} = 3#5 == (3#9 %% -6#5);
output1{test++} = 0#5 == (3#9 // -5#5);
output1{test++} = 3#5 == (3#9 %% -5#5);
output1{test++} = 0#5 == (3#9 // -4#5);
output1{test++} = 3#5 == (3#9 %% -4#5);
output1{test++} = -1#5 == (3#9 // -3#5);
output1{test++} = 0#5 == (3#9 %% -3#5);
output1{test++} = -1#5 == (3#9 // -2#5);
output1{test++} = 1#5 == (3#9 %% -2#5);
output1{test++} = -3#5 == (3#9 // -1#5);
output1{test++} = 0#5 == (3#9 %% -1#5);
output1{test++} = 3#5 == (3#9 // 1#5);
output1{test++} = 0#5 == (3#9 %% 1#5);
output1{test++} = 1#5 == (3#9 // 2#5);
output1{test++} = 1#5 == (3#9 %% 2#5);
output1{test++} = 1#5 == (3#9 // 3#5);
output1{test++} = 0#5 == (3#9 %% 3#5);
output1{test++} = 0#5 == (3#9 // 4#5);
output1{test++} = 3#5 == (3#9 %% 4#5);
output1{test++} = 0#5 == (3#9 // 5#5);
output1{test++} = 3#5 == (3#9 %% 5#5);
output1{test++} = 0#5 == (3#9 // 6#5);
output1{test++} = 3#5 == (3#9 %% 6#5);
output1{test++} = 0#5 == (3#9 // 7#5);
output1{test++} = 3#5 == (3#9 %% 7#5);
output1{test++} = 0#5 == (3#9 // 8#5);
output1{test++} = 3#5 == (3#9 %% 8#5);
output1{test++} = 0#5 == (3#9 // 9#5);
output1{test++} = 3#5 == (3#9 %% 9#5);
output1{test++} = 0#5 == (3#9 // 10#5);
output1{test++} = 3#5 == (3#9 %% 10#5);
output1{test++} = 0#5 == (3#9 // 11#5);
output1{test++} = 3#5 == (3#9 %% 11#5);
output1{test++} = 0#5 == (3#9 // 12#5);
output1{test++} = 3#5 == (3#9 %% 12#5);
output1{test++} = 0#5 == (3#9 // 13#5);
output1{test++} = 3#5 == (3#9 %% 13#5);
output1{test++} = 0#5 == (3#9 // 14#5);
output1{test++} = 3#5 == (3#9 %% 14#5);
output1{test++} = 0#5 == (3#9 // 15#5);
output1{test++} = 3#5 == (3#9 %% 15#5);
output1{test++} = 0#5 == (4#9 // -16#5);
output1{test++} = 4#5 == (4#9 %% -16#5);
output1{test++} = 0#5 == (4#9 // -15#5);
output1{test++} = 4#5 == (4#9 %% -15#5);
output1{test++} = 0#5 == (4#9 // -14#5);
output1{test++} = 4#5 == (4#9 %% -14#5);
output1{test++} = 0#5 == (4#9 // -13#5);
output1{test++} = 4#5 == (4#9 %% -13#5);
output1{test++} = 0#5 == (4#9 // -12#5);
output1{test++} = 4#5 == (4#9 %% -12#5);
output1{test++} = 0#5 == (4#9 // -11#5);
output1{test++} = 4#5 == (4#9 %% -11#5);
output1{test++} = 0#5 == (4#9 // -10#5);
output1{test++} = 4#5 == (4#9 %% -10#5);
output1{test++} = 0#5 == (4#9 // -9#5);
output1{test++} = 4#5 == (4#9 %% -9#5);
output1{test++} = 0#5 == (4#9 // -8#5);
output1{test++} = 4#5 == (4#9 %% -8#5);
output1{test++} = 0#5 == (4#9 // -7#5);
output1{test++} = 4#5 == (4#9 %% -7#5);
output1{test++} = 0#5 == (4#9 // -6#5);
output1{test++} = 4#5 == (4#9 %% -6#5);
output1{test++} = 0#5 == (4#9 // -5#5);
output1{test++} = 4#5 == (4#9 %% -5#5);
output1{test++} = -1#5 == (4#9 // -4#5);
output1{test++} = 0#5 == (4#9 %% -4#5);
output1{test++} = -1#5 == (4#9 // -3#5);
output1{test++} = 1#5 == (4#9 %% -3#5);
output1{test++} = -2#5 == (4#9 // -2#5);
output1{test++} = 0#5 == (4#9 %% -2#5);
output1{test++} = -4#5 == (4#9 // -1#5);
output1{test++} = 0#5 == (4#9 %% -1#5);
output1{test++} = 4#5 == (4#9 // 1#5);
output1{test++} = 0#5 == (4#9 %% 1#5);
output1{test++} = 2#5 == (4#9 // 2#5);
output1{test++} = 0#5 == (4#9 %% 2#5);
output1{test++} = 1#5 == (4#9 // 3#5);
output1{test++} = 1#5 == (4#9 %% 3#5);
output1{test++} = 1#5 == (4#9 // 4#5);
output1{test++} = 0#5 == (4#9 %% 4#5);
output1{test++} = 0#5 == (4#9 // 5#5);
output1{test++} = 4#5 == (4#9 %% 5#5);
output1{test++} = 0#5 == (4#9 // 6#5);
output1{test++} = 4#5 == (4#9 %% 6#5);
output1{test++} = 0#5 == (4#9 // 7#5);
output1{test++} = 4#5 == (4#9 %% 7#5);
output1{test++} = 0#5 == (4#9 // 8#5);
output1{test++} = 4#5 == (4#9 %% 8#5);
output1{test++} = 0#5 == (4#9 // 9#5);
output1{test++} = 4#5 == (4#9 %% 9#5);
output1{test++} = 0#5 == (4#9 // 10#5);
output1{test++} = 4#5 == (4#9 %% 10#5);
output1{test++} = 0#5 == (4#9 // 11#5);
output1{test++} = 4#5 == (4#9 %% 11#5);
output1{test++} = 0#5 == (4#9 // 12#5);
output1{test++} = 4#5 == (4#9 %% 12#5);
output1{test++} = 0#5 == (4#9 // 13#5);
output1{test++} = 4#5 == (4#9 %% 13#5);
output1{test++} = 0#5 == (4#9 // 14#5);
output1{test++} = 4#5 == (4#9 %% 14#5);
output1{test++} = 0#5 == (4#9 // 15#5);
output1{test++} = 4#5 == (4#9 %% 15#5);
output1{test++} = 0#5 == (5#9 // -16#5);
output1{test++} = 5#5 == (5#9 %% -16#5);
output1{test++} = 0#5 == (5#9 // -15#5);
output1{test++} = 5#5 == (5#9 %% -15#5);
output1{test++} = 0#5 == (5#9 // -14#5);
output1{test++} = 5#5 == (5#9 %% -14#5);
output1{test++} = 0#5 == (5#9 // -13#5);
output1{test++} = 5#5 == (5#9 %% -13#5);
output1{test++} = 0#5 == (5#9 // -12#5);
output1{test++} = 5#5 == (5#9 %% -12#5);
output1{test++} = 0#5 == (5#9 // -11#5);
output1{test++} = 5#5 == (5#9 %% -11#5);
output1{test++} = 0#5 == (5#9 // -10#5);
output1{test++} = 5#5 == (5#9 %% -10#5);
output1{test++} = 0#5 == (5#9 // -9#5);
output1{test++} = 5#5 == (5#9 %% -9#5);
output1{test++} = 0#5 == (5#9 // -8#5);
output1{test++} = 5#5 == (5#9 %% -8#5);
output1{test++} = 0#5 == (5#9 // -7#5);
output1{test++} = 5#5 == (5#9 %% -7#5);
output1{test++} = 0#5 == (5#9 // -6#5);
output1{test++} = 5#5 == (5#9 %% -6#5);
output1{test++} = -1#5 == (5#9 // -5#5);
output1{test++} = 0#5 == (5#9 %% -5#5);
output1{test++} = -1#5 == (5#9 // -4#5);
output1{test++} = 1#5 == (5#9 %% -4#5);
output1{test++} = -1#5 == (5#9 // -3#5);
output1{test++} = 2#5 == (5#9 %% -3#5);
output1{test++} = -2#5 == (5#9 // -2#5);
output1{test++} = 1#5 == (5#9 %% -2#5);
output1{test++} = -5#5 == (5#9 // -1#5);
output1{test++} = 0#5 == (5#9 %% -1#5);
output1{test++} = 5#5 == (5#9 // 1#5);
output1{test++} = 0#5 == (5#9 %% 1#5);
output1{test++} = 2#5 == (5#9 // 2#5);
output1{test++} = 1#5 == (5#9 %% 2#5);
output1{test++} = 1#5 == (5#9 // 3#5);
output1{test++} = 2#5 == (5#9 %% 3#5);
output1{test++} = 1#5 == (5#9 // 4#5);
output1{test++} = 1#5 == (5#9 %% 4#5);
output1{test++} = 1#5 == (5#9 // 5#5);
output1{test++} = 0#5 == (5#9 %% 5#5);
output1{test++} = 0#5 == (5#9 // 6#5);
output1{test++} = 5#5 == (5#9 %% 6#5);
output1{test++} = 0#5 == (5#9 // 7#5);
output1{test++} = 5#5 == (5#9 %% 7#5);
output1{test++} = 0#5 == (5#9 // 8#5);
output1{test++} = 5#5 == (5#9 %% 8#5);
output1{test++} = 0#5 == (5#9 // 9#5);
output1{test++} = 5#5 == (5#9 %% 9#5);
output1{test++} = 0#5 == (5#9 // 10#5);
output1{test++} = 5#5 == (5#9 %% 10#5);
output1{test++} = 0#5 == (5#9 // 11#5);
output1{test++} = 5#5 == (5#9 %% 11#5);
output1{test++} = 0#5 == (5#9 // 12#5);
output1{test++} = 5#5 == (5#9 %% 12#5);
output1{test++} = 0#5 == (5#9 // 13#5);
output1{test++} = 5#5 == (5#9 %% 13#5);
output1{test++} = 0#5 == (5#9 // 14#5);
output1{test++} = 5#5 == (5#9 %% 14#5);
output1{test++} = 0#5 == (5#9 // 15#5);
output1{test++} = 5#5 == (5#9 %% 15#5);
output1{test++} = 0#5 == (6#9 // -16#5);
output1{test++} = 6#5 == (6#9 %% -16#5);
output1{test++} = 0#5 == (6#9 // -15#5);
output1{test++} = 6#5 == (6#9 %% -15#5);
output1{test++} = 0#5 == (6#9 // -14#5);
output1{test++} = 6#5 == (6#9 %% -14#5);
output1{test++} = 0#5 == (6#9 // -13#5);
output1{test++} = 6#5 == (6#9 %% -13#5);
output1{test++} = 0#5 == (6#9 // -12#5);
output1{test++} = 6#5 == (6#9 %% -12#5);
output1{test++} = 0#5 == (6#9 // -11#5);
output1{test++} = 6#5 == (6#9 %% -11#5);
output1{test++} = 0#5 == (6#9 // -10#5);
output1{test++} = 6#5 == (6#9 %% -10#5);
output1{test++} = 0#5 == (6#9 // -9#5);
output1{test++} = 6#5 == (6#9 %% -9#5);
output1{test++} = 0#5 == (6#9 // -8#5);
output1{test++} = 6#5 == (6#9 %% -8#5);
output1{test++} = 0#5 == (6#9 // -7#5);
output1{test++} = 6#5 == (6#9 %% -7#5);
output1{test++} = -1#5 == (6#9 // -6#5);
output1{test++} = 0#5 == (6#9 %% -6#5);
output1{test++} = -1#5 == (6#9 // -5#5);
output1{test++} = 1#5 == (6#9 %% -5#5);
output1{test++} = -1#5 == (6#9 // -4#5);
output1{test++} = 2#5 == (6#9 %% -4#5);
output1{test++} = -2#5 == (6#9 // -3#5);
output1{test++} = 0#5 == (6#9 %% -3#5);
output1{test++} = -3#5 == (6#9 // -2#5);
output1{test++} = 0#5 == (6#9 %% -2#5);
output1{test++} = -6#5 == (6#9 // -1#5);
output1{test++} = 0#5 == (6#9 %% -1#5);
output1{test++} = 6#5 == (6#9 // 1#5);
output1{test++} = 0#5 == (6#9 %% 1#5);
output1{test++} = 3#5 == (6#9 // 2#5);
output1{test++} = 0#5 == (6#9 %% 2#5);
output1{test++} = 2#5 == (6#9 // 3#5);
output1{test++} = 0#5 == (6#9 %% 3#5);
output1{test++} = 1#5 == (6#9 // 4#5);
output1{test++} = 2#5 == (6#9 %% 4#5);
output1{test++} = 1#5 == (6#9 // 5#5);
output1{test++} = 1#5 == (6#9 %% 5#5);
output1{test++} = 1#5 == (6#9 // 6#5);
output1{test++} = 0#5 == (6#9 %% 6#5);
output1{test++} = 0#5 == (6#9 // 7#5);
output1{test++} = 6#5 == (6#9 %% 7#5);
output1{test++} = 0#5 == (6#9 // 8#5);
output1{test++} = 6#5 == (6#9 %% 8#5);
output1{test++} = 0#5 == (6#9 // 9#5);
output1{test++} = 6#5 == (6#9 %% 9#5);
output1{test++} = 0#5 == (6#9 // 10#5);
output1{test++} = 6#5 == (6#9 %% 10#5);
output1{test++} = 0#5 == (6#9 // 11#5);
output1{test++} = 6#5 == (6#9 %% 11#5);
output1{test++} = 0#5 == (6#9 // 12#5);
output1{test++} = 6#5 == (6#9 %% 12#5);
output1{test++} = 0#5 == (6#9 // 13#5);
output1{test++} = 6#5 == (6#9 %% 13#5);
output1{test++} = 0#5 == (6#9 // 14#5);
output1{test++} = 6#5 == (6#9 %% 14#5);
output1{test++} = 0#5 == (6#9 // 15#5);
output1{test++} = 6#5 == (6#9 %% 15#5);
output1{test++} = 0#5 == (7#9 // -16#5);
output1{test++} = 7#5 == (7#9 %% -16#5);
output1{test++} = 0#5 == (7#9 // -15#5);
output1{test++} = 7#5 == (7#9 %% -15#5);
output1{test++} = 0#5 == (7#9 // -14#5);
output1{test++} = 7#5 == (7#9 %% -14#5);
output1{test++} = 0#5 == (7#9 // -13#5);
output1{test++} = 7#5 == (7#9 %% -13#5);
output1{test++} = 0#5 == (7#9 // -12#5);
output1{test++} = 7#5 == (7#9 %% -12#5);
output1{test++} = 0#5 == (7#9 // -11#5);
output1{test++} = 7#5 == (7#9 %% -11#5);
output1{test++} = 0#5 == (7#9 // -10#5);
output1{test++} = 7#5 == (7#9 %% -10#5);
output1{test++} = 0#5 == (7#9 // -9#5);
output1{test++} = 7#5 == (7#9 %% -9#5);
output1{test++} = 0#5 == (7#9 // -8#5);
output1{test++} = 7#5 == (7#9 %% -8#5);
output1{test++} = -1#5 == (7#9 // -7#5);
output1{test++} = 0#5 == (7#9 %% -7#5);
output1{test++} = -1#5 == (7#9 // -6#5);
output1{test++} = 1#5 == (7#9 %% -6#5);
output1{test++} = -1#5 == (7#9 // -5#5);
output1{test++} = 2#5 == (7#9 %% -5#5);
output1{test++} = -1#5 == (7#9 // -4#5);
output1{test++} = 3#5 == (7#9 %% -4#5);
output1{test++} = -2#5 == (7#9 // -3#5);
output1{test++} = 1#5 == (7#9 %% -3#5);
output1{test++} = -3#5 == (7#9 // -2#5);
output1{test++} = 1#5 == (7#9 %% -2#5);
output1{test++} = -7#5 == (7#9 // -1#5);
output1{test++} = 0#5 == (7#9 %% -1#5);
output1{test++} = 7#5 == (7#9 // 1#5);
output1{test++} = 0#5 == (7#9 %% 1#5);
output1{test++} = 3#5 == (7#9 // 2#5);
output1{test++} = 1#5 == (7#9 %% 2#5);
output1{test++} = 2#5 == (7#9 // 3#5);
output1{test++} = 1#5 == (7#9 %% 3#5);
output1{test++} = 1#5 == (7#9 // 4#5);
output1{test++} = 3#5 == (7#9 %% 4#5);
output1{test++} = 1#5 == (7#9 // 5#5);
output1{test++} = 2#5 == (7#9 %% 5#5);
output1{test++} = 1#5 == (7#9 // 6#5);
output1{test++} = 1#5 == (7#9 %% 6#5);
output1{test++} = 1#5 == (7#9 // 7#5);
output1{test++} = 0#5 == (7#9 %% 7#5);
output1{test++} = 0#5 == (7#9 // 8#5);
output1{test++} = 7#5 == (7#9 %% 8#5);
output1{test++} = 0#5 == (7#9 // 9#5);
output1{test++} = 7#5 == (7#9 %% 9#5);
output1{test++} = 0#5 == (7#9 // 10#5);
output1{test++} = 7#5 == (7#9 %% 10#5);
output1{test++} = 0#5 == (7#9 // 11#5);
output1{test++} = 7#5 == (7#9 %% 11#5);
output1{test++} = 0#5 == (7#9 // 12#5);
output1{test++} = 7#5 == (7#9 %% 12#5);
output1{test++} = 0#5 == (7#9 // 13#5);
output1{test++} = 7#5 == (7#9 %% 13#5);
output1{test++} = 0#5 == (7#9 // 14#5);
output1{test++} = 7#5 == (7#9 %% 14#5);
output1{test++} = 0#5 == (7#9 // 15#5);
output1{test++} = 7#5 == (7#9 %% 15#5);
output1{test++} = 0#5 == (8#9 // -16#5);
output1{test++} = 8#5 == (8#9 %% -16#5);
output1{test++} = 0#5 == (8#9 // -15#5);
output1{test++} = 8#5 == (8#9 %% -15#5);
output1{test++} = 0#5 == (8#9 // -14#5);
output1{test++} = 8#5 == (8#9 %% -14#5);
output1{test++} = 0#5 == (8#9 // -13#5);
output1{test++} = 8#5 == (8#9 %% -13#5);
output1{test++} = 0#5 == (8#9 // -12#5);
output1{test++} = 8#5 == (8#9 %% -12#5);
output1{test++} = 0#5 == (8#9 // -11#5);
output1{test++} = 8#5 == (8#9 %% -11#5);
output1{test++} = 0#5 == (8#9 // -10#5);
output1{test++} = 8#5 == (8#9 %% -10#5);
output1{test++} = 0#5 == (8#9 // -9#5);
output1{test++} = 8#5 == (8#9 %% -9#5);
output1{test++} = -1#5 == (8#9 // -8#5);
output1{test++} = 0#5 == (8#9 %% -8#5);
output1{test++} = -1#5 == (8#9 // -7#5);
output1{test++} = 1#5 == (8#9 %% -7#5);
output1{test++} = -1#5 == (8#9 // -6#5);
output1{test++} = 2#5 == (8#9 %% -6#5);
output1{test++} = -1#5 == (8#9 // -5#5);
output1{test++} = 3#5 == (8#9 %% -5#5);
output1{test++} = -2#5 == (8#9 // -4#5);
output1{test++} = 0#5 == (8#9 %% -4#5);
output1{test++} = -2#5 == (8#9 // -3#5);
output1{test++} = 2#5 == (8#9 %% -3#5);
output1{test++} = -4#5 == (8#9 // -2#5);
output1{test++} = 0#5 == (8#9 %% -2#5);
output1{test++} = -8#5 == (8#9 // -1#5);
output1{test++} = 0#5 == (8#9 %% -1#5);
output1{test++} = 8#5 == (8#9 // 1#5);
output1{test++} = 0#5 == (8#9 %% 1#5);
output1{test++} = 4#5 == (8#9 // 2#5);
output1{test++} = 0#5 == (8#9 %% 2#5);
output1{test++} = 2#5 == (8#9 // 3#5);
output1{test++} = 2#5 == (8#9 %% 3#5);
output1{test++} = 2#5 == (8#9 // 4#5);
output1{test++} = 0#5 == (8#9 %% 4#5);
output1{test++} = 1#5 == (8#9 // 5#5);
output1{test++} = 3#5 == (8#9 %% 5#5);
output1{test++} = 1#5 == (8#9 // 6#5);
output1{test++} = 2#5 == (8#9 %% 6#5);
output1{test++} = 1#5 == (8#9 // 7#5);
output1{test++} = 1#5 == (8#9 %% 7#5);
output1{test++} = 1#5 == (8#9 // 8#5);
output1{test++} = 0#5 == (8#9 %% 8#5);
output1{test++} = 0#5 == (8#9 // 9#5);
output1{test++} = 8#5 == (8#9 %% 9#5);
output1{test++} = 0#5 == (8#9 // 10#5);
output1{test++} = 8#5 == (8#9 %% 10#5);
output1{test++} = 0#5 == (8#9 // 11#5);
output1{test++} = 8#5 == (8#9 %% 11#5);
output1{test++} = 0#5 == (8#9 // 12#5);
output1{test++} = 8#5 == (8#9 %% 12#5);
output1{test++} = 0#5 == (8#9 // 13#5);
output1{test++} = 8#5 == (8#9 %% 13#5);
output1{test++} = 0#5 == (8#9 // 14#5);
output1{test++} = 8#5 == (8#9 %% 14#5);
output1{test++} = 0#5 == (8#9 // 15#5);
output1{test++} = 8#5 == (8#9 %% 15#5);
output1{test++} = 0#5 == (9#9 // -16#5);
output1{test++} = 9#5 == (9#9 %% -16#5);
output1{test++} = 0#5 == (9#9 // -15#5);
output1{test++} = 9#5 == (9#9 %% -15#5);
output1{test++} = 0#5 == (9#9 // -14#5);
output1{test++} = 9#5 == (9#9 %% -14#5);
output1{test++} = 0#5 == (9#9 // -13#5);
output1{test++} = 9#5 == (9#9 %% -13#5);
output1{test++} = 0#5 == (9#9 // -12#5);
output1{test++} = 9#5 == (9#9 %% -12#5);
output1{test++} = 0#5 == (9#9 // -11#5);
output1{test++} = 9#5 == (9#9 %% -11#5);
output1{test++} = 0#5 == (9#9 // -10#5);
output1{test++} = 9#5 == (9#9 %% -10#5);
output1{test++} = -1#5 == (9#9 // -9#5);
output1{test++} = 0#5 == (9#9 %% -9#5);
output1{test++} = -1#5 == (9#9 // -8#5);
output1{test++} = 1#5 == (9#9 %% -8#5);
output1{test++} = -1#5 == (9#9 // -7#5);
output1{test++} = 2#5 == (9#9 %% -7#5);
output1{test++} = -1#5 == (9#9 // -6#5);
output1{test++} = 3#5 == (9#9 %% -6#5);
output1{test++} = -1#5 == (9#9 // -5#5);
output1{test++} = 4#5 == (9#9 %% -5#5);
output1{test++} = -2#5 == (9#9 // -4#5);
output1{test++} = 1#5 == (9#9 %% -4#5);
output1{test++} = -3#5 == (9#9 // -3#5);
output1{test++} = 0#5 == (9#9 %% -3#5);
output1{test++} = -4#5 == (9#9 // -2#5);
output1{test++} = 1#5 == (9#9 %% -2#5);
output1{test++} = -9#5 == (9#9 // -1#5);
output1{test++} = 0#5 == (9#9 %% -1#5);
output1{test++} = 9#5 == (9#9 // 1#5);
output1{test++} = 0#5 == (9#9 %% 1#5);
output1{test++} = 4#5 == (9#9 // 2#5);
output1{test++} = 1#5 == (9#9 %% 2#5);
output1{test++} = 3#5 == (9#9 // 3#5);
output1{test++} = 0#5 == (9#9 %% 3#5);
output1{test++} = 2#5 == (9#9 // 4#5);
output1{test++} = 1#5 == (9#9 %% 4#5);
output1{test++} = 1#5 == (9#9 // 5#5);
output1{test++} = 4#5 == (9#9 %% 5#5);
output1{test++} = 1#5 == (9#9 // 6#5);
output1{test++} = 3#5 == (9#9 %% 6#5);
output1{test++} = 1#5 == (9#9 // 7#5);
output1{test++} = 2#5 == (9#9 %% 7#5);
output1{test++} = 1#5 == (9#9 // 8#5);
output1{test++} = 1#5 == (9#9 %% 8#5);
output1{test++} = 1#5 == (9#9 // 9#5);
output1{test++} = 0#5 == (9#9 %% 9#5);
output1{test++} = 0#5 == (9#9 // 10#5);
output1{test++} = 9#5 == (9#9 %% 10#5);
output1{test++} = 0#5 == (9#9 // 11#5);
output1{test++} = 9#5 == (9#9 %% 11#5);
output1{test++} = 0#5 == (9#9 // 12#5);
output1{test++} = 9#5 == (9#9 %% 12#5);
output1{test++} = 0#5 == (9#9 // 13#5);
output1{test++} = 9#5 == (9#9 %% 13#5);
output1{test++} = 0#5 == (9#9 // 14#5);
output1{test++} = 9#5 == (9#9 %% 14#5);
output1{test++} = 0#5 == (9#9 // 15#5);
output1{test++} = 9#5 == (9#9 %% 15#5);
output1{test++} = 0#5 == (10#9 // -16#5);
output1{test++} = 10#5 == (10#9 %% -16#5);
output1{test++} = 0#5 == (10#9 // -15#5);
output1{test++} = 10#5 == (10#9 %% -15#5);
output1{test++} = 0#5 == (10#9 // -14#5);
output1{test++} = 10#5 == (10#9 %% -14#5);
output1{test++} = 0#5 == (10#9 // -13#5);
output1{test++} = 10#5 == (10#9 %% -13#5);
output1{test++} = 0#5 == (10#9 // -12#5);
output1{test++} = 10#5 == (10#9 %% -12#5);
output1{test++} = 0#5 == (10#9 // -11#5);
output1{test++} = 10#5 == (10#9 %% -11#5);
output1{test++} = -1#5 == (10#9 // -10#5);
output1{test++} = 0#5 == (10#9 %% -10#5);
output1{test++} = -1#5 == (10#9 // -9#5);
output1{test++} = 1#5 == (10#9 %% -9#5);
output1{test++} = -1#5 == (10#9 // -8#5);
output1{test++} = 2#5 == (10#9 %% -8#5);
output1{test++} = -1#5 == (10#9 // -7#5);
output1{test++} = 3#5 == (10#9 %% -7#5);
output1{test++} = -1#5 == (10#9 // -6#5);
output1{test++} = 4#5 == (10#9 %% -6#5);
output1{test++} = -2#5 == (10#9 // -5#5);
output1{test++} = 0#5 == (10#9 %% -5#5);
output1{test++} = -2#5 == (10#9 // -4#5);
output1{test++} = 2#5 == (10#9 %% -4#5);
output1{test++} = -3#5 == (10#9 // -3#5);
output1{test++} = 1#5 == (10#9 %% -3#5);
output1{test++} = -5#5 == (10#9 // -2#5);
output1{test++} = 0#5 == (10#9 %% -2#5);
output1{test++} = -10#5 == (10#9 // -1#5);
output1{test++} = 0#5 == (10#9 %% -1#5);
output1{test++} = 10#5 == (10#9 // 1#5);
output1{test++} = 0#5 == (10#9 %% 1#5);
output1{test++} = 5#5 == (10#9 // 2#5);
output1{test++} = 0#5 == (10#9 %% 2#5);
output1{test++} = 3#5 == (10#9 // 3#5);
output1{test++} = 1#5 == (10#9 %% 3#5);
output1{test++} = 2#5 == (10#9 // 4#5);
output1{test++} = 2#5 == (10#9 %% 4#5);
output1{test++} = 2#5 == (10#9 // 5#5);
output1{test++} = 0#5 == (10#9 %% 5#5);
output1{test++} = 1#5 == (10#9 // 6#5);
output1{test++} = 4#5 == (10#9 %% 6#5);
output1{test++} = 1#5 == (10#9 // 7#5);
output1{test++} = 3#5 == (10#9 %% 7#5);
output1{test++} = 1#5 == (10#9 // 8#5);
output1{test++} = 2#5 == (10#9 %% 8#5);
output1{test++} = 1#5 == (10#9 // 9#5);
output1{test++} = 1#5 == (10#9 %% 9#5);
output1{test++} = 1#5 == (10#9 // 10#5);
output1{test++} = 0#5 == (10#9 %% 10#5);
output1{test++} = 0#5 == (10#9 // 11#5);
output1{test++} = 10#5 == (10#9 %% 11#5);
output1{test++} = 0#5 == (10#9 // 12#5);
output1{test++} = 10#5 == (10#9 %% 12#5);
output1{test++} = 0#5 == (10#9 // 13#5);
output1{test++} = 10#5 == (10#9 %% 13#5);
output1{test++} = 0#5 == (10#9 // 14#5);
output1{test++} = 10#5 == (10#9 %% 14#5);
output1{test++} = 0#5 == (10#9 // 15#5);
output1{test++} = 10#5 == (10#9 %% 15#5);
output1{test++} = 0#5 == (11#9 // -16#5);
output1{test++} = 11#5 == (11#9 %% -16#5);
output1{test++} = 0#5 == (11#9 // -15#5);
output1{test++} = 11#5 == (11#9 %% -15#5);
output1{test++} = 0#5 == (11#9 // -14#5);
output1{test++} = 11#5 == (11#9 %% -14#5);
output1{test++} = 0#5 == (11#9 // -13#5);
output1{test++} = 11#5 == (11#9 %% -13#5);
output1{test++} = 0#5 == (11#9 // -12#5);
output1{test++} = 11#5 == (11#9 %% -12#5);
output1{test++} = -1#5 == (11#9 // -11#5);
output1{test++} = 0#5 == (11#9 %% -11#5);
output1{test++} = -1#5 == (11#9 // -10#5);
output1{test++} = 1#5 == (11#9 %% -10#5);
output1{test++} = -1#5 == (11#9 // -9#5);
output1{test++} = 2#5 == (11#9 %% -9#5);
output1{test++} = -1#5 == (11#9 // -8#5);
output1{test++} = 3#5 == (11#9 %% -8#5);
output1{test++} = -1#5 == (11#9 // -7#5);
output1{test++} = 4#5 == (11#9 %% -7#5);
output1{test++} = -1#5 == (11#9 // -6#5);
output1{test++} = 5#5 == (11#9 %% -6#5);
output1{test++} = -2#5 == (11#9 // -5#5);
output1{test++} = 1#5 == (11#9 %% -5#5);
output1{test++} = -2#5 == (11#9 // -4#5);
output1{test++} = 3#5 == (11#9 %% -4#5);
output1{test++} = -3#5 == (11#9 // -3#5);
output1{test++} = 2#5 == (11#9 %% -3#5);
output1{test++} = -5#5 == (11#9 // -2#5);
output1{test++} = 1#5 == (11#9 %% -2#5);
output1{test++} = -11#5 == (11#9 // -1#5);
output1{test++} = 0#5 == (11#9 %% -1#5);
output1{test++} = 11#5 == (11#9 // 1#5);
output1{test++} = 0#5 == (11#9 %% 1#5);
output1{test++} = 5#5 == (11#9 // 2#5);
output1{test++} = 1#5 == (11#9 %% 2#5);
output1{test++} = 3#5 == (11#9 // 3#5);
output1{test++} = 2#5 == (11#9 %% 3#5);
output1{test++} = 2#5 == (11#9 // 4#5);
output1{test++} = 3#5 == (11#9 %% 4#5);
output1{test++} = 2#5 == (11#9 // 5#5);
output1{test++} = 1#5 == (11#9 %% 5#5);
output1{test++} = 1#5 == (11#9 // 6#5);
output1{test++} = 5#5 == (11#9 %% 6#5);
output1{test++} = 1#5 == (11#9 // 7#5);
output1{test++} = 4#5 == (11#9 %% 7#5);
output1{test++} = 1#5 == (11#9 // 8#5);
output1{test++} = 3#5 == (11#9 %% 8#5);
output1{test++} = 1#5 == (11#9 // 9#5);
output1{test++} = 2#5 == (11#9 %% 9#5);
output1{test++} = 1#5 == (11#9 // 10#5);
output1{test++} = 1#5 == (11#9 %% 10#5);
output1{test++} = 1#5 == (11#9 // 11#5);
output1{test++} = 0#5 == (11#9 %% 11#5);
output1{test++} = 0#5 == (11#9 // 12#5);
output1{test++} = 11#5 == (11#9 %% 12#5);
output1{test++} = 0#5 == (11#9 // 13#5);
output1{test++} = 11#5 == (11#9 %% 13#5);
output1{test++} = 0#5 == (11#9 // 14#5);
output1{test++} = 11#5 == (11#9 %% 14#5);
output1{test++} = 0#5 == (11#9 // 15#5);
output1{test++} = 11#5 == (11#9 %% 15#5);
output1{test++} = 0#5 == (12#9 // -16#5);
output1{test++} = 12#5 == (12#9 %% -16#5);
output1{test++} = 0#5 == (12#9 // -15#5);
output1{test++} = 12#5 == (12#9 %% -15#5);
output1{test++} = 0#5 == (12#9 // -14#5);
output1{test++} = 12#5 == (12#9 %% -14#5);
output1{test++} = 0#5 == (12#9 // -13#5);
output1{test++} = 12#5 == (12#9 %% -13#5);
output1{test++} = -1#5 == (12#9 // -12#5);
output1{test++} = 0#5 == (12#9 %% -12#5);
output1{test++} = -1#5 == (12#9 // -11#5);
output1{test++} = 1#5 == (12#9 %% -11#5);
output1{test++} = -1#5 == (12#9 // -10#5);
output1{test++} = 2#5 == (12#9 %% -10#5);
output1{test++} = -1#5 == (12#9 // -9#5);
output1{test++} = 3#5 == (12#9 %% -9#5);
output1{test++} = -1#5 == (12#9 // -8#5);
output1{test++} = 4#5 == (12#9 %% -8#5);
output1{test++} = -1#5 == (12#9 // -7#5);
output1{test++} = 5#5 == (12#9 %% -7#5);
output1{test++} = -2#5 == (12#9 // -6#5);
output1{test++} = 0#5 == (12#9 %% -6#5);
output1{test++} = -2#5 == (12#9 // -5#5);
output1{test++} = 2#5 == (12#9 %% -5#5);
output1{test++} = -3#5 == (12#9 // -4#5);
output1{test++} = 0#5 == (12#9 %% -4#5);
output1{test++} = -4#5 == (12#9 // -3#5);
output1{test++} = 0#5 == (12#9 %% -3#5);
output1{test++} = -6#5 == (12#9 // -2#5);
output1{test++} = 0#5 == (12#9 %% -2#5);
output1{test++} = -12#5 == (12#9 // -1#5);
output1{test++} = 0#5 == (12#9 %% -1#5);
output1{test++} = 12#5 == (12#9 // 1#5);
output1{test++} = 0#5 == (12#9 %% 1#5);
output1{test++} = 6#5 == (12#9 // 2#5);
output1{test++} = 0#5 == (12#9 %% 2#5);
output1{test++} = 4#5 == (12#9 // 3#5);
output1{test++} = 0#5 == (12#9 %% 3#5);
output1{test++} = 3#5 == (12#9 // 4#5);
output1{test++} = 0#5 == (12#9 %% 4#5);
output1{test++} = 2#5 == (12#9 // 5#5);
output1{test++} = 2#5 == (12#9 %% 5#5);
output1{test++} = 2#5 == (12#9 // 6#5);
output1{test++} = 0#5 == (12#9 %% 6#5);
output1{test++} = 1#5 == (12#9 // 7#5);
output1{test++} = 5#5 == (12#9 %% 7#5);
output1{test++} = 1#5 == (12#9 // 8#5);
output1{test++} = 4#5 == (12#9 %% 8#5);
output1{test++} = 1#5 == (12#9 // 9#5);
output1{test++} = 3#5 == (12#9 %% 9#5);
output1{test++} = 1#5 == (12#9 // 10#5);
output1{test++} = 2#5 == (12#9 %% 10#5);
output1{test++} = 1#5 == (12#9 // 11#5);
output1{test++} = 1#5 == (12#9 %% 11#5);
output1{test++} = 1#5 == (12#9 // 12#5);
output1{test++} = 0#5 == (12#9 %% 12#5);
output1{test++} = 0#5 == (12#9 // 13#5);
output1{test++} = 12#5 == (12#9 %% 13#5);
output1{test++} = 0#5 == (12#9 // 14#5);
output1{test++} = 12#5 == (12#9 %% 14#5);
output1{test++} = 0#5 == (12#9 // 15#5);
output1{test++} = 12#5 == (12#9 %% 15#5);
output1{test++} = 0#5 == (13#9 // -16#5);
output1{test++} = 13#5 == (13#9 %% -16#5);
output1{test++} = 0#5 == (13#9 // -15#5);
output1{test++} = 13#5 == (13#9 %% -15#5);
output1{test++} = 0#5 == (13#9 // -14#5);
output1{test++} = 13#5 == (13#9 %% -14#5);
output1{test++} = -1#5 == (13#9 // -13#5);
output1{test++} = 0#5 == (13#9 %% -13#5);
output1{test++} = -1#5 == (13#9 // -12#5);
output1{test++} = 1#5 == (13#9 %% -12#5);
output1{test++} = -1#5 == (13#9 // -11#5);
output1{test++} = 2#5 == (13#9 %% -11#5);
output1{test++} = -1#5 == (13#9 // -10#5);
output1{test++} = 3#5 == (13#9 %% -10#5);
output1{test++} = -1#5 == (13#9 // -9#5);
output1{test++} = 4#5 == (13#9 %% -9#5);
output1{test++} = -1#5 == (13#9 // -8#5);
output1{test++} = 5#5 == (13#9 %% -8#5);
output1{test++} = -1#5 == (13#9 // -7#5);
output1{test++} = 6#5 == (13#9 %% -7#5);
output1{test++} = -2#5 == (13#9 // -6#5);
output1{test++} = 1#5 == (13#9 %% -6#5);
output1{test++} = -2#5 == (13#9 // -5#5);
output1{test++} = 3#5 == (13#9 %% -5#5);
output1{test++} = -3#5 == (13#9 // -4#5);
output1{test++} = 1#5 == (13#9 %% -4#5);
output1{test++} = -4#5 == (13#9 // -3#5);
output1{test++} = 1#5 == (13#9 %% -3#5);
output1{test++} = -6#5 == (13#9 // -2#5);
output1{test++} = 1#5 == (13#9 %% -2#5);
output1{test++} = -13#5 == (13#9 // -1#5);
output1{test++} = 0#5 == (13#9 %% -1#5);
output1{test++} = 13#5 == (13#9 // 1#5);
output1{test++} = 0#5 == (13#9 %% 1#5);
output1{test++} = 6#5 == (13#9 // 2#5);
output1{test++} = 1#5 == (13#9 %% 2#5);
output1{test++} = 4#5 == (13#9 // 3#5);
output1{test++} = 1#5 == (13#9 %% 3#5);
output1{test++} = 3#5 == (13#9 // 4#5);
output1{test++} = 1#5 == (13#9 %% 4#5);
output1{test++} = 2#5 == (13#9 // 5#5);
output1{test++} = 3#5 == (13#9 %% 5#5);
output1{test++} = 2#5 == (13#9 // 6#5);
output1{test++} = 1#5 == (13#9 %% 6#5);
output1{test++} = 1#5 == (13#9 // 7#5);
output1{test++} = 6#5 == (13#9 %% 7#5);
output1{test++} = 1#5 == (13#9 // 8#5);
output1{test++} = 5#5 == (13#9 %% 8#5);
output1{test++} = 1#5 == (13#9 // 9#5);
output1{test++} = 4#5 == (13#9 %% 9#5);
output1{test++} = 1#5 == (13#9 // 10#5);
output1{test++} = 3#5 == (13#9 %% 10#5);
output1{test++} = 1#5 == (13#9 // 11#5);
output1{test++} = 2#5 == (13#9 %% 11#5);
output1{test++} = 1#5 == (13#9 // 12#5);
output1{test++} = 1#5 == (13#9 %% 12#5);
output1{test++} = 1#5 == (13#9 // 13#5);
output1{test++} = 0#5 == (13#9 %% 13#5);
output1{test++} = 0#5 == (13#9 // 14#5);
output1{test++} = 13#5 == (13#9 %% 14#5);
output1{test++} = 0#5 == (13#9 // 15#5);
output1{test++} = 13#5 == (13#9 %% 15#5);
output1{test++} = 0#5 == (14#9 // -16#5);
output1{test++} = 14#5 == (14#9 %% -16#5);
output1{test++} = 0#5 == (14#9 // -15#5);
output1{test++} = 14#5 == (14#9 %% -15#5);
output1{test++} = -1#5 == (14#9 // -14#5);
output1{test++} = 0#5 == (14#9 %% -14#5);
output1{test++} = -1#5 == (14#9 // -13#5);
output1{test++} = 1#5 == (14#9 %% -13#5);
output1{test++} = -1#5 == (14#9 // -12#5);
output1{test++} = 2#5 == (14#9 %% -12#5);
output1{test++} = -1#5 == (14#9 // -11#5);
output1{test++} = 3#5 == (14#9 %% -11#5);
output1{test++} = -1#5 == (14#9 // -10#5);
output1{test++} = 4#5 == (14#9 %% -10#5);
output1{test++} = -1#5 == (14#9 // -9#5);
output1{test++} = 5#5 == (14#9 %% -9#5);
output1{test++} = -1#5 == (14#9 // -8#5);
output1{test++} = 6#5 == (14#9 %% -8#5);
output1{test++} = -2#5 == (14#9 // -7#5);
output1{test++} = 0#5 == (14#9 %% -7#5);
output1{test++} = -2#5 == (14#9 // -6#5);
output1{test++} = 2#5 == (14#9 %% -6#5);
output1{test++} = -2#5 == (14#9 // -5#5);
output1{test++} = 4#5 == (14#9 %% -5#5);
output1{test++} = -3#5 == (14#9 // -4#5);
output1{test++} = 2#5 == (14#9 %% -4#5);
output1{test++} = -4#5 == (14#9 // -3#5);
output1{test++} = 2#5 == (14#9 %% -3#5);
output1{test++} = -7#5 == (14#9 // -2#5);
output1{test++} = 0#5 == (14#9 %% -2#5);
output1{test++} = -14#5 == (14#9 // -1#5);
output1{test++} = 0#5 == (14#9 %% -1#5);
output1{test++} = 14#5 == (14#9 // 1#5);
output1{test++} = 0#5 == (14#9 %% 1#5);
output1{test++} = 7#5 == (14#9 // 2#5);
output1{test++} = 0#5 == (14#9 %% 2#5);
output1{test++} = 4#5 == (14#9 // 3#5);
output1{test++} = 2#5 == (14#9 %% 3#5);
output1{test++} = 3#5 == (14#9 // 4#5);
output1{test++} = 2#5 == (14#9 %% 4#5);
output1{test++} = 2#5 == (14#9 // 5#5);
output1{test++} = 4#5 == (14#9 %% 5#5);
output1{test++} = 2#5 == (14#9 // 6#5);
output1{test++} = 2#5 == (14#9 %% 6#5);
output1{test++} = 2#5 == (14#9 // 7#5);
output1{test++} = 0#5 == (14#9 %% 7#5);
output1{test++} = 1#5 == (14#9 // 8#5);
output1{test++} = 6#5 == (14#9 %% 8#5);
output1{test++} = 1#5 == (14#9 // 9#5);
output1{test++} = 5#5 == (14#9 %% 9#5);
output1{test++} = 1#5 == (14#9 // 10#5);
output1{test++} = 4#5 == (14#9 %% 10#5);
output1{test++} = 1#5 == (14#9 // 11#5);
output1{test++} = 3#5 == (14#9 %% 11#5);
output1{test++} = 1#5 == (14#9 // 12#5);
output1{test++} = 2#5 == (14#9 %% 12#5);
output1{test++} = 1#5 == (14#9 // 13#5);
output1{test++} = 1#5 == (14#9 %% 13#5);
output1{test++} = 1#5 == (14#9 // 14#5);
output1{test++} = 0#5 == (14#9 %% 14#5);
output1{test++} = 0#5 == (14#9 // 15#5);
output1{test++} = 14#5 == (14#9 %% 15#5);
output1{test++} = 0#5 == (15#9 // -16#5);
output1{test++} = 15#5 == (15#9 %% -16#5);
output1{test++} = -1#5 == (15#9 // -15#5);
output1{test++} = 0#5 == (15#9 %% -15#5);
output1{test++} = -1#5 == (15#9 // -14#5);
output1{test++} = 1#5 == (15#9 %% -14#5);
output1{test++} = -1#5 == (15#9 // -13#5);
output1{test++} = 2#5 == (15#9 %% -13#5);
output1{test++} = -1#5 == (15#9 // -12#5);
output1{test++} = 3#5 == (15#9 %% -12#5);
output1{test++} = -1#5 == (15#9 // -11#5);
output1{test++} = 4#5 == (15#9 %% -11#5);
output1{test++} = -1#5 == (15#9 // -10#5);
output1{test++} = 5#5 == (15#9 %% -10#5);
output1{test++} = -1#5 == (15#9 // -9#5);
output1{test++} = 6#5 == (15#9 %% -9#5);
output1{test++} = -1#5 == (15#9 // -8#5);
output1{test++} = 7#5 == (15#9 %% -8#5);
output1{test++} = -2#5 == (15#9 // -7#5);
output1{test++} = 1#5 == (15#9 %% -7#5);
output1{test++} = -2#5 == (15#9 // -6#5);
output1{test++} = 3#5 == (15#9 %% -6#5);
output1{test++} = -3#5 == (15#9 // -5#5);
output1{test++} = 0#5 == (15#9 %% -5#5);
output1{test++} = -3#5 == (15#9 // -4#5);
output1{test++} = 3#5 == (15#9 %% -4#5);
output1{test++} = -5#5 == (15#9 // -3#5);
output1{test++} = 0#5 == (15#9 %% -3#5);
output1{test++} = -7#5 == (15#9 // -2#5);
output1{test++} = 1#5 == (15#9 %% -2#5);
output1{test++} = -15#5 == (15#9 // -1#5);
output1{test++} = 0#5 == (15#9 %% -1#5);
output1{test++} = 15#5 == (15#9 // 1#5);
output1{test++} = 0#5 == (15#9 %% 1#5);
output1{test++} = 7#5 == (15#9 // 2#5);
output1{test++} = 1#5 == (15#9 %% 2#5);
output1{test++} = 5#5 == (15#9 // 3#5);
output1{test++} = 0#5 == (15#9 %% 3#5);
output1{test++} = 3#5 == (15#9 // 4#5);
output1{test++} = 3#5 == (15#9 %% 4#5);
output1{test++} = 3#5 == (15#9 // 5#5);
output1{test++} = 0#5 == (15#9 %% 5#5);
output1{test++} = 2#5 == (15#9 // 6#5);
output1{test++} = 3#5 == (15#9 %% 6#5);
output1{test++} = 2#5 == (15#9 // 7#5);
output1{test++} = 1#5 == (15#9 %% 7#5);
output1{test++} = 1#5 == (15#9 // 8#5);
output1{test++} = 7#5 == (15#9 %% 8#5);
output1{test++} = 1#5 == (15#9 // 9#5);
output1{test++} = 6#5 == (15#9 %% 9#5);
output1{test++} = 1#5 == (15#9 // 10#5);
output1{test++} = 5#5 == (15#9 %% 10#5);
output1{test++} = 1#5 == (15#9 // 11#5);
output1{test++} = 4#5 == (15#9 %% 11#5);
output1{test++} = 1#5 == (15#9 // 12#5);
output1{test++} = 3#5 == (15#9 %% 12#5);
output1{test++} = 1#5 == (15#9 // 13#5);
output1{test++} = 2#5 == (15#9 %% 13#5);
output1{test++} = 1#5 == (15#9 // 14#5);
output1{test++} = 1#5 == (15#9 %% 14#5);
output1{test++} = 1#5 == (15#9 // 15#5);
output1{test++} = 0#5 == (15#9 %% 15#5);


short t = 8;
t = t << 1;
output1{test++} = 0##4 == t;

t = 16;
t = (8##4+0)<<1;
output1{test++} = 0##4 == (8##4+0)<<1;


/*last test is 1, so its easy to see if anything went wrong and have a point of reference for the last test*/
output1{test++} = 1;

/*wire states are tested in a seperate test, commented out in the bottom of circuitoutput.cpp*/
}


function int fparameter1(teststruct2 k, int xp)
{
int x;
x = makeUnknown(x);
x = x + xp + 1;
return x;
}
function teststruct2 fparameter2(teststruct2 k, int xp[2])
{
int x;
x = makeUnknown(x);
x++;

k.varx = 5+ xp[0]{0:4};

return k;
}
function teststruct2[2] fparameter3(teststruct2 k[2], int xp)
{
int x;
x = makeUnknown(x);
x++;

k[0].varx = 5;

return k;
}
function int[2] fparameter4(teststruct2 k[2], int xp[2])
{
int x;
x = makeUnknown(x);
x++;
xp[0] = 6+xp[0];
return xp;
}

function void emptyfunction()
{

}


function teststruct2 fparameter5(int k, teststruct2 xp)
{
int x;
x = makeUnknown(x);
x++;

xp.varx = 7;

return xp;
}
function int fparameter6(int k, teststruct2 xp[2])
{
int x;
x = makeUnknown(x);
x++;

k=7+k;

return k;
}
function int[2] fparameter7(int k[2], teststruct2 xp)
{
int x;
x = makeUnknown(x);
x++;

k[0] = 7;

return k;
}
function teststruct2[2] fparameter8(int k[2], teststruct2 xp[2])
{
int x;
x = makeUnknown(x);
x++;

xp[0].varx = 7;

return xp;
}



function short[5] testreturn(short temp[5][5][5])
{
    return temp[3][3];
}



function teststruct2 makeUnknownS(teststruct2 k)
{
    return k;
}



function teststruct1 makeUnknownS1(teststruct1 k)
{
    return k;
}



typedef int_t 409680 ffxbhhts
typedef int_t 435272 kvgcvnwv
typedef int_t 216004 orgplhfq
typedef int_t 520227 jandntjx
typedef int_t 353944 uefwxken
typedef int_t 532653 sykwbmsj
typedef int_t 127456 yshzfvva
typedef int_t 160606 havalluc
typedef int_t 678235 ndoetucw
typedef int_t 821256 agorfnys
typedef int_t 422009 htzizpxr
typedef int_t 305831 usnafjqp
typedef int_t 788313 tdtgqxbl
typedef int_t 890032 jufhpyxm
typedef int_t 723818 lkbpqmha
typedef int_t 35426 lplwrgqc
typedef int_t 954651 unzbyunv
typedef int_t 65988 gbkmcjcz
typedef int_t 651830 ptpggotv
typedef int_t 344766 xqdkksqn
typedef int_t 19331 raprefwk
typedef int_t 772823 pivviywp
typedef int_t 658033 ccrehllf
typedef int_t 752236 rfzrslrw
typedef int_t 538687 aofsstua
typedef int_t 946488 dnrqvrcj
typedef int_t 243517 fwgxvqyi
typedef int_t 476091 ktfhlkee
typedef int_t 761304 trtjspwy
typedef int_t 757532 gopfhitc
typedef int_t 885618 tmdwoopj
typedef int_t 665554 fhhhbged
typedef int_t 725479 vtgyfhdo
typedef int_t 199274 ofxzscxe
typedef int_t 2263 kbfajjxq
typedef int_t 137033 ehlvujvg
typedef int_t 83686 hjxlxlvh
typedef int_t 606115 nnipefog
typedef int_t 923597 pzpglrex
typedef int_t 208356 ccvegbft
typedef int_t 438244 bzjmhloq
typedef int_t 413229 rzhnjdoo
typedef int_t 745868 jqhfwdng
typedef int_t 39980 uspqwiit
typedef int_t 698770 hdrisogv
typedef int_t 646010 nswdkfxd
typedef int_t 336772 xwufsrxc
typedef int_t 756012 vdpuwlvw
typedef int_t 363387 phtfxzby
typedef int_t 603033 vwcmjlyz
typedef int_t 74597 wermpwgg
typedef int_t 42053 ifbgifkl
typedef int_t 363473 awozvoir
typedef int_t 284377 ydaoenpb
typedef int_t 684410 ixwpssmm
typedef int_t 654382 hkodyknp
typedef int_t 606050 fmbfehlk
typedef int_t 422358 hgcvhvsf
typedef int_t 364848 uenkflak
typedef int_t 773132 tksokole
typedef int_t 585194 yoqablxb
typedef int_t 67041 qebcibur
typedef int_t 173877 jqjpdmpj
typedef int_t 869098 nkvmpemi
typedef int_t 857217 pwahyoum
typedef int_t 975504 owqxytjt
typedef int_t 442492 oxgxmgzw
typedef int_t 976021 qdcsdhwf
typedef int_t 233973 vwvnlycw
typedef int_t 514207 kwqxbxyv
typedef int_t 731292 ytmwmjih
typedef int_t 718039 vzedcrqz
typedef int_t 111090 wwahemag
typedef int_t 910785 xalwtynv
typedef int_t 504408 fovnityk
typedef int_t 790414 aqrowmim
typedef int_t 189406 cliqahyi
typedef int_t 575367 wdezajsl
typedef int_t 603002 ozjzdhrv
typedef int_t 192360 ssycpwkk
typedef int_t 718209 qpnpzhkr
typedef int_t 21484 ckmijfrp
typedef int_t 560152 gzonhfdf
typedef int_t 303229 ivwmswtz
typedef int_t 2786 uklrcwku
typedef int_t 877754 mxluonel
typedef int_t 286392 mrgvhuwc
typedef int_t 628552 dfwmtfnh
typedef int_t 974829 nutuefif
typedef int_t 69853 yqsesqxv
typedef int_t 712080 fhrvjopr
typedef int_t 603587 ydfxgbul
typedef int_t 534735 zafjwunp
typedef int_t 376579 fgqbmemo
typedef int_t 24166 yffcavqy
typedef int_t 207775 zcnvpuwk
typedef int_t 263844 dddkpoay
typedef int_t 759148 okzkhacc
typedef int_t 928214 xvtxqios
typedef int_t 629405 vyyxajms


typedef struct_t depth3strcut
{
    short varx;
    short vary;
    short varz;
}

typedef struct_t teststruct1
{
    depth3strcut tt;
    short varx;
    short vary;
    short varz;
    short amember[5][2];
}

typedef struct_t teststruct2
{
    teststruct1 tvarx;
    teststruct1 tvary[5][2];
    teststruct1 tvarz;
    short varx;
    short vary;
    short varz;
    short amember[5];
}


function void recdepth2()
{
int k;
k = makeUnknown(5);

recdepth3();
}

function void recdepth1()
{
int k;
k = makeUnknown(5);
recdepth2();
}


function void recdepth3()
{
int k;
k = makeUnknown(5);
recdepth4();
}
function void recdepth4()
{
recdepth5();
}
function void recdepth5()
{
recdepth6();
}
function void recdepth6()
{
recdepth7();
}
function void recdepth7()
{
recdepth8();
}
function void recdepth8()
{
recdepth9();
}
function void recdepth9()
{
;
}


function int4 MUI4(int4 b){return b;} function sint4 MI4(sint4 b){return b;} function sint8 MI8(sint8 b){return b;}

typedef uint_t 4 int4 typedef int_t 4 sint4 typedef int_t 8 sint8











