#define wiresize 32
#parties 2

typedef uint_t wiresize unsignedint
typedef uint_t wiresize*2 int2x

#input 1 int2x
#output 1 int2x
#input 2 int2x

#define N 2##32

function void main()
{

    unsignedint a[2*N], b[2*N], bb[2*N], s[2*N], d[2*N];

    /* Use exponent 3 */
    
    unsignedint c = 0, k = 0, q = 0, z = 0, g1 = 0, g2 = 0;

    /* As in KSS12 */
    a[N-1##32] = 4278190080##32;
    a[0] = 1##32;

    for(unsignedint i = 0; i < N; i++)
    {
        /* modulus = XOR of alice and bob inputs*/
        d[i] = input1{i*32:32} ^ input2{i*32:32};
        
        /*      a[i] = alice((i + N) * 32);*/
        
        s[i] = 0;
        
        /* Bob will hold the message */
        bb[i] = b[i] = input2{i*32:32};
    }

    /* mod exp */
    for(unsignedint e = 0; e < 32*N; e++)
    {
        /* mod mul */
        for(unsignedint j = 0; j < 32*N; j++)
        {
            /* Shift and add*/
            q = 0;
            if(d[0]{0})
                q = 4294967295##32;
            if(b[0]{0})
                q = q & 4294967295##32;
                    
            z = 0;
            g1 = 0;
            g2 = 0;
            
            /*shift_add(bb, s, c, q);*/
            {
                unsignedint _k,_z;
                for(unsignedint _i = 0; _i < N; _i++)
                {
                    
                    s[_i] = ((bb[_i] + c) & q) + s[_i];
                    c = 0;
                    if(s[_i] < bb[_i])
                        c = 1##32;
                    
                    
                    _k = 0;
                    if((bb[_i]{31}))
                        _k = 1##32;
                    bb[_i] = (bb[_i] << 1) | _z;
                    _z = _k;
                }
                
                /*int2x t,t2, t3, t4, res;
                t{0:32}  = bb[0];
                t{32:32} = bb[1];
                t2{0:32}  = s[0];
                t2{32:32} = s[1];
                
                t3{0:32} = c;
                t4{0:32} = q;
                t4{32:32} = q;
                
                res = (t+t2+t3)&t4;
                s[0] = res{0:32};
                s[1] = res{32:32};*/
                
                
            }
            
            {
                /*shift_r(b);*/
                unsignedint _c = 0, _k = 0;
                for(unsignedint _i = N-1; _i != 0; _i--)
                {
                    _k = 0;
                    if((b[_i]{0}) != 0)
                        _k = 2147483648##32;
                    b[_i] = (b[_i] >> 1) | _c;
                    _c = _k;
                }
                b[0] = (b[0] >> 1) | _c;
            }
            
            g1 = 0;
            g2 = 0;
            for(unsignedint i = 0; i < N; i++)
            {
                /* Check for overflowing the modulus */
                k = g1 & 1##32;
                g1 = 0;
                if((s[i] + k) > a[i])
                    g1 = 4294967295##32;
                    
                k = g2 & 1##32;
                    
                g2 = 0;
                    
                if((bb[i] + k) > a[i])
                    g2 = 4294967295##32;
            }
            
            c = 0;
            z = 0;
            for(unsignedint i = 0; i < N; i++)
            {
                k = 0;
                
                if((a[i] + c) > s[i])
                    k = 1;
                    
                s[i] = s[i] - ((a[i] + c) & g1);
                
                c = k;
                
                k = 0;
                if((a[i] + z) > bb[i])
                    k = 1;
                    
                bb[i] = bb[i] - ((a[i] + z) & g2);
                z = k;
                        
            }
        }
        
        c = 0;
        for(unsignedint i = N-1##32; i != 0; i--)
        {
            k = 0;
            if((d[i] & 1##32) != 0)
                k = 2147483648##32;
            
            d[i] = (d[i] >> 1) | c;
            c = k;
        }
        d[0] = (d[0] >> 1) | c;
        
    }

    /*for(i = 0; i < N; i++)
    {
        output_alice(s[i]);
    }*/
}
