#define wiresize 128
#parties 2
#define Nr 10
#define Nb 4
#define Nk 4

typedef uint_t 8 uint8_t
typedef uint_t wiresize uint128_t
typedef uint_t 16*(Nr+1) uintKE_t

#input 1 uint128_t
#input 2 uint128_t
#output 1 uint128_t

function uint8_t sbox(uint8_t idx)
{
return idx; /*use Yale sbox here*/
}


function uint128_t[11] KeyExpansion(uint128_t key)
{
uint128_t RoundKey[11];
uint8_t temp[4];
uint8_t k;

uint8_t Rcon[11]={141,1,2,4,8,16,32,64,128, 27,54 };


/* The first round key is the key itself.*/
	
RoundKey[0]=key;

/*  All other round keys are found from the previous round keys. */
for(uint8_t i=1; i < 11; i++)
  {    
	/* 1st 4 bytes: divided by 4: 16 17 18 19 */
	   for(uint8_t j=0; j < 4; j++)
	     { 
		   temp[j]=RoundKey[i-1]{(12+j)*8:8};
	    }

	/* Function RotWord() */
        k = temp[0];
        temp[0] = temp[1];
        temp[1] = temp[2];
        temp[2] = temp[3];
        temp[3] = k;
  
	/* Function Subword() */
        temp[0] = sbox(temp[0]);
        temp[1] = sbox(temp[1]);
        temp[2] = sbox(temp[2]);
        temp[3] = sbox(temp[3]);

         temp[0] =  temp[0] ^ Rcon[i];

 	for(uint8_t j=0; j < 4; j++)
	     { 
		   RoundKey[i]{j*8:8}=RoundKey[i-1]{j*8:8}^temp[j];
	    }	

/* other bytes 20 ---31*/

 	for(uint8_t j=1; j < 4; j++)
	     { 
		RoundKey[i]{(4*j+0)*8:8}=RoundKey[i-1]{(4*j+0)*8:8}^RoundKey[i]{(4*(j-1)+0)*8:8};
		RoundKey[i]{(4*j+1)*8:8}=RoundKey[i-1]{(4*j+1)*8:8}^RoundKey[i]{(4*(j-1)+1)*8:8};
		RoundKey[i]{(4*j+2)*8:8}=RoundKey[i-1]{(4*j+2)*8:8}^RoundKey[i]{(4*(j-1)+2)*8:8};
		RoundKey[i]{(4*j+3)*8:8}=RoundKey[i-1]{(4*j+3)*8:8}^RoundKey[i]{(4*(j-1)+3)*8:8};
	}
 }

return RoundKey;
}



function uint128_t SubBytes(uint128_t buf)
{
    for(uint8_t i=0;i<16;i++)
   {
       buf{i*8:8} = sbox(buf{i*8:8});
   }
   return buf;
} 

function uint128_t ShiftRows(uint128_t buf)
{
    
	uint8_t i;

	/*shift 2nd row*/
	i=buf{2*8:8}; 
	buf{2*8:8}=buf{6*8:8};
	buf{6*8:8}=buf{10*8:8};
	buf{10*8:8}=buf{14*8:8};
	buf{14*8:8}=i;

	/*shift 3rd row*/
	i=buf{3*8:8}; 
	buf{3*8:8}=buf{11*8:8};
	buf{11*8:8}=i;

	i=buf{7*8:8}; 
	buf{7*8:8}=buf{15*8:8};
	buf{15*8:8}=i;

	/*shift 4th row*/
	i=buf{4*8:8}; 
	buf{4*8:8}=buf{16*8:8};
	buf{16*8:8}=buf{12*8:8};
	buf{12*8:8}=buf{18*8:8};
	buf{8*8:8}=i;

return buf;
} 


function uint128_t MixColumns(uint128_t buf)
{
    for(uint8_t i=0; i < 4; i++) {
        uint8_t a[4];
        uint8_t b[4];
        uint8_t h;
        for(uint8_t c=0;c<4;c++) {
                a[c] = buf{(4*i+c)*8:8};
                h = (buf{(4*i+c)*8:8} >> 7); 
                b[c] = buf{(4*i+c)*8:8} << 1; 
                b[c] = b[c]^ 27 & h; /* Rijndael's Galois field */
        }
        buf{4*i*8:8} = b[0] ^ a[3] ^ a[2] ^ b[1] ^ a[1]; /* 2 * a0 + a3 + a2 + 3 * a1 */
        buf{(4*i+1)*8:8} = b[1] ^ a[0] ^ a[3] ^ b[2] ^ a[2]; /* 2 * a1 + a0 + a3 + 3 * a2 */
        buf{(4*i+2)*8:8} = b[2] ^ a[1] ^ a[0] ^ b[3] ^ a[3]; /* 2 * a2 + a1 + a0 + 3 * a3 */
        buf{(4*i+3)*8:8} = b[3] ^ a[2] ^ a[1] ^ b[0] ^ a[0]; /* 2 * a3 + a2 + a1 + 3 * a0 */
    }

return buf;
} 


function uint128_t AddRoundKey(uint128_t buf, uint128_t key)
{
   return buf^key;
} 


function void main()
{

	uint128_t buff;
	uint128_t keyEx[11];

	keyEx=KeyExpansion(input1);
	buff=AddRoundKey(input2,keyEx[0]);

        for(uint8_t i=1;i<Nr;i++)
	{
		buff=SubBytes(buff);
		buff=ShiftRows(buff);
		buff=MixColumns(buff);
                buff=AddRoundKey(buff,keyEx[i]);	
	}
		buff=SubBytes(buff);
		buff=ShiftRows(buff);
         output1=AddRoundKey(buff,keyEx[Nr]);

}
